<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Alertmanager 高可用总结-上]]></title>
      <url>https://magiceses.github.io/2020/12/24/prometheus-alertmanager-%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%BB%E7%BB%93-%E4%B8%8A/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">人生不过如此，且行且珍惜，每一次的失败，都是成功的伏笔；每一次的考验，都有一份收获；每一次的泪水，都有一次醒悟；每一次的磨难，都有生命的财富。<br></p>

<h2 id="高可用简介"><a href="#高可用简介" class="headerlink" title="高可用简介"></a>高可用简介</h2><p>之前我们主要讨论了Prometheus Server自身的高可用问题。而接下来，重点将放在告警处理也就是Alertmanager部分。如下所示。</p>
<p><img src="/images/prometheus-alertmanager-0.png" alt="image-20210906110008076"></p>
<p>为了提升Promthues的服务可用性，通常用户会部署两个或者两个以上的Promthus Server，它们具有完全相同的配置包括Job配置，以及告警配置等。当某一个Prometheus Server发生故障后可以确保Promthues持续可用。</p>
<a id="more"></a>
<p>同时基于Alertmanager的告警分组机制即使不同的Prometheus Sever分别发送相同的告警给Alertmanager，Alertmanager也可以自动将这些告警合并为一个通知向receiver发送。</p>
<p><img src="/images/prometheus-alertmanager-1.png" alt="image-20210906110119996"></p>
<p>但不幸的是，虽然Alertmanager能够同时处理多个相同的Prometheus Server所产生的告警。但是由于单个Alertmanager的存在，当前的部署结构存在明显的单点故障风险，当Alertmanager单点失效后，告警的后续所有业务全部失效。</p>
<p>如下所示，最直接的方式，就是尝试部署多套Alertmanager。但是由于Alertmanager之间不存在并不了解彼此的存在，因此则会出现告警通知被不同的Alertmanager重复发送多次的问题。</p>
<p><img src="/images/prometheus-alertmanager-2.png" alt="image-20210906110143793"></p>
<p>为了解决这一问题，如下所示。Alertmanager引入了Gossip机制。Gossip机制为多个Alertmanager之间提供了信息传递的机制。确保及时在多个Alertmanager分别接收到相同告警信息的情况下，也只有一个告警通知被发送给Receiver。</p>
<p><img src="/images/prometheus-alertmanager-3.png" alt="image-20210906110223932"></p>
<h2 id="Gossip协议"><a href="#Gossip协议" class="headerlink" title="Gossip协议"></a>Gossip协议</h2><p>Gossip protocol 也叫 Epidemic Protocol （流行病协议），实际上它还有很多别名，比如：“流言算法”、“疫情传播算法”等。</p>
<p>这个协议的作用就像其名字表示的意思一样，非常容易理解，它的方式其实在我们日常生活中也很常见，比如电脑病毒的传播，森林大火，细胞扩散等等。</p>
<p><strong>这里先简单介绍一下 Gossip 协议的执行过程：</strong></p>
<p>Gossip 过程是由种子节点发起，当一个种子节点有状态需要更新到网络中的其他节点时，它会随机的选择周围几个节点散播消息，收到消息的节点也会重复该过程，直至最终网络中所有的节点都收到了消息。这个过程可能需要一定的时间，由于不能保证某个时刻所有节点都收到消息，但是理论上最终所有节点都会收到消息，因此它是一个最终一致性协议。</p>
<p><strong>Gossip 演示</strong></p>
<p>现在，我们通过一个具体的实例来深入体会一下 Gossip 传播的完整过程</p>
<p><strong>为了表述清楚，我们先做一些前提设定</strong></p>
<p>1、Gossip 是周期性的散播消息，把周期限定为 1 秒</p>
<p>2、被感染节点随机选择 k 个邻接节点（fan-out）散播消息，这里把 fan-out 设置为 3，每次最多往 3 个节点散播。</p>
<p>3、每次散播消息都选择尚未发送过的节点进行散播</p>
<p>4、收到消息的节点不再往发送节点散播，比如 A -&gt; B，那么 B 进行散播的时候，不再发给 A。</p>
<p>注意：Gossip 过程是异步的，也就是说发消息的节点不会关注对方是否收到，即不等待响应；不管对方有没有收到，它都会每隔 1 秒向周围节点发消息。异步是它的优点，而消息冗余则是它的缺点。</p>
<p>这里一共有 16 个节点，节点 1 为初始被感染节点，通过 Gossip 过程，最终所有节点都被感染：</p>
<video src="/Users/stark/Pictures/screenshot/gossip.mp4"></video>

<h3 id="Gossip-的特点（优势）"><a href="#Gossip-的特点（优势）" class="headerlink" title="Gossip 的特点（优势）"></a><strong>Gossip 的特点（优势）</strong></h3><p><strong>1）扩展性</strong></p>
<p>网络可以允许节点的任意增加和减少，新增加的节点的状态最终会与其他节点一致。</p>
<p><strong>2）容错</strong></p>
<p>网络中任何节点的宕机和重启都不会影响 Gossip 消息的传播，Gossip 协议具有天然的分布式系统容错特性。</p>
<p><strong>3）去中心化</strong></p>
<p>Gossip 协议不要求任何中心节点，所有节点都可以是对等的，任何一个节点无需知道整个网络状况，只要网络是连通的，任意一个节点就可以把消息散播到全网。</p>
<p><strong>4）一致性收敛</strong></p>
<p>Gossip 协议中的消息会以一传十、十传百一样的指数级速度在网络中快速传播，因此系统状态的不一致可以在很快的时间内收敛到一致。消息传播速度达到了 logN。</p>
<p><strong>5）简单</strong></p>
<p>Gossip 协议的过程极其简单，实现起来几乎没有太多复杂性。</p>
<h3 id="Gossip-的缺陷"><a href="#Gossip-的缺陷" class="headerlink" title="Gossip 的缺陷"></a><strong>Gossip 的缺陷</strong></h3><p>分布式网络中，没有一种完美的解决方案，Gossip 协议跟其他协议一样，也有一些不可避免的缺陷，主要是两个：</p>
<p><strong>1）消息的延迟</strong></p>
<p>由于 Gossip 协议中，节点只会随机向少数几个节点发送消息，消息最终是通过多个轮次的散播而到达全网的，因此使用 Gossip 协议会造成不可避免的消息延迟。不适合用在对实时性要求较高的场景下。</p>
<p><strong>2）消息冗余</strong></p>
<p>Gossip 协议规定，节点会定期随机选择周围节点发送消息，而收到消息的节点也会重复该步骤，因此就不可避免的存在消息重复发送给同一节点的情况，造成了消息的冗余，同时也增加了收到消息的节点的处理压力。而且，由于是定期发送，因此，即使收到了消息的节点还会反复收到重复消息，加重了消息的冗余。</p>
<h3 id="Gossip-类型"><a href="#Gossip-类型" class="headerlink" title="Gossip 类型"></a><strong>Gossip 类型</strong></h3><p>Gossip 有两种类型：</p>
<ul>
<li>Anti-Entropy（反熵）：以固定的概率传播所有的数据</li>
<li>Rumor-Mongering（谣言传播）：仅传播新到达的数据</li>
</ul>
<p>Anti-Entropy 是 SI model，节点只有两种状态，Suspective 和 Infective，叫做 simple epidemics。</p>
<p>Rumor-Mongering 是 SIR model，节点有三种状态，Suspective，Infective 和 Removed，叫做 complex epidemics。</p>
<p>其实，Anti-entropy 反熵是一个很奇怪的名词，之所以定义成这样，Jelasity 进行了解释，因为 entropy 是指混乱程度（disorder），而在这种模式下可以消除不同节点中数据的 disorder，因此 Anti-entropy 就是 anti-disorder。换句话说，它可以提高系统中节点之间的 similarity。</p>
<p>在 SI model 下，一个节点会把所有的数据都跟其他节点共享，以便消除节点之间数据的任何不一致，它可以保证最终、完全的一致。</p>
<p>由于在 SI model 下消息会不断反复的交换，因此消息数量是非常庞大的，无限制的（unbounded），这对一个系统来说是一个巨大的开销。</p>
<p>但是在 Rumor Mongering（SIR Model） 模型下，消息可以发送得更频繁，因为消息只包含最新 update，体积更小。而且，一个 Rumor 消息在某个时间点之后会被标记为 removed，并且不再被传播，因此，SIR model 下，系统有一定的概率会不一致。</p>
<p>而由于，SIR Model 下某个时间点之后消息不再传播，因此消息是有限的，系统开销小。</p>
<h3 id="Gossip-中的通信模式"><a href="#Gossip-中的通信模式" class="headerlink" title="Gossip 中的通信模式"></a><strong>Gossip 中的通信模式</strong></h3><p>在 Gossip 协议下，网络中两个节点之间有三种通信方式:</p>
<ul>
<li>Push: 节点 A 将数据 (key,value,version) 及对应的版本号推送给 B 节点，B 节点更新 A 中比自己新的数据</li>
<li>Pull：A 仅将数据 key, version 推送给 B，B 将本地比 A 新的数据（Key, value, version）推送给 A，A 更新本地</li>
<li>Push/Pull：与 Pull 类似，只是多了一步，A 再将本地比 B 新的数据推送给 B，B 则更新本地</li>
</ul>
<p>如果把两个节点数据同步一次定义为一个周期，则在一个周期内，Push 需通信 1 次，Pull 需 2 次，Push/Pull 则需 3 次。虽然消息数增加了，但从效果上来讲，Push/Pull 最好，理论上一个周期内可以使两个节点完全一致。直观上，Push/Pull 的收敛速度也是最快的。</p>
<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a><strong>复杂度分析</strong></h3><p>对于一个节点数为 N 的网络来说，假设每个 Gossip 周期，新感染的节点都能再感染至少一个新节点，那么 Gossip 协议退化成一个二叉树查找，经过 LogN 个周期之后，感染全网，时间开销是 O(LogN)。由于每个周期，每个节点都会至少发出一次消息，因此，消息复杂度（消息数量 = N * N）是 O(N^2) 。注意，这是 Gossip 理论上最优的收敛速度，但是在实际情况中，最优的收敛速度是很难达到的。</p>
<p>假设某个节点在第 i 个周期被感染的概率为 pi，第 i+1 个周期被感染的概率为 pi+1 ，</p>
<p>1）则 Pull 的方式:</p>
<p><img src="/images/prometheus-alertmanager-4.jpg" alt="img"></p>
<p>2）Push 方式：</p>
<p><img src="/images/prometheus-alertmanager-5.jpg" alt="img"></p>
<p>显然 Pull 的收敛速度大于 Push ，而每个节点在每个周期被感染的概率都是固定的 p (0&lt;p&lt;1)，因此 Gossip 算法是基于 p 的平方收敛，也称为概率收敛，这在众多的一致性算法中是非常独特的。</p>
<h2 id="高可用方案"><a href="#高可用方案" class="headerlink" title="高可用方案"></a>高可用方案</h2><p>上面我们详细介绍了goosip协议的实现，简单的说，Gossip有两种实现方式分别为Push-based和Pull-based。在Push-based当集群中某一节点A完成一个工作后，随机的从其它节点B并向其发送相应的消息，节点B接收到消息后在重复完成相同的工作，直到传播到集群中的所有节点。而Pull-based的实现中节点A会随机的向节点B发起询问是否有新的状态需要同步，如果有则返回。</p>
<p>在简单了解了Gossip协议之后，我们来看Alertmanager是如何基于Gossip协议实现集群高可用的。如下所示，当Alertmanager接收到来自Prometheus的告警消息后，会按照以下流程对告警进行处理：</p>
<p><img src="/images/prometheus-alertmanager-6.png" alt="image-20210906112831633"></p>
<ul>
<li>在第一个阶段Silence中，Alertmanager会判断当前通知是否匹配到任何的静默规则，如果没有则进入下一个阶段，否则则中断流水线不发送通知；</li>
<li>在第二个阶段Wait中，Alertmanager会根据当前Alertmanager在集群中所在的顺序(index)等待index * 5s的时间；</li>
<li>当前Alertmanager等待阶段结束后，Dedup阶段则会判断当前Alertmanager数据库中该通知是否已经发送，如果已经发送则中断流水线，不发送告警，否则则进入下一阶段Send对外发送告警通知；</li>
<li>告警发送完成后该Alertmanager进入最后一个阶段Gossip，Gossip会通知其他Alertmanager实例当前告警已经发送。其他实例接收到Gossip消息后，则会在自己的数据库中保存该通知已发送的记录。</li>
</ul>
<p>因此如下所示，Gossip机制的关键在于两点：</p>
<p><img src="/images/prometheus-alertmanager-7.png" alt="image-20210906113513907"></p>
<ul>
<li>Silence设置同步：Alertmanager启动阶段基于Pull-based从集群其它节点同步Silence状态，当有新的Silence产生时使用Push-based方式在集群中传播Gossip信息；</li>
<li>通知发送状态同步：告警通知发送完成后，基于Push-based同步告警发送状态。Wait阶段可以确保集群状态一致。</li>
</ul>
<p>Alertmanager基于Gossip实现的集群机制虽然不能保证所有实例上的数据时刻保持一致，但是实现了CAP理论中的AP系统，即可用性和分区容错性。同时对于Prometheus Server而言保持了配置了简单性，Promthues Server之间不需要任何的状态同步。</p>
<h2 id="高可用源码分析"><a href="#高可用源码分析" class="headerlink" title="高可用源码分析"></a>高可用源码分析</h2><h3 id="集群启动"><a href="#集群启动" class="headerlink" title="集群启动"></a>集群启动</h3><p>下面是从main.go中摘录的一些关于alertmanager组件集群的代码流程：</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码来自alertmanager/cmd/alertmanager/main.go</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化集群</span></span><br><span class="line">	<span class="keyword">var</span> peer *cluster.Peer</span><br><span class="line">	<span class="keyword">if</span> *clusterBindAddr != <span class="string">""</span> &#123;</span><br><span class="line">		peer, err = cluster.Create(</span><br><span class="line">			log.With(logger, <span class="string">"component"</span>, <span class="string">"cluster"</span>),</span><br><span class="line">			prometheus.DefaultRegisterer,</span><br><span class="line">			*clusterBindAddr,</span><br><span class="line">			*clusterAdvertiseAddr,</span><br><span class="line">			*peers,</span><br><span class="line">			<span class="literal">true</span>,</span><br><span class="line">			*pushPullInterval,</span><br><span class="line">			*gossipInterval,</span><br><span class="line">			*tcpTimeout,</span><br><span class="line">			*probeTimeout,</span><br><span class="line">			*probeInterval,</span><br><span class="line">		)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			level.Error(logger).Log(<span class="string">"msg"</span>, <span class="string">"unable to initialize gossip mesh"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 设置普罗米修斯集群指标，为已启用</span></span><br><span class="line">		clusterEnabled.Set(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> peer != <span class="literal">nil</span> &#123;</span><br><span class="line">		c := peer.AddState(<span class="string">"nfl"</span>, notificationLog, prometheus.DefaultRegisterer)</span><br><span class="line">		notificationLog.SetBroadcast(c.Broadcast)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> peer != <span class="literal">nil</span> &#123;</span><br><span class="line">		c := peer.AddState(<span class="string">"sil"</span>, silences, prometheus.DefaultRegisterer)</span><br><span class="line">		silences.SetBroadcast(c.Broadcast)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 集群peer的状态监听器已经进行注册成功，现在可以进行加入集群和初始化状态。</span></span><br><span class="line">	<span class="comment">// Peer state listeners have been registered, now we can join and get the initial state.</span></span><br><span class="line">	<span class="keyword">if</span> peer != <span class="literal">nil</span> &#123;</span><br><span class="line">		err = peer.Join(</span><br><span class="line">			*reconnectInterval,</span><br><span class="line">			*peerReconnectTimeout,</span><br><span class="line">		)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			level.Warn(logger).Log(<span class="string">"msg"</span>, <span class="string">"unable to join gossip mesh"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">		ctx, cancel := context.WithTimeout(context.Background(), *settleTimeout)</span><br><span class="line">		<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			cancel()</span><br><span class="line">			<span class="keyword">if</span> err := peer.Leave(<span class="number">10</span> * time.Second); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				level.Warn(logger).Log(<span class="string">"msg"</span>, <span class="string">"unable to leave gossip mesh"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;()</span><br><span class="line">		<span class="keyword">go</span> peer.Settle(ctx, *gossipInterval*<span class="number">10</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">	waitFunc := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">	<span class="keyword">if</span> peer != <span class="literal">nil</span> &#123;</span><br><span class="line">		waitFunc = clusterWait(peer, *peerTimeout)</span><br><span class="line">	&#125;</span><br><span class="line">	timeoutFunc := <span class="function"><span class="keyword">func</span><span class="params">(d time.Duration)</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> d &lt; notify.MinTimeout &#123;</span><br><span class="line">			d = notify.MinTimeout</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> d + waitFunc()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">		pipeline := pipelineBuilder.New(</span><br><span class="line">			receivers,</span><br><span class="line">			waitFunc,</span><br><span class="line">			inhibitor,</span><br><span class="line">			silencer,</span><br><span class="line">			notificationLog,</span><br><span class="line">			peer,</span><br><span class="line">		)</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">  disp = dispatch.NewDispatcher(alerts, routes, pipeline, marker, timeoutFunc, logger, dispMetrics)</span><br></pre></td></tr></table></figure>
<p>在<code>cluster.Create</code>中主要就是一些初始化集群的工作，里面比较重要的就是用到了<code>ml, err := memberlist.Create(cfg)</code>，这里用到了一个基于Gossip协议来传播消息，用来管理分布式集群内节点发现、 节点失效探测、节点列表的软件包<code>memberlist</code>，关于这个包，有必要分析一下，没兴趣的可以跳过这一节：</p>
<h3 id="memberlist"><a href="#memberlist" class="headerlink" title="memberlist"></a>memberlist</h3><p>memberlist 是HashiCorp公司出品的go语言开发库，使用基于Gossip协议管理集群成员和成员失败检测。咱们本文的主题就是memberlist。严格说起来，memberlist是基于Gossip协议变种实现的，它的指导论文是康奈尔大学计算机科学系Abhinandan Das, Indranil Gupta, Ashish Motivala在2002年发表的《SWIM:Scalable Weakly-consistent/Infection-styleProcess Group Membership Protocol》。</p>
<p>Membership协议中文名是 可伸缩最终一致性感染成员组协议。原理通过一个有效的点对点随机探测机制进行监控协议成员的故障检测、更新传播。Memberlist 构建在SWIM Membership之上，跟原始gossip协议有了一些补充和调整。咱们接下去从项目介绍、节点状态、消息类型、数据通讯来解说下。</p>
<p>项目结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">total 536</span><br><span class="line">-rw-r--r--  1 stark  staff  15977  6  2 15:34 LICENSE</span><br><span class="line">-rw-r--r--  1 stark  staff    670  6  2 15:34 Makefile</span><br><span class="line">-rw-r--r--  1 stark  staff   3195  6  2 15:34 README.md</span><br><span class="line">-rw-r--r--  1 stark  staff    591  6  2 15:34 alive_delegate.go</span><br><span class="line">-rw-r--r--  1 stark  staff   1745  6  2 15:34 awareness.go</span><br><span class="line">-rw-r--r--  1 stark  staff   3311  6  2 15:34 broadcast.go # 广播模块</span><br><span class="line">-rw-r--r--  1 stark  staff  15003  6  2 15:34 config.go</span><br><span class="line">-rw-r--r--  1 stark  staff    376  6  2 15:34 conflict_delegate.go</span><br><span class="line">-rw-r--r--  1 stark  staff   1851  6  2 15:34 delegate.go</span><br><span class="line">-rw-r--r--  1 stark  staff   1870  6  2 15:34 event_delegate.go</span><br><span class="line">-rw-r--r--  1 stark  staff    666  6  2 15:34 go.mod</span><br><span class="line">-rw-r--r--  1 stark  staff   4720  6  2 15:34 go.sum</span><br><span class="line">-rw-r--r--  1 stark  staff   4505  6  2 15:34 keyring.go</span><br><span class="line">-rw-r--r--  1 stark  staff    454  6  2 15:34 logging.go</span><br><span class="line">-rw-r--r--  1 stark  staff  22474  6  2 15:34 memberlist.go # 主体模块</span><br><span class="line">-rw-r--r--  1 stark  staff    570  6  2 15:34 merge_delegate.go</span><br><span class="line">-rw-r--r--  1 stark  staff   4390  6  2 15:34 mock_transport.go</span><br><span class="line">-rw-r--r--  1 stark  staff  35144  6  2 15:34 net.go # 通信模块</span><br><span class="line">-rw-r--r--  1 stark  staff  10031  6  2 15:34 net_transport.go</span><br><span class="line">-rw-r--r--  1 stark  staff    645  6  2 15:34 ping_delegate.go</span><br><span class="line">-rw-r--r--  1 stark  staff  11384  6  2 15:34 queue.go</span><br><span class="line">-rw-r--r--  1 stark  staff   5074  6  2 15:34 security.go</span><br><span class="line">-rw-r--r--  1 stark  staff  37938  6  2 15:34 state.go # 状态模块</span><br><span class="line">-rw-r--r--  1 stark  staff   4298  6  2 15:34 suspicion.go</span><br><span class="line">-rw-r--r--  1 stark  staff    399  6  2 15:34 tag.sh</span><br><span class="line">-rw-r--r--  1 stark  staff    211  6  2 15:34 todo.md</span><br><span class="line">-rw-r--r--  1 stark  staff   4579  6  2 15:34 transport.go</span><br><span class="line">-rw-r--r--  1 stark  staff   8170  6  2 15:34 util.go</span><br></pre></td></tr></table></figure>
<p>项目基本流程如下：</p>
<ul>
<li><p>项目在memberlist.go 函数Create启动，调用sate.go中函数schedule</p>
</li>
<li><p>Schedule函数开启probe协程、pushpull协程、gossip协程</p>
</li>
<li><p>probe协程：进行节点状态维护</p>
</li>
<li><p>push/pull协程：进行节点状态、用户数据同步</p>
</li>
<li><p>gossip协程：进行udp广播发送消息。</p>
</li>
</ul>
<h4 id="Memberlist-结构体"><a href="#Memberlist-结构体" class="headerlink" title="Memberlist 结构体"></a>Memberlist 结构体</h4><p>在结构体Memberlist中，成员变量也是按照功能不同分隔</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码来自 github.com/hashicorp/memberlist/memberlist.go</span></span><br><span class="line"><span class="keyword">type</span> Memberlist <span class="keyword">struct</span> &#123;</span><br><span class="line">	sequenceNum <span class="keyword">uint32</span> <span class="comment">// Local sequence number</span></span><br><span class="line">	incarnation <span class="keyword">uint32</span> <span class="comment">// Local incarnation number</span></span><br><span class="line">	numNodes    <span class="keyword">uint32</span> <span class="comment">// Number of known nodes (estimate)</span></span><br><span class="line">	pushPullReq <span class="keyword">uint32</span> <span class="comment">// Number of push/pull requests</span></span><br><span class="line"></span><br><span class="line">	advertiseLock sync.RWMutex</span><br><span class="line">	advertiseAddr net.IP</span><br><span class="line">	advertisePort <span class="keyword">uint16</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//配置</span></span><br><span class="line">	config         *Config </span><br><span class="line">  <span class="comment">//本地服务关闭的标志位</span></span><br><span class="line">	shutdown       <span class="keyword">int32</span> <span class="comment">// Used as an atomic boolean value</span></span><br><span class="line">	shutdownCh     <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">  <span class="comment">//本节点退出的标志位</span></span><br><span class="line">	leave          <span class="keyword">int32</span> <span class="comment">// Used as an atomic boolean value</span></span><br><span class="line">	leaveBroadcast <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	shutdownLock sync.Mutex <span class="comment">// Serializes calls to Shutdown</span></span><br><span class="line">	leaveLock    sync.Mutex <span class="comment">// Serializes calls to Leave</span></span><br><span class="line"></span><br><span class="line">	transport NodeAwareTransport</span><br><span class="line"></span><br><span class="line">	handoffCh            <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">	highPriorityMsgQueue *list.List</span><br><span class="line">	lowPriorityMsgQueue  *list.List</span><br><span class="line">	msgQueueLock         sync.Mutex</span><br><span class="line"></span><br><span class="line">	nodeLock   sync.RWMutex</span><br><span class="line">	nodes      []*nodeState          <span class="comment">// Known nodes</span></span><br><span class="line">	nodeMap    <span class="keyword">map</span>[<span class="keyword">string</span>]*nodeState <span class="comment">// Maps Node.Name -&gt; NodeState</span></span><br><span class="line">	nodeTimers <span class="keyword">map</span>[<span class="keyword">string</span>]*suspicion <span class="comment">// Maps Node.Name -&gt; suspicion timer</span></span><br><span class="line">	awareness  *awareness</span><br><span class="line"></span><br><span class="line">	tickerLock sync.Mutex</span><br><span class="line">	tickers    []*time.Ticker</span><br><span class="line">	stopTick   <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">	probeIndex <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">	ackLock     sync.Mutex</span><br><span class="line">	ackHandlers <span class="keyword">map</span>[<span class="keyword">uint32</span>]*ackHandler</span><br><span class="line"></span><br><span class="line">	broadcasts *TransmitLimitedQueue</span><br><span class="line"></span><br><span class="line">	logger *log.Logger</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Config-结构体"><a href="#Config-结构体" class="headerlink" title="Config 结构体"></a>Config 结构体</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// The name of this node. This must be unique in the cluster.</span></span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Transport is a hook for providing custom code to communicate with</span></span><br><span class="line">	<span class="comment">// other nodes. If this is left nil, then memberlist will by default</span></span><br><span class="line">	<span class="comment">// make a NetTransport using BindAddr and BindPort from this structure.</span></span><br><span class="line">	Transport Transport</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Configuration related to what address to bind to and ports to</span></span><br><span class="line">	<span class="comment">// listen on. The port is used for both UDP and TCP gossip. It is</span></span><br><span class="line">	<span class="comment">// assumed other nodes are running on this port, but they do not need</span></span><br><span class="line">	<span class="comment">// to.</span></span><br><span class="line">	BindAddr <span class="keyword">string</span></span><br><span class="line">	BindPort <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Configuration related to what address to advertise to other</span></span><br><span class="line">	<span class="comment">// cluster members. Used for nat traversal.</span></span><br><span class="line">	AdvertiseAddr <span class="keyword">string</span></span><br><span class="line">	AdvertisePort <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// ProtocolVersion is the configured protocol version that we</span></span><br><span class="line">	<span class="comment">// will _speak_. This must be between ProtocolVersionMin and</span></span><br><span class="line">	<span class="comment">// ProtocolVersionMax.</span></span><br><span class="line">	ProtocolVersion <span class="keyword">uint8</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// TCPTimeout is the timeout for establishing a stream connection with</span></span><br><span class="line">	<span class="comment">// a remote node for a full state sync, and for stream read and write</span></span><br><span class="line">	<span class="comment">// operations. This is a legacy name for backwards compatibility, but</span></span><br><span class="line">	<span class="comment">// should really be called StreamTimeout now that we have generalized</span></span><br><span class="line">	<span class="comment">// the transport.</span></span><br><span class="line">	TCPTimeout time.Duration</span><br><span class="line"></span><br><span class="line">	<span class="comment">// IndirectChecks is the number of nodes that will be asked to perform</span></span><br><span class="line">	<span class="comment">// an indirect probe of a node in the case a direct probe fails. Memberlist</span></span><br><span class="line">	<span class="comment">// waits for an ack from any single indirect node, so increasing this</span></span><br><span class="line">	<span class="comment">// number will increase the likelihood that an indirect probe will succeed</span></span><br><span class="line">	<span class="comment">// at the expense of bandwidth.</span></span><br><span class="line">	IndirectChecks <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// RetransmitMult is the multiplier for the number of retransmissions</span></span><br><span class="line">	<span class="comment">// that are attempted for messages broadcasted over gossip. The actual</span></span><br><span class="line">	<span class="comment">// count of retransmissions is calculated using the formula:</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//   Retransmits = RetransmitMult * log(N+1)</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">// This allows the retransmits to scale properly with cluster size. The</span></span><br><span class="line">	<span class="comment">// higher the multiplier, the more likely a failed broadcast is to converge</span></span><br><span class="line">	<span class="comment">// at the expense of increased bandwidth.</span></span><br><span class="line">	RetransmitMult <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// SuspicionMult is the multiplier for determining the time an</span></span><br><span class="line">	<span class="comment">// inaccessible node is considered suspect before declaring it dead.</span></span><br><span class="line">	<span class="comment">// The actual timeout is calculated using the formula:</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//   SuspicionTimeout = SuspicionMult * log(N+1) * ProbeInterval</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">// This allows the timeout to scale properly with expected propagation</span></span><br><span class="line">	<span class="comment">// delay with a larger cluster size. The higher the multiplier, the longer</span></span><br><span class="line">	<span class="comment">// an inaccessible node is considered part of the cluster before declaring</span></span><br><span class="line">	<span class="comment">// it dead, giving that suspect node more time to refute if it is indeed</span></span><br><span class="line">	<span class="comment">// still alive.</span></span><br><span class="line">	SuspicionMult <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// SuspicionMaxTimeoutMult is the multiplier applied to the</span></span><br><span class="line">	<span class="comment">// SuspicionTimeout used as an upper bound on detection time. This max</span></span><br><span class="line">	<span class="comment">// timeout is calculated using the formula:</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">// SuspicionMaxTimeout = SuspicionMaxTimeoutMult * SuspicionTimeout</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">// If everything is working properly, confirmations from other nodes will</span></span><br><span class="line">	<span class="comment">// accelerate suspicion timers in a manner which will cause the timeout</span></span><br><span class="line">	<span class="comment">// to reach the base SuspicionTimeout before that elapses, so this value</span></span><br><span class="line">	<span class="comment">// will typically only come into play if a node is experiencing issues</span></span><br><span class="line">	<span class="comment">// communicating with other nodes. It should be set to a something fairly</span></span><br><span class="line">	<span class="comment">// large so that a node having problems will have a lot of chances to</span></span><br><span class="line">	<span class="comment">// recover before falsely declaring other nodes as failed, but short</span></span><br><span class="line">	<span class="comment">// enough for a legitimately isolated node to still make progress marking</span></span><br><span class="line">	<span class="comment">// nodes failed in a reasonable amount of time.</span></span><br><span class="line">	SuspicionMaxTimeoutMult <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// PushPullInterval is the interval between complete state syncs.</span></span><br><span class="line">	<span class="comment">// Complete state syncs are done with a single node over TCP and are</span></span><br><span class="line">	<span class="comment">// quite expensive relative to standard gossiped messages. Setting this</span></span><br><span class="line">	<span class="comment">// to zero will disable state push/pull syncs completely.</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">// Setting this interval lower (more frequent) will increase convergence</span></span><br><span class="line">	<span class="comment">// speeds across larger clusters at the expense of increased bandwidth</span></span><br><span class="line">	<span class="comment">// usage.</span></span><br><span class="line">	PushPullInterval time.Duration</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ProbeInterval and ProbeTimeout are used to configure probing</span></span><br><span class="line">	<span class="comment">// behavior for memberlist.</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">// ProbeInterval is the interval between random node probes. Setting</span></span><br><span class="line">	<span class="comment">// this lower (more frequent) will cause the memberlist cluster to detect</span></span><br><span class="line">	<span class="comment">// failed nodes more quickly at the expense of increased bandwidth usage.</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">// ProbeTimeout is the timeout to wait for an ack from a probed node</span></span><br><span class="line">	<span class="comment">// before assuming it is unhealthy. This should be set to 99-percentile</span></span><br><span class="line">	<span class="comment">// of RTT (round-trip time) on your network.</span></span><br><span class="line">	ProbeInterval time.Duration</span><br><span class="line">	ProbeTimeout  time.Duration</span><br><span class="line"></span><br><span class="line">	<span class="comment">// DisableTcpPings will turn off the fallback TCP pings that are attempted</span></span><br><span class="line">	<span class="comment">// if the direct UDP ping fails. These get pipelined along with the</span></span><br><span class="line">	<span class="comment">// indirect UDP pings.</span></span><br><span class="line">	DisableTcpPings <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// DisableTcpPingsForNode is like DisableTcpPings, but lets you control</span></span><br><span class="line">	<span class="comment">// whether to perform TCP pings on a node-by-node basis.</span></span><br><span class="line">	DisableTcpPingsForNode <span class="function"><span class="keyword">func</span><span class="params">(nodeName <span class="keyword">string</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	// <span class="title">AwarenessMaxMultiplier</span> <span class="title">will</span> <span class="title">increase</span> <span class="title">the</span> <span class="title">probe</span> <span class="title">interval</span> <span class="title">if</span> <span class="title">the</span> <span class="title">node</span></span></span><br><span class="line"><span class="function">	// <span class="title">becomes</span> <span class="title">aware</span> <span class="title">that</span> <span class="title">it</span> <span class="title">might</span> <span class="title">be</span> <span class="title">degraded</span> <span class="title">and</span> <span class="title">not</span> <span class="title">meeting</span> <span class="title">the</span> <span class="title">soft</span> <span class="title">real</span></span></span><br><span class="line"><span class="function">	// <span class="title">time</span> <span class="title">requirements</span> <span class="title">to</span> <span class="title">reliably</span> <span class="title">probe</span> <span class="title">other</span> <span class="title">nodes</span>.</span></span><br><span class="line"><span class="function">	<span class="title">AwarenessMaxMultiplier</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	// <span class="title">GossipInterval</span> <span class="title">and</span> <span class="title">GossipNodes</span> <span class="title">are</span> <span class="title">used</span> <span class="title">to</span> <span class="title">configure</span> <span class="title">the</span> <span class="title">gossip</span></span></span><br><span class="line"><span class="function">	// <span class="title">behavior</span> <span class="title">of</span> <span class="title">memberlist</span>.</span></span><br><span class="line"><span class="function">	//</span></span><br><span class="line"><span class="function">	// <span class="title">GossipInterval</span> <span class="title">is</span> <span class="title">the</span> <span class="title">interval</span> <span class="title">between</span> <span class="title">sending</span> <span class="title">messages</span> <span class="title">that</span> <span class="title">need</span></span></span><br><span class="line"><span class="function">	// <span class="title">to</span> <span class="title">be</span> <span class="title">gossiped</span> <span class="title">that</span> <span class="title">haven</span>'<span class="title">t</span> <span class="title">been</span> <span class="title">able</span> <span class="title">to</span> <span class="title">piggyback</span> <span class="title">on</span> <span class="title">probing</span> <span class="title">messages</span>.</span></span><br><span class="line"><span class="function">	// <span class="title">If</span> <span class="title">this</span> <span class="title">is</span> <span class="title">set</span> <span class="title">to</span> <span class="title">zero</span>, <span class="title">non</span>-<span class="title">piggyback</span> <span class="title">gossip</span> <span class="title">is</span> <span class="title">disabled</span>. <span class="title">By</span> <span class="title">lowering</span></span></span><br><span class="line"><span class="function">	// <span class="title">this</span> <span class="title">value</span> <span class="params">(more frequent)</span> <span class="title">gossip</span> <span class="title">messages</span> <span class="title">are</span> <span class="title">propagated</span> <span class="title">across</span></span></span><br><span class="line"><span class="function">	// <span class="title">the</span> <span class="title">cluster</span> <span class="title">more</span> <span class="title">quickly</span> <span class="title">at</span> <span class="title">the</span> <span class="title">expense</span> <span class="title">of</span> <span class="title">increased</span> <span class="title">bandwidth</span>.</span></span><br><span class="line"><span class="function">	//</span></span><br><span class="line"><span class="function">	// <span class="title">GossipNodes</span> <span class="title">is</span> <span class="title">the</span> <span class="title">number</span> <span class="title">of</span> <span class="title">random</span> <span class="title">nodes</span> <span class="title">to</span> <span class="title">send</span> <span class="title">gossip</span> <span class="title">messages</span> <span class="title">to</span></span></span><br><span class="line"><span class="function">	// <span class="title">per</span> <span class="title">GossipInterval</span>. <span class="title">Increasing</span> <span class="title">this</span> <span class="title">number</span> <span class="title">causes</span> <span class="title">the</span> <span class="title">gossip</span> <span class="title">messages</span></span></span><br><span class="line"><span class="function">	// <span class="title">to</span> <span class="title">propagate</span> <span class="title">across</span> <span class="title">the</span> <span class="title">cluster</span> <span class="title">more</span> <span class="title">quickly</span> <span class="title">at</span> <span class="title">the</span> <span class="title">expense</span> <span class="title">of</span></span></span><br><span class="line"><span class="function">	// <span class="title">increased</span> <span class="title">bandwidth</span>.</span></span><br><span class="line"><span class="function">	//</span></span><br><span class="line"><span class="function">	// <span class="title">GossipToTheDeadTime</span> <span class="title">is</span> <span class="title">the</span> <span class="title">interval</span> <span class="title">after</span> <span class="title">which</span> <span class="title">a</span> <span class="title">node</span> <span class="title">has</span> <span class="title">died</span> <span class="title">that</span></span></span><br><span class="line"><span class="function">	// <span class="title">we</span> <span class="title">will</span> <span class="title">still</span> <span class="title">try</span> <span class="title">to</span> <span class="title">gossip</span> <span class="title">to</span> <span class="title">it</span>. <span class="title">This</span> <span class="title">gives</span> <span class="title">it</span> <span class="title">a</span> <span class="title">chance</span> <span class="title">to</span> <span class="title">refute</span>.</span></span><br><span class="line"><span class="function">	<span class="title">GossipInterval</span>      <span class="title">time</span>.<span class="title">Duration</span></span></span><br><span class="line"><span class="function">	<span class="title">GossipNodes</span>         <span class="title">int</span></span></span><br><span class="line"><span class="function">	<span class="title">GossipToTheDeadTime</span> <span class="title">time</span>.<span class="title">Duration</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	// <span class="title">GossipVerifyIncoming</span> <span class="title">controls</span> <span class="title">whether</span> <span class="title">to</span> <span class="title">enforce</span> <span class="title">encryption</span> <span class="title">for</span> <span class="title">incoming</span></span></span><br><span class="line"><span class="function">	// <span class="title">gossip</span>. <span class="title">It</span> <span class="title">is</span> <span class="title">used</span> <span class="title">for</span> <span class="title">upshifting</span> <span class="title">from</span> <span class="title">unencrypted</span> <span class="title">to</span> <span class="title">encrypted</span> <span class="title">gossip</span> <span class="title">on</span></span></span><br><span class="line"><span class="function">	// <span class="title">a</span> <span class="title">running</span> <span class="title">cluster</span>.</span></span><br><span class="line"><span class="function">	<span class="title">GossipVerifyIncoming</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	// <span class="title">GossipVerifyOutgoing</span> <span class="title">controls</span> <span class="title">whether</span> <span class="title">to</span> <span class="title">enforce</span> <span class="title">encryption</span> <span class="title">for</span> <span class="title">outgoing</span></span></span><br><span class="line"><span class="function">	// <span class="title">gossip</span>. <span class="title">It</span> <span class="title">is</span> <span class="title">used</span> <span class="title">for</span> <span class="title">upshifting</span> <span class="title">from</span> <span class="title">unencrypted</span> <span class="title">to</span> <span class="title">encrypted</span> <span class="title">gossip</span> <span class="title">on</span></span></span><br><span class="line"><span class="function">	// <span class="title">a</span> <span class="title">running</span> <span class="title">cluster</span>.</span></span><br><span class="line"><span class="function">	<span class="title">GossipVerifyOutgoing</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	// <span class="title">EnableCompression</span> <span class="title">is</span> <span class="title">used</span> <span class="title">to</span> <span class="title">control</span> <span class="title">message</span> <span class="title">compression</span>. <span class="title">This</span> <span class="title">can</span></span></span><br><span class="line"><span class="function">	// <span class="title">be</span> <span class="title">used</span> <span class="title">to</span> <span class="title">reduce</span> <span class="title">bandwidth</span> <span class="title">usage</span> <span class="title">at</span> <span class="title">the</span> <span class="title">cost</span> <span class="title">of</span> <span class="title">slightly</span> <span class="title">more</span> <span class="title">CPU</span></span></span><br><span class="line"><span class="function">	// <span class="title">utilization</span>. <span class="title">This</span> <span class="title">is</span> <span class="title">only</span> <span class="title">available</span> <span class="title">starting</span> <span class="title">at</span> <span class="title">protocol</span> <span class="title">version</span> 1.</span></span><br><span class="line"><span class="function">	<span class="title">EnableCompression</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	// <span class="title">SecretKey</span> <span class="title">is</span> <span class="title">used</span> <span class="title">to</span> <span class="title">initialize</span> <span class="title">the</span> <span class="title">primary</span> <span class="title">encryption</span> <span class="title">key</span> <span class="title">in</span> <span class="title">a</span> <span class="title">keyring</span>.</span></span><br><span class="line"><span class="function">	// <span class="title">The</span> <span class="title">primary</span> <span class="title">encryption</span> <span class="title">key</span> <span class="title">is</span> <span class="title">the</span> <span class="title">only</span> <span class="title">key</span> <span class="title">used</span> <span class="title">to</span> <span class="title">encrypt</span> <span class="title">messages</span> <span class="title">and</span></span></span><br><span class="line"><span class="function">	// <span class="title">the</span> <span class="title">first</span> <span class="title">key</span> <span class="title">used</span> <span class="title">while</span> <span class="title">attempting</span> <span class="title">to</span> <span class="title">decrypt</span> <span class="title">messages</span>. <span class="title">Providing</span> <span class="title">a</span></span></span><br><span class="line"><span class="function">	// <span class="title">value</span> <span class="title">for</span> <span class="title">this</span> <span class="title">primary</span> <span class="title">key</span> <span class="title">will</span> <span class="title">enable</span> <span class="title">message</span>-<span class="title">level</span> <span class="title">encryption</span> <span class="title">and</span></span></span><br><span class="line"><span class="function">	// <span class="title">verification</span>, <span class="title">and</span> <span class="title">automatically</span> <span class="title">install</span> <span class="title">the</span> <span class="title">key</span> <span class="title">onto</span> <span class="title">the</span> <span class="title">keyring</span>.</span></span><br><span class="line"><span class="function">	// <span class="title">The</span> <span class="title">value</span> <span class="title">should</span> <span class="title">be</span> <span class="title">either</span> 16, 24, <span class="title">or</span> 32 <span class="title">bytes</span> <span class="title">to</span> <span class="title">select</span> <span class="title">AES</span>-128,</span></span><br><span class="line"><span class="function">	// <span class="title">AES</span>-192, <span class="title">or</span> <span class="title">AES</span>-256.</span></span><br><span class="line"><span class="function">	<span class="title">SecretKey</span> []<span class="title">byte</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	// <span class="title">The</span> <span class="title">keyring</span> <span class="title">holds</span> <span class="title">all</span> <span class="title">of</span> <span class="title">the</span> <span class="title">encryption</span> <span class="title">keys</span> <span class="title">used</span> <span class="title">internally</span>. <span class="title">It</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">	// <span class="title">automatically</span> <span class="title">initialized</span> <span class="title">using</span> <span class="title">the</span> <span class="title">SecretKey</span> <span class="title">and</span> <span class="title">SecretKeys</span> <span class="title">values</span>.</span></span><br><span class="line"><span class="function">	<span class="title">Keyring</span> *<span class="title">Keyring</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	// <span class="title">Delegate</span> <span class="title">and</span> <span class="title">Events</span> <span class="title">are</span> <span class="title">delegates</span> <span class="title">for</span> <span class="title">receiving</span> <span class="title">and</span> <span class="title">providing</span></span></span><br><span class="line"><span class="function">	// <span class="title">data</span> <span class="title">to</span> <span class="title">memberlist</span> <span class="title">via</span> <span class="title">callback</span> <span class="title">mechanisms</span>. <span class="title">For</span> <span class="title">Delegate</span>, <span class="title">see</span></span></span><br><span class="line"><span class="function">	// <span class="title">the</span> <span class="title">Delegate</span> <span class="title">interface</span>. <span class="title">For</span> <span class="title">Events</span>, <span class="title">see</span> <span class="title">the</span> <span class="title">EventDelegate</span> <span class="title">interface</span>.</span></span><br><span class="line"><span class="function">	//</span></span><br><span class="line"><span class="function">	// <span class="title">The</span> <span class="title">DelegateProtocolMin</span>/<span class="title">Max</span> <span class="title">are</span> <span class="title">used</span> <span class="title">to</span> <span class="title">guarantee</span> <span class="title">protocol</span>-<span class="title">compatibility</span></span></span><br><span class="line"><span class="function">	// <span class="title">for</span> <span class="title">any</span> <span class="title">custom</span> <span class="title">messages</span> <span class="title">that</span> <span class="title">the</span> <span class="title">delegate</span> <span class="title">might</span> <span class="title">do</span> <span class="params">(broadcasts,</span></span></span><br><span class="line"><span class="function"><span class="params">	// local/remote state, etc.)</span>. <span class="title">If</span> <span class="title">you</span> <span class="title">don</span>'<span class="title">t</span> <span class="title">set</span> <span class="title">these</span>, <span class="title">then</span> <span class="title">the</span> <span class="title">protocol</span></span></span><br><span class="line"><span class="function">	// <span class="title">versions</span> <span class="title">will</span> <span class="title">just</span> <span class="title">be</span> <span class="title">zero</span>, <span class="title">and</span> <span class="title">version</span> <span class="title">compliance</span> <span class="title">won</span>'<span class="title">t</span> <span class="title">be</span> <span class="title">done</span>.</span></span><br><span class="line"><span class="function">	<span class="title">Delegate</span>                <span class="title">Delegate</span></span></span><br><span class="line"><span class="function">	<span class="title">DelegateProtocolVersion</span> <span class="title">uint8</span></span></span><br><span class="line"><span class="function">	<span class="title">DelegateProtocolMin</span>     <span class="title">uint8</span></span></span><br><span class="line"><span class="function">	<span class="title">DelegateProtocolMax</span>     <span class="title">uint8</span></span></span><br><span class="line"><span class="function">	<span class="title">Events</span>                  <span class="title">EventDelegate</span></span></span><br><span class="line"><span class="function">	<span class="title">Conflict</span>                <span class="title">ConflictDelegate</span></span></span><br><span class="line"><span class="function">	<span class="title">Merge</span>                   <span class="title">MergeDelegate</span></span></span><br><span class="line"><span class="function">	<span class="title">Ping</span>                    <span class="title">PingDelegate</span></span></span><br><span class="line"><span class="function">	<span class="title">Alive</span>                   <span class="title">AliveDelegate</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	// <span class="title">DNSConfigPath</span> <span class="title">points</span> <span class="title">to</span> <span class="title">the</span> <span class="title">system</span>'<span class="title">s</span> <span class="title">DNS</span> <span class="title">config</span> <span class="title">file</span>, <span class="title">usually</span> <span class="title">located</span></span></span><br><span class="line"><span class="function">	// <span class="title">at</span> /<span class="title">etc</span>/<span class="title">resolv</span>.<span class="title">conf</span>. <span class="title">It</span> <span class="title">can</span> <span class="title">be</span> <span class="title">overridden</span> <span class="title">via</span> <span class="title">config</span> <span class="title">for</span> <span class="title">easier</span> <span class="title">testing</span>.</span></span><br><span class="line"><span class="function">	<span class="title">DNSConfigPath</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	// <span class="title">LogOutput</span> <span class="title">is</span> <span class="title">the</span> <span class="title">writer</span> <span class="title">where</span> <span class="title">logs</span> <span class="title">should</span> <span class="title">be</span> <span class="title">sent</span>. <span class="title">If</span> <span class="title">this</span> <span class="title">is</span> <span class="title">not</span></span></span><br><span class="line"><span class="function">	// <span class="title">set</span>, <span class="title">logging</span> <span class="title">will</span> <span class="title">go</span> <span class="title">to</span> <span class="title">stderr</span> <span class="title">by</span> <span class="title">default</span>. <span class="title">You</span> <span class="title">cannot</span> <span class="title">specify</span> <span class="title">both</span> <span class="title">LogOutput</span></span></span><br><span class="line"><span class="function">	// <span class="title">and</span> <span class="title">Logger</span> <span class="title">at</span> <span class="title">the</span> <span class="title">same</span> <span class="title">time</span>.</span></span><br><span class="line"><span class="function">	<span class="title">LogOutput</span> <span class="title">io</span>.<span class="title">Writer</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	// <span class="title">Logger</span> <span class="title">is</span> <span class="title">a</span> <span class="title">custom</span> <span class="title">logger</span> <span class="title">which</span> <span class="title">you</span> <span class="title">provide</span>. <span class="title">If</span> <span class="title">Logger</span> <span class="title">is</span> <span class="title">set</span>, <span class="title">it</span> <span class="title">will</span> <span class="title">use</span></span></span><br><span class="line"><span class="function">	// <span class="title">this</span> <span class="title">for</span> <span class="title">the</span> <span class="title">internal</span> <span class="title">logger</span>. <span class="title">If</span> <span class="title">Logger</span> <span class="title">is</span> <span class="title">not</span> <span class="title">set</span>, <span class="title">it</span> <span class="title">will</span> <span class="title">fall</span> <span class="title">back</span> <span class="title">to</span> <span class="title">the</span></span></span><br><span class="line"><span class="function">	// <span class="title">behavior</span> <span class="title">for</span> <span class="title">using</span> <span class="title">LogOutput</span>. <span class="title">You</span> <span class="title">cannot</span> <span class="title">specify</span> <span class="title">both</span> <span class="title">LogOutput</span> <span class="title">and</span> <span class="title">Logger</span></span></span><br><span class="line"><span class="function">	// <span class="title">at</span> <span class="title">the</span> <span class="title">same</span> <span class="title">time</span>.</span></span><br><span class="line"><span class="function">	<span class="title">Logger</span> *<span class="title">log</span>.<span class="title">Logger</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	// <span class="title">Size</span> <span class="title">of</span> <span class="title">Memberlist</span>'<span class="title">s</span> <span class="title">internal</span> <span class="title">channel</span> <span class="title">which</span> <span class="title">handles</span> <span class="title">UDP</span> <span class="title">messages</span>. <span class="title">The</span></span></span><br><span class="line"><span class="function">	// <span class="title">size</span> <span class="title">of</span> <span class="title">this</span> <span class="title">determines</span> <span class="title">the</span> <span class="title">size</span> <span class="title">of</span> <span class="title">the</span> <span class="title">queue</span> <span class="title">which</span> <span class="title">Memberlist</span> <span class="title">will</span> <span class="title">keep</span></span></span><br><span class="line"><span class="function">	// <span class="title">while</span> <span class="title">UDP</span> <span class="title">messages</span> <span class="title">are</span> <span class="title">handled</span>.</span></span><br><span class="line"><span class="function">	<span class="title">HandoffQueueDepth</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	// <span class="title">Maximum</span> <span class="title">number</span> <span class="title">of</span> <span class="title">bytes</span> <span class="title">that</span> <span class="title">memberlist</span> <span class="title">will</span> <span class="title">put</span> <span class="title">in</span> <span class="title">a</span> <span class="title">packet</span> <span class="params">(this</span></span></span><br><span class="line"><span class="function"><span class="params">	// will be <span class="keyword">for</span> UDP packets by <span class="keyword">default</span> with a NetTransport)</span>. <span class="title">A</span> <span class="title">safe</span> <span class="title">value</span></span></span><br><span class="line"><span class="function">	// <span class="title">for</span> <span class="title">this</span> <span class="title">is</span> <span class="title">typically</span> 1400 <span class="title">bytes</span> <span class="params">(which is the <span class="keyword">default</span>)</span>. <span class="title">However</span>,</span></span><br><span class="line"><span class="function">	// <span class="title">depending</span> <span class="title">on</span> <span class="title">your</span> <span class="title">network</span>'<span class="title">s</span> <span class="title">MTU</span> <span class="params">(Maximum Transmission Unit)</span> <span class="title">you</span> <span class="title">may</span></span></span><br><span class="line"><span class="function">	// <span class="title">be</span> <span class="title">able</span> <span class="title">to</span> <span class="title">increase</span> <span class="title">this</span> <span class="title">to</span> <span class="title">get</span> <span class="title">more</span> <span class="title">content</span> <span class="title">into</span> <span class="title">each</span> <span class="title">gossip</span> <span class="title">packet</span>.</span></span><br><span class="line"><span class="function">	// <span class="title">This</span> <span class="title">is</span> <span class="title">a</span> <span class="title">legacy</span> <span class="title">name</span> <span class="title">for</span> <span class="title">backward</span> <span class="title">compatibility</span> <span class="title">but</span> <span class="title">should</span> <span class="title">really</span> <span class="title">be</span></span></span><br><span class="line"><span class="function">	// <span class="title">called</span> <span class="title">PacketBufferSize</span> <span class="title">now</span> <span class="title">that</span> <span class="title">we</span> <span class="title">have</span> <span class="title">generalized</span> <span class="title">the</span> <span class="title">transport</span>.</span></span><br><span class="line"><span class="function">	<span class="title">UDPBufferSize</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	// <span class="title">DeadNodeReclaimTime</span> <span class="title">controls</span> <span class="title">the</span> <span class="title">time</span> <span class="title">before</span> <span class="title">a</span> <span class="title">dead</span> <span class="title">node</span>'<span class="title">s</span> <span class="title">name</span> <span class="title">can</span> <span class="title">be</span></span></span><br><span class="line"><span class="function">	// <span class="title">reclaimed</span> <span class="title">by</span> <span class="title">one</span> <span class="title">with</span> <span class="title">a</span> <span class="title">different</span> <span class="title">address</span> <span class="title">or</span> <span class="title">port</span>. <span class="title">By</span> <span class="title">default</span>, <span class="title">this</span> <span class="title">is</span> 0,</span></span><br><span class="line"><span class="function">	// <span class="title">meaning</span> <span class="title">nodes</span> <span class="title">cannot</span> <span class="title">be</span> <span class="title">reclaimed</span> <span class="title">this</span> <span class="title">way</span>.</span></span><br><span class="line"><span class="function">	<span class="title">DeadNodeReclaimTime</span> <span class="title">time</span>.<span class="title">Duration</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	// <span class="title">RequireNodeNames</span> <span class="title">controls</span> <span class="title">if</span> <span class="title">the</span> <span class="title">name</span> <span class="title">of</span> <span class="title">a</span> <span class="title">node</span> <span class="title">is</span> <span class="title">required</span> <span class="title">when</span> <span class="title">sending</span></span></span><br><span class="line"><span class="function">	// <span class="title">a</span> <span class="title">message</span> <span class="title">to</span> <span class="title">that</span> <span class="title">node</span>.</span></span><br><span class="line"><span class="function">	<span class="title">RequireNodeNames</span> <span class="title">bool</span></span></span><br><span class="line"><span class="function">	// <span class="title">CIDRsAllowed</span> <span class="title">If</span> <span class="title">nil</span>, <span class="title">allow</span> <span class="title">any</span> <span class="title">connection</span> <span class="params">(<span class="keyword">default</span>)</span>, <span class="title">otherwise</span> <span class="title">specify</span> <span class="title">all</span> <span class="title">networks</span></span></span><br><span class="line"><span class="function">	// <span class="title">allowed</span> <span class="title">to</span> <span class="title">connect</span> <span class="params">(you must specify IPv6/IPv4 separately)</span></span></span><br><span class="line"><span class="function">	// <span class="title">Using</span> [] <span class="title">will</span> <span class="title">block</span> <span class="title">all</span> <span class="title">connections</span>.</span></span><br><span class="line"><span class="function">	<span class="title">CIDRsAllowed</span> []<span class="title">net</span>.<span class="title">IPNet</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="从create开始"><a href="#从create开始" class="headerlink" title="从create开始"></a>从create开始</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码来自github.com/hashicorp/memberlist/memberlist.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Create</span><span class="params">(conf *Config)</span> <span class="params">(*Memberlist, error)</span></span> &#123;</span><br><span class="line">	m, err := newMemberlist(conf)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err := m.setAlive(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		m.Shutdown()</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	m.schedule()</span><br><span class="line">	<span class="keyword">return</span> m, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里面有两个重要步骤：</p>
<ul>
<li>newMemberlist</li>
<li>m.schedule</li>
</ul>
<h4 id="newMemberlist"><a href="#newMemberlist" class="headerlink" title="newMemberlist"></a>newMemberlist</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码来自github.com/hashicorp/memberlist/memberlist.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newMemberlist</span><span class="params">(conf *Config)</span> <span class="params">(*Memberlist, error)</span></span> &#123;</span><br><span class="line">  ...</span><br><span class="line">	m := &amp;Memberlist&#123;</span><br><span class="line">		config:               conf,</span><br><span class="line">		shutdownCh:           <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">		leaveBroadcast:       <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">1</span>),</span><br><span class="line">		transport:            nodeAwareTransport,</span><br><span class="line">		handoffCh:            <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">1</span>),</span><br><span class="line">		highPriorityMsgQueue: list.New(),</span><br><span class="line">		lowPriorityMsgQueue:  list.New(),</span><br><span class="line">		nodeMap:              <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*nodeState),</span><br><span class="line">		nodeTimers:           <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*suspicion),</span><br><span class="line">		awareness:            newAwareness(conf.AwarenessMaxMultiplier),</span><br><span class="line">		ackHandlers:          <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">uint32</span>]*ackHandler),</span><br><span class="line">		broadcasts:           &amp;TransmitLimitedQueue&#123;RetransmitMult: conf.RetransmitMult&#125;,</span><br><span class="line">		logger:               logger,</span><br><span class="line">	&#125;</span><br><span class="line">  ...</span><br><span class="line">	<span class="keyword">go</span> m.streamListen()</span><br><span class="line">	<span class="keyword">go</span> m.packetListen()</span><br><span class="line">	<span class="keyword">go</span> m.packetHandler()</span><br><span class="line">	<span class="keyword">return</span> m, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在newMemberlist中，最主要的动作就是开启了tcp服务(<code>m.streamListen()</code>)和udp服务(<code>m.packetListen()</code>)，那么就看看net服务（tcp和udp）：</p>
<h5 id="TCP-处理"><a href="#TCP-处理" class="headerlink" title="TCP 处理"></a>TCP 处理</h5><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码来自github.com/hashicorp/memberlist/net.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">streamListen</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> conn := &lt;-m.transport.StreamCh(): <span class="comment">//tcp accept</span></span><br><span class="line">      <span class="comment">// 每个链接都有一个处理部分handleConn</span></span><br><span class="line">			<span class="keyword">go</span> m.handleConn(conn)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> &lt;-m.shutdownCh:</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继续看下处理函数 <code>m.handleConn(conn)</code></p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码来自github.com/hashicorp/memberlist/net.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">handleConn</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> conn.Close()</span><br><span class="line">	m.logger.Printf(<span class="string">"[DEBUG] memberlist: Stream connection %s"</span>, LogConn(conn))</span><br><span class="line"></span><br><span class="line">	metrics.IncrCounter([]<span class="keyword">string</span>&#123;<span class="string">"memberlist"</span>, <span class="string">"tcp"</span>, <span class="string">"accept"</span>&#125;, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	conn.SetDeadline(time.Now().Add(m.config.TCPTimeout))</span><br><span class="line">	msgType, bufConn, dec, err := m.readStream(conn)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> err != io.EOF &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[ERR] memberlist: failed to receive: %s %s"</span>, err, LogConn(conn))</span><br><span class="line"></span><br><span class="line">			resp := errResp&#123;err.Error()&#125;</span><br><span class="line">			out, err := encode(errMsg, &amp;resp)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				m.logger.Printf(<span class="string">"[ERR] memberlist: Failed to encode error response: %s"</span>, err)</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			err = m.rawSendMsgStream(conn, out.Bytes())</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				m.logger.Printf(<span class="string">"[ERR] memberlist: Failed to send error: %s %s"</span>, err, LogConn(conn))</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> msgType &#123;</span><br><span class="line">	<span class="keyword">case</span> userMsg:</span><br><span class="line">		<span class="keyword">if</span> err := m.readUserMsg(bufConn, dec); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[ERR] memberlist: Failed to receive user message: %s %s"</span>, err, LogConn(conn))</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">case</span> pushPullMsg:</span><br><span class="line">		<span class="comment">// Increment counter of pending push/pulls</span></span><br><span class="line">		numConcurrent := atomic.AddUint32(&amp;m.pushPullReq, <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">defer</span> atomic.AddUint32(&amp;m.pushPullReq, ^<span class="keyword">uint32</span>(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Check if we have too many open push/pull requests</span></span><br><span class="line">		<span class="keyword">if</span> numConcurrent &gt;= maxPushPullRequests &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[ERR] memberlist: Too many pending push/pull requests"</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		join, remoteNodes, userState, err := m.readRemoteState(bufConn, dec)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[ERR] memberlist: Failed to read remote state: %s %s"</span>, err, LogConn(conn))</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> err := m.sendLocalState(conn, join); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[ERR] memberlist: Failed to push local state: %s %s"</span>, err, LogConn(conn))</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> err := m.mergeRemoteState(join, remoteNodes, userState); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[ERR] memberlist: Failed push/pull merge: %s %s"</span>, err, LogConn(conn))</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">case</span> pingMsg:</span><br><span class="line">		<span class="keyword">var</span> p ping</span><br><span class="line">		<span class="keyword">if</span> err := dec.Decode(&amp;p); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[ERR] memberlist: Failed to decode ping: %s %s"</span>, err, LogConn(conn))</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> p.Node != <span class="string">""</span> &amp;&amp; p.Node != m.config.Name &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[WARN] memberlist: Got ping for unexpected node %s %s"</span>, p.Node, LogConn(conn))</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ack := ackResp&#123;p.SeqNo, <span class="literal">nil</span>&#125;</span><br><span class="line">		out, err := encode(ackRespMsg, &amp;ack)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[ERR] memberlist: Failed to encode ack: %s"</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		err = m.rawSendMsgStream(conn, out.Bytes())</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[ERR] memberlist: Failed to send ack: %s %s"</span>, err, LogConn(conn))</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		m.logger.Printf(<span class="string">"[ERR] memberlist: Received invalid msgType (%d) %s"</span>, msgType, LogConn(conn))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整体来看，这个方法就是读取TCP流数据，然后对数据进行判断类型，进行相应的处理，ping包和user包暂时不看，看下pullPush的类型的处理，分为三步：</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码来自github.com/hashicorp/memberlist/net.go		</span></span><br><span class="line">    <span class="comment">// 读取Remote的状态</span></span><br><span class="line">    join, remoteNodes, userState, err := m.readRemoteState(bufConn, dec)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[ERR] memberlist: Failed to read remote state: %s %s"</span>, err, LogConn(conn))</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送本地节点的状态</span></span><br><span class="line">		<span class="keyword">if</span> err := m.sendLocalState(conn, join); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[ERR] memberlist: Failed to push local state: %s %s"</span>, err, LogConn(conn))</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将收到的Remote状态进行更新</span></span><br><span class="line">		<span class="keyword">if</span> err := m.mergeRemoteState(join, remoteNodes, userState); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[ERR] memberlist: Failed push/pull merge: %s %s"</span>, err, LogConn(conn))</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<p><strong>可以看到tcp服务提供的功能就是：同步节点状态。</strong></p>
<p>分别砍下这三个步骤的处理</p>
<h6 id="readRemoteState"><a href="#readRemoteState" class="headerlink" title="readRemoteState"></a>readRemoteState</h6><p>读取节点状态信息，并返回</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码来自github.com/hashicorp/memberlist/net.go</span></span><br><span class="line"><span class="comment">// readRemoteState is used to read the remote state from a connection</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">readRemoteState</span><span class="params">(bufConn io.Reader, dec *codec.Decoder)</span> <span class="params">(<span class="keyword">bool</span>, []pushNodeState, []<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">	<span class="comment">// Read the push/pull header</span></span><br><span class="line">  <span class="comment">// 读取数据</span></span><br><span class="line">	<span class="keyword">var</span> header pushPullHeader</span><br><span class="line">	<span class="keyword">if</span> err := dec.Decode(&amp;header); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Allocate space for the transfer</span></span><br><span class="line">  <span class="comment">// 解码所有的节点信息</span></span><br><span class="line">	remoteNodes := <span class="built_in">make</span>([]pushNodeState, header.Nodes)</span><br><span class="line">	<span class="comment">// Try to decode all the states</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; header.Nodes; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> err := dec.Decode(&amp;remoteNodes[i]); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Read the remote user state into a buffer</span></span><br><span class="line">	<span class="keyword">var</span> userBuf []<span class="keyword">byte</span></span><br><span class="line">	<span class="keyword">if</span> header.UserStateLen &gt; <span class="number">0</span> &#123;</span><br><span class="line">		userBuf = <span class="built_in">make</span>([]<span class="keyword">byte</span>, header.UserStateLen)</span><br><span class="line">		bytes, err := io.ReadAtLeast(bufConn, userBuf, header.UserStateLen)</span><br><span class="line">		<span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; bytes != header.UserStateLen &#123;</span><br><span class="line">			err = fmt.Errorf(</span><br><span class="line">				<span class="string">"Failed to read full user state (%d / %d)"</span>,</span><br><span class="line">				bytes, header.UserStateLen)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// For proto versions &lt; 2, there is no port provided. Mask old</span></span><br><span class="line">	<span class="comment">// behavior by using the configured port</span></span><br><span class="line">	<span class="keyword">for</span> idx := <span class="keyword">range</span> remoteNodes &#123;</span><br><span class="line">		<span class="keyword">if</span> m.ProtocolVersion() &lt; <span class="number">2</span> || remoteNodes[idx].Port == <span class="number">0</span> &#123;</span><br><span class="line">			remoteNodes[idx].Port = <span class="keyword">uint16</span>(m.config.BindPort)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回节点状态信息</span></span><br><span class="line">	<span class="keyword">return</span> header.Join, remoteNodes, userBuf, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="sendLocalState"><a href="#sendLocalState" class="headerlink" title="sendLocalState"></a>sendLocalState</h6><p>发送本地存储的节点状态信息</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">// 代码来自github.com/hashicorp/memberlist/net.go</span><br><span class="line">// sendLocalState <span class="keyword">is</span> invoked to send our local state over a stream connection.</span><br><span class="line">func (m *Memberlist) sendLocalState(conn net.Conn, join bool) error &#123;</span><br><span class="line">	// Setup a deadline</span><br><span class="line">	conn.SetDeadline(time.Now().Add(m.config.TCPTimeout))</span><br><span class="line"></span><br><span class="line">	// Prepare the local node state</span><br><span class="line">  // 收集本地存储的节点状态信息</span><br><span class="line">	m.nodeLock.RLock()</span><br><span class="line">	localNodes := make([]pushNodeState, len(m.nodes))</span><br><span class="line">	<span class="keyword">for</span> idx, n := range m.nodes &#123;</span><br><span class="line">		localNodes[idx].Name = n.Name</span><br><span class="line">		localNodes[idx].Addr = n.Addr</span><br><span class="line">		localNodes[idx].Port = n.Port</span><br><span class="line">		localNodes[idx].Incarnation = n.Incarnation</span><br><span class="line">		localNodes[idx].State = n.State</span><br><span class="line">		localNodes[idx].Meta = n.Meta</span><br><span class="line">		localNodes[idx].Vsn = []uint8&#123;</span><br><span class="line">			n.PMin, n.PMax, n.PCur,</span><br><span class="line">			n.DMin, n.DMax, n.DCur,</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	m.nodeLock.RUnlock()</span><br><span class="line"></span><br><span class="line">	// Get the delegate state</span><br><span class="line">	var userData []byte</span><br><span class="line">	<span class="keyword">if</span> m.config.Delegate != nil &#123;</span><br><span class="line">		userData = m.config.Delegate.LocalState(join)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// Create a bytes buffer writer</span><br><span class="line">	bufConn := bytes.NewBuffer(nil)</span><br><span class="line"></span><br><span class="line">	// Send our node state</span><br><span class="line">  // 添加头部信息</span><br><span class="line">	header := pushPullHeader&#123;Nodes: len(localNodes), UserStateLen: len(userData), Join: join&#125;</span><br><span class="line">	hd := codec.MsgpackHandle&#123;&#125;</span><br><span class="line">	enc := codec.NewEncoder(bufConn, &amp;hd)</span><br><span class="line"></span><br><span class="line">	// Begin state push</span><br><span class="line">	<span class="keyword">if</span> _, err := bufConn.Write([]byte&#123;byte(pushPullMsg)&#125;); err != nil &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  // 编码并发送</span><br><span class="line">	<span class="keyword">if</span> err := enc.Encode(&amp;header); err != nil &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; header.Nodes; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> err := enc.Encode(&amp;localNodes[i]); err != nil &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// Write the user state <span class="keyword">as</span> well</span><br><span class="line">	<span class="keyword">if</span> userData != nil &#123;</span><br><span class="line">		<span class="keyword">if</span> _, err := bufConn.Write(userData); err != nil &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// Get the send buffer</span><br><span class="line">	<span class="keyword">return</span> m.rawSendMsgStream(conn, bufConn.Bytes())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="mergeRemoteState"><a href="#mergeRemoteState" class="headerlink" title="mergeRemoteState"></a>mergeRemoteState</h6><p>更新节点状态</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码来自github.com/hashicorp/memberlist/net.go</span></span><br><span class="line"><span class="comment">// mergeRemoteState is used to merge the remote state with our local state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">mergeRemoteState</span><span class="params">(join <span class="keyword">bool</span>, remoteNodes []pushNodeState, userBuf []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> err := m.verifyProtocol(remoteNodes); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Invoke the merge delegate if any</span></span><br><span class="line">	<span class="keyword">if</span> join &amp;&amp; m.config.Merge != <span class="literal">nil</span> &#123;</span><br><span class="line">		nodes := <span class="built_in">make</span>([]*Node, <span class="built_in">len</span>(remoteNodes))</span><br><span class="line">		<span class="keyword">for</span> idx, n := <span class="keyword">range</span> remoteNodes &#123;</span><br><span class="line">			nodes[idx] = &amp;Node&#123;</span><br><span class="line">				Name:  n.Name,</span><br><span class="line">				Addr:  n.Addr,</span><br><span class="line">				Port:  n.Port,</span><br><span class="line">				Meta:  n.Meta,</span><br><span class="line">				State: n.State,</span><br><span class="line">				PMin:  n.Vsn[<span class="number">0</span>],</span><br><span class="line">				PMax:  n.Vsn[<span class="number">1</span>],</span><br><span class="line">				PCur:  n.Vsn[<span class="number">2</span>],</span><br><span class="line">				DMin:  n.Vsn[<span class="number">3</span>],</span><br><span class="line">				DMax:  n.Vsn[<span class="number">4</span>],</span><br><span class="line">				DCur:  n.Vsn[<span class="number">5</span>],</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err := m.config.Merge.NotifyMerge(nodes); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Merge the membership state</span></span><br><span class="line">	m.mergeState(remoteNodes)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Invoke the delegate for user state</span></span><br><span class="line">	<span class="keyword">if</span> userBuf != <span class="literal">nil</span> &amp;&amp; m.config.Delegate != <span class="literal">nil</span> &#123;</span><br><span class="line">		m.config.Delegate.MergeRemoteState(userBuf, join)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码来自github.com/hashicorp/memberlist/state.go</span></span><br><span class="line"><span class="comment">// mergeState is invoked by the network layer when we get a Push/Pull</span></span><br><span class="line"><span class="comment">// state transfer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">mergeState</span><span class="params">(remote []pushNodeState)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> _, r := <span class="keyword">range</span> remote &#123;</span><br><span class="line">		<span class="keyword">switch</span> r.State &#123;</span><br><span class="line">		<span class="keyword">case</span> StateAlive:</span><br><span class="line">			a := alive&#123;</span><br><span class="line">				Incarnation: r.Incarnation,</span><br><span class="line">				Node:        r.Name,</span><br><span class="line">				Addr:        r.Addr,</span><br><span class="line">				Port:        r.Port,</span><br><span class="line">				Meta:        r.Meta,</span><br><span class="line">				Vsn:         r.Vsn,</span><br><span class="line">			&#125;</span><br><span class="line">			m.aliveNode(&amp;a, <span class="literal">nil</span>, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> StateLeft:</span><br><span class="line">			d := dead&#123;Incarnation: r.Incarnation, Node: r.Name, From: r.Name&#125;</span><br><span class="line">			m.deadNode(&amp;d)</span><br><span class="line">		<span class="keyword">case</span> StateDead:</span><br><span class="line">			<span class="comment">// If the remote node believes a node is dead, we prefer to</span></span><br><span class="line">			<span class="comment">// suspect that node instead of declaring it dead instantly</span></span><br><span class="line">			<span class="keyword">fallthrough</span></span><br><span class="line">		<span class="keyword">case</span> StateSuspect:</span><br><span class="line">			s := suspect&#123;Incarnation: r.Incarnation, Node: r.Name, From: m.config.Name&#125;</span><br><span class="line">			m.suspectNode(&amp;s)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>存在四种状态处理：</p>
<ul>
<li>StateAlive</li>
<li>StateLeft</li>
<li>StateDead/StateSuspect</li>
</ul>
<p>这几种状态的处理在后面说</p>
<p><strong>到这里小结一下，tcp链接，主要处理节点状态信息的同步与更新。</strong></p>
<h5 id="UDP-处理"><a href="#UDP-处理" class="headerlink" title="UDP 处理"></a>UDP 处理</h5><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码来自github.com/hashicorp/memberlist/net.go</span></span><br><span class="line"><span class="comment">// packetListen is a long running goroutine that pulls packets out of the</span></span><br><span class="line"><span class="comment">// transport and hands them off for processing.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">packetListen</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> packet := &lt;-m.transport.PacketCh():</span><br><span class="line">			m.ingestPacket(packet.Buf, packet.From, packet.Timestamp)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> &lt;-m.shutdownCh:</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">ingestPacket</span><span class="params">(buf []<span class="keyword">byte</span>, from net.Addr, timestamp time.Time)</span></span> &#123;</span><br><span class="line">	<span class="comment">// Check if encryption is enabled</span></span><br><span class="line">	<span class="keyword">if</span> m.config.EncryptionEnabled() &#123;</span><br><span class="line">		<span class="comment">// Decrypt the payload</span></span><br><span class="line">    <span class="comment">// 读取数据</span></span><br><span class="line">		plain, err := decryptPayload(m.config.Keyring.GetKeys(), buf, <span class="literal">nil</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> !m.config.GossipVerifyIncoming &#123;</span><br><span class="line">				<span class="comment">// Treat the message as plaintext</span></span><br><span class="line">				plain = buf</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				m.logger.Printf(<span class="string">"[ERR] memberlist: Decrypt packet failed: %v %s"</span>, err, LogAddress(from))</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Continue processing the plaintext buffer</span></span><br><span class="line">		buf = plain</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// See if there's a checksum included to verify the contents of the message</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(buf) &gt;= <span class="number">5</span> &amp;&amp; messageType(buf[<span class="number">0</span>]) == hasCrcMsg &#123;</span><br><span class="line">		crc := crc32.ChecksumIEEE(buf[<span class="number">5</span>:])</span><br><span class="line">		expected := binary.BigEndian.Uint32(buf[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line">		<span class="keyword">if</span> crc != expected &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[WARN] memberlist: Got invalid checksum for UDP packet: %x, %x"</span>, crc, expected)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">    <span class="comment">// 处理函数</span></span><br><span class="line">		m.handleCommand(buf[<span class="number">5</span>:], from, timestamp)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		m.handleCommand(buf, from, timestamp)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="handleCommand"><a href="#handleCommand" class="headerlink" title="handleCommand"></a>handleCommand</h6><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">handleCommand</span><span class="params">(buf []<span class="keyword">byte</span>, from net.Addr, timestamp time.Time)</span></span> &#123;</span><br><span class="line">	<span class="comment">// Decode the message type</span></span><br><span class="line">  <span class="comment">// 解码消息类型</span></span><br><span class="line">	msgType := messageType(buf[<span class="number">0</span>])</span><br><span class="line">	buf = buf[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Switch on the msgType</span></span><br><span class="line">  <span class="comment">// 根据消息不同消息类型，进行不同的处理</span></span><br><span class="line">	<span class="keyword">switch</span> msgType &#123;</span><br><span class="line">	<span class="keyword">case</span> compoundMsg:</span><br><span class="line">		m.handleCompound(buf, from, timestamp)</span><br><span class="line">	<span class="keyword">case</span> compressMsg:</span><br><span class="line">		m.handleCompressed(buf, from, timestamp)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> pingMsg:</span><br><span class="line">		m.handlePing(buf, from)</span><br><span class="line">	<span class="keyword">case</span> indirectPingMsg:</span><br><span class="line">		m.handleIndirectPing(buf, from)</span><br><span class="line">	<span class="keyword">case</span> ackRespMsg:</span><br><span class="line">		m.handleAck(buf, from, timestamp)</span><br><span class="line">	<span class="keyword">case</span> nackRespMsg:</span><br><span class="line">		m.handleNack(buf, from)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> suspectMsg:</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> aliveMsg:</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> deadMsg:</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> userMsg:</span><br><span class="line">		<span class="comment">// Determine the message queue, prioritize alive</span></span><br><span class="line">		queue := m.lowPriorityMsgQueue</span><br><span class="line">		<span class="keyword">if</span> msgType == aliveMsg &#123;</span><br><span class="line">			queue = m.highPriorityMsgQueue</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Check for overflow and append if not full</span></span><br><span class="line">		m.msgQueueLock.Lock()</span><br><span class="line">		<span class="keyword">if</span> queue.Len() &gt;= m.config.HandoffQueueDepth &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[WARN] memberlist: handler queue full, dropping message (%d) %s"</span>, msgType, LogAddress(from))</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			queue.PushBack(msgHandoff&#123;msgType, buf, from&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">		m.msgQueueLock.Unlock()</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Notify of pending message</span></span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> m.handoffCh &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;:</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		m.logger.Printf(<span class="string">"[ERR] memberlist: msg type (%d) not supported %s"</span>, msgType, LogAddress(from))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>compoundMsg：处理函数为handleCompound，多个消息聚合在一起，进行分割，然后再重新调用handleCommand.</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">handleCompound</span><span class="params">(buf []<span class="keyword">byte</span>, from net.Addr, timestamp time.Time)</span></span> &#123;</span><br><span class="line">	<span class="comment">// Decode the parts</span></span><br><span class="line">  <span class="comment">// 消息分割</span></span><br><span class="line">	trunc, parts, err := decodeCompoundMessage(buf)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		m.logger.Printf(<span class="string">"[ERR] memberlist: Failed to decode compound request: %s %s"</span>, err, LogAddress(from))</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Log any truncation</span></span><br><span class="line">	<span class="keyword">if</span> trunc &gt; <span class="number">0</span> &#123;</span><br><span class="line">		m.logger.Printf(<span class="string">"[WARN] memberlist: Compound request had %d truncated messages %s"</span>, trunc, LogAddress(from))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Handle each message</span></span><br><span class="line">	<span class="keyword">for</span> _, part := <span class="keyword">range</span> parts &#123;</span><br><span class="line">    <span class="comment">// 分割的消息重新调用handleCommand</span></span><br><span class="line">		m.handleCommand(part, from, timestamp)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>pingMsg：处理函数为：handlePing;</p>
</li>
<li><p>indirectPingMsg: 处理函数为handleindirectPing;</p>
</li>
<li><p>ackRespMsg: 处理函数为handleAck</p>
</li>
<li><p>suspectMsg/aliveMsg/deadMsg/userMsg: 处理函数为：</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">	<span class="comment">// Determine the message queue, prioritize alive</span></span><br><span class="line">	queue := m.lowPriorityMsgQueue</span><br><span class="line">	<span class="keyword">if</span> msgType == aliveMsg &#123;</span><br><span class="line">		queue = m.highPriorityMsgQueue</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">// Check for overflow and append if not full</span></span><br><span class="line">	m.msgQueueLock.Lock()</span><br><span class="line">	<span class="keyword">if</span> queue.Len() &gt;= m.config.HandoffQueueDepth &#123;</span><br><span class="line">		m.logger.Printf(<span class="string">"[WARN] memberlist: handler queue full, dropping message (%d) %s"</span>, msgType, LogAddress(from))</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		queue.PushBack(msgHandoff&#123;msgType, buf, from&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	m.msgQueueLock.Unlock()</span><br><span class="line">  </span><br><span class="line">	<span class="comment">// Notify of pending message</span></span><br><span class="line">	<span class="keyword">select</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> m.handoffCh &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;:</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">	m.logger.Printf(<span class="string">"[ERR] memberlist: msg type (%d) not supported %s"</span>, msgType, LogAddress(from))</span><br></pre></td></tr></table></figure>
<p>m.handoffCh &lt;- struct{}{}，是否还记得上面开启TCP和UDP的时候，还有一个协程运行着：</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> m.streamListen()</span><br><span class="line"><span class="keyword">go</span> m.packetListen()</span><br><span class="line"><span class="keyword">go</span> m.packetHandler()</span><br></pre></td></tr></table></figure>
<p><code>go m.packetHandler()</code></p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packetHandler is a long running goroutine that processes messages received</span></span><br><span class="line"><span class="comment">// over the packet interface, but is decoupled from the listener to avoid</span></span><br><span class="line"><span class="comment">// blocking the listener which may cause ping/ack messages to be delayed.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">packetHandler</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-m.handoffCh:</span><br><span class="line">			<span class="keyword">for</span> &#123;</span><br><span class="line">				msg, ok := m.getNextMessage()</span><br><span class="line">				<span class="keyword">if</span> !ok &#123;</span><br><span class="line">					<span class="keyword">break</span></span><br><span class="line">				&#125;</span><br><span class="line">				msgType := msg.msgType</span><br><span class="line">				buf := msg.buf</span><br><span class="line">				from := msg.from</span><br><span class="line"></span><br><span class="line">				<span class="keyword">switch</span> msgType &#123;</span><br><span class="line">				<span class="keyword">case</span> suspectMsg:</span><br><span class="line">					m.handleSuspect(buf, from)</span><br><span class="line">				<span class="keyword">case</span> aliveMsg:</span><br><span class="line">					m.handleAlive(buf, from)</span><br><span class="line">				<span class="keyword">case</span> deadMsg:</span><br><span class="line">					m.handleDead(buf, from)</span><br><span class="line">				<span class="keyword">case</span> userMsg:</span><br><span class="line">					m.handleUser(buf, from)</span><br><span class="line">				<span class="keyword">default</span>:</span><br><span class="line">					m.logger.Printf(<span class="string">"[ERR] memberlist: Message type (%d) not supported %s (packet handler)"</span>, msgType, LogAddress(from))</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> &lt;-m.shutdownCh:</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里监听 m.handoffCh，当UDP有消息传过来时，分别处理以下类型的消息，就不展开了</p>
</li>
<li><p>suspectMsg</p>
</li>
<li><p>aliveMsg</p>
</li>
<li><p>deadMsg</p>
</li>
<li><p>userMsg</p>
</li>
</ul>
<p><strong>udp服务提供了一些基本的Command操作</strong></p>
<h4 id="schedule"><a href="#schedule" class="headerlink" title="schedule"></a>schedule</h4><ul>
<li>Schedule函数开启probe协程、pushpull协程、gossip协程</li>
<li>probe协程：进行节点状态维护</li>
<li>push/pull协程：进行节点状态、用户数据同步</li>
<li>gossip协程：进行udp广播发送消息。</li>
</ul>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Schedule is used to ensure the Tick is performed periodically. This</span></span><br><span class="line"><span class="comment">// function is safe to call multiple times. If the memberlist is already</span></span><br><span class="line"><span class="comment">// scheduled, then it won't do anything.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">schedule</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m.tickerLock.Lock()</span><br><span class="line">	<span class="keyword">defer</span> m.tickerLock.Unlock()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// If we already have tickers, then don't do anything, since we're</span></span><br><span class="line">	<span class="comment">// scheduled</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(m.tickers) &gt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create the stop tick channel, a blocking channel. We close this</span></span><br><span class="line">	<span class="comment">// when we should stop the tickers.</span></span><br><span class="line">	stopCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create a new probeTicker</span></span><br><span class="line">  <span class="comment">// 开启了probe协程</span></span><br><span class="line">	<span class="keyword">if</span> m.config.ProbeInterval &gt; <span class="number">0</span> &#123;</span><br><span class="line">		t := time.NewTicker(m.config.ProbeInterval)</span><br><span class="line">		<span class="keyword">go</span> m.triggerFunc(m.config.ProbeInterval, t.C, stopCh, m.probe)</span><br><span class="line">		m.tickers = <span class="built_in">append</span>(m.tickers, t)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create a push pull ticker if needed</span></span><br><span class="line">  <span class="comment">// 开启了pushpull协程</span></span><br><span class="line">	<span class="keyword">if</span> m.config.PushPullInterval &gt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">go</span> m.pushPullTrigger(stopCh)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create a gossip ticker if needed</span></span><br><span class="line">  <span class="comment">// 开启了gossip协程</span></span><br><span class="line">	<span class="keyword">if</span> m.config.GossipInterval &gt; <span class="number">0</span> &amp;&amp; m.config.GossipNodes &gt; <span class="number">0</span> &#123;</span><br><span class="line">		t := time.NewTicker(m.config.GossipInterval)</span><br><span class="line">		<span class="keyword">go</span> m.triggerFunc(m.config.GossipInterval, t.C, stopCh, m.gossip)</span><br><span class="line">		m.tickers = <span class="built_in">append</span>(m.tickers, t)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// If we made any tickers, then record the stopTick channel for</span></span><br><span class="line">	<span class="comment">// later.</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(m.tickers) &gt; <span class="number">0</span> &#123;</span><br><span class="line">		m.stopTick = stopCh</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里面一共开启了三个定时任务，probe、pushpull、gossip</p>
<h5 id="probe"><a href="#probe" class="headerlink" title="probe"></a>probe</h5><blockquote>
<p>当节点启动后，每隔一定时间间隔，会选取一个节点对其发送PING消息，当PING消息失败后，会随机选取 IndirectChecks 个节点发起间接PING的请求和直接更其再发起一个tcp PING消息。 收到间接PING请求的节点会根据请求中的地址发起一个PING消息，将PING的结果返回给间接请求的源节点。 如果探测超时之间内，本节点没有收到任何一个要探测节点的ACK消息，则标记要探测的节点状态为suspect。</p>
<p><a href="https://www.colabug.com/1010287.html" target="_blank" rel="external">https://www.colabug.com/1010287.html</a></p>
</blockquote>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Tick is used to perform a single round of failure detection and gossip</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">probe</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// Track the number of indexes we've considered probing</span></span><br><span class="line">	numCheck := <span class="number">0</span></span><br><span class="line">START:</span><br><span class="line">	m.nodeLock.RLock()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Make sure we don't wrap around infinitely</span></span><br><span class="line">	<span class="keyword">if</span> numCheck &gt;= <span class="built_in">len</span>(m.nodes) &#123;</span><br><span class="line">		m.nodeLock.RUnlock()</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Handle the wrap around case</span></span><br><span class="line">  <span class="comment">// probeIndex是node索引，循环进行探测</span></span><br><span class="line">	<span class="keyword">if</span> m.probeIndex &gt;= <span class="built_in">len</span>(m.nodes) &#123;</span><br><span class="line">		m.nodeLock.RUnlock()</span><br><span class="line">		m.resetNodes()</span><br><span class="line">		m.probeIndex = <span class="number">0</span></span><br><span class="line">		numCheck++</span><br><span class="line">		<span class="keyword">goto</span> START</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Determine if we should probe this node</span></span><br><span class="line">	skip := <span class="literal">false</span></span><br><span class="line">	<span class="keyword">var</span> node nodeState</span><br><span class="line"></span><br><span class="line">	node = *m.nodes[m.probeIndex]</span><br><span class="line">	<span class="keyword">if</span> node.Name == m.config.Name &#123;</span><br><span class="line">		skip = <span class="literal">true</span> <span class="comment">//当node在配置文件中</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> node.DeadOrLeft() &#123;</span><br><span class="line">		skip = <span class="literal">true</span> <span class="comment">//当node为dead时候</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Potentially skip</span></span><br><span class="line">	m.nodeLock.RUnlock()</span><br><span class="line">	m.probeIndex++</span><br><span class="line">	<span class="keyword">if</span> skip &#123; <span class="comment">//node在配置文件中或者为dead时候则跳过</span></span><br><span class="line">		numCheck++</span><br><span class="line">		<span class="keyword">goto</span> START</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Probe the specific node</span></span><br><span class="line">	m.probeNode(&amp;node)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// probeNode handles a single round of failure checking on a node.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">probeNode</span><span class="params">(node *nodeState)</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> metrics.MeasureSince([]<span class="keyword">string</span>&#123;<span class="string">"memberlist"</span>, <span class="string">"probeNode"</span>&#125;, time.Now())</span><br><span class="line"></span><br><span class="line">	<span class="comment">// We use our health awareness to scale the overall probe interval, so we</span></span><br><span class="line">	<span class="comment">// slow down if we detect problems. The ticker that calls us can handle</span></span><br><span class="line">	<span class="comment">// us running over the base interval, and will skip missed ticks.</span></span><br><span class="line">	probeInterval := m.awareness.ScaleTimeout(m.config.ProbeInterval)</span><br><span class="line">	<span class="keyword">if</span> probeInterval &gt; m.config.ProbeInterval &#123;</span><br><span class="line">		metrics.IncrCounter([]<span class="keyword">string</span>&#123;<span class="string">"memberlist"</span>, <span class="string">"degraded"</span>, <span class="string">"probe"</span>&#125;, <span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Prepare a ping message and setup an ack handler.</span></span><br><span class="line">	selfAddr, selfPort := m.getAdvertise()</span><br><span class="line">	ping := ping&#123;</span><br><span class="line">		SeqNo:      m.nextSeqNo(),</span><br><span class="line">		Node:       node.Name,</span><br><span class="line">		SourceAddr: selfAddr,</span><br><span class="line">		SourcePort: selfPort,</span><br><span class="line">		SourceNode: m.config.Name,</span><br><span class="line">	&#125;</span><br><span class="line">	ackCh := <span class="built_in">make</span>(<span class="keyword">chan</span> ackMessage, m.config.IndirectChecks+<span class="number">1</span>)</span><br><span class="line">	nackCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, m.config.IndirectChecks+<span class="number">1</span>)</span><br><span class="line">	m.setProbeChannels(ping.SeqNo, ackCh, nackCh, probeInterval)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Mark the sent time here, which should be after any pre-processing but</span></span><br><span class="line">	<span class="comment">// before system calls to do the actual send. This probably over-reports</span></span><br><span class="line">	<span class="comment">// a bit, but it's the best we can do. We had originally put this right</span></span><br><span class="line">	<span class="comment">// after the I/O, but that would sometimes give negative RTT measurements</span></span><br><span class="line">	<span class="comment">// which was not desirable.</span></span><br><span class="line">	sent := time.Now()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Send a ping to the node. If this node looks like it's suspect or dead,</span></span><br><span class="line">	<span class="comment">// also tack on a suspect message so that it has a chance to refute as</span></span><br><span class="line">	<span class="comment">// soon as possible.</span></span><br><span class="line">	deadline := sent.Add(probeInterval)</span><br><span class="line">	addr := node.Address()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Arrange for our self-awareness to get updated.</span></span><br><span class="line">	<span class="keyword">var</span> awarenessDelta <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		m.awareness.ApplyDelta(awarenessDelta)</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">if</span> node.State == StateAlive &#123;</span><br><span class="line">    <span class="comment">// 发送pingMsg</span></span><br><span class="line">		<span class="keyword">if</span> err := m.encodeAndSendMsg(node.FullAddress(), pingMsg, &amp;ping); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[ERR] memberlist: Failed to send ping: %s"</span>, err)</span><br><span class="line">			<span class="keyword">if</span> failedRemote(err) &#123;</span><br><span class="line">				<span class="keyword">goto</span> HANDLE_REMOTE_FAILURE</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">HANDLE_REMOTE_FAILURE:</span><br><span class="line">	<span class="comment">// Get some random live nodes.</span></span><br><span class="line">	m.nodeLock.RLock()</span><br><span class="line">  <span class="comment">// 随机获取一些节点</span></span><br><span class="line">	kNodes := kRandomNodes(m.config.IndirectChecks, m.nodes, <span class="function"><span class="keyword">func</span><span class="params">(n *nodeState)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> n.Name == m.config.Name ||</span><br><span class="line">			n.Name == node.Name ||</span><br><span class="line">			n.State != StateAlive</span><br><span class="line">	&#125;)</span><br><span class="line">	m.nodeLock.RUnlock()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Attempt an indirect ping.</span></span><br><span class="line">	expectedNacks := <span class="number">0</span></span><br><span class="line">	selfAddr, selfPort = m.getAdvertise()</span><br><span class="line">	ind := indirectPingReq&#123;</span><br><span class="line">		SeqNo:      ping.SeqNo,</span><br><span class="line">		Target:     node.Addr,</span><br><span class="line">		Port:       node.Port,</span><br><span class="line">		Node:       node.Name,</span><br><span class="line">		SourceAddr: selfAddr,</span><br><span class="line">		SourcePort: selfPort,</span><br><span class="line">		SourceNode: m.config.Name,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, peer := <span class="keyword">range</span> kNodes &#123;</span><br><span class="line">		<span class="comment">// We only expect nack to be sent from peers who understand</span></span><br><span class="line">		<span class="comment">// version 4 of the protocol.</span></span><br><span class="line">		<span class="keyword">if</span> ind.Nack = peer.PMax &gt;= <span class="number">4</span>; ind.Nack &#123;</span><br><span class="line">			expectedNacks++</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送indirectPingMsg</span></span><br><span class="line">		<span class="keyword">if</span> err := m.encodeAndSendMsg(peer.FullAddress(), indirectPingMsg, &amp;ind); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[ERR] memberlist: Failed to send indirect ping: %s"</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Also make an attempt to contact the node directly over TCP. This</span></span><br><span class="line">	<span class="comment">// helps prevent confused clients who get isolated from UDP traffic</span></span><br><span class="line">	<span class="comment">// but can still speak TCP (which also means they can possibly report</span></span><br><span class="line">	<span class="comment">// misinformation to other nodes via anti-entropy), avoiding flapping in</span></span><br><span class="line">	<span class="comment">// the cluster.</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">// This is a little unusual because we will attempt a TCP ping to any</span></span><br><span class="line">	<span class="comment">// member who understands version 3 of the protocol, regardless of</span></span><br><span class="line">	<span class="comment">// which protocol version we are speaking. That's why we've included a</span></span><br><span class="line">	<span class="comment">// config option to turn this off if desired.</span></span><br><span class="line">	fallbackCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	disableTcpPings := m.config.DisableTcpPings ||</span><br><span class="line">		(m.config.DisableTcpPingsForNode != <span class="literal">nil</span> &amp;&amp; m.config.DisableTcpPingsForNode(node.Name))</span><br><span class="line">	<span class="keyword">if</span> (!disableTcpPings) &amp;&amp; (node.PMax &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			<span class="keyword">defer</span> <span class="built_in">close</span>(fallbackCh)</span><br><span class="line">			didContact, err := m.sendPingAndWaitForAck(node.FullAddress(), ping, deadline)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				m.logger.Printf(<span class="string">"[ERR] memberlist: Failed fallback ping: %s"</span>, err)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				fallbackCh &lt;- didContact</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;()</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">close</span>(fallbackCh)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Wait for the acks or timeout. Note that we don't check the fallback</span></span><br><span class="line">	<span class="comment">// channel here because we want to issue a warning below if that's the</span></span><br><span class="line">	<span class="comment">// *only* way we hear back from the peer, so we have to let this time</span></span><br><span class="line">	<span class="comment">// out first to allow the normal UDP-based acks to come in.</span></span><br><span class="line">	<span class="keyword">select</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> v := &lt;-ackCh:</span><br><span class="line">		<span class="keyword">if</span> v.Complete == <span class="literal">true</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Finally, poll the fallback channel. The timeouts are set such that</span></span><br><span class="line">	<span class="comment">// the channel will have something or be closed without having to wait</span></span><br><span class="line">	<span class="comment">// any additional time here.</span></span><br><span class="line">	<span class="keyword">for</span> didContact := <span class="keyword">range</span> fallbackCh &#123;</span><br><span class="line">		<span class="keyword">if</span> didContact &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[WARN] memberlist: Was able to connect to %s but other probes failed, network may be misconfigured"</span>, node.Name)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Update our self-awareness based on the results of this failed probe.</span></span><br><span class="line">	<span class="comment">// If we don't have peers who will send nacks then we penalize for any</span></span><br><span class="line">	<span class="comment">// failed probe as a simple health metric. If we do have peers to nack</span></span><br><span class="line">	<span class="comment">// verify, then we can use that as a more sophisticated measure of self-</span></span><br><span class="line">	<span class="comment">// health because we assume them to be working, and they can help us</span></span><br><span class="line">	<span class="comment">// decide if the probed node was really dead or if it was something wrong</span></span><br><span class="line">	<span class="comment">// with ourselves.</span></span><br><span class="line">	awarenessDelta = <span class="number">0</span></span><br><span class="line">	<span class="keyword">if</span> expectedNacks &gt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> nackCount := <span class="built_in">len</span>(nackCh); nackCount &lt; expectedNacks &#123;</span><br><span class="line">			awarenessDelta += (expectedNacks - nackCount)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		awarenessDelta += <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// No acks received from target, suspect it as failed.</span></span><br><span class="line">	m.logger.Printf(<span class="string">"[INFO] memberlist: Suspect %s has failed, no acks received"</span>, node.Name)</span><br><span class="line">  <span class="comment">//若探测结果失败则将node设置为suspect</span></span><br><span class="line">	s := suspect&#123;Incarnation: node.Incarnation, Node: node.Name, From: m.config.Name&#125;</span><br><span class="line">	m.suspectNode(&amp;s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="pushpull"><a href="#pushpull" class="headerlink" title="pushpull"></a>pushpull</h5><blockquote>
<p>每隔一个时间间隔，随机选取一个节点，跟它建立tcp连接，然后将本地的全部节点 状态、用户数据发送过去，然后对端将其掌握的全部节点状态、用户数据发送回来，然后完成2份数据的合并。 此动作可以加速集群内信息的收敛速度。</p>
<p><a href="https://www.jianshu.com/p/e2173b44db65" target="_blank" rel="external">https://www.jianshu.com/p/e2173b44db65</a></p>
</blockquote>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">pushPullTrigger</span><span class="params">(stop &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	interval := m.config.PushPullInterval</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Use a random stagger to avoid syncronizing</span></span><br><span class="line">	randStagger := time.Duration(<span class="keyword">uint64</span>(rand.Int63()) % <span class="keyword">uint64</span>(interval))</span><br><span class="line">	<span class="keyword">select</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> &lt;-time.After(randStagger):</span><br><span class="line">	<span class="keyword">case</span> &lt;-stop:</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Tick using a dynamic timer</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		tickTime := pushPullScale(interval, m.estNumNodes())</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-time.After(tickTime):</span><br><span class="line">			m.pushPull()</span><br><span class="line">		<span class="keyword">case</span> &lt;-stop:</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">pushPull</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// Get a random live node</span></span><br><span class="line">	m.nodeLock.RLock()</span><br><span class="line">  <span class="comment">// 随机选取1个节点</span></span><br><span class="line">	nodes := kRandomNodes(<span class="number">1</span>, m.nodes, <span class="function"><span class="keyword">func</span><span class="params">(n *nodeState)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> n.Name == m.config.Name ||</span><br><span class="line">			n.State != StateAlive</span><br><span class="line">	&#125;)</span><br><span class="line">	m.nodeLock.RUnlock()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// If no nodes, bail</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(nodes) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	node := nodes[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Attempt a push pull</span></span><br><span class="line">  <span class="comment">// 调用pushPullNode</span></span><br><span class="line">	<span class="keyword">if</span> err := m.pushPullNode(node.FullAddress(), <span class="literal">false</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		m.logger.Printf(<span class="string">"[ERR] memberlist: Push/Pull with %s failed: %s"</span>, node.Name, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面随机选取一个节点</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pushPullNode does a complete state exchange with a specific node.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">pushPullNode</span><span class="params">(a Address, join <span class="keyword">bool</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> metrics.MeasureSince([]<span class="keyword">string</span>&#123;<span class="string">"memberlist"</span>, <span class="string">"pushPullNode"</span>&#125;, time.Now())</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Attempt to send and receive with the node</span></span><br><span class="line">  <span class="comment">// 发送并获取状态信息</span></span><br><span class="line">	remote, userState, err := m.sendAndReceiveState(a, join)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合并更新节点状态信息</span></span><br><span class="line">	<span class="keyword">if</span> err := m.mergeRemoteState(join, remote, userState); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sendAndReceiveState is used to initiate a push/pull over a stream with a</span></span><br><span class="line"><span class="comment">// remote host.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">sendAndReceiveState</span><span class="params">(a Address, join <span class="keyword">bool</span>)</span> <span class="params">([]pushNodeState, []<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a.Name == <span class="string">""</span> &amp;&amp; m.config.RequireNodeNames &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, errNodeNamesAreRequired</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Attempt to connect</span></span><br><span class="line">  <span class="comment">// 创建tcp client链接</span></span><br><span class="line">	conn, err := m.transport.DialAddressTimeout(a, m.config.TCPTimeout)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> conn.Close()</span><br><span class="line">	m.logger.Printf(<span class="string">"[DEBUG] memberlist: Initiating push/pull sync with: %s %s"</span>, a.Name, conn.RemoteAddr())</span><br><span class="line">	metrics.IncrCounter([]<span class="keyword">string</span>&#123;<span class="string">"memberlist"</span>, <span class="string">"tcp"</span>, <span class="string">"connect"</span>&#125;, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Send our state</span></span><br><span class="line">  <span class="comment">// 发送本地节点状态信息</span></span><br><span class="line">	<span class="keyword">if</span> err := m.sendLocalState(conn, join); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	conn.SetDeadline(time.Now().Add(m.config.TCPTimeout))</span><br><span class="line">	msgType, bufConn, dec, err := m.readStream(conn)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> msgType == errMsg &#123;</span><br><span class="line">		<span class="keyword">var</span> resp errResp</span><br><span class="line">		<span class="keyword">if</span> err := dec.Decode(&amp;resp); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">"remote error: %v"</span>, resp.Error)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Quit if not push/pull</span></span><br><span class="line">	<span class="keyword">if</span> msgType != pushPullMsg &#123;</span><br><span class="line">		err := fmt.Errorf(<span class="string">"received invalid msgType (%d), expected pushPullMsg (%d) %s"</span>, msgType, pushPullMsg, LogConn(conn))</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Read remote state</span></span><br><span class="line">  <span class="comment">// 读取Remote节点状态信息并返回</span></span><br><span class="line">	_, remoteNodes, userState, err := m.readRemoteState(bufConn, dec)</span><br><span class="line">	<span class="keyword">return</span> remoteNodes, userState, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="gossip"><a href="#gossip" class="headerlink" title="gossip"></a>gossip</h5><blockquote>
<p>节点通过udp协议向K个节点发送消息，节点从广播队列里面获取消息，广播队列里的消息发送失败超过一定次数后，消息就会被丢弃。发送次数参考Config 里的 RetransmitMul的注释。</p>
<p><a href="https://www.jianshu.com/p/e2173b44db65" target="_blank" rel="external">https://www.jianshu.com/p/e2173b44db65</a></p>
</blockquote>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gossip is invoked every GossipInterval period to broadcast our gossip</span></span><br><span class="line"><span class="comment">// messages to a few random nodes.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">gossip</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> metrics.MeasureSince([]<span class="keyword">string</span>&#123;<span class="string">"memberlist"</span>, <span class="string">"gossip"</span>&#125;, time.Now())</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Get some random live, suspect, or recently dead nodes</span></span><br><span class="line">	m.nodeLock.RLock()</span><br><span class="line">  <span class="comment">// 随机获取gossipNodes配置项个数的节点</span></span><br><span class="line">	kNodes := kRandomNodes(m.config.GossipNodes, m.nodes, <span class="function"><span class="keyword">func</span><span class="params">(n *nodeState)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> n.Name == m.config.Name &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span> n.State &#123;</span><br><span class="line">		<span class="keyword">case</span> StateAlive, StateSuspect:</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> StateDead:</span><br><span class="line">			<span class="keyword">return</span> time.Since(n.StateChange) &gt; m.config.GossipToTheDeadTime</span><br><span class="line"></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">	m.nodeLock.RUnlock()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Compute the bytes available</span></span><br><span class="line">	bytesAvail := m.config.UDPBufferSize - compoundHeaderOverhead</span><br><span class="line">	<span class="keyword">if</span> m.config.EncryptionEnabled() &#123;</span><br><span class="line">		bytesAvail -= encryptOverhead(m.encryptionVersion())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, node := <span class="keyword">range</span> kNodes &#123;</span><br><span class="line">		<span class="comment">// Get any pending broadcasts</span></span><br><span class="line">    <span class="comment">// 获取能够广播消息大小</span></span><br><span class="line">		msgs := m.getBroadcasts(compoundOverhead, bytesAvail)</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(msgs) == <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		addr := node.Address()</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(msgs) == <span class="number">1</span> &#123;</span><br><span class="line">			<span class="comment">// Send single message as is</span></span><br><span class="line">			<span class="keyword">if</span> err := m.rawSendMsgPacket(node.FullAddress(), &amp;node.Node, msgs[<span class="number">0</span>]); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				m.logger.Printf(<span class="string">"[ERR] memberlist: Failed to send gossip to %s: %s"</span>, addr, err)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// Otherwise create and send a compound message</span></span><br><span class="line">      <span class="comment">// 创建一个合并的消息</span></span><br><span class="line">			compound := makeCompoundMessage(msgs)</span><br><span class="line">      <span class="comment">// 发送消息</span></span><br><span class="line">			<span class="keyword">if</span> err := m.rawSendMsgPacket(node.FullAddress(), &amp;node.Node, compound.Bytes()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				m.logger.Printf(<span class="string">"[ERR] memberlist: Failed to send gossip to %s: %s"</span>, addr, err)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因此将节点的状态分为3种</p>
<ul>
<li><p>alive: 用于标识活跃节点</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// aliveNode is invoked by the network layer when we get a message about a</span></span><br><span class="line"><span class="comment">// live node.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">aliveNode</span><span class="params">(a *alive, notify <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, bootstrap <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">	m.nodeLock.Lock()</span><br><span class="line">	<span class="keyword">defer</span> m.nodeLock.Unlock()</span><br><span class="line">	state, ok := m.nodeMap[a.Node]</span><br><span class="line"></span><br><span class="line">	<span class="comment">// It is possible that during a Leave(), there is already an aliveMsg</span></span><br><span class="line">	<span class="comment">// in-queue to be processed but blocked by the locks above. If we let</span></span><br><span class="line">	<span class="comment">// that aliveMsg process, it'll cause us to re-join the cluster. This</span></span><br><span class="line">	<span class="comment">// ensures that we don't.</span></span><br><span class="line">	<span class="keyword">if</span> m.hasLeft() &amp;&amp; a.Node == m.config.Name &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(a.Vsn) &gt;= <span class="number">3</span> &#123;</span><br><span class="line">		pMin := a.Vsn[<span class="number">0</span>]</span><br><span class="line">		pMax := a.Vsn[<span class="number">1</span>]</span><br><span class="line">		pCur := a.Vsn[<span class="number">2</span>]</span><br><span class="line">		<span class="keyword">if</span> pMin == <span class="number">0</span> || pMax == <span class="number">0</span> || pMin &gt; pMax &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[WARN] memberlist: Ignoring an alive message for '%s' (%v:%d) because protocol version(s) are wrong: %d &lt;= %d &lt;= %d should be &gt;0"</span>, a.Node, net.IP(a.Addr), a.Port, pMin, pCur, pMax)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Invoke the Alive delegate if any. This can be used to filter out</span></span><br><span class="line">	<span class="comment">// alive messages based on custom logic. For example, using a cluster name.</span></span><br><span class="line">	<span class="comment">// Using a merge delegate is not enough, as it is possible for passive</span></span><br><span class="line">	<span class="comment">// cluster merging to still occur.</span></span><br><span class="line">	<span class="keyword">if</span> m.config.Alive != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(a.Vsn) &lt; <span class="number">6</span> &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[WARN] memberlist: ignoring alive message for '%s' (%v:%d) because Vsn is not present"</span>,</span><br><span class="line">				a.Node, net.IP(a.Addr), a.Port)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		node := &amp;Node&#123;</span><br><span class="line">			Name: a.Node,</span><br><span class="line">			Addr: a.Addr,</span><br><span class="line">			Port: a.Port,</span><br><span class="line">			Meta: a.Meta,</span><br><span class="line">			PMin: a.Vsn[<span class="number">0</span>],</span><br><span class="line">			PMax: a.Vsn[<span class="number">1</span>],</span><br><span class="line">			PCur: a.Vsn[<span class="number">2</span>],</span><br><span class="line">			DMin: a.Vsn[<span class="number">3</span>],</span><br><span class="line">			DMax: a.Vsn[<span class="number">4</span>],</span><br><span class="line">			DCur: a.Vsn[<span class="number">5</span>],</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err := m.config.Alive.NotifyAlive(node); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[WARN] memberlist: ignoring alive message for '%s': %s"</span>,</span><br><span class="line">				a.Node, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Check if we've never seen this node before, and if not, then</span></span><br><span class="line">	<span class="comment">// store this node in our node map.</span></span><br><span class="line">	<span class="keyword">var</span> updatesNode <span class="keyword">bool</span></span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		errCon := m.config.IPAllowed(a.Addr)</span><br><span class="line">		<span class="keyword">if</span> errCon != <span class="literal">nil</span> &#123;</span><br><span class="line">			m.logger.Printf(<span class="string">"[WARN] memberlist: Rejected node %s (%v): %s"</span>, a.Node, net.IP(a.Addr), errCon)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		state = &amp;nodeState&#123;</span><br><span class="line">			Node: Node&#123;</span><br><span class="line">				Name: a.Node,</span><br><span class="line">				Addr: a.Addr,</span><br><span class="line">				Port: a.Port,</span><br><span class="line">				Meta: a.Meta,</span><br><span class="line">			&#125;,</span><br><span class="line">			State: StateDead,</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(a.Vsn) &gt; <span class="number">5</span> &#123;</span><br><span class="line">			state.PMin = a.Vsn[<span class="number">0</span>]</span><br><span class="line">			state.PMax = a.Vsn[<span class="number">1</span>]</span><br><span class="line">			state.PCur = a.Vsn[<span class="number">2</span>]</span><br><span class="line">			state.DMin = a.Vsn[<span class="number">3</span>]</span><br><span class="line">			state.DMax = a.Vsn[<span class="number">4</span>]</span><br><span class="line">			state.DCur = a.Vsn[<span class="number">5</span>]</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Add to map</span></span><br><span class="line">		m.nodeMap[a.Node] = state</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Get a random offset. This is important to ensure</span></span><br><span class="line">		<span class="comment">// the failure detection bound is low on average. If all</span></span><br><span class="line">		<span class="comment">// nodes did an append, failure detection bound would be</span></span><br><span class="line">		<span class="comment">// very high.</span></span><br><span class="line">		n := <span class="built_in">len</span>(m.nodes)</span><br><span class="line">		offset := randomOffset(n)</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Add at the end and swap with the node at the offset</span></span><br><span class="line">		m.nodes = <span class="built_in">append</span>(m.nodes, state)</span><br><span class="line">		m.nodes[offset], m.nodes[n] = m.nodes[n], m.nodes[offset]</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Update numNodes after we've added a new node</span></span><br><span class="line">		atomic.AddUint32(&amp;m.numNodes, <span class="number">1</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// Check if this address is different than the existing node unless the old node is dead.</span></span><br><span class="line">		<span class="keyword">if</span> !bytes.Equal([]<span class="keyword">byte</span>(state.Addr), a.Addr) || state.Port != a.Port &#123;</span><br><span class="line">			errCon := m.config.IPAllowed(a.Addr)</span><br><span class="line">			<span class="keyword">if</span> errCon != <span class="literal">nil</span> &#123;</span><br><span class="line">				m.logger.Printf(<span class="string">"[WARN] memberlist: Rejected IP update from %v to %v for node %s: %s"</span>, a.Node, state.Addr, net.IP(a.Addr), errCon)</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// If DeadNodeReclaimTime is configured, check if enough time has elapsed since the node died.</span></span><br><span class="line">			canReclaim := (m.config.DeadNodeReclaimTime &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">				time.Since(state.StateChange) &gt; m.config.DeadNodeReclaimTime)</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Allow the address to be updated if a dead node is being replaced.</span></span><br><span class="line">			<span class="keyword">if</span> state.State == StateLeft || (state.State == StateDead &amp;&amp; canReclaim) &#123;</span><br><span class="line">				m.logger.Printf(<span class="string">"[INFO] memberlist: Updating address for left or failed node %s from %v:%d to %v:%d"</span>,</span><br><span class="line">					state.Name, state.Addr, state.Port, net.IP(a.Addr), a.Port)</span><br><span class="line">				updatesNode = <span class="literal">true</span></span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				m.logger.Printf(<span class="string">"[ERR] memberlist: Conflicting address for %s. Mine: %v:%d Theirs: %v:%d Old state: %v"</span>,</span><br><span class="line">					state.Name, state.Addr, state.Port, net.IP(a.Addr), a.Port, state.State)</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Inform the conflict delegate if provided</span></span><br><span class="line">				<span class="keyword">if</span> m.config.Conflict != <span class="literal">nil</span> &#123;</span><br><span class="line">					other := Node&#123;</span><br><span class="line">						Name: a.Node,</span><br><span class="line">						Addr: a.Addr,</span><br><span class="line">						Port: a.Port,</span><br><span class="line">						Meta: a.Meta,</span><br><span class="line">					&#125;</span><br><span class="line">					m.config.Conflict.NotifyConflict(&amp;state.Node, &amp;other)</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Bail if the incarnation number is older, and this is not about us</span></span><br><span class="line">	isLocalNode := state.Name == m.config.Name</span><br><span class="line">	<span class="keyword">if</span> a.Incarnation &lt;= state.Incarnation &amp;&amp; !isLocalNode &amp;&amp; !updatesNode &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Bail if strictly less and this is about us</span></span><br><span class="line">	<span class="keyword">if</span> a.Incarnation &lt; state.Incarnation &amp;&amp; isLocalNode &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Clear out any suspicion timer that may be in effect.</span></span><br><span class="line">	<span class="built_in">delete</span>(m.nodeTimers, a.Node)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Store the old state and meta data</span></span><br><span class="line">	oldState := state.State</span><br><span class="line">	oldMeta := state.Meta</span><br><span class="line"></span><br><span class="line">	<span class="comment">// If this is us we need to refute, otherwise re-broadcast</span></span><br><span class="line">	<span class="keyword">if</span> !bootstrap &amp;&amp; isLocalNode &#123;</span><br><span class="line">		<span class="comment">// Compute the version vector</span></span><br><span class="line">		versions := []<span class="keyword">uint8</span>&#123;</span><br><span class="line">			state.PMin, state.PMax, state.PCur,</span><br><span class="line">			state.DMin, state.DMax, state.DCur,</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// If the Incarnation is the same, we need special handling, since it</span></span><br><span class="line">		<span class="comment">// possible for the following situation to happen:</span></span><br><span class="line">		<span class="comment">// 1) Start with configuration C, join cluster</span></span><br><span class="line">		<span class="comment">// 2) Hard fail / Kill / Shutdown</span></span><br><span class="line">		<span class="comment">// 3) Restart with configuration C', join cluster</span></span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		<span class="comment">// In this case, other nodes and the local node see the same incarnation,</span></span><br><span class="line">		<span class="comment">// but the values may not be the same. For this reason, we always</span></span><br><span class="line">		<span class="comment">// need to do an equality check for this Incarnation. In most cases,</span></span><br><span class="line">		<span class="comment">// we just ignore, but we may need to refute.</span></span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		<span class="keyword">if</span> a.Incarnation == state.Incarnation &amp;&amp;</span><br><span class="line">			bytes.Equal(a.Meta, state.Meta) &amp;&amp;</span><br><span class="line">			bytes.Equal(a.Vsn, versions) &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		m.refute(state, a.Incarnation)</span><br><span class="line">		m.logger.Printf(<span class="string">"[WARN] memberlist: Refuting an alive message for '%s' (%v:%d) meta:(%v VS %v), vsn:(%v VS %v)"</span>, a.Node, net.IP(a.Addr), a.Port, a.Meta, state.Meta, a.Vsn, versions)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		m.encodeBroadcastNotify(a.Node, aliveMsg, a, notify)</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Update protocol versions if it arrived</span></span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(a.Vsn) &gt; <span class="number">0</span> &#123;</span><br><span class="line">			state.PMin = a.Vsn[<span class="number">0</span>]</span><br><span class="line">			state.PMax = a.Vsn[<span class="number">1</span>]</span><br><span class="line">			state.PCur = a.Vsn[<span class="number">2</span>]</span><br><span class="line">			state.DMin = a.Vsn[<span class="number">3</span>]</span><br><span class="line">			state.DMax = a.Vsn[<span class="number">4</span>]</span><br><span class="line">			state.DCur = a.Vsn[<span class="number">5</span>]</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Update the state and incarnation number</span></span><br><span class="line">		state.Incarnation = a.Incarnation</span><br><span class="line">		state.Meta = a.Meta</span><br><span class="line">		state.Addr = a.Addr</span><br><span class="line">		state.Port = a.Port</span><br><span class="line">		<span class="keyword">if</span> state.State != StateAlive &#123;</span><br><span class="line">			state.State = StateAlive</span><br><span class="line">			state.StateChange = time.Now()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Update metrics</span></span><br><span class="line">	metrics.IncrCounter([]<span class="keyword">string</span>&#123;<span class="string">"memberlist"</span>, <span class="string">"msg"</span>, <span class="string">"alive"</span>&#125;, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Notify the delegate of any relevant updates</span></span><br><span class="line">	<span class="keyword">if</span> m.config.Events != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> oldState == StateDead || oldState == StateLeft &#123;</span><br><span class="line">			<span class="comment">// if Dead/Left -&gt; Alive, notify of join</span></span><br><span class="line">			m.config.Events.NotifyJoin(&amp;state.Node)</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> !bytes.Equal(oldMeta, state.Meta) &#123;</span><br><span class="line">			<span class="comment">// if Meta changed, trigger an update notification</span></span><br><span class="line">			m.config.Events.NotifyUpdate(&amp;state.Node)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>suspect: 当探测一些节点失败时，或者suspect某个节点的信息时，会将本地对应的信息标记为suspect，然后启动一个 定时器，并发出一个suspect广播，此期间内如果收到其他节点发来的相同的suspect信息时，将本地suspect的 确认数+1，当定时器超时后，该节点信息仍然不是alive的，且确认数达到要求，会将该节点标记为dead。 当本节点收到别的节点发来的suspect消息时，会发送alive广播，从而清除其他节点上的suspect标记。</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// suspectNode is invoked by the network layer when we get a message</span></span><br><span class="line"><span class="comment">// about a suspect node</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">suspectNode</span><span class="params">(s *suspect)</span></span> &#123;</span><br><span class="line">	m.nodeLock.Lock()</span><br><span class="line">	<span class="keyword">defer</span> m.nodeLock.Unlock()</span><br><span class="line">	state, ok := m.nodeMap[s.Node]</span><br><span class="line"></span><br><span class="line">	<span class="comment">// If we've never heard about this node before, ignore it</span></span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Ignore old incarnation numbers</span></span><br><span class="line">	<span class="keyword">if</span> s.Incarnation &lt; state.Incarnation &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// See if there's a suspicion timer we can confirm. If the info is new</span></span><br><span class="line">	<span class="comment">// to us we will go ahead and re-gossip it. This allows for multiple</span></span><br><span class="line">	<span class="comment">// independent confirmations to flow even when a node probes a node</span></span><br><span class="line">	<span class="comment">// that's already suspect.</span></span><br><span class="line">	<span class="keyword">if</span> timer, ok := m.nodeTimers[s.Node]; ok &#123;</span><br><span class="line">		<span class="keyword">if</span> timer.Confirm(s.From) &#123;</span><br><span class="line">			m.encodeAndBroadcast(s.Node, suspectMsg, s)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Ignore non-alive nodes</span></span><br><span class="line">	<span class="keyword">if</span> state.State != StateAlive &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// If this is us we need to refute, otherwise re-broadcast</span></span><br><span class="line">	<span class="keyword">if</span> state.Name == m.config.Name &#123;</span><br><span class="line">		m.refute(state, s.Incarnation)</span><br><span class="line">		m.logger.Printf(<span class="string">"[WARN] memberlist: Refuting a suspect message (from: %s)"</span>, s.From)</span><br><span class="line">		<span class="keyword">return</span> <span class="comment">// Do not mark ourself suspect</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		m.encodeAndBroadcast(s.Node, suspectMsg, s)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Update metrics</span></span><br><span class="line">	metrics.IncrCounter([]<span class="keyword">string</span>&#123;<span class="string">"memberlist"</span>, <span class="string">"msg"</span>, <span class="string">"suspect"</span>&#125;, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Update the state</span></span><br><span class="line">	state.Incarnation = s.Incarnation</span><br><span class="line">	state.State = StateSuspect</span><br><span class="line">	changeTime := time.Now()</span><br><span class="line">	state.StateChange = changeTime</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Setup a suspicion timer. Given that we don't have any known phase</span></span><br><span class="line">	<span class="comment">// relationship with our peers, we set up k such that we hit the nominal</span></span><br><span class="line">	<span class="comment">// timeout two probe intervals short of what we expect given the suspicion</span></span><br><span class="line">	<span class="comment">// multiplier.</span></span><br><span class="line">	k := m.config.SuspicionMult - <span class="number">2</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// If there aren't enough nodes to give the expected confirmations, just</span></span><br><span class="line">	<span class="comment">// set k to 0 to say that we don't expect any. Note we subtract 2 from n</span></span><br><span class="line">	<span class="comment">// here to take out ourselves and the node being probed.</span></span><br><span class="line">	n := m.estNumNodes()</span><br><span class="line">	<span class="keyword">if</span> n<span class="number">-2</span> &lt; k &#123;</span><br><span class="line">		k = <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Compute the timeouts based on the size of the cluster.</span></span><br><span class="line">	min := suspicionTimeout(m.config.SuspicionMult, n, m.config.ProbeInterval)</span><br><span class="line">	max := time.Duration(m.config.SuspicionMaxTimeoutMult) * min</span><br><span class="line">	fn := <span class="function"><span class="keyword">func</span><span class="params">(numConfirmations <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">		m.nodeLock.Lock()</span><br><span class="line">		state, ok := m.nodeMap[s.Node]</span><br><span class="line">		timeout := ok &amp;&amp; state.State == StateSuspect &amp;&amp; state.StateChange == changeTime</span><br><span class="line">		m.nodeLock.Unlock()</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> timeout &#123;</span><br><span class="line">			<span class="keyword">if</span> k &gt; <span class="number">0</span> &amp;&amp; numConfirmations &lt; k &#123;</span><br><span class="line">				metrics.IncrCounter([]<span class="keyword">string</span>&#123;<span class="string">"memberlist"</span>, <span class="string">"degraded"</span>, <span class="string">"timeout"</span>&#125;, <span class="number">1</span>)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			m.logger.Printf(<span class="string">"[INFO] memberlist: Marking %s as failed, suspect timeout reached (%d peer confirmations)"</span>,</span><br><span class="line">				state.Name, numConfirmations)</span><br><span class="line">			d := dead&#123;Incarnation: state.Incarnation, Node: state.Name, From: m.config.Name&#125;</span><br><span class="line">			m.deadNode(&amp;d)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	m.nodeTimers[s.Node] = newSuspicion(s.From, k, min, max, fn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>dead: 当本节点离开集群时或者本地探测的其他节点超时被标记死亡，会向集群发送本节点dead广播。收到dead广播 消息的节点会跟本地的记录比较，当本地记录也是dead时会忽略消息，当本地的记录不是dead时，会删除本地 的记录再将dead消息再次广播出去，形成再次传播。 如果从其他节点收到自身的dead广播消息时，说明本节点相对于其他节点网络分区，此时会发起一个alive广播 以修正其他节点上存储的本节点数据。</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// deadNode is invoked by the network layer when we get a message</span></span><br><span class="line"><span class="comment">// about a dead node</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">deadNode</span><span class="params">(d *dead)</span></span> &#123;</span><br><span class="line">	m.nodeLock.Lock()</span><br><span class="line">	<span class="keyword">defer</span> m.nodeLock.Unlock()</span><br><span class="line">	state, ok := m.nodeMap[d.Node]</span><br><span class="line"></span><br><span class="line">	<span class="comment">// If we've never heard about this node before, ignore it</span></span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Ignore old incarnation numbers</span></span><br><span class="line">	<span class="keyword">if</span> d.Incarnation &lt; state.Incarnation &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Clear out any suspicion timer that may be in effect.</span></span><br><span class="line">	<span class="built_in">delete</span>(m.nodeTimers, d.Node)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Ignore if node is already dead</span></span><br><span class="line">	<span class="keyword">if</span> state.DeadOrLeft() &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Check if this is us</span></span><br><span class="line">	<span class="keyword">if</span> state.Name == m.config.Name &#123;</span><br><span class="line">		<span class="comment">// If we are not leaving we need to refute</span></span><br><span class="line">		<span class="keyword">if</span> !m.hasLeft() &#123;</span><br><span class="line">			m.refute(state, d.Incarnation)</span><br><span class="line">			m.logger.Printf(<span class="string">"[WARN] memberlist: Refuting a dead message (from: %s)"</span>, d.From)</span><br><span class="line">			<span class="keyword">return</span> <span class="comment">// Do not mark ourself dead</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// If we are leaving, we broadcast and wait</span></span><br><span class="line">		m.encodeBroadcastNotify(d.Node, deadMsg, d, m.leaveBroadcast)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		m.encodeAndBroadcast(d.Node, deadMsg, d)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Update metrics</span></span><br><span class="line">	metrics.IncrCounter([]<span class="keyword">string</span>&#123;<span class="string">"memberlist"</span>, <span class="string">"msg"</span>, <span class="string">"dead"</span>&#125;, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Update the state</span></span><br><span class="line">	state.Incarnation = d.Incarnation</span><br><span class="line"></span><br><span class="line">	<span class="comment">// If the dead message was send by the node itself, mark it is left</span></span><br><span class="line">	<span class="comment">// instead of dead.</span></span><br><span class="line">	<span class="keyword">if</span> d.Node == d.From &#123;</span><br><span class="line">		state.State = StateLeft</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		state.State = StateDead</span><br><span class="line">	&#125;</span><br><span class="line">	state.StateChange = time.Now()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Notify of death</span></span><br><span class="line">	<span class="keyword">if</span> m.config.Events != <span class="literal">nil</span> &#123;</span><br><span class="line">		m.config.Events.NotifyLeave(&amp;state.Node)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="broadcast模块"><a href="#broadcast模块" class="headerlink" title="broadcast模块"></a>broadcast模块</h4><p>broadcast模块是广播模块，提供了三个函数，最主要的函数是 getBroadcasts，返回一个广播的最大size，主要是用于填充udp包。很简单代码如下：</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getBroadcasts is used to return a slice of broadcasts to send up to</span></span><br><span class="line"><span class="comment">// a maximum byte size, while imposing a per-broadcast overhead. This is used</span></span><br><span class="line"><span class="comment">// to fill a UDP packet with piggybacked data</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">getBroadcasts</span><span class="params">(overhead, limit <span class="keyword">int</span>)</span> [][]<span class="title">byte</span></span> &#123;</span><br><span class="line">	<span class="comment">// Get memberlist messages first</span></span><br><span class="line">	toSend := m.broadcasts.GetBroadcasts(overhead, limit)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Check if the user has anything to broadcast</span></span><br><span class="line">	d := m.config.Delegate</span><br><span class="line">	<span class="keyword">if</span> d != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="comment">// Determine the bytes used already</span></span><br><span class="line">		bytesUsed := <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> _, msg := <span class="keyword">range</span> toSend &#123;</span><br><span class="line">			bytesUsed += <span class="built_in">len</span>(msg) + overhead</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Check space remaining for user messages</span></span><br><span class="line">		avail := limit - bytesUsed</span><br><span class="line">		<span class="keyword">if</span> avail &gt; overhead+userMsgOverhead &#123;</span><br><span class="line">			userMsgs := d.GetBroadcasts(overhead+userMsgOverhead, avail)</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Frame each user message</span></span><br><span class="line">			<span class="keyword">for</span> _, msg := <span class="keyword">range</span> userMsgs &#123;</span><br><span class="line">				buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1</span>, <span class="built_in">len</span>(msg)+<span class="number">1</span>)</span><br><span class="line">				buf[<span class="number">0</span>] = <span class="keyword">byte</span>(userMsg)</span><br><span class="line">				buf = <span class="built_in">append</span>(buf, msg...)</span><br><span class="line">				toSend = <span class="built_in">append</span>(toSend, buf)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> toSend</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>回忆一下总体流程：</p>
<ul>
<li><p>项目在memberlist.go 函数Create启动，调用sate.go中函数schedule</p>
</li>
<li><p>Schedule函数开启probe协程、pushpull协程、gossip协程</p>
</li>
<li><p>probe协程：进行节点状态维护</p>
</li>
<li><p>push/pull协程：进行节点状态、用户数据同步</p>
</li>
<li><p>gossip协程：进行udp广播发送消息。</p>
</li>
</ul>
<p>memberlist利用点对点随机探测机制实现成员的故障检测，因此将节点的状态分为3种：</p>
<ul>
<li>StateAlive：活动节点</li>
<li>StateSuspect：可疑节点</li>
<li>StateDead：死亡节点</li>
</ul>
<p>probe协程通过点对点随机探测实现成员的故障检测，强化系统的高可用。整体流程如下：</p>
<ul>
<li>随机探测：节点启动后，每隔一定时间间隔，会选取一个节点对其发送PING消息。</li>
<li>重试与间隔探测请求：PING消息失败后，会随机选取N（由config中IndirectChecks设置）个节点发起间接PING请求和再发起一个TCP PING消息。</li>
<li>间隔探测：收到间接PING请求的节点会根据请求中的地址发起一个PING消息，将PING的结果返回给间接请求的源节点。</li>
<li>探测超时标识可疑：如果探测超时之间内，本节点没有收到任何一个要探测节点的ACK消息，则标记要探测的节点状态为suspect。</li>
<li>可疑节点广播：启动一个定时器用于发出一个suspect广播，此期间内如果收到其他节点发来的相同的suspect信息时，将本地suspect的 确认数+1，当定时器超时后，该节点信息仍然不是alive的，且确认数达到要求，会将该节点标记为dead。</li>
<li>可疑消除：当本节点收到别的节点发来的suspect消息时，会发送alive广播，从而清除其他节点上的suspect标记。。</li>
<li>死亡通知:当本节点离开集群时或者本地探测的其他节点超时被标记死亡，会向集群发送本节点dead广播</li>
<li>死亡消除:如果从其他节点收到自身的dead广播消息时，说明本节点相对于其他节点网络分区，此时会发起一个alive广播以修正其他节点上存储的本节点数据。</li>
</ul>
<p>Memberlist在整个生命周期内，总的有两种类型的消息：</p>
<ul>
<li><strong>udp**</strong>协议消息：**传输PING消息、间接PING消息、ACK消息、NACK消息、Suspect消息、 Alive消息、Dead消息、消息广播；</li>
<li><strong>tcp协议消息：</strong>用户数据同步、节点状态同步、PUSH-PULL消息。</li>
</ul>
<p>push/pull协程周期性的从已知的alive的集群节点中选1个节点进行push/pull交换信息。交换的信息包含2种：</p>
<ul>
<li>集群信息：节点数据</li>
<li>用户自定义的信息：实现Delegate接口的struct。</li>
</ul>
<p>push/pull协程可以加速集群内信息的收敛速度，整体流程为：</p>
<ul>
<li>建立TCP链接：每隔一个时间间隔，随机选取一个节点，跟它建立tcp连接，</li>
<li>将本地的全部节点 状态、用户数据发送过去，</li>
<li>对端将其掌握的全部节点状态、用户数据发送回来，然后完成2份数据的合并。</li>
</ul>
<p>Gossip协程通过udp协议向K个节点发送消息，节点从广播队列里面获取消息，广播队列里的消息发送失败超过一定次数后，消息就会被丢弃。</p>
<p>参考：</p>
<p><a href="https://yunlzheng.gitbook.io/prometheus-book/part-ii-prometheus-jin-jie/readmd/alertmanager-high-availability" target="_blank" rel="external">Alertmanager高可用</a></p>
<p><a href="https://blog.csdn.net/jianxian89/article/details/107482423" target="_blank" rel="external">一致性算法-Gossip协议实践(Memberlist)</a></p>
]]></content>
      
        <categories>
            
            <category> Prometheus </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Prometheus </tag>
            
            <tag> Alertmanager </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Alertmanager 高可用总结-下]]></title>
      <url>https://magiceses.github.io/2020/12/14/prometheus-alertmanager-%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%BB%E7%BB%93-%E4%B8%8B/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">我们每个人都不能抱怨自己的出身，没有好的家世，那就去创造好的家世。要知道，那些在雨里奔跑的，从来都是没有伞的孩子。<br></p>

<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><h3 id="gossip"><a href="#gossip" class="headerlink" title="gossip"></a>gossip</h3><p>先理解一下gossip协议：在一个有界网络中，每个节点都随机地与其他节点通信，经过一番杂乱无章的通信，最终所有节点的状态都会达成一致。每个节点可能知道所有其他节点，也可能仅知道几个邻居节点，只要这些节可以通过网络连通，最终他们的状态都是一致的，当然这也是疫情传播的特点。</p>
<p>简单的描述下这个协议，首先要传播谣言就要有种子节点。种子节点每秒都会随机向其他节点发送自己所拥有的节点列表，以及需要传播的消息。任何新加入的节点，就在这种传播方式下很快地被全网所知道。这个协议的神奇就在于它从设计开始就没想到信息一定要传递给所有的节点，但是随着时间的增长，在最终的某一时刻，全网会得到相同的信息。当然这个时刻可能仅仅存在于理论，永远不可达。</p>
<h3 id="memberlist"><a href="#memberlist" class="headerlink" title="memberlist"></a>memberlist</h3><p>回忆一下memberlist的总体流程：</p>
<a id="more"></a>
<ul>
<li><p>项目在memberlist.go 函数Create启动，调用sate.go中函数schedule</p>
</li>
<li><p>Schedule函数开启probe协程、pushpull协程、gossip协程</p>
</li>
<li><p>probe协程：进行节点状态维护</p>
</li>
<li><p>push/pull协程：进行节点状态、用户数据同步</p>
</li>
<li><p>gossip协程：进行udp广播发送消息。</p>
</li>
</ul>
<p>memberlist利用点对点随机探测机制实现成员的故障检测，因此将节点的状态分为3种：</p>
<ul>
<li>StateAlive：活动节点</li>
<li>StateSuspect：可疑节点</li>
<li>StateDead：死亡节点</li>
</ul>
<p>probe协程通过点对点随机探测实现成员的故障检测，强化系统的高可用。整体流程如下：</p>
<ul>
<li>随机探测：节点启动后，每隔一定时间间隔，会选取一个节点对其发送PING消息。</li>
<li>重试与间隔探测请求：PING消息失败后，会随机选取N（由config中IndirectChecks设置）个节点发起间接PING请求和再发起一个TCP PING消息。</li>
<li>间隔探测：收到间接PING请求的节点会根据请求中的地址发起一个PING消息，将PING的结果返回给间接请求的源节点。</li>
<li>探测超时标识可疑：如果探测超时之间内，本节点没有收到任何一个要探测节点的ACK消息，则标记要探测的节点状态为suspect。</li>
<li>可疑节点广播：启动一个定时器用于发出一个suspect广播，此期间内如果收到其他节点发来的相同的suspect信息时，将本地suspect的 确认数+1，当定时器超时后，该节点信息仍然不是alive的，且确认数达到要求，会将该节点标记为dead。</li>
<li>可疑消除：当本节点收到别的节点发来的suspect消息时，会发送alive广播，从而清除其他节点上的suspect标记。。</li>
<li>死亡通知:当本节点离开集群时或者本地探测的其他节点超时被标记死亡，会向集群发送本节点dead广播</li>
<li>死亡消除:如果从其他节点收到自身的dead广播消息时，说明本节点相对于其他节点网络分区，此时会发起一个alive广播以修正其他节点上存储的本节点数据。</li>
</ul>
<p>Memberlist在整个生命周期内，总的有两种类型的消息：</p>
<ul>
<li><strong>udp**</strong>协议消息：**传输PING消息、间接PING消息、ACK消息、NACK消息、Suspect消息、 Alive消息、Dead消息、消息广播；</li>
<li><strong>tcp协议消息：</strong>用户数据同步、节点状态同步、PUSH-PULL消息。</li>
</ul>
<p>push/pull协程周期性的从已知的alive的集群节点中选1个节点进行push/pull交换信息。交换的信息包含2种：</p>
<ul>
<li>集群信息：节点数据</li>
<li>用户自定义的信息：实现Delegate接口的struct。</li>
</ul>
<p>push/pull协程可以加速集群内信息的收敛速度，整体流程为：</p>
<ul>
<li>建立TCP链接：每隔一个时间间隔，随机选取一个节点，跟它建立tcp连接，</li>
<li>将本地的全部节点 状态、用户数据发送过去，</li>
<li>对端将其掌握的全部节点状态、用户数据发送回来，然后完成2份数据的合并。</li>
</ul>
<p>Gossip协程通过udp协议向K个节点发送消息，节点从广播队列里面获取消息，广播队列里的消息发送失败超过一定次数后，消息就会被丢弃。</p>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"flag"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"github.com/hashicorp/memberlist"</span></span><br><span class="line">    <span class="string">"github.com/pborman/uuid"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    mtx        sync.RWMutex</span><br><span class="line">    members    = flag.String(<span class="string">"members"</span>, <span class="string">""</span>, <span class="string">"comma seperated list of members"</span>)</span><br><span class="line">    port       = flag.Int(<span class="string">"port"</span>, <span class="number">4001</span>, <span class="string">"http port"</span>)</span><br><span class="line">    items      = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">    broadcasts *memberlist.TransmitLimitedQueue</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> broadcast <span class="keyword">struct</span> &#123;</span><br><span class="line">    msg    []<span class="keyword">byte</span></span><br><span class="line">    notify <span class="keyword">chan</span>&lt;- <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> delegate <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> update <span class="keyword">struct</span> &#123;</span><br><span class="line">    Action <span class="keyword">string</span> <span class="comment">// add, del</span></span><br><span class="line">    Data   <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    flag.Parse()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *broadcast)</span> <span class="title">Invalidates</span><span class="params">(other memberlist.Broadcast)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *broadcast)</span> <span class="title">Message</span><span class="params">()</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b.msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *broadcast)</span> <span class="title">Finished</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> b.notify != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">close</span>(b.notify)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *delegate)</span> <span class="title">NodeMeta</span><span class="params">(limit <span class="keyword">int</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> []<span class="keyword">byte</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *delegate)</span> <span class="title">NotifyMsg</span><span class="params">(b []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(b) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> b[<span class="number">0</span>] &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'d'</span>: <span class="comment">// data</span></span><br><span class="line">        <span class="keyword">var</span> updates []*update</span><br><span class="line">        <span class="keyword">if</span> err := json.Unmarshal(b[<span class="number">1</span>:], &amp;updates); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        mtx.Lock()</span><br><span class="line">        <span class="keyword">for</span> _, u := <span class="keyword">range</span> updates &#123;</span><br><span class="line">            <span class="keyword">for</span> k, v := <span class="keyword">range</span> u.Data &#123;</span><br><span class="line">                <span class="keyword">switch</span> u.Action &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"add"</span>:</span><br><span class="line">                    items[k] = v</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"del"</span>:</span><br><span class="line">                    <span class="built_in">delete</span>(items, k)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mtx.Unlock()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *delegate)</span> <span class="title">GetBroadcasts</span><span class="params">(overhead, limit <span class="keyword">int</span>)</span> [][]<span class="title">byte</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> broadcasts.GetBroadcasts(overhead, limit)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *delegate)</span> <span class="title">LocalState</span><span class="params">(join <span class="keyword">bool</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">    mtx.RLock()</span><br><span class="line">    m := items</span><br><span class="line">    mtx.RUnlock()</span><br><span class="line">    b, _ := json.Marshal(m)</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *delegate)</span> <span class="title">MergeRemoteState</span><span class="params">(buf []<span class="keyword">byte</span>, join <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(buf) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !join &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">    <span class="keyword">if</span> err := json.Unmarshal(buf, &amp;m); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    mtx.Lock()</span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        items[k] = v</span><br><span class="line">    &#125;</span><br><span class="line">    mtx.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    r.ParseForm()</span><br><span class="line">    key := r.Form.Get(<span class="string">"key"</span>)</span><br><span class="line">    val := r.Form.Get(<span class="string">"val"</span>)</span><br><span class="line">    mtx.Lock()</span><br><span class="line">    items[key] = val</span><br><span class="line">    mtx.Unlock()</span><br><span class="line"></span><br><span class="line">    b, err := json.Marshal([]*update&#123;</span><br><span class="line">        &amp;update&#123;</span><br><span class="line">            Action: <span class="string">"add"</span>,</span><br><span class="line">            Data: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">                key: val,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//广播数据</span></span><br><span class="line">    broadcasts.QueueBroadcast(&amp;broadcast&#123;</span><br><span class="line">        msg:    <span class="built_in">append</span>([]<span class="keyword">byte</span>(<span class="string">"d"</span>), b...),</span><br><span class="line">        notify: <span class="literal">nil</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">delHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    r.ParseForm()</span><br><span class="line">    key := r.Form.Get(<span class="string">"key"</span>)</span><br><span class="line">    mtx.Lock()</span><br><span class="line">    <span class="built_in">delete</span>(items, key)</span><br><span class="line">    mtx.Unlock()</span><br><span class="line"></span><br><span class="line">    b, err := json.Marshal([]*update&#123;</span><br><span class="line">        &amp;update&#123;</span><br><span class="line">            Action: <span class="string">"del"</span>,</span><br><span class="line">            Data: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">                key: <span class="string">""</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    broadcasts.QueueBroadcast(&amp;broadcast&#123;</span><br><span class="line">        msg:    <span class="built_in">append</span>([]<span class="keyword">byte</span>(<span class="string">"d"</span>), b...),</span><br><span class="line">        notify: <span class="literal">nil</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    r.ParseForm()</span><br><span class="line">    key := r.Form.Get(<span class="string">"key"</span>)</span><br><span class="line">    mtx.RLock()</span><br><span class="line">    val := items[key]</span><br><span class="line">    mtx.RUnlock()</span><br><span class="line">    w.Write([]<span class="keyword">byte</span>(val))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    hostname, _ := os.Hostname()</span><br><span class="line">    c := memberlist.DefaultLocalConfig()</span><br><span class="line">    c.Delegate = &amp;delegate&#123;&#125;</span><br><span class="line">    c.BindPort = <span class="number">0</span></span><br><span class="line">    c.Name = hostname + <span class="string">"-"</span> + uuid.NewUUID().String()</span><br><span class="line">    <span class="comment">//创建gossip网络</span></span><br><span class="line">    m, err := memberlist.Create(c)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一个节点没有member，但从第二个开始就有member了</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(*members) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        parts := strings.Split(*members, <span class="string">","</span>)</span><br><span class="line">        _, err := m.Join(parts)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    broadcasts = &amp;memberlist.TransmitLimitedQueue&#123;</span><br><span class="line">        NumNodes: <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">            <span class="keyword">return</span> m.NumMembers()</span><br><span class="line">        &#125;,</span><br><span class="line">        RetransmitMult: <span class="number">3</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    node := m.LocalNode()</span><br><span class="line">    fmt.Printf(<span class="string">"Local member %s:%d\n"</span>, node.Addr, node.Port)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    http.HandleFunc(<span class="string">"/add"</span>, addHandler)</span><br><span class="line">    http.HandleFunc(<span class="string">"/del"</span>, delHandler)</span><br><span class="line">    http.HandleFunc(<span class="string">"/get"</span>, getHandler)</span><br><span class="line">    fmt.Printf(<span class="string">"Listening on :%d\n"</span>, *port)</span><br><span class="line">    <span class="keyword">if</span> err := http.ListenAndServe(fmt.Sprintf(<span class="string">":%d"</span>, *port), <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里通过一个简单的http服务查询和插入数据，找两台机器，第一台执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memberlist</span><br></pre></td></tr></table></figure>
<p>会生成gossip监听的服务ip和端口<br>使用上面的ip和端口在第二台执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memberlist --members=xxx.xxx.xxx.xxx:xxxx</span><br></pre></td></tr></table></figure>
<p>那么一个gossip的网络就搭建完成了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># add</span><br><span class="line">curl &quot;http://localhost:4001/add?key=foo&amp;val=bar&quot;</span><br><span class="line"></span><br><span class="line"># get</span><br><span class="line">curl &quot;http://另一台机器:4001/get?key=foo&quot;</span><br><span class="line"></span><br><span class="line"># delete</span><br><span class="line">curl &quot;http://localhost:4001/del?key=foo&quot;</span><br></pre></td></tr></table></figure>
<h2 id="alertmanager-高可用实现"><a href="#alertmanager-高可用实现" class="headerlink" title="alertmanager 高可用实现"></a>alertmanager 高可用实现</h2><p>上文我们说到，alertmanager在初始化时调用了memberlist的create方法，返回了Peer结构体：</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Peer is a single peer in a gossip cluster.</span></span><br><span class="line"><span class="keyword">type</span> Peer <span class="keyword">struct</span> &#123;</span><br><span class="line">	mlist    *memberlist.Memberlist</span><br><span class="line">	delegate *delegate</span><br><span class="line"></span><br><span class="line">	resolvedPeers []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">	mtx    sync.RWMutex</span><br><span class="line">	states <span class="keyword">map</span>[<span class="keyword">string</span>]State</span><br><span class="line">	stopc  <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">	readyc <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	peerLock    sync.RWMutex</span><br><span class="line">	peers       <span class="keyword">map</span>[<span class="keyword">string</span>]peer</span><br><span class="line">	failedPeers []peer</span><br><span class="line"></span><br><span class="line">	knownPeers    []<span class="keyword">string</span></span><br><span class="line">	advertiseAddr <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">	failedReconnectionsCounter prometheus.Counter</span><br><span class="line">	reconnectionsCounter       prometheus.Counter</span><br><span class="line">	failedRefreshCounter       prometheus.Counter</span><br><span class="line">	refreshCounter             prometheus.Counter</span><br><span class="line">	peerLeaveCounter           prometheus.Counter</span><br><span class="line">	peerUpdateCounter          prometheus.Counter</span><br><span class="line">	peerJoinCounter            prometheus.Counter</span><br><span class="line"></span><br><span class="line">	logger log.Logger</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后加入集群和初始化状态</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 集群peer的状态监听器已经进行注册成功，现在可以进行加入集群和初始化状态。</span></span><br><span class="line"><span class="comment">// Peer state listeners have been registered, now we can join and get the initial state.</span></span><br><span class="line"><span class="keyword">if</span> peer != <span class="literal">nil</span> &#123;</span><br><span class="line">	err = peer.Join(</span><br><span class="line">		*reconnectInterval,</span><br><span class="line">		*peerReconnectTimeout,</span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		level.Warn(logger).Log(<span class="string">"msg"</span>, <span class="string">"unable to join gossip mesh"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	ctx, cancel := context.WithTimeout(context.Background(), *settleTimeout)</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		cancel()</span><br><span class="line">		<span class="keyword">if</span> err := peer.Leave(<span class="number">10</span> * time.Second); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			level.Warn(logger).Log(<span class="string">"msg"</span>, <span class="string">"unable to leave gossip mesh"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">go</span> peer.Settle(ctx, *gossipInterval*<span class="number">10</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Join is used to take an existing Memberlist and attempt to join a cluster</span></span><br><span class="line"><span class="comment">// by contacting all the given hosts and performing a state sync. Initially,</span></span><br><span class="line"><span class="comment">// the Memberlist only contains our own state, so doing this will cause</span></span><br><span class="line"><span class="comment">// remote nodes to become aware of the existence of this node, effectively</span></span><br><span class="line"><span class="comment">// joining the cluster.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This returns the number of hosts successfully contacted and an error if</span></span><br><span class="line"><span class="comment">// none could be reached. If an error is returned, the node did not successfully</span></span><br><span class="line"><span class="comment">// join the cluster.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memberlist)</span> <span class="title">Join</span><span class="params">(existing []<span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">	numSuccess := <span class="number">0</span></span><br><span class="line">	<span class="keyword">var</span> errs error</span><br><span class="line">	<span class="keyword">for</span> _, exist := <span class="keyword">range</span> existing &#123;</span><br><span class="line">		addrs, err := m.resolveAddr(exist)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			err = fmt.Errorf(<span class="string">"Failed to resolve %s: %v"</span>, exist, err)</span><br><span class="line">			errs = multierror.Append(errs, err)</span><br><span class="line">			m.logger.Printf(<span class="string">"[WARN] memberlist: %v"</span>, err)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> _, addr := <span class="keyword">range</span> addrs &#123;</span><br><span class="line">			hp := joinHostPort(addr.ip.String(), addr.port)</span><br><span class="line">			a := Address&#123;Addr: hp, Name: addr.nodeName&#125;</span><br><span class="line">			<span class="keyword">if</span> err := m.pushPullNode(a, <span class="literal">true</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				err = fmt.Errorf(<span class="string">"Failed to join %s: %v"</span>, addr.ip, err)</span><br><span class="line">				errs = multierror.Append(errs, err)</span><br><span class="line">				m.logger.Printf(<span class="string">"[DEBUG] memberlist: %v"</span>, err)</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			numSuccess++</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> numSuccess &gt; <span class="number">0</span> &#123;</span><br><span class="line">		errs = <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> numSuccess, errs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>join的注释很详细了，最后起了一个协程 <code>go peer.Settle(ctx, *gossipInterval*10)</code>，用于同步集群状态，如果同步完成就关闭 <code>channel p.readyc</code>，后面判断集群状态是否OK，都是根据该 <code>channel</code> 判断的。</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Settle waits until the mesh is ready (and sets the appropriate internal state when it is).</span></span><br><span class="line"><span class="comment">// The idea is that we don't want to start "working" before we get a chance to know most of the alerts and/or silences.</span></span><br><span class="line"><span class="comment">// Inspired from https://github.com/apache/cassandra/blob/7a40abb6a5108688fb1b10c375bb751cbb782ea4/src/java/org/apache/cassandra/gms/Gossiper.java</span></span><br><span class="line"><span class="comment">// This is clearly not perfect or strictly correct but should prevent the alertmanager to send notification before it is obviously not ready.</span></span><br><span class="line"><span class="comment">// This is especially important for those that do not have persistent storage.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Peer)</span> <span class="title">Settle</span><span class="params">(ctx context.Context, interval time.Duration)</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> NumOkayRequired = <span class="number">3</span></span><br><span class="line">	level.Info(p.logger).Log(<span class="string">"msg"</span>, <span class="string">"Waiting for gossip to settle..."</span>, <span class="string">"interval"</span>, interval)</span><br><span class="line">	start := time.Now()</span><br><span class="line">	nPeers := <span class="number">0</span></span><br><span class="line">	nOkay := <span class="number">0</span></span><br><span class="line">	totalPolls := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">			elapsed := time.Since(start)</span><br><span class="line">			level.Info(p.logger).Log(<span class="string">"msg"</span>, <span class="string">"gossip not settled but continuing anyway"</span>, <span class="string">"polls"</span>, totalPolls, <span class="string">"elapsed"</span>, elapsed)</span><br><span class="line">			<span class="built_in">close</span>(p.readyc)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="keyword">case</span> &lt;-time.After(interval):</span><br><span class="line">		&#125;</span><br><span class="line">		elapsed := time.Since(start)</span><br><span class="line">		n := <span class="built_in">len</span>(p.Peers())</span><br><span class="line">		<span class="keyword">if</span> nOkay &gt;= NumOkayRequired &#123;</span><br><span class="line">			level.Info(p.logger).Log(<span class="string">"msg"</span>, <span class="string">"gossip settled; proceeding"</span>, <span class="string">"elapsed"</span>, elapsed)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> n == nPeers &#123;</span><br><span class="line">			nOkay++</span><br><span class="line">			level.Debug(p.logger).Log(<span class="string">"msg"</span>, <span class="string">"gossip looks settled"</span>, <span class="string">"elapsed"</span>, elapsed)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			nOkay = <span class="number">0</span></span><br><span class="line">			level.Info(p.logger).Log(<span class="string">"msg"</span>, <span class="string">"gossip not settled"</span>, <span class="string">"polls"</span>, totalPolls, <span class="string">"before"</span>, nPeers, <span class="string">"now"</span>, n, <span class="string">"elapsed"</span>, elapsed)</span><br><span class="line">		&#125;</span><br><span class="line">		nPeers = n</span><br><span class="line">		totalPolls++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">close</span>(p.readyc)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到上面这里是个死循环，实现了一个类似心跳机制，定时检测集群是否已经同步完成，接着往下看</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">	waitFunc := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">	<span class="keyword">if</span> peer != <span class="literal">nil</span> &#123;</span><br><span class="line">		waitFunc = clusterWait(peer, *peerTimeout)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// clusterWait returns a function that inspects the current peer state and returns</span></span><br><span class="line"><span class="comment">// a duration of one base timeout for each peer with a higher ID than ourselves.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">clusterWait</span><span class="params">(p *cluster.Peer, timeout time.Duration)</span> <span class="title">func</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> time.Duration(p.Position()) * timeout</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">		pipeline := pipelineBuilder.New(</span><br><span class="line">			receivers,</span><br><span class="line">			waitFunc,</span><br><span class="line">			inhibitor,</span><br><span class="line">			silencer,</span><br><span class="line">			notificationLog,</span><br><span class="line">			peer,</span><br><span class="line">		)</span><br><span class="line"></span><br><span class="line"><span class="comment">// New returns a map of receivers to Stages.</span></span><br><span class="line"><span class="comment">// --------------------------------------------------------</span></span><br><span class="line"><span class="comment">// New 返回一个接收人map运行的Stages，每个接收人，都会经历固定的Gossip，</span></span><br><span class="line"><span class="comment">// 抑制和静默阶段。然后根据receiver的不同，创建各自的分组阶段。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pb *PipelineBuilder)</span> <span class="title">New</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	receivers <span class="keyword">map</span>[<span class="keyword">string</span>][]Integration,</span></span></span><br><span class="line"><span class="function"><span class="params">	wait <span class="keyword">func</span>()</span> <span class="title">time</span>.<span class="title">Duration</span>,</span></span><br><span class="line"><span class="function">	<span class="title">inhibitor</span> *<span class="title">inhibit</span>.<span class="title">Inhibitor</span>,</span></span><br><span class="line"><span class="function">	<span class="title">silencer</span> *<span class="title">silence</span>.<span class="title">Silencer</span>,</span></span><br><span class="line"><span class="function">	<span class="title">notificationLog</span> <span class="title">NotificationLog</span>,</span></span><br><span class="line"><span class="function">	<span class="title">peer</span> *<span class="title">cluster</span>.<span class="title">Peer</span>,</span></span><br><span class="line"><span class="function">) <span class="title">RoutingStage</span></span> &#123;</span><br><span class="line">	rs := <span class="built_in">make</span>(RoutingStage, <span class="built_in">len</span>(receivers))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建gossip协议检查就绪阶段，和抑制和静默的静音阶段。</span></span><br><span class="line">	ms := NewGossipSettleStage(peer)</span><br><span class="line">	is := NewMuteStage(inhibitor)</span><br><span class="line">	ss := NewMuteStage(silencer)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 根据接收人创建，分组等待，去重，重试，通知阶段。</span></span><br><span class="line">	<span class="comment">// 这里每个接收人都有一个独立的接收人阶段，并且</span></span><br><span class="line">	<span class="comment">// 它们公用gossip就绪和静音阶段。</span></span><br><span class="line">	<span class="keyword">for</span> name := <span class="keyword">range</span> receivers &#123;</span><br><span class="line">		<span class="comment">// 为每一个接收方式的所有接收人创建扇出的阶段</span></span><br><span class="line">		st := createReceiverStage(name, receivers[name], wait, notificationLog, pb.metrics)</span><br><span class="line">		rs[name] = MultiStage&#123;ms, is, ss, st&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> rs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里很重要，在pipeline中创建gossip协议检查就绪阶段，<code>ms := NewGossipSettleStage(peer)</code>，和其他一些需要处理message的阶段</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewGossipSettleStage returns a new GossipSettleStage.</span></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// NewGossipSettleStage 返回一个gossip检查就绪阶段，正如我们所知集群内的节点，</span></span><br><span class="line"><span class="comment">// 通过gossip协议进行通讯。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGossipSettleStage</span><span class="params">(p *cluster.Peer)</span> *<span class="title">GossipSettleStage</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;GossipSettleStage&#123;peer: p&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GossipSettleStage waits until the Gossip has settled to forward alerts.</span></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// GossipSettleStage 此阶段，一直等待gossip协议准备就绪状态，等待其他的节点就绪。</span></span><br><span class="line"><span class="keyword">type</span> GossipSettleStage <span class="keyword">struct</span> &#123;</span><br><span class="line">	peer *cluster.Peer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么这个就绪阶段是干嘛的呢？往下看</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> disp.Run()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run starts dispatching alerts incoming via the updates channel.</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 运行调度器，初始化分组列表map和普罗米修斯分组计数指标。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dispatcher)</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 初始化结束通道</span></span><br><span class="line">	d.done = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">	d.mtx.Lock()</span><br><span class="line">	d.aggrGroups = <span class="keyword">map</span>[*Route]<span class="keyword">map</span>[model.Fingerprint]*aggrGroup&#123;&#125;</span><br><span class="line">	d.metrics.aggrGroups.Set(<span class="number">0</span>)</span><br><span class="line">	d.ctx, d.cancel = context.WithCancel(context.Background())</span><br><span class="line">	d.mtx.Unlock()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 运行调度器子运行函数</span></span><br><span class="line">	d.run(d.alerts.Subscribe())</span><br><span class="line">	<span class="built_in">close</span>(d.done)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看下这个方法 <code>d.run(d.alerts.Subscribe())</code>，其中 <code>d.alerts.Subscribe()</code> 返回一个告警遍历器接口。遍历器会返回还没有解决和还没有被成功通知出来的告警。遍历器所返回的告警，并不能保证是按照时间顺序来进行排序的。</p>
<p>看下 <code>run</code> 中的 <code>d.processAlert(alert, r)</code></p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dispatcher)</span> <span class="title">processAlert</span><span class="params">(alert *types.Alert, route *Route)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 根据分组路由的信息，获得此分组下的匹配中的labels。</span></span><br><span class="line">	<span class="comment">// 并根据所得labels得到唯一id(指纹 finger print)。</span></span><br><span class="line">	groupLabels := getGroupLabels(alert, route)</span><br><span class="line">	fp := groupLabels.Fingerprint()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 加锁进行hashmap操作</span></span><br><span class="line">	d.mtx.Lock()</span><br><span class="line">	<span class="keyword">defer</span> d.mtx.Unlock()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 通过分组路由获得分组map，如果分组列表hashmap不存在这个分组，</span></span><br><span class="line">	<span class="comment">// 则进行创建。分组map里面key为分组finger print，value为具</span></span><br><span class="line">	<span class="comment">// 体唯一标识的分组。</span></span><br><span class="line">	group, ok := d.aggrGroups[route]</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		group = <span class="keyword">map</span>[model.Fingerprint]*aggrGroup&#123;&#125;</span><br><span class="line">		d.aggrGroups[route] = group</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// If the group does not exist, create it.</span></span><br><span class="line">	<span class="comment">// ----------------------------------------------------</span></span><br><span class="line">	<span class="comment">// 假如当前告警的group labels的指纹在这个告警分组map里找不到，</span></span><br><span class="line">	<span class="comment">// 则进行分组的创建。</span></span><br><span class="line">	ag, ok := group[fp]</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		ag = newAggrGroup(d.ctx, groupLabels, route, d.timeout, d.logger)</span><br><span class="line">		group[fp] = ag</span><br><span class="line">		<span class="comment">// 普罗米修斯的分组数量指标进行加一</span></span><br><span class="line">		d.metrics.aggrGroups.Inc()</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 开启新的协成，运行此告警指纹的分组</span></span><br><span class="line">		<span class="keyword">go</span> ag.run(<span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, alerts ...*types.Alert)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">			<span class="comment">// 根据当前context的状态，来进行告警的处理。</span></span><br><span class="line">			_, _, err := d.stage.Exec(ctx, d.logger, alerts...)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				lvl := level.Error(d.logger)</span><br><span class="line">				<span class="keyword">if</span> ctx.Err() == context.Canceled &#123;</span><br><span class="line">					<span class="comment">// It is expected for the context to be canceled on</span></span><br><span class="line">					<span class="comment">// configuration reload or shutdown. In this case, the</span></span><br><span class="line">					<span class="comment">// message should only be logged at the debug level.</span></span><br><span class="line">					<span class="comment">// ---------------------------------------------------</span></span><br><span class="line">					<span class="comment">// 假如错误是因为reload或者关闭而导致的，那样日志等级为debug</span></span><br><span class="line">					lvl = level.Debug(d.logger)</span><br><span class="line">				&#125;</span><br><span class="line">				lvl.Log(<span class="string">"msg"</span>, <span class="string">"Notify for alerts failed"</span>, <span class="string">"num_alerts"</span>, <span class="built_in">len</span>(alerts), <span class="string">"err"</span>, err)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> err == <span class="literal">nil</span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 插入alert到这个唯一标识的分组里。</span></span><br><span class="line">	ag.insert(alert)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要看下这个方法 <code>_, _, err := d.stage.Exec(ctx, d.logger, alerts...)</code></p>
<blockquote>
<p>Exec 循环执行 MultiStage 里面的每一个阶段。MultiStage 主要使用两个场景。<br>场景一： RoutingStage 的map[receiver name] MultiStage。<br>       里面有集群Gossip阶段，静默Mute阶段，抑制Mute阶段，Receiver阶段。<br>场景二： FanoutStage 的切片，里面每个元素是一个 MultiStage。<br>       里面有分组等待阶段，去重阶段，重试阶段，设置通知阶段。</p>
</blockquote>
<p>也就是说每次有新告警过来的时候都会经历同步集群状态的阶段，保证当前集群状态是OK的。</p>
<p>同时当有多个prometheus往alertmanager发送消息的时候，可能发生告警重复的情况，在alertmanager中有个去重阶段(DedupStage)是处理这样的情况：</p>
<p>DedupStage用于管理告警的去重，传递的参数中包含了一个NotificationLog,用来保存告警的发送记录。当有多个机器组成集群的时候，NotificationLog会通过协议去进行通信，传递彼此的记录信息，加入集群中的A如果发送了告警，该记录会传递给B机器，并进行merge操作，这样B机器在发送告警的时候如果查询已经发送，则不再进行告警发送。关于NotificationLog的实现nflog可以查看nflog/nflog.go文件。</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DedupStage filters alerts.</span></span><br><span class="line"><span class="comment">// Filtering happens based on a notification log.</span></span><br><span class="line"><span class="keyword">type</span> DedupStage <span class="keyword">struct</span> &#123;</span><br><span class="line">    nflog NotificationLog</span><br><span class="line">    recv  *nflogpb.Receiver</span><br><span class="line">    conf  notifierConfig</span><br><span class="line"></span><br><span class="line">    now  <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Time</span></span></span><br><span class="line"><span class="function">    <span class="title">hash</span> <span class="title">func</span><span class="params">(*types.Alert)</span> <span class="title">uint64</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<p>具体的处理逻辑如下：</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *DedupStage)</span> <span class="title">Exec</span><span class="params">(ctx context.Context, l log.Logger, alerts ...*types.Alert)</span> <span class="params">(context.Context, []*types.Alert, error)</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    entries, err := n.nflog.Query(nflog.QGroupKey(gkey), nflog.QReceiver(n.recv))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != nflog.ErrNotFound &#123;</span><br><span class="line">        <span class="keyword">return</span> ctx, <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> entry *nflogpb.Entry</span><br><span class="line">    <span class="keyword">switch</span> <span class="built_in">len</span>(entries) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        entry = entries[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> ctx, <span class="literal">nil</span>, fmt.Errorf(<span class="string">"unexpected entry result size %d"</span>, <span class="built_in">len</span>(entries))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> n.needsUpdate(entry, firingSet, resolvedSet, repeatInterval) &#123;</span><br><span class="line">        <span class="keyword">return</span> ctx, alerts, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">		<span class="keyword">return</span> ctx, <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中的nflog.Query将根据接收和group key进行查询，一旦查找到，则不再返回对应的alerts. nflog设置了GC用来删除过期的日志记录。防止一直存在log中导致告警无法继续发送.</p>
<p>这里有个疑问？上面我们看到判断集群状态是否OK的是用的 <code>p.readyc</code> 这个channel，这个channel在 <code>go peer.Settle(ctx, *gossipInterval*10)</code> 同步完成之后就关闭了，也就是说后面读取这个channel的话，都是同步成功的状态，如果中途有个alertmanager实例挂掉了，这个还会是集群组建成功的状态吗？</p>
<p>参考：</p>
<p><a href="https://yunlzheng.gitbook.io/prometheus-book/part-ii-prometheus-jin-jie/readmd/alertmanager-high-availability" target="_blank" rel="external">Alertmanager高可用</a></p>
<p><a href="https://blog.csdn.net/jianxian89/article/details/107482423" target="_blank" rel="external">一致性算法-Gossip协议实践(Memberlist)</a></p>
<p><a href="https://chenxy.blog.csdn.net/article/details/79698757?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.control" target="_blank" rel="external">gossip协议的原理和实战应用</a></p>
]]></content>
      
        <categories>
            
            <category> Prometheus </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Prometheus </tag>
            
            <tag> Alertmanager </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Prometheus和Thanos的前生今世]]></title>
      <url>https://magiceses.github.io/2020/11/02/prometheus-thanos-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">没有人会为你的贫穷负责，却有人为你的富有而喝彩！所以不要活在别人的嘴巴里，做好自己！有路，就大胆的去走；有梦，就大胆地飞翔；前行的路，不怕万人阻挡，只怕自己投降！<br></p>

<p>总结thanos之前先来回顾一下prometheus</p>
<h1 id="prometheus-回顾"><a href="#prometheus-回顾" class="headerlink" title="prometheus 回顾"></a>prometheus 回顾</h1><h2 id="云原生监控的事实标准Promethues"><a href="#云原生监控的事实标准Promethues" class="headerlink" title="云原生监控的事实标准Promethues"></a>云原生监控的事实标准Promethues</h2><p>监控系统的历史悠久，是一个颇为成熟的领域，而Prometheus作为新生代的开源监控系统，慢慢成为了云原生体系的监控事实标准，也证明了其设计得到业界认可。Prometheus启发于Google公司的borgmon监控系统，由google前员工在2012年作为社区开源项目创建和开发，并于2015年正式发布。2016年，Prometheus正式加入Cloud Native Computing Foundation，成为仅次于Kubernetes的第二把交椅的项目。</p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="/images/prometheus-thanos-1.png" alt="img"></p>
<a id="more"></a>
<h2 id="组件概述"><a href="#组件概述" class="headerlink" title="组件概述"></a>组件概述</h2><ul>
<li><p>Prometheus server</p>
<p>核心组件，负责从外部主动抓取指标到内存时序数据库，并定时将内存中的指标同步到磁盘。</p>
</li>
<li><p>Alertmanager</p>
<p>转发来自Prometheus server发送的告警信息至外部的告警接收者。</p>
</li>
<li><p>Pushgateway</p>
<p>被监控对象可主动推送指标至Pushgateway，Pushgateway的指标是被Prometheus server抓取。</p>
</li>
<li><p>Promethues web UI</p>
<p>Prometheus server的界面，输入表达式可查询相关的指标数据。</p>
</li>
</ul>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>Prometheus的工作流程核心是，以主动拉取pull的方式搜集被监控对象的metrics数据（监控指标数据），并将这些metrics数据存储到一个内存TSDB（时间序列数据库）中，并定期将内存中的指标同步到本地硬盘。有了这个核心工作流程，其余组件只是为了配合这个工作流程。被监控对象也可向Pushgateway组件推送指标，Prometheus最终也会从Pushgateway组件拉取指标到TSDB。Altermanager组件像是一个路由器，将Prometheus的告警进行转发至外部的接收者。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>Prometheus具有以下引人注意的优点：</p>
<ul>
<li>强大的多维度数据模型</li>
<li>灵活而强大的查询语句（PromQL）：在同一个查询语句，可以对多个metrics进行乘法、加法、连接、取分数位等操作。</li>
<li>易于管理：Prometheus server是一个单独的二进制文件，可直接在本地工作，不依赖于分布式存储。</li>
<li>高效：平均每个采样点仅占3 bytes，且一个Prometheus server可以处理数百万的 metrics。</li>
<li>使用pull模式采集时间序列数据，这样不仅有利于本机测试而且可以避免有问题的服务器推送坏的metrics。</li>
<li>可以采用push gateway的方式把时间序列数据推送至Prometheus server端。</li>
<li>可以通过服务发现或者静态配置去获取监控目标。</li>
<li>有多种可视化图形界面。</li>
<li>非常多的应用都实现了Prometheus的metrics接口以暴露自身各项数据指标让 Prometheus去采集，很多没有适配的应用也会有第三方 exporter 帮它去适配 Prometheus。</li>
</ul>
<h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><h3 id="无集群部署"><a href="#无集群部署" class="headerlink" title="无集群部署"></a>无集群部署</h3><p>Prometheus 本身只支持单机部署，没有自带支持集群部署，对于集群化和水平扩展，官方和社区都没有银弹，需要合理选择Federate、Cortex、Thanos等开源方案或自研方案。</p>
<h3 id="存储容量"><a href="#存储容量" class="headerlink" title="存储容量"></a>存储容量</h3><p>它的存储空间也受限于单机磁盘容量，磁盘容量决定了单个Prometheus所能存储的数据量，数据量大小又取决于被采集服务的指标数量、服务数量、采集速率以及数据过期时间。在数据量大的情况下，我们可能就需要做很多取舍，比如丢弃不重要的指标、降低采集速率、设置较短的数据过期时间。</p>
<h3 id="非精确监控系统"><a href="#非精确监控系统" class="headerlink" title="非精确监控系统"></a>非精确监控系统</h3><p>在设计上的权衡：放弃了一部分数据准确性，但放弃一点准确性得到的是更高的可靠性，监控系统一般情况下可用性大于一致性，容忍部分副本数据丢失，保证查询请求成功。Prometheus不一定保证数据准确，这里的非精确来自两个方面：<br>1）rate、histogram_quantile等数学函数。<br>2）来查询范围过长要做降采样，势必会造成数据精度丢失。</p>
<h2 id="资源消耗"><a href="#资源消耗" class="headerlink" title="资源消耗"></a>资源消耗</h2><p>在一个节点数量为6的kuberntes集群（指标主要来自kubelet服务、node-exporter服务、kube-apiserver、kube-controller等核心服务），单个Prometheus实例消耗0.1-0.4个cpu，2.5G-3G内存。</p>
<p><img src="/images/prometheus-thanos-2.png" alt="在这里插入图片描述"></p>
<h1 id="Prometheus高可用方案"><a href="#Prometheus高可用方案" class="headerlink" title="Prometheus高可用方案"></a>Prometheus高可用方案</h1><h2 id="业界Prometheus高可用方案概述"><a href="#业界Prometheus高可用方案概述" class="headerlink" title="业界Prometheus高可用方案概述"></a>业界Prometheus高可用方案概述</h2><ul>
<li>基本HA：即两套 Prometheus 采集完全一样的数据，外边挂负载均衡；</li>
<li>HA + 远程存储：除了基础的多副本 Prometheus，还通过 Remote Write 写入到远程存储，解决存储持久化问题；</li>
<li>联邦集群：即Federation，按照功能进行分区，不同的 Shard 采集不同的数据，由 Global 节点来统一存放，解决监控数据规模的问题。</li>
</ul>
<p>使用 Thanos或者Victoriametrics，来解决全局查询、多副本数据 Join 问题。</p>
<p>就算使用官方建议的多副本+联邦，仍然会遇到一些问题，比如官方建议数据做Shard，然后通过Federation来实现高可用，但是边缘节点和Global节点依然是单点，需要自行决定是否每一层都要使用双节点重复采集进行保活。本质原因是，Prometheus的本地存储没有数据同步能力，要在保证可用性的前提下，再保持数据一致性是比较困难的，基础的HA Proxy满足不了以下要求，比如：集群的后端有A和B两个实例，A和B之间没有数据同步。A 宕机一段时间，丢失了一部分指标数据，如果负载均衡正常轮询，请求打到 A 上时，数据就会异常。</p>
<h2 id="增强高可用的Prometheus数据一致性的思路"><a href="#增强高可用的Prometheus数据一致性的思路" class="headerlink" title="增强高可用的Prometheus数据一致性的思路"></a>增强高可用的Prometheus数据一致性的思路</h2><p>解决方案是可以从存储、查询两个角度上保证数据的一致。</p>
<h3 id="存储角度"><a href="#存储角度" class="headerlink" title="存储角度"></a>存储角度</h3><p>如果使用 Remote Write 远程存储， A和B后面可以都加一个Adapter，Adapter做选主逻辑，只有一份数据能推送到 TSDB，这样可以保证一个异常，另一个也能推送成功，数据不丢，同时远程存储只有一份，是共享数据。</p>
<h3 id="查询角度"><a href="#查询角度" class="headerlink" title="查询角度"></a>查询角度</h3><p>存储角度的解决方案实现很复杂且有一定风险，因此现在的大多数方案在查询层面做文章，比如Thanos或者Victoriametrics，仍然是两份数据，但是查询时做数据去重和Join。只是Thanos是通过Sidecar把数据放在对象存储，Victoriametrics是把数据Remote Write 到自己的Server实例，但查询层Thanos-Query和Victor的Promxy的逻辑基本一致。</p>
<h1 id="扩展Prometheus的解决方案"><a href="#扩展Prometheus的解决方案" class="headerlink" title="扩展Prometheus的解决方案"></a>扩展Prometheus的解决方案</h1><h2 id="cortext"><a href="#cortext" class="headerlink" title="cortext"></a>cortext</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Cortex（<a href="https://cortexmetrics.io）为Prometheus提供了水平可扩展，高可用性，多租户的长期存储。目前在cncf" target="_blank" rel="external">https://cortexmetrics.io）为Prometheus提供了水平可扩展，高可用性，多租户的长期存储。目前在cncf</a> 沙箱孵化。</p>
<p>Cortex为Prometheus提供了水平可扩展，高可用性，多租户的长期存储。Cortex是一个CNCF沙箱项目，用于多个生产系统，包括Weave Cloud和Grafana Cloud。Corte主要用作Prometheus的远程写入的存储，它提供与Prometheus兼容的查询API。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>水平可扩展：Cortex可以跨集群中的多台机器运行，超过了单台机器的吞吐量和存储量。这使您能够将指标从多个Prometheus服务器发送到单个Cortex群集，并在单个位置跨所有数据运行“全局聚合”查询；</li>
<li>高度可用：在集群中运行时，Cortex可以在机器之间复制数据。这样，您就可以在机器故障中幸存下来，而不会在图表中留下空白。</li>
<li>多租户：Cortex可以将数据和查询与单个群集中的多个不同独立Prometheus源隔离，从而使不受信任的各方共享同一群集；</li>
<li>长期存储：Cortex支持Amazon DynamoDB，Google Bigtable，Cassandra，S3和GCS来长期存储度量标准数据。这样一来，您可以持久地存储数据，其时间长于任何一台计算机的生命周期，并将此数据用于长期容量规划。</li>
</ul>
<h2 id="VictoriaMetrics"><a href="#VictoriaMetrics" class="headerlink" title="VictoriaMetrics"></a>VictoriaMetrics</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>VictoriaMetrics是一种快速，经济高效且可扩展的时间序列数据库。</p>
<p>它在二进制发行版，Docker映像和源代码中可用。</p>
<p>VictoriaMetrics也提供付费企业支持。</p>
<h2 id="Thanos"><a href="#Thanos" class="headerlink" title="Thanos"></a>Thanos</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>诞生于2018年9月，Thanos是一系列组件，基于Prometheus之上的可以组成具有无限存储容量的高可用性指标系统。Thanos是CNCF沙箱项目。Thanos利用Prometheus 2.0存储格式在任何对象存储中经济高效地存储历史指标数据，同时保留快速查询延迟。另外，它提供了所有Prometheus安装的全局查询视图，并且可以即时合并Prometheus HA对中的数据。</p>
<h3 id="架构-1"><a href="#架构-1" class="headerlink" title="架构"></a>架构</h3><p><img src="/images/prometheus-thanos-3.png" alt="img"></p>
<p><img src="/images/prometheus-thanos-4.jpeg" alt="img"></p>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul>
<li>提供全局查询视图；</li>
<li>支持主流对象存储，以提供可靠的历史数据存储；</li>
<li>支持降准采样，以提供更大时间范围的指标。</li>
</ul>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>面对大量的存储数据，Thanos有两种横向扩展方式，一种是基于时间的分区(TIME-BASED)，一种是基于标签的分区(LABEL-BASED)。</p>
<h5 id="基于时间的分区-TIME-BASED"><a href="#基于时间的分区-TIME-BASED" class="headerlink" title="基于时间的分区(TIME-BASED)"></a>基于时间的分区(TIME-BASED)</h5><p>默认情况下，Thanos的存储网关(Store Gateway)查看对象存储(OSS)中的所有数据，并根据查询的时间范围返回这些数据。所有StoreAPI源都会公布可用的最短和最长时间。我们可以使用这些参数来缩小这个分区的范围，此参数可以是相对时间，也可以是具体日期。如</p>
<ul>
<li>A: <code>max-time=-6w</code></li>
<li>B: <code>min-time=-8w</code> and <code>max-time=-2w</code></li>
<li>C: <code>min-time=-3w</code></li>
</ul>
<h5 id="基于标签的分区-LABEL-BASED"><a href="#基于标签的分区-LABEL-BASED" class="headerlink" title="基于标签的分区(LABEL-BASED)"></a>基于标签的分区(LABEL-BASED)</h5><p>基于标签的分区类似于基于时间的分区，所有StoreAPI源都会公布可用的LABEL序列的相关标签，，这些标签来自Prometheus的external标签，并基于Thanos组件显式设置标签。</p>
<h5 id="重复数据消除-DEDUPLICATION"><a href="#重复数据消除-DEDUPLICATION" class="headerlink" title="重复数据消除(DEDUPLICATION)"></a>重复数据消除(DEDUPLICATION)</h5><p>在Thanos架构中我们可以使用多个相同的Prometheus实例来实现高可用(HA)，以防止Prometheus单点故障。Thanos提供了查询结果的重复数据消除功能，从而可以实现Prometheus查询无缝对接。为了实现这一点，我们只需要在sidecar组件上设置一个或多个副本标签，其余的由query组件完成。如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Prometheus + sidecar “A”: cluster=1,env=2,replica=A</span><br><span class="line">Prometheus + sidecar “B”: cluster=1,env=2,replica=B</span><br><span class="line">Prometheus + sidecar “A” in different cluster: cluster=2,env=2,replica=A</span><br></pre></td></tr></table></figure>
<p>查询示例: <code>up{job=&quot;prometheus&quot;,env=&quot;2&quot;}</code>. <strong>重复数据消除</strong>功能开户后:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">up&#123;job=&quot;prometheus&quot;,env=&quot;2&quot;,cluster=&quot;1&quot;&#125; 1</span><br><span class="line">up&#123;job=&quot;prometheus&quot;,env=&quot;2&quot;,cluster=&quot;2&quot;&#125; 1</span><br></pre></td></tr></table></figure>
<p>没有开启重复数据消除功能:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">up&#123;job=&quot;prometheus&quot;,env=&quot;2&quot;,cluster=&quot;1&quot;,replica=&quot;A&quot;&#125; 1</span><br><span class="line">up&#123;job=&quot;prometheus&quot;,env=&quot;2&quot;,cluster=&quot;1&quot;,replica=&quot;B&quot;&#125; 1</span><br><span class="line">up&#123;job=&quot;prometheus&quot;,env=&quot;2&quot;,cluster=&quot;2&quot;,replica=&quot;A&quot;&#125; 1</span><br></pre></td></tr></table></figure>
<h4 id="降采样"><a href="#降采样" class="headerlink" title="降采样"></a>降采样</h4><p>在Thanos中进行降采样(DOWNSAMPLING)的目的不是为了节省磁盘空间。它的主要好处是使长周期范围的数据查询（如数月或数年）变得更快。事实上降采样并不会节省任何空间，它为每个原始块添加多了两个新块，它们略小于或接近原始块的大小。这意味着，降采样稍微增加了存储空间使用量，但在查询长周期范围时，它提供了巨大的性能和带宽占用优势。</p>
<p>三个粒度的块(chunks)：</p>
<ul>
<li>raw — Prometheus的原始metrics块；</li>
<li>5m — 原始metrics块的5分钟压缩块</li>
<li>1h —原始metrics块的1小时压缩块</li>
</ul>
<p><img src="/images/prometheus-thanos-5.png" alt="img"></p>
<p>使用压缩块查询的优势对比：</p>
<p><img src="/images/prometheus-thanos-6.png" alt="img"></p>
<p>在没有降采样块的情况下查询长周期范围意味着必须下载和处理与范围长度成比例的数据量。在1y示例中，我们将看到，降采样后就不需要下载20亿个样本（2GB，Prometheus默认15秒一个采样数据），而只需要获取和处理800万个样本（9MB），就足以呈现一个年度图表，这将带来很大的性能改进，并减少了很多带宽使用。</p>
<h3 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h3><h4 id="Thanos-sidecar"><a href="#Thanos-sidecar" class="headerlink" title="Thanos sidecar"></a>Thanos sidecar</h4><p>Sidecar作为一个单独的进程和已有的Prometheus实例运行在一个server上，互不影响。Sidecar可以视为一个Proxy组件，所有对Prometheus的访问都通过Sidecar来代理进行。通过Sidecar还可以将采集到的数据直接备份到云端对象存储服务器。</p>
<p>同时可支持多种对象存储(OSS)，<a href="https://thanos.io/storage.md/#configuration" target="_blank" rel="external">如Aliyun、腾讯云、S3、Google云存储、Azure存储等</a>，可无缝集成在Prometheus operator中进行部署。</p>
<h4 id="Thanos-store-gateway"><a href="#Thanos-store-gateway" class="headerlink" title="Thanos store gateway"></a>Thanos store gateway</h4><p>Store gateway实现了一套和Sidecar完全一致的API提供给Querier用于查询Sidecar备份到云端对象存储的数据。因为Sidecar在完成数据备份后，Prometheus会清理掉本地数据保证本地空间可用。所以当监控人员需要调取历史数据时只能去对象存储空间获取，而Store就提供了这样一个接口。Store Gateway内部还做了一些加速数据获取的优化逻辑，一是缓存了 TSDB 索引，二是优化了对象存储的远程调用请求 (用尽可能少的请求量拿到所有需要的数据)。</p>
<ul>
<li><p><strong>Store</strong></p>
<ul>
<li>从对象存储(OSS)中检索块(chunks)，以便查询长周期的监控指标</li>
<li>支持基于时间(time-based)的分区查询</li>
<li>支持基于标签(label-based)的分区查询</li>
</ul>
</li>
<li><p><strong>Bucket</strong></p>
<ul>
<li>监视对象存储Bucket中存储的监控数据</li>
</ul>
</li>
</ul>
<h4 id="Thanos-query"><a href="#Thanos-query" class="headerlink" title="Thanos query"></a>Thanos query</h4><p><img src="/images/prometheus-thanos-7.png" alt="img"></p>
<p>Querier从Sidecar和Store gateway获取指标数据，同时Querier实现了一套Prometheus官方的HTTP API从而保证对外提供与Prometheus一致的数据源接口，Grafana可以通过同一个查询接口请求不同集群的数据，Querier负责找到对应的集群并通过Sidecar获取数据，也能从Store gateway获取指标数据。Querier本身也是无状态的、可水平可扩展的，因而可以实现高可部署。Querier可以实现对高可部署的Prometheus的数据进行合并从而保证多次查询结果的一致性，从而解决全局视图和Prometheus高可用的问题。</p>
<p><img src="/images/prometheus-thanos-8.png" alt="img"></p>
<p>Thanos Query查询位于下游的Thanos Sidecar的指标数据，而Thanos Sidecar的指标数据来自与其绑定的Prometheus实例。</p>
<h4 id="Thanos-ruler"><a href="#Thanos-ruler" class="headerlink" title="Thanos ruler"></a>Thanos ruler</h4><p>对监控数据进行评估和告警，还可以计算出新的监控数据，将这些新指标数据提供给 Thanos Query 查询，上传指标数据到对象存储，以供长期存储。</p>
<h4 id="Thanos-compactor"><a href="#Thanos-compactor" class="headerlink" title="Thanos compactor"></a>Thanos compactor</h4><p>通常在查看较大时间范围的监控数据时，很多时候并不需要那么详细的数据，更多时候是为了得到数据趋势。compactor读取对象存储的数据，对其进行压缩以及降采样后再上传到对象存储，在查询大时间范围数据时就只读取压缩和降采样后的数据，极大地减少了查询的数据量，从而加速查询。</p>
<p>注意：Compact 组件并不会减少对象存储的使用空间，而是会增加，因为增加更长采样间隔的指标数据。如此一来，当查询大时间范围的数据时，就自动拉取更长时间间隔采样的数据以减少查询数据的总量，从而加快查询速度（大时间范围的数据不需要很精细的指标，需要的是趋势），当放大往细节查看时 (选择其中一小段时间)，又自动选择拉取更短采样间隔的数据，从而也能显示出小时间范围的监控细节。</p>
<h1 id="Thanos-部署"><a href="#Thanos-部署" class="headerlink" title="Thanos 部署"></a>Thanos 部署</h1><p>## </p>
<p>thanos主要使用到sidecar和query，如果需要数据备份至云存储，store组件也得启动。</p>
<h2 id="Thanos-Sidecar"><a href="#Thanos-Sidecar" class="headerlink" title="Thanos Sidecar"></a>Thanos Sidecar</h2><p>Thanos Sidecar以边车形式和Prometheus处于同一个Pod中，由于Prometheus散落在多个集群中，因此Thanos Sidecar位于多个集群中。prometheus和thanos sidecar是通过prometheus-operator来进行部署。thanos sidecar也通过nodePort方式的暴露（由于一个集群有2个thanos sidecar，因此分为设置nodePort为10901和10902）。thanos sidecar暴露的原因是作为位于其他集群的thanos query组件的后端存储。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Prometheus</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    prometheus:</span> <span class="string">k8s</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">k8s</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  alerting:</span></span><br><span class="line"><span class="attr">    alertmanagers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">alertmanager-main</span></span><br><span class="line"><span class="attr">      namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">      port:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">  image:</span> <span class="string">quay.mirrors.ustc.edu.cn/prometheus/prometheus:v2.15.2</span></span><br><span class="line"><span class="attr">  nodeSelector:</span></span><br><span class="line">    <span class="string">kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line"><span class="attr">  podMonitorNamespaceSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  podMonitorSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="attr">    requests:</span></span><br><span class="line"><span class="attr">      memory:</span> <span class="number">400</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">  ruleSelector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      prometheus:</span> <span class="string">k8s</span></span><br><span class="line"><span class="attr">      role:</span> <span class="string">alert-rules</span></span><br><span class="line"><span class="attr">  securityContext:</span></span><br><span class="line"><span class="attr">    fsGroup:</span> <span class="number">2000</span></span><br><span class="line"><span class="attr">    runAsNonRoot:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    runAsUser:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">  serviceAccountName:</span> <span class="string">prometheus-k8s</span></span><br><span class="line"><span class="attr">  serviceMonitorNamespaceSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  serviceMonitorSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  version:</span> <span class="string">v2.15.2</span></span><br><span class="line"><span class="attr">  tolerations:</span></span><br><span class="line"><span class="attr">  - effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"><span class="attr">    key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line"><span class="attr">  thanos:</span></span><br><span class="line"><span class="attr">    baseImage:</span> <span class="string">quay.mirrors.ustc.edu.cn/thanos/thanos</span></span><br><span class="line"><span class="attr">    version:</span> <span class="string">v0.11.0</span></span><br><span class="line"><span class="attr">    objectStorageConfig:</span></span><br><span class="line"><span class="attr">      key:</span> <span class="string">objectstorage.yaml</span></span><br><span class="line"><span class="attr">     name:</span> <span class="string">thanos-objectstorage</span></span><br><span class="line"><span class="attr">  externalLabels:</span></span><br><span class="line"><span class="attr">    cluster:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">thanos-sidecar</span></span><br><span class="line">    <span class="string">statefulset.kubernetes.io/pod-name:</span> <span class="string">prometheus-k8s-0</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">thanos-sidecar-0-external</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  externalTrafficPolicy:</span> <span class="string">Cluster</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">grpc</span></span><br><span class="line"><span class="attr">    nodePort:</span> <span class="number">10901</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">10901</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="string">grpc</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    prometheus:</span> <span class="string">k8s</span></span><br><span class="line">    <span class="string">statefulset.kubernetes.io/pod-name:</span> <span class="string">prometheus-k8s-0</span></span><br><span class="line"><span class="attr">  sessionAffinity:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="bullet">-</span><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">thanos-sidecar</span></span><br><span class="line">    <span class="string">statefulset.kubernetes.io/pod-name:</span> <span class="string">prometheus-k8s-1</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">thanos-sidecar-1-external</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  externalTrafficPolicy:</span> <span class="string">Cluster</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">grpc</span></span><br><span class="line"><span class="attr">    nodePort:</span> <span class="number">10902</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">10901</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="string">grpc</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    prometheus:</span> <span class="string">k8s</span></span><br><span class="line">    <span class="string">statefulset.kubernetes.io/pod-name:</span> <span class="string">prometheus-k8s-1</span></span><br><span class="line"><span class="attr">  sessionAffinity:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure>
<h2 id="Thanos-query-1"><a href="#Thanos-query-1" class="headerlink" title="Thanos query"></a>Thanos query</h2><p>Thanos Query是无状态服务，以Deployment形式、双副本部署在一个独立集群中。通过配置文件的方式指定位于其他集群中的thanos sidecar。</p>
<p><img src="/images/prometheus-thanos-9.png" alt="在这里插入图片描述"></p>
<p>说明：</p>
<ul>
<li>开启部分响应特性，此时在部分后端 Store API 返回错误或超时的情况下也能查询到正确的监控数据(如果后端 Store API 做了高可用，挂掉一个副本，Query访问挂掉的副本超时，但由于还存在其他可用的副本，于是客户端能获取正确的查询结果；如果挂掉的某个后端本身就不存在客户端需要的数据，挂掉也不影响查询结果的正确性)；</li>
<li>开启查询时自动降采样的特性，以提供查询效率。</li>
</ul>
<h2 id="Thanos-store-gateway-1"><a href="#Thanos-store-gateway-1" class="headerlink" title="Thanos store gateway"></a>Thanos store gateway</h2><p>store gateway以StatefulSet形式、双副本部署在一个独立集群中。为它创建Kubernetes headless service，用于 Thanos Query组件对Store Gateway进行服务发现。</p>
<h2 id="Thanos-ruler-1"><a href="#Thanos-ruler-1" class="headerlink" title="Thanos ruler"></a>Thanos ruler</h2><p>Thanos ruler以StatefulSet形式、双副本部署在一个独立集群（和thanos query同一个集群）中。为它创建Kubernetes headless service，用于 Thanos Query组件对Thanos Ruler进行集群内的服务发现。另外我制作了一个小镜像用于让ruler组件重载配置文件，在规则文件被修改的时候。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">thanos-rule</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">thanos-rule</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">grpc</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">10901</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="string">grpc</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">10902</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">thanos-rule</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">thanos-rule</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">thanos-rule</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line">      <span class="string">app.kubernetes.io/name:</span> <span class="string">thanos-rule</span></span><br><span class="line"><span class="attr">  serviceName:</span> <span class="string">thanos-rules</span></span><br><span class="line"><span class="attr">  podManagementPolicy:</span> <span class="string">Parallel</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line">        <span class="string">app.kubernetes.io/name:</span> <span class="string">thanos-rule</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      serviceAccount:</span> <span class="string">thanos-rules</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">reloader</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">registry.cn-shenzhen.aliyuncs.com/gzlj/thanos-reloader:v0.1</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          limits:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="number">100</span><span class="string">m</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">100</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">      - args:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">rule</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--grpc-address=0.0.0.0:10901</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--http-address=0.0.0.0:10902</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--rule-file=/etc/thanos/rules/*rules.yaml</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--objstore.config-file=/etc/thanos/objectstorage.yaml</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--data-dir=/var/thanos/rule</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--label=rule_replica="$(NAME)"</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--alert.label-drop="rule_replica"</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--query=dnssrv+_http._tcp.thanos-query.monitoring.svc.cluster.local</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--alertmanagers.url=http://alertmanager-main.monitoring.svc.cluster.local:9093</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">NAME</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">quay.mirrors.ustc.edu.cn/thanos/thanos:v0.11.0</span></span><br><span class="line"><span class="attr">        livenessProbe:</span></span><br><span class="line"><span class="attr">          failureThreshold:</span> <span class="number">24</span></span><br><span class="line"><span class="attr">          httpGet:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/-/healthy</span></span><br><span class="line"><span class="attr">            port:</span> <span class="number">10902</span></span><br><span class="line"><span class="attr">            scheme:</span> <span class="string">HTTP</span></span><br><span class="line"><span class="attr">          periodSeconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">thanos-rule</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">10901</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">grpc</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">10902</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">        readinessProbe:</span></span><br><span class="line"><span class="attr">          failureThreshold:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">          httpGet:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/-/ready</span></span><br><span class="line"><span class="attr">            port:</span> <span class="number">10902</span></span><br><span class="line"><span class="attr">            scheme:</span> <span class="string">HTTP</span></span><br><span class="line"><span class="attr">          initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">          periodSeconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">        terminationMessagePolicy:</span> <span class="string">FallbackToLogsOnError</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/var/thanos/rule</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">data</span></span><br><span class="line"><span class="attr">          readOnly:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">thanos-objectstorage</span></span><br><span class="line"><span class="attr">          subPath:</span> <span class="string">objectstorage.yaml</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/thanos/objectstorage.yaml</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">thanos-rules</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/thanos/rules</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">thanos-objectstorage</span></span><br><span class="line"><span class="attr">        secret:</span></span><br><span class="line"><span class="attr">          secretName:</span> <span class="string">thanos-objectstorage</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">thanos-rules</span></span><br><span class="line"><span class="attr">        configMap:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">thanos-rules</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">data</span></span><br><span class="line"><span class="attr">        emptyDir:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="Thanos-Operator部署"><a href="#Thanos-Operator部署" class="headerlink" title="Thanos Operator部署"></a>Thanos Operator部署</h1><h2 id="Thanos-operator-CRDs"><a href="#Thanos-operator-CRDs" class="headerlink" title="Thanos operator CRDs"></a>Thanos operator CRDs</h2><p><img src="/images/prometheus-thanos-10.png" alt="image-20210905124307681"></p>
<h3 id="ObjectStore"><a href="#ObjectStore" class="headerlink" title="ObjectStore"></a>ObjectStore</h3><p>该资源负责 bucket 管理。 Thanos 在 bucket 上压缩和采样，强烈建议您每个 bucket 只运行一个 compactor。</p>
<blockquote>
<p>一般来说，超过一个部署不是并发安全的，必须针对 bucket 作为单例部署。</p>
</blockquote>
<p>此外，还有一个很棒的 bucket 检查工具，称为<code>bucket</code>，它为存储在bucket中的块提供了一个简单的 Web 界面。</p>
<h3 id="Thanos-amp-StoreEndpoint"><a href="#Thanos-amp-StoreEndpoint" class="headerlink" title="Thanos &amp; StoreEndpoint"></a>Thanos &amp; StoreEndpoint</h3><p>Thanos 是负责查询、存储和规则配置的主要自定义资源。它与代表不同 StoreAPI 端点的 StoreEndpoint 有特殊关系。这些可以是 Sidecar、Store、Rule 或任何其他 Store API 提供程序。 Thanos 资源按 StoreEndpoint 实例化。这意味着您可以为多个 Prometheus 实例或集群使用单个 Thanos 配置。</p>
<p>现在让我们看一些部署示例，以帮助我们更好地理解 CRD。</p>
<h2 id="单集群"><a href="#单集群" class="headerlink" title="单集群"></a>单集群</h2><p>在这种情况下，我们将使用 Thanos 的长期存储功能。这意味着我们将安装一个带有 Thanos sidecar 和完整 Thanos 堆栈的 Prometheus 算子。让我们看一个极简主义设置的例子。</p>
<p><img src="/images/prometheus-thanos-11.png" alt="img"></p>
<p>可以看到蓝色为无状态服务（stateless），橙色为有状态服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//编辑prometheus-operator的value.ymal文件开启thanos sidecar（待补充）</span><br><span class="line"> </span><br><span class="line">//安装、删除prometheus-operator</span><br><span class="line">helm template ./charts/prometheus-operator --name tpo --namespace monitor | kubectl apply --validate=false -f -</span><br><span class="line">helm template ./charts/prometheus-operator --name tpo --namespace monitor | kubectl delete --ignore-not-found=true -f -</span><br><span class="line"> </span><br><span class="line">//下载Thanos Operator</span><br><span class="line">helm repo add banzaicloud-stable https://kubernetes-charts.banzaicloud.com</span><br><span class="line">helm fetch --untar --untardir ./charts banzaicloud-stable/thanos</span><br><span class="line"> </span><br><span class="line">//编辑value.ymal文件（待补充）</span><br><span class="line"> </span><br><span class="line">//手动安装Thanos</span><br><span class="line">helm template ./charts/thanos --name t-thanos --namespace monitor | kubectl -n monitor apply --validate=false -f -</span><br><span class="line">helm template ./charts/thanos --name t-thanos --namespace monitor | kubectl -n monitor delete --ignore-not-found=true -f -</span><br></pre></td></tr></table></figure>
<h3 id="objectstore"><a href="#objectstore" class="headerlink" title="objectstore"></a><strong>objectstore</strong></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.banzaicloud.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ObjectStore</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">objectstore-sample</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  config:</span></span><br><span class="line"><span class="attr">    mountFrom:</span></span><br><span class="line"><span class="attr">      secretKeyRef:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">thanos</span></span><br><span class="line"><span class="attr">        key:</span> <span class="string">object-store.yaml</span></span><br><span class="line"><span class="attr">  bucketWeb:</span></span><br><span class="line"><span class="attr">    label:</span> <span class="string">cluster</span></span><br><span class="line"><span class="attr">  compactor:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="storeendpoint"><a href="#storeendpoint" class="headerlink" title="storeendpoint"></a><strong>storeendpoint</strong></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.banzaicloud.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StoreEndpoint</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">storeendpoint-sample</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># Add fields here</span></span><br><span class="line"><span class="attr">  thanos:</span> <span class="string">thanos-sample</span></span><br><span class="line"><span class="attr">  config:</span></span><br><span class="line"><span class="attr">    mountFrom:</span></span><br><span class="line"><span class="attr">      secretKeyRef:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">thanos</span></span><br><span class="line"><span class="attr">        key:</span> <span class="string">object-store.yaml</span></span><br><span class="line"><span class="attr">  selector:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="thanos"><a href="#thanos" class="headerlink" title="thanos"></a><strong>thanos</strong></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.banzaicloud.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Thanos</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">thanos-sample</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  query:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  rule:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  storeGateway:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="多集群"><a href="#多集群" class="headerlink" title="多集群"></a>多集群</h2><p>根据上面的部署，我们只有一个集群部署，但是如果我们有多个集群并且需要一种查看它们的方法怎么办？我们可以采取几种不同的方法。现在，我们将探索最基本的。我们已经安装了多个安装了 Thanos 的集群。我们需要使用指向这些集群的端点配置 Thanos 自定义资源。</p>
<p><img src="/images/prometheus-thanos-12.png" alt="img"></p>
<h3 id="Thanos-1"><a href="#Thanos-1" class="headerlink" title="Thanos"></a><strong>Thanos</strong></h3><p>Thanos with only query definition</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.banzaicloud.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Thanos</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">thanos-multi</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  query:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="StoreEndpoint"><a href="#StoreEndpoint" class="headerlink" title="StoreEndpoint"></a>StoreEndpoint</h3><p>store-endpoints per cluster</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.banzaicloud.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StoreEndpoint</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">remote-cluster-n</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  thanos:</span> <span class="string">thanos-multi</span></span><br><span class="line"><span class="attr">  url:</span> <span class="attr">http://remote-cluster-n.com</span></span><br></pre></td></tr></table></figure>
<h2 id="观察者集群部署"><a href="#观察者集群部署" class="headerlink" title="观察者集群部署"></a>观察者集群部署</h2><p>此部署模型从集群中减去额外的工作负载，并将 Thanos 组件移动到专用的观察者集群。</p>
<p><img src="/images/prometheus-thanos-13.png" alt="Thanos Observer Cluster"></p>
<h3 id="Thanos-2"><a href="#Thanos-2" class="headerlink" title="Thanos"></a><strong>Thanos</strong></h3><p>thanos with queryDiscovery definition</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.banzaicloud.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Thanos</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">query-master</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  query:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  queryDiscovery:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>thanos definition for the remote clusters</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.banzaicloud.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Thanos</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">thanos-generic-n</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  query:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  rule:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  storeGateway:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.banzaicloud.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StoreEndpoint</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">remote-cluster-n</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  thanos:</span> <span class="string">thanos-generic-n</span></span><br><span class="line"><span class="attr">  url:</span> <span class="attr">http://remote-cluster-n.com</span></span><br><span class="line"><span class="attr">  config:</span></span><br><span class="line"><span class="attr">    mountFrom:</span></span><br><span class="line"><span class="attr">      secretKeyRef:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">thanos</span></span><br><span class="line"><span class="attr">        key:</span> <span class="string">object-store-n.yaml</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：此部署模型也适用于单集群多命名空间部署</p>
</blockquote>
<p>参考：</p>
<p><a href="https://blog.csdn.net/nangonghen/article/details/108597905?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control" target="_blank" rel="external">扩展Prometheus的解决方案thanos</a></p>
<p><a href="https://blog.csdn.net/weixin_45502294/article/details/114086025?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-15.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-15.control" target="_blank" rel="external">多集群监控组件Thanos</a></p>
<p><a href="https://www.dazhuanlan.com/kicker114/topics/1679342" target="_blank" rel="external">Deploy Prometheus Operator With Thanos</a></p>
<p><a href="https://banzaicloud.com/blog/thanos-operator/" target="_blank" rel="external">Introducing the Thanos Operator</a></p>
]]></content>
      
        <categories>
            
            <category> Prometheus </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Prometheus </tag>
            
            <tag> Thanos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Thanos 源码分析]]></title>
      <url>https://magiceses.github.io/2020/11/01/prometheus-thanos-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">不要因为没有掌声，而放弃梦想，我们需要的是坚持，而不是观众。<br></p>

<p>thanos组件版本：v0.16.0</p>
<h1 id="Thanos-Query"><a href="#Thanos-Query" class="headerlink" title="Thanos Query"></a>Thanos Query</h1><h2 id="Thanos-Query的作用"><a href="#Thanos-Query的作用" class="headerlink" title="Thanos Query的作用"></a>Thanos Query的作用</h2><p>Thanos Query组件是http服务器 + grpc服务器，它的数据源是位于下游的已发现的实现STORE API的组件（例如Thanos Sidecar组件、Thanos Store组件、Thanos Ruler组件），同时实现了Prometheus官方的HTTP API。Thanos Query组件从下游处获得数据后，能进行合并、去重等操作，最后将结果返回给外部的客户端。因此，Thanos Query就是数据库中间件的角色。</p>
<p><img src="/images/prometheus-thanos-14.png" alt="在这里插入图片描述"></p>
<a id="more"></a>
<p>使用github.com/oklog/run包来启动一组协程，这些协程的逻辑主要是启动了http server、grpc server、动态发现位于下游的实现STORE API的组件等。</p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="/images/prometheus-thanos-15.png" alt="在这里插入图片描述"></p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="启动参数"><a href="#启动参数" class="headerlink" title="启动参数"></a>启动参数</h3><p>Thanos的启动命令格式如下，格式都是thanos开头（因为是同一个可执行二进制文件）。启动哪个组件，在于第一个参数，在本例子中是query，因此这条命令是启动query组件的逻辑。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">thanos query \</span><br><span class="line">--log.level=debug \</span><br><span class="line">--query.auto-downsampling \</span><br><span class="line">--grpc-address=0.0.0.0:10901 \</span><br><span class="line">--http-address=0.0.0.0:9090 \</span><br><span class="line">--query.partial-response \</span><br><span class="line">--query.replica-label=prometheus_replica \</span><br><span class="line">--query.replica-label=rule_replica \</span><br><span class="line">--store=dnssrv+_grpc._tcp.prometheus-headless.thanos.svc.cluster.local \</span><br><span class="line">--store=dnssrv+_grpc._tcp.thanos-rule.thanos.svc.cluster.local \</span><br><span class="line">--store=dnssrv+_grpc._tcp.thanos-store.thanos.svc.cluster.local</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<br>1、partial-response 一定要加上</p>
<p>这个flag设立的目的是遵照数据一致性原则<br>如果1、2、3中有某个返回查询数据为空或者超时（默认是2分钟）的情况下，这次整体的结果是否还要保留：<br>开启的情况下 ， 有点儿部分人成虎的感觉<br>不开启，则必须要求每个上游都要有结果才行，真一致性</p>
<p>2、deduplicate</p>
<p>不去重的情况下，会看到相同数据了具体来自哪个数据源，尤其是prom和ruler源<br>去重开启，程序后台会对每次响应的数据源做个打分，选择优秀的源作为本次的gRPC对象</p>
</blockquote>
<h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><h4 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h4><p>来具体看看main方法。创建app对象，app对象包含了所有Thanos组件的启动函数，但真正启动时只从map中取出一个函数进行启动，取出哪个函数取决于启动命令。</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	app := extkingpin.NewApp(kingpin.New(filepath.Base(os.Args[<span class="number">0</span>]), <span class="string">"A block storage based long-term storage for Prometheus"</span>).Version(version.Print(<span class="string">"thanos"</span>)))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 把所有组件的启动逻辑都放进app对象中的setups列表中</span></span><br><span class="line">	registerSidecar(app)</span><br><span class="line">	registerStore(app)</span><br><span class="line">	registerQuery(app)</span><br><span class="line">	registerRule(app)</span><br><span class="line">	registerCompact(app)</span><br><span class="line">	registerTools(app)</span><br><span class="line">	registerReceive(app)</span><br><span class="line">	registerQueryFrontend(app)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 根据命令行的信息，从app对象的setups列表中取出一个组件逻辑</span></span><br><span class="line">	cmd, setup := app.Parse()</span><br><span class="line">	logger := logging.NewLogger(*logLevel, *logFormat, *debugName)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> g run.Group</span><br><span class="line">	<span class="keyword">var</span> tracer opentracing.Tracer</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		tracing相关的代码</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	reloadCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 启动特定的一个组件(sidecar、query、store等组件中的一种)，底层还是执行g.Add(...)</span></span><br><span class="line">	<span class="keyword">if</span> err := setup(&amp;g, logger, metrics, tracer, reloadCh, *logLevel == <span class="string">"debug"</span>); err != <span class="literal">nil</span> &#123;		</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 监听来自系统的杀死信号.</span></span><br><span class="line">	&#123;</span><br><span class="line">		cancel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">		g.Add(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">			<span class="keyword">return</span> interrupt(logger, cancel)</span><br><span class="line">		&#125;, <span class="function"><span class="keyword">func</span><span class="params">(error)</span></span> &#123;</span><br><span class="line">			<span class="built_in">close</span>(cancel)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 监听来配置重载的信号</span></span><br><span class="line">	&#123;</span><br><span class="line">		cancel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">		g.Add(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">			<span class="keyword">return</span> reload(logger, cancel, reloadCh)</span><br><span class="line">		&#125;, <span class="function"><span class="keyword">func</span><span class="params">(error)</span></span> &#123;</span><br><span class="line">			<span class="built_in">close</span>(cancel)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 阻塞地等待所有协程中的退出</span></span><br><span class="line">	<span class="comment">// 有一个协程返回，其他协程也会返回</span></span><br><span class="line">	<span class="keyword">if</span> err := g.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		level.Error(logger).Log(<span class="string">"err"</span>, fmt.Sprintf(<span class="string">"%+v"</span>, errors.Wrapf(err, <span class="string">"%s command failed"</span>, cmd)))</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 到达此处，说明整个程序结束了。</span></span><br><span class="line">	level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"exiting"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="registerQuery函数"><a href="#registerQuery函数" class="headerlink" title="registerQuery函数"></a>registerQuery函数</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerQuery</span><span class="params">(app *extkingpin.App)</span></span> &#123;</span><br><span class="line">	cmd := app.Command(comp.String(), <span class="string">"query node exposing PromQL enabled Query API with data retrieved from multiple store nodes"</span>)	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		解析命令行参数</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//Setup()的参数是一个函数，会被放入app对象的setups列表中</span></span><br><span class="line">	<span class="comment">//闭包的使用技巧以及相关堆栈的分析</span></span><br><span class="line">	<span class="comment">//最核心的是runQuery()方法</span></span><br><span class="line">	cmd.Setup(<span class="function"><span class="keyword">func</span><span class="params">(g *run.Group, logger log.Logger, reg *prometheus.Registry, tracer opentracing.Tracer, _ &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, _ <span class="keyword">bool</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">		...</span><br><span class="line">		...</span><br><span class="line">		...</span><br><span class="line">		<span class="keyword">return</span> runQuery(</span><br><span class="line">			g,</span><br><span class="line">			logger,</span><br><span class="line">			reg,</span><br><span class="line">			tracer,</span><br><span class="line">			*requestLoggingDecision,</span><br><span class="line">			*grpcBindAddr,</span><br><span class="line">			time.Duration(*grpcGracePeriod),</span><br><span class="line">			*grpcCert,</span><br><span class="line">			*grpcKey,</span><br><span class="line">			*grpcClientCA,</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">				其他代码</span></span><br><span class="line"><span class="comment">			*/</span></span><br><span class="line">		)</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="runQuery函数"><a href="#runQuery函数" class="headerlink" title="runQuery函数"></a>runQuery函数</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用run.Group对象来启动http server、grpc server、服务发现协程。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runQuery</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	g *run.Group,		//其实来自main()</span>方法</span></span><br><span class="line"><span class="function">	<span class="title">logger</span> <span class="title">log</span>.<span class="title">Logger</span>,</span></span><br><span class="line"><span class="function">	<span class="title">reg</span> *<span class="title">prometheus</span>.<span class="title">Registry</span>,</span></span><br><span class="line"><span class="function">	<span class="title">tracer</span> <span class="title">opentracing</span>.<span class="title">Tracer</span>,</span></span><br><span class="line"><span class="function">	<span class="title">requestLoggingDecision</span> <span class="title">string</span>,</span></span><br><span class="line"><span class="function">	<span class="title">grpcBindAddr</span> <span class="title">string</span>,</span></span><br><span class="line"><span class="function">	<span class="title">grpcGracePeriod</span> <span class="title">time</span>.<span class="title">Duration</span>,</span></span><br><span class="line"><span class="function">	<span class="title">grpcCert</span> <span class="title">string</span>,</span></span><br><span class="line"><span class="function">	<span class="title">grpcKey</span> <span class="title">string</span>,</span></span><br><span class="line"><span class="function">	<span class="title">grpcClientCA</span> <span class="title">string</span>,</span></span><br><span class="line"><span class="function">	/*</span></span><br><span class="line"><span class="function">		其他代码</span></span><br><span class="line"><span class="function">	*/</span></span><br><span class="line"><span class="function">) <span class="title">error</span></span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		<span class="comment">// stores对象的类型StoreSet。它包含了一组store组件</span></span><br><span class="line">		<span class="comment">//（位于下游的实现Store API的组件），这一组store组件是可以动态变化的</span></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		type StoreSet struct &#123;</span></span><br><span class="line"><span class="comment">			//其他属性</span></span><br><span class="line"><span class="comment">			stores       map[string]*storeRef</span></span><br><span class="line"><span class="comment">		&#125;		</span></span><br><span class="line"><span class="comment">		*/</span>		</span><br><span class="line">		stores = query.NewStoreSet(...)</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// proxy对象，即下游的Store API组件的代理</span></span><br><span class="line">		<span class="comment">// 下游的Store API组件的列表，其实就是构造方法的入参stores.Get这个方法来获取</span></span><br><span class="line">		proxy            = store.NewProxyStore(logger, reg, stores.Get, component.Query, selectorLset, storeResponseTimeout)</span><br><span class="line">		rulesProxy       = rules.NewProxy(logger, stores.GetRulesClients)</span><br><span class="line">				</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">			queryableCreator是一个方法，用于创建一个querier结构体对象;			</span></span><br><span class="line"><span class="comment">			querier结构体的属性proxy就是proxy对象，它包含了一组会动态变化的thanos store组件(动态变化是因为启动了一些额外的专门的协程来动态地修改这个切片);</span></span><br><span class="line"><span class="comment">		*/</span>	</span><br><span class="line">		queryableCreator = query.NewQueryableCreator(</span><br><span class="line">			logger,</span><br><span class="line">			extprom.WrapRegistererWithPrefix(<span class="string">"thanos_query_"</span>, reg),</span><br><span class="line">			proxy,</span><br><span class="line">			maxConcurrentSelects,</span><br><span class="line">			queryTimeout,</span><br><span class="line">		)</span><br><span class="line">							</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">			这一段代码都是启动一些协程，定时发现和动态发现Store API组件的变化，随即更新stores对象中的类型为map[string]*storeRef的属性	</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">				</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 创建http server，注册http handler，并启动server</span></span><br><span class="line">		&#123;</span><br><span class="line"></span><br><span class="line">			router := route.New()</span><br><span class="line">			<span class="comment">//新建QueryAPI结构体对象</span></span><br><span class="line">			api := v1.NewQueryAPI(</span><br><span class="line">						logger,</span><br><span class="line">						stores,</span><br><span class="line">						engine,</span><br><span class="line">						queryableCreator,</span><br><span class="line">						rules.NewGRPCClientWithDedup(rulesProxy, queryReplicaLabels),</span><br><span class="line">						enableAutodownsampling,</span><br><span class="line">						enableQueryPartialResponse,</span><br><span class="line">						enableRulePartialResponse,</span><br><span class="line">						queryReplicaLabels,</span><br><span class="line">						flagsMap,</span><br><span class="line">						instantDefaultMaxSourceResolution,</span><br><span class="line">						defaultMetadataTimeRange,</span><br><span class="line">						gate.New(</span><br><span class="line">							extprom.WrapRegistererWithPrefix(<span class="string">"thanos_query_concurrent_"</span>, reg),</span><br><span class="line">							maxConcurrentQueries,</span><br><span class="line">						),</span><br><span class="line">					)</span><br><span class="line">					</span><br><span class="line">			<span class="comment">// 为router对象注册http方法	</span></span><br><span class="line">			api.Register(router.WithPrefix(<span class="string">"/api/v1"</span>), tracer, logger, ins, logMiddleware)</span><br><span class="line">			</span><br><span class="line">			srv := httpserver.New(logger, reg, comp, httpProbe,</span><br><span class="line">					httpserver.WithListen(httpBindAddr),</span><br><span class="line">					httpserver.WithGracePeriod(httpGracePeriod),</span><br><span class="line">			)</span><br><span class="line">			<span class="comment">// http服务器使用router对象</span></span><br><span class="line">			srv.Handle(<span class="string">"/"</span>, router)</span><br><span class="line">			</span><br><span class="line">			g.Add(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				statusProber.Healthy()</span><br><span class="line">				<span class="comment">// 启动http server</span></span><br><span class="line">				<span class="keyword">return</span> srv.ListenAndServe()		</span><br><span class="line">			&#125;, <span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">				statusProber.NotReady(err)</span><br><span class="line">				<span class="keyword">defer</span> statusProber.NotHealthy(err)</span><br><span class="line">				srv.Shutdown(err)</span><br><span class="line">		&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">		<span class="comment">// 创建gprc server，注册grpc handler，并启动server</span></span><br><span class="line">		<span class="comment">// 它本身也可以是一个store, 为上层的front做准备</span></span><br><span class="line">		&#123;</span><br><span class="line">			tlsCfg, err := tls.NewServerConfig(log.With(logger, <span class="string">"protocol"</span>, <span class="string">"gRPC"</span>), grpcCert, grpcKey, grpcClientCA)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> errors.Wrap(err, <span class="string">"setup gRPC server"</span>)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			s := grpcserver.New(logger, reg, tracer, comp, grpcProbe,				</span><br><span class="line">				grpcserver.WithServer(store.RegisterStoreServer(proxy)),		<span class="comment">// 注册grpc handler</span></span><br><span class="line">				grpcserver.WithServer(rules.RegisterRulesServer(rulesProxy)),   <span class="comment">// 注册grpc handler</span></span><br><span class="line">				grpcserver.WithListen(grpcBindAddr),</span><br><span class="line">				grpcserver.WithGracePeriod(grpcGracePeriod),</span><br><span class="line">				grpcserver.WithTLSConfig(tlsCfg),</span><br><span class="line">			)</span><br><span class="line"></span><br><span class="line">			g.Add(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				statusProber.Ready()</span><br><span class="line">				<span class="comment">// 启动grpc server</span></span><br><span class="line">				<span class="keyword">return</span> s.ListenAndServe()		</span><br><span class="line">			&#125;, <span class="function"><span class="keyword">func</span><span class="params">(error)</span></span> &#123;</span><br><span class="line">				statusProber.NotReady(err)</span><br><span class="line">				s.Shutdown(err)</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 至此，http server和grpc server都启动了。</span></span><br><span class="line">		level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"starting query node"</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>			</span><br><span class="line">	)</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="QueryAPI结构体及其方法"><a href="#QueryAPI结构体及其方法" class="headerlink" title="QueryAPI结构体及其方法"></a>QueryAPI结构体及其方法</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// QueryAPI is an API used by Thanos Query.</span></span><br><span class="line"><span class="keyword">type</span> QueryAPI <span class="keyword">struct</span> &#123;</span><br><span class="line">	baseAPI         *api.BaseAPI</span><br><span class="line">	logger          log.Logger</span><br><span class="line">	gate            gate.Gate</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 构造方法，用于创建一个querier结构体对象</span></span><br><span class="line">	queryableCreate query.QueryableCreator</span><br><span class="line">	</span><br><span class="line">	queryEngine     *promql.Engine</span><br><span class="line">	ruleGroups      rules.UnaryClient</span><br><span class="line">	...</span><br><span class="line">	...</span><br><span class="line">	...</span><br><span class="line">	replicaLabels []<span class="keyword">string</span></span><br><span class="line">	storeSet      *query.StoreSet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(qapi *QueryAPI)</span> <span class="title">Register</span><span class="params">(r *route.Router, tracer opentracing.Tracer, logger log.Logger, ins extpromhttp.InstrumentationMiddleware, logMiddleware *logging.HTTPServerMiddleware)</span></span> &#123;</span><br><span class="line">	qapi.baseAPI.Register(r, tracer, logger, ins, logMiddleware)</span><br><span class="line">	instr := api.GetInstr(tracer, logger, ins, logMiddleware)</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		其他代码</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 把qapi.query、qapi.series、 qapi.stores注册到入参r，从而完成http handler的注册</span></span><br><span class="line">	<span class="comment">// 不管是/query接口和/series接口，每次请求到达都会创建querier对象，而querier对象内含了一组的Store API组件</span></span><br><span class="line">	r.Get(<span class="string">"/query"</span>, instr(<span class="string">"query"</span>, qapi.query))</span><br><span class="line">	r.Get(<span class="string">"/series"</span>, instr(<span class="string">"series"</span>, qapi.series))</span><br><span class="line">	r.Get(<span class="string">"/stores"</span>, instr(<span class="string">"stores"</span>, qapi.stores))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回指标数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(qapi *QueryAPI)</span> <span class="title">series</span><span class="params">(r *http.Request)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, []error, *api.ApiError)</span></span> &#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	其他代码</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 创建一个querier对象</span></span><br><span class="line">	<span class="comment">// querier对象的属性proxy则包含了一组thanos store组件</span></span><br><span class="line">	q, err := qapi.queryableCreate(enableDedup, replicaLabels, storeDebugMatchers, math.MaxInt64, enablePartialResponse, <span class="literal">true</span>).</span><br><span class="line">		Querier(r.Context(), timestamp.FromTime(start), timestamp.FromTime(end))</span><br><span class="line">		</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	其他代码</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		metrics = []labels.Labels&#123;&#125;</span><br><span class="line">		sets    []storage.SeriesSet</span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">for</span> _, mset := <span class="keyword">range</span> matcherSets &#123;</span><br><span class="line">		<span class="comment">// 调用querier对象的Select()方法获取指标</span></span><br><span class="line">		sets = <span class="built_in">append</span>(sets, q.Select(<span class="literal">false</span>, <span class="literal">nil</span>, mset...))</span><br><span class="line">	&#125;</span><br><span class="line">	set := storage.NewMergeSeriesSet(sets, storage.ChainedSeriesMerge)</span><br><span class="line">	<span class="keyword">for</span> set.Next() &#123;</span><br><span class="line">		metrics = <span class="built_in">append</span>(metrics, set.At().Labels())</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">return</span> metrics, set.Warnings(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="querier结构体及其方法"><a href="#querier结构体及其方法" class="headerlink" title="querier结构体及其方法"></a>querier结构体及其方法</h4><p>实现了 Querier接口（github.com/prometheus/prometheus/storage/interface.go），此接口的核心方法是Select(…)，这个方法在/query和/series等接口中都会被使用到。</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> querier <span class="keyword">struct</span> &#123;</span><br><span class="line">	ctx                 context.Context</span><br><span class="line">	logger              log.Logger</span><br><span class="line">	cancel              <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	<span class="title">mint</span>, <span class="title">maxt</span>          <span class="title">int64</span></span></span><br><span class="line"><span class="function">	<span class="title">replicaLabels</span>       <span class="title">map</span>[<span class="title">string</span>]<span class="title">struct</span></span>&#123;&#125;</span><br><span class="line">	storeDebugMatchers  [][]*labels.Matcher</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// proxy包含了一组动态的thanos store组件</span></span><br><span class="line">	proxy               storepb.StoreServer</span><br><span class="line">	</span><br><span class="line">	deduplicate         <span class="keyword">bool</span>	</span><br><span class="line">	maxResolutionMillis <span class="keyword">int64</span></span><br><span class="line">	partialResponse     <span class="keyword">bool</span></span><br><span class="line">	skipChunks          <span class="keyword">bool</span></span><br><span class="line">	selectGate          gate.Gate</span><br><span class="line">	selectTimeout       time.Duration</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *querier)</span> <span class="title">Select</span><span class="params">(_ <span class="keyword">bool</span>, hints *storage.SelectHints, ms ...*labels.Matcher)</span> <span class="title">storage</span>.<span class="title">SeriesSet</span></span> &#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		其他代码</span></span><br><span class="line"><span class="comment">	*/</span>	</span><br><span class="line">	promise := <span class="built_in">make</span>(<span class="keyword">chan</span> storage.SeriesSet, <span class="number">1</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">defer</span> <span class="built_in">close</span>(promise)</span><br><span class="line">		<span class="keyword">var</span> err error</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">			其他代码</span></span><br><span class="line"><span class="comment">		*/</span>	</span><br><span class="line">		<span class="comment">//获取到指标数据</span></span><br><span class="line">		set, err := q.selectFn(ctx, hints, ms...)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="comment">// 把错误送至管道，并退出本协程</span></span><br><span class="line">			promise &lt;- storage.ErrSeriesSet(err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//将指标数据送至管道</span></span><br><span class="line">		promise &lt;- set</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回指标的封装</span></span><br><span class="line">	<span class="keyword">return</span> &amp;lazySeriesSet&#123;</span><br><span class="line">		create: <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(storage.SeriesSet, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">				其他代码</span></span><br><span class="line"><span class="comment">			*/</span>	</span><br><span class="line">			<span class="comment">// 从管道中读取指标</span></span><br><span class="line">			set, ok := &lt;-promise	</span><br><span class="line">			<span class="keyword">return</span> set, set.Next()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取指标，调用的是属性proxy的Series(...)方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *querier)</span> <span class="title">selectFn</span><span class="params">(ctx context.Context, hints *storage.SelectHints, ms ...*labels.Matcher)</span> <span class="params">(storage.SeriesSet, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		其他代码</span></span><br><span class="line"><span class="comment">	*/</span>	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// seriesServer结构体重写了Send()方法，在Sender()方法中将gprc返回的数据数据存储到它的seriesSet属性</span></span><br><span class="line">	resp := &amp;seriesServer&#123;ctx: ctx&#125;	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// q.proxy的实现是ProxyStore结构体</span></span><br><span class="line">	<span class="comment">// q.proxy.Series()是grpc方法(流式)</span></span><br><span class="line">	<span class="comment">// q.proxy.Series()调用完毕后，resp的seriesSet属性的值会被填充	</span></span><br><span class="line">	<span class="keyword">if</span> err := q.proxy.Series(&amp;storepb.SeriesRequest&#123;</span><br><span class="line">		MinTime:                 hints.Start,</span><br><span class="line">		MaxTime:                 hints.End,</span><br><span class="line">		Matchers:                sms,</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">			其他代码</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">	&#125;, resp); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrap(err, <span class="string">"proxy Series()"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		其他代码</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	set := &amp;promSeriesSet&#123;</span><br><span class="line">		mint:  q.mint,</span><br><span class="line">		maxt:  q.maxt,</span><br><span class="line">		set:   newStoreSeriesSet(resp.seriesSet),  <span class="comment">// 把resp的seriesSet属性抽出来</span></span><br><span class="line">		aggrs: aggrs,</span><br><span class="line">		warns: warns,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// set就是指标</span></span><br><span class="line">	<span class="keyword">return</span> newDedupSeriesSet(set, q.replicaLabels, <span class="built_in">len</span>(aggrs) == <span class="number">1</span> &amp;&amp; aggrs[<span class="number">0</span>] == storepb.Aggr_COUNTER), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ProxyStore对象"><a href="#ProxyStore对象" class="headerlink" title="ProxyStore对象"></a>ProxyStore对象</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ProxyStore implements the store API that proxies request to all given underlying stores.</span></span><br><span class="line"><span class="keyword">type</span> ProxyStore <span class="keyword">struct</span> &#123;</span><br><span class="line">	logger         log.Logger</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 返回位于下游的实现Store API接口的组件，查询指标时会用到此属性</span></span><br><span class="line">	stores         <span class="function"><span class="keyword">func</span><span class="params">()</span> []<span class="title">Client</span></span></span><br><span class="line"><span class="function">	</span></span><br><span class="line"><span class="function">	<span class="title">component</span>      <span class="title">component</span>.<span class="title">StoreAPI</span></span></span><br><span class="line"><span class="function">	<span class="title">selectorLabels</span> <span class="title">labels</span>.<span class="title">Labels</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	<span class="title">responseTimeout</span> <span class="title">time</span>.<span class="title">Duration</span></span></span><br><span class="line"><span class="function">	<span class="title">metrics</span>         *<span class="title">proxyStoreMetrics</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<p>查询指标时，会从下游的所有的Store API的组件中查询指标以及进行合并、去重(如果设置了)</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">根据客户端的请求，从下游的所有的Store API的组件中查询指标以及进行合并、去重，最后将指标传输给入参srv.</span></span><br><span class="line"><span class="comment">这是一个gprc流式接口。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ProxyStore)</span> <span class="title">Series</span><span class="params">(r *storepb.SeriesRequest, srv storepb.Store_SeriesServer)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		其他代码</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	g, gctx := errgroup.WithContext(srv.Context())</span><br><span class="line">	respSender, respCh := newCancelableRespChannel(gctx, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 生产者协程</span></span><br><span class="line">	g.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;		</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">			本协程会从后端的thanos store组件中获取指标，并进行指标合并操作。</span></span><br><span class="line"><span class="comment">			本协程的关闭，消费者协程也会关闭。</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">var</span> (</span><br><span class="line">			seriesSet      []storepb.SeriesSet</span><br><span class="line">			storeDebugMsgs []<span class="keyword">string</span>		</span><br><span class="line">			wg = &amp;sync.WaitGroup&#123;&#125;</span><br><span class="line">		)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			wg.Wait()</span><br><span class="line">			<span class="comment">//close()方法会引发消费者协程退出</span></span><br><span class="line">			<span class="built_in">close</span>(respCh)</span><br><span class="line">		&#125;()</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 遍历后端的Store API组件</span></span><br><span class="line">		<span class="keyword">for</span> _, st := <span class="keyword">range</span> s.stores() &#123;</span><br><span class="line">		</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">				其他代码</span></span><br><span class="line"><span class="comment">			*/</span>	</span><br><span class="line">			</span><br><span class="line">			sc, err := st.Series(seriesCtx, r)		</span><br><span class="line">			seriesSet = <span class="built_in">append</span>(seriesSet, startStreamSeriesSet(seriesCtx, s.logger, closeSeries,</span><br><span class="line">				wg, sc, respSender, st.String(), !r.PartialResponseDisabled, s.responseTimeout, s.metrics.emptyStreamResponses))</span><br><span class="line">		</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">				其他代码</span></span><br><span class="line"><span class="comment">			*/</span></span><br><span class="line">			</span><br><span class="line">		<span class="comment">// 获得合并后的指标，再发送给respCh管道</span></span><br><span class="line">		mergedSet := storepb.MergeSeriesSets(seriesSet...)</span><br><span class="line">		<span class="keyword">for</span> mergedSet.Next() &#123;		</span><br><span class="line">			lset, chk := mergedSet.At()</span><br><span class="line">			<span class="comment">// respSender.send(...)其实是将指标发送给respCh管道</span></span><br><span class="line">			respSender.send(storepb.NewSeriesResponse(&amp;storepb.Series&#123;Labels: labelpb.ZLabelsFromPromLabels(lset), Chunks: chk&#125;))</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> mergedSet.Err()</span><br><span class="line">	&#125;)</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 消费者协程</span></span><br><span class="line">	g.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;				</span><br><span class="line">		<span class="comment">// 响应(已被merged)被本协程获取，并将响应输送给方法入参srv.</span></span><br><span class="line">		<span class="keyword">for</span> resp := <span class="keyword">range</span> respCh &#123;</span><br><span class="line">			<span class="keyword">if</span> err := srv.Send(resp); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> status.Error(codes.Unknown, errors.Wrap(err, <span class="string">"send series response"</span>).Error())</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;)</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 等待生产者协程和消费者协程结束</span></span><br><span class="line">	<span class="keyword">if</span> err := g.Wait(); err != <span class="literal">nil</span> &#123;			</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文分析了代码的轮廓，还有许多细节没有被提及，但Thanos Query组件的代码结构清晰易懂，使用了github.com/oklog/run包来启动一组协程，编写http server和grpc server的思路、动态发现下游Store API组件的套路都值得模仿。</p>
<h1 id="Thanos-Sidecar"><a href="#Thanos-Sidecar" class="headerlink" title="Thanos Sidecar"></a>Thanos Sidecar</h1><h2 id="Thanos-Sidecar的作用"><a href="#Thanos-Sidecar的作用" class="headerlink" title="Thanos Sidecar的作用"></a>Thanos Sidecar的作用</h2><p>Thanos Query组件和prometheus实例绑定在一起，三大作用：</p>
<ul>
<li>作为访问代理，对客户端暴露grpc接口，业务逻辑是访问其绑定的prometheus实例的http接口，从而获取metrics和rule数据，最终返回给客户端；</li>
<li>如果开启对象存储功能，会将promethues tsdb目录下的所有block目录上传至指定的对象存储系统中；</li>
<li>监听promethues配置文件的变化，发现文件变化后也是访问prometheus实例的http接口让prometheus重载配置。</li>
</ul>
<p><img src="/images/prometheus-thanos-16.png" alt="在这里插入图片描述"></p>
<p>使用github.com/oklog/run包来启动一组协程，这些协程的逻辑主要是启动了http server、grpc server、动态发现位于下游的实现STORE API的组件等。</p>
<h2 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="启动参数-1"><a href="#启动参数-1" class="headerlink" title="启动参数"></a>启动参数</h3><p>Thanos的启动命令格式如下，格式都是thanos开头（因为是同一个可执行二进制文件）。启动哪个组件，在于第一个参数，在本例子中是sidecar，因此这条命令是启动sidecar组件的逻辑。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">thanos sidecar \</span><br><span class="line">--prometheus.url=http://localhost:9090/ \</span><br><span class="line">--tsdb.path=/prometheus \</span><br><span class="line">--grpc-address=[$(POD_IP)]:10901 \</span><br><span class="line">--http-address=[$(POD_IP)]:10902 \</span><br></pre></td></tr></table></figure>
<h3 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h3><h4 id="main方法-1"><a href="#main方法-1" class="headerlink" title="main方法"></a>main方法</h4><p>来具体看看main方法。创建app对象，app对象包含了所有Thanos组件的启动函数，但真正启动时只从map中取出一个函数进行启动，取出哪个函数取决于启动命令。</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		其他代码</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	app := extkingpin.NewApp(kingpin.New(filepath.Base(os.Args[<span class="number">0</span>]), <span class="string">"A block storage based long-term storage for Prometheus"</span>).Version(version.Print(<span class="string">"thanos"</span>)))</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		其他代码</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 把所有组件的启动逻辑都放进app对象中的setups列表中</span></span><br><span class="line">	registerSidecar(app)</span><br><span class="line">	registerStore(app)</span><br><span class="line">	registerQuery(app)</span><br><span class="line">	registerRule(app)</span><br><span class="line">	registerCompact(app)</span><br><span class="line">	registerTools(app)</span><br><span class="line">	registerReceive(app)</span><br><span class="line">	registerQueryFrontend(app)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 根据命令行的信息，从app对象的setups列表中取出一个组件逻辑</span></span><br><span class="line">	cmd, setup := app.Parse()</span><br><span class="line">	logger := logging.NewLogger(*logLevel, *logFormat, *debugName)</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		其他代码</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> g run.Group</span><br><span class="line">	<span class="keyword">var</span> tracer opentracing.Tracer</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		tracing相关的代码</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	reloadCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 启动特定的一个组件(sidecar、query、store等组件中的一种)，底层还是执行g.Add(...)</span></span><br><span class="line">	<span class="keyword">if</span> err := setup(&amp;g, logger, metrics, tracer, reloadCh, *logLevel == <span class="string">"debug"</span>); err != <span class="literal">nil</span> &#123;		</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 监听来自系统的杀死信号.</span></span><br><span class="line">	&#123;</span><br><span class="line">		cancel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">		g.Add(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">			<span class="keyword">return</span> interrupt(logger, cancel)</span><br><span class="line">		&#125;, <span class="function"><span class="keyword">func</span><span class="params">(error)</span></span> &#123;</span><br><span class="line">			<span class="built_in">close</span>(cancel)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 监听来配置重载的信号</span></span><br><span class="line">	&#123;</span><br><span class="line">		cancel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">		g.Add(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">			<span class="keyword">return</span> reload(logger, cancel, reloadCh)</span><br><span class="line">		&#125;, <span class="function"><span class="keyword">func</span><span class="params">(error)</span></span> &#123;</span><br><span class="line">			<span class="built_in">close</span>(cancel)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 阻塞地等待所有协程中的退出</span></span><br><span class="line">	<span class="comment">// 有一个协程返回，其他协程也会返回</span></span><br><span class="line">	<span class="keyword">if</span> err := g.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		level.Error(logger).Log(<span class="string">"err"</span>, fmt.Sprintf(<span class="string">"%+v"</span>, errors.Wrapf(err, <span class="string">"%s command failed"</span>, cmd)))</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 到达此处，说明整个程序结束了。</span></span><br><span class="line">	level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"exiting"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="registerSidecar方法"><a href="#registerSidecar方法" class="headerlink" title="registerSidecar方法"></a>registerSidecar方法</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerSidecar</span><span class="params">(app *extkingpin.App)</span></span> &#123;</span><br><span class="line">	cmd := app.Command(component.Sidecar.String(), <span class="string">"Sidecar for Prometheus server"</span>)</span><br><span class="line">	conf := &amp;sidecarConfig&#123;&#125;</span><br><span class="line">	<span class="comment">// 解析命令行参数</span></span><br><span class="line">	conf.registerFlag(cmd)</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Setup()的入参方法，会被放入app对象的setups列表中</span></span><br><span class="line">	<span class="comment">// 最核心的是runSidecar()方法</span></span><br><span class="line">	cmd.Setup(<span class="function"><span class="keyword">func</span><span class="params">(g *run.Group, logger log.Logger, reg *prometheus.Registry, tracer opentracing.Tracer, _ &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, _ <span class="keyword">bool</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">		rl := reloader.New(log.With(logger, <span class="string">"component"</span>, <span class="string">"reloader"</span>),</span><br><span class="line">			extprom.WrapRegistererWithPrefix(<span class="string">"thanos_sidecar_"</span>, reg),</span><br><span class="line">			&amp;reloader.Options&#123;</span><br><span class="line">				ReloadURL:     reloader.ReloadURLFromBase(conf.prometheus.url),</span><br><span class="line">				CfgFile:       conf.reloader.confFile,</span><br><span class="line">				CfgOutputFile: conf.reloader.envVarConfFile,</span><br><span class="line">				WatchedDirs:   conf.reloader.ruleDirectories,</span><br><span class="line">				WatchInterval: conf.reloader.watchInterval,</span><br><span class="line">				RetryInterval: conf.reloader.retryInterval,</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> runSidecar(g, logger, reg, tracer, rl, component.Sidecar, *conf)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="runSidecar方法"><a href="#runSidecar方法" class="headerlink" title="runSidecar方法"></a>runSidecar方法</h4><p>使用run.Group对象来启动http server、grpc server、传输block目录至对象存储的协程、监听prometheus配置文件的协程、定期检测prometheus实例存活的协程。</p>
<p>细节说明：</p>
<ul>
<li>查看prometheus实例的心跳机制是通过/api/v1/status/config接口；</li>
<li>监听prometheus配置文件变化的工具包是github.com/fsnotify/fsnotify；</li>
<li>开启上传block功能，则每30s遍历prometheus tsdb目录下的所有的block目录（已上传的block或空block会被忽略，默认情况下被压缩过的block也会被忽略），并上传相应的文件至对象存储；</li>
<li>获取不到prometheus实例的external label或者prometheus没有配置external label，会导致sidecar启动失败。</li>
</ul>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runSidecar</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	g *run.Group,</span></span></span><br><span class="line"><span class="function"><span class="params">	logger log.Logger,</span></span></span><br><span class="line"><span class="function"><span class="params">	reg *prometheus.Registry,</span></span></span><br><span class="line"><span class="function"><span class="params">	tracer opentracing.Tracer,</span></span></span><br><span class="line"><span class="function"><span class="params">	reloader *reloader.Reloader,</span></span></span><br><span class="line"><span class="function"><span class="params">	comp component.Component,</span></span></span><br><span class="line"><span class="function"><span class="params">	conf sidecarConfig,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 用一个结构体来保存prometheus实例的url、prometheus实例的external label、prometheus client等信息。</span></span><br><span class="line">	<span class="keyword">var</span> m = &amp;promMetadata&#123;</span><br><span class="line">		promURL: conf.prometheus.url,</span><br><span class="line"></span><br><span class="line">		mint: conf.limitMinTime.PrometheusTimestamp(),</span><br><span class="line">		maxt: math.MaxInt64,</span><br><span class="line"></span><br><span class="line">		limitMinTime: conf.limitMinTime,</span><br><span class="line">		client:       promclient.NewWithTracingClient(logger, <span class="string">"thanos-sidecar"</span>),</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 获取对象存储的配置信息，如果有，说明是开启上传block至对象存储的功能。</span></span><br><span class="line">	confContentYaml, err := conf.objStore.Content()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> errors.Wrap(err, <span class="string">"getting object store config"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> uploads = <span class="literal">true</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(confContentYaml) == <span class="number">0</span> &#123;</span><br><span class="line">		level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"no supported bucket was configured, uploads will be disabled"</span>)</span><br><span class="line">		uploads = <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	grpcProbe := prober.NewGRPC()</span><br><span class="line">	httpProbe := prober.NewHTTP()</span><br><span class="line">	statusProber := prober.Combine(</span><br><span class="line">		httpProbe,</span><br><span class="line">		grpcProbe,</span><br><span class="line">		prober.NewInstrumentation(comp, logger, extprom.WrapRegistererWithPrefix(<span class="string">"thanos_"</span>, reg)),</span><br><span class="line">	)</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 创建http server，并启动server(只有/metrics、/-/healthy、/-/ready等接口)</span></span><br><span class="line">	srv := httpserver.New(logger, reg, comp, httpProbe,</span><br><span class="line">		httpserver.WithListen(conf.http.bindAddress),</span><br><span class="line">		httpserver.WithGracePeriod(time.Duration(conf.http.gracePeriod)),</span><br><span class="line">	)</span><br><span class="line">	g.Add(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">		statusProber.Healthy()</span><br><span class="line">		<span class="keyword">return</span> srv.ListenAndServe()</span><br><span class="line">	&#125;, <span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">		statusProber.NotReady(err)</span><br><span class="line">		<span class="keyword">defer</span> statusProber.NotHealthy(err)</span><br><span class="line">		srv.Shutdown(err)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取promehtues实例的external label，并做心跳</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// promUp记录promehtues是否正常，0表示不正常，1表示正常</span></span><br><span class="line">		promUp := promauto.With(reg).NewGauge(prometheus.GaugeOpts&#123;</span><br><span class="line">			Name: <span class="string">"thanos_sidecar_prometheus_up"</span>,</span><br><span class="line">			Help: <span class="string">"Boolean indicator whether the sidecar can reach its Prometheus peer."</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="comment">// lastHeartbeat记录最后一次心跳时间</span></span><br><span class="line">		lastHeartbeat := promauto.With(reg).NewGauge(prometheus.GaugeOpts&#123;</span><br><span class="line">			Name: <span class="string">"thanos_sidecar_last_heartbeat_success_time_seconds"</span>,</span><br><span class="line">			Help: <span class="string">"Timestamp of the last successful heartbeat in seconds."</span>,</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">		<span class="comment">// 获取prometheus实例的external label（/api/v1/status/config接口），并通过定期(30s)做这件事情来做心跳</span></span><br><span class="line">		g.Add(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">				检查性代码</span></span><br><span class="line"><span class="comment">			*/</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 获取prometheus实例的external label</span></span><br><span class="line">			err := runutil.Retry(<span class="number">2</span>*time.Second, ctx.Done(), <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				<span class="comment">// m.UpdateLabels(ctx)去访问prometheus实例的/api/v1/status/config接口，并将返回的数据设置到自己的属性labels</span></span><br><span class="line">				<span class="keyword">if</span> err := m.UpdateLabels(ctx); err != <span class="literal">nil</span> &#123;						</span><br><span class="line">					promUp.Set(<span class="number">0</span>)</span><br><span class="line">					statusProber.NotReady(err)</span><br><span class="line">					<span class="keyword">return</span> err</span><br><span class="line">				&#125;			</span><br><span class="line">				promUp.Set(<span class="number">1</span>)</span><br><span class="line">				statusProber.Ready()</span><br><span class="line">				<span class="comment">// 记录心跳时间</span></span><br><span class="line">				lastHeartbeat.SetToCurrentTime()</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">			&#125;)</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 拿不到prometheus实例的external label或者prometheus没有配置external label则退出</span></span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> errors.Wrap(err, <span class="string">"initial external labels query"</span>)</span><br><span class="line">			&#125;			</span><br><span class="line">			<span class="keyword">if</span> <span class="built_in">len</span>(m.Labels()) == <span class="number">0</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> errors.New(<span class="string">"no external labels configured on Prometheus server, uniquely identifying external labels must be configured; see https://thanos.io/tip/thanos/storage.md#external-labels for details."</span>)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 每个30s从prometheus实例获取exterlan label，通过此方式来记录心跳时间</span></span><br><span class="line">			<span class="keyword">return</span> runutil.Repeat(<span class="number">30</span>*time.Second, ctx.Done(), <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;				</span><br><span class="line">				<span class="comment">/*</span></span><br><span class="line"><span class="comment">					其他代码</span></span><br><span class="line"><span class="comment">				*/</span></span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span> err := m.UpdateLabels(iterCtx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">					level.Warn(logger).Log(<span class="string">"msg"</span>, <span class="string">"heartbeat failed"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">					promUp.Set(<span class="number">0</span>)</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					promUp.Set(<span class="number">1</span>)</span><br><span class="line">					<span class="comment">// 记录心跳时间</span></span><br><span class="line">					lastHeartbeat.SetToCurrentTime()</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;, <span class="function"><span class="keyword">func</span><span class="params">(error)</span></span> &#123;</span><br><span class="line">			cancel()</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 使用github.com/fsnotify/fsnotify包监听prometheus实例的配置文件的变化</span></span><br><span class="line">	<span class="comment">// 如果文件发生变化则发送一个POST请求给prometheus实例，让它重新加载配置文件</span></span><br><span class="line">	&#123;</span><br><span class="line">		ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">		g.Add(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">			<span class="keyword">return</span> reloader.Watch(ctx)</span><br><span class="line">		&#125;, <span class="function"><span class="keyword">func</span><span class="params">(error)</span></span> &#123;</span><br><span class="line">			cancel()</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">		t := exthttp.NewTransport()</span><br><span class="line">		t.MaxIdleConnsPerHost = conf.connection.maxIdleConnsPerHost</span><br><span class="line">		t.MaxIdleConns = conf.connection.maxIdleConns</span><br><span class="line">		c := promclient.NewClient(&amp;http.Client&#123;Transport: tracing.HTTPTripperware(logger, t)&#125;, logger, thanoshttp.ThanosUserAgent)</span><br><span class="line"></span><br><span class="line">		promStore, err := store.NewPrometheusStore(logger, reg, c, conf.prometheus.url, component.Sidecar, m.Labels, m.Timestamps)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> errors.Wrap(err, <span class="string">"create Prometheus store"</span>)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		tlsCfg, err := tls.NewServerConfig(log.With(logger, <span class="string">"protocol"</span>, <span class="string">"gRPC"</span>),</span><br><span class="line">			conf.grpc.tlsSrvCert, conf.grpc.tlsSrvKey, conf.grpc.tlsSrvClientCA)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> errors.Wrap(err, <span class="string">"setup gRPC server"</span>)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建并grpc server</span></span><br><span class="line">		s := grpcserver.New(logger, reg, tracer, comp, grpcProbe,</span><br><span class="line">			<span class="comment">// 注册grpc handler(通过http client从prometheus实例中获取指标数据)</span></span><br><span class="line">			grpcserver.WithServer(store.RegisterStoreServer(promStore)),	</span><br><span class="line">			<span class="comment">// 注册grpc handler(通过http client从prometheus实例中获取rule数据)</span></span><br><span class="line">			grpcserver.WithServer(rules.RegisterRulesServer(rules.NewPrometheus(conf.prometheus.url, c, m.Labels))), </span><br><span class="line">			grpcserver.WithListen(conf.grpc.bindAddress),</span><br><span class="line">			grpcserver.WithGracePeriod(time.Duration(conf.grpc.gracePeriod)),</span><br><span class="line">			grpcserver.WithTLSConfig(tlsCfg),</span><br><span class="line">		)</span><br><span class="line">		g.Add(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">			statusProber.Ready()</span><br><span class="line">			<span class="keyword">return</span> s.ListenAndServe()</span><br><span class="line">		&#125;, <span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">			statusProber.NotReady(err)</span><br><span class="line">			s.Shutdown(err)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 若开启了上传block功能，则定期遍历prometehus tsdb目录下的所有block目录并上传文件至对象存储。</span></span><br><span class="line">	<span class="keyword">if</span> uploads &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获取一个对象存储bucket</span></span><br><span class="line">		bkt, err := client.NewBucket(logger, confContentYaml, reg, component.Sidecar.String())</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">			其他代码</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line"></span><br><span class="line">		ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">		g.Add(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">				其他代码</span></span><br><span class="line"><span class="comment">			*/</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">				拿不到prometheus实例的external label或者prometheus没有配置external label则退出</span></span><br><span class="line"><span class="comment">			*/</span></span><br><span class="line">			</span><br><span class="line">			s := shipper.New(logger, reg, conf.tsdb.path, bkt, m.Labels, metadata.SidecarSource,</span><br><span class="line">				conf.shipper.uploadCompacted, conf.shipper.allowOutOfOrderUpload)</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 每30执行一次s.Sync(ctx)</span></span><br><span class="line">			<span class="comment">// s.Sync(ctx)会遍历prometheus tsdb目录下的所有block目录(已上传的block或空block会被忽略，默认情况下被压缩过的block也会被忽略)，并上传相应的文件</span></span><br><span class="line">			<span class="keyword">return</span> runutil.Repeat(<span class="number">30</span>*time.Second, ctx.Done(), <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				<span class="keyword">if</span> uploaded, err := s.Sync(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">					<span class="comment">// 至少有一个block上传失败，则打印日志</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">/*</span></span><br><span class="line"><span class="comment">					其他代码</span></span><br><span class="line"><span class="comment">				*/</span></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;, <span class="function"><span class="keyword">func</span><span class="params">(error)</span></span> &#123;</span><br><span class="line">			cancel()</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"starting sidecar"</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>Thanos Sidecar组件的代码逻辑简单、易懂，通过http协议访问与其绑定的prometheus实例，从prometheus实例中获取到的数据则通过grpc接口对外进行暴露，遍历所有block目录进行文件上传，还有监听promethues配置文件变化的小功能。</p>
<p>参考：</p>
<p><a href="https://blog.csdn.net/nangonghen/article/details/110731518?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-5.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-5.control" target="_blank" rel="external">thanos sidecar组件源码简析</a></p>
<p><a href="https://blog.csdn.net/nangonghen/article/details/110010423?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.control" target="_blank" rel="external">thanos query组件源码简析</a></p>
]]></content>
      
        <categories>
            
            <category> Prometheus </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Prometheus </tag>
            
            <tag> Thanos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Prometheus Local storage和Remote storage]]></title>
      <url>https://magiceses.github.io/2020/10/08/prometheus-prometheus-7-storage/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">我们每个人的心中，都有两只老虎。第一只老虎，是善的，它大方、善良、慈悲；第二只老虎，是恶的，它狭隘、邪恶、自私。而且，这两只老虎每天都在我们的心里打架……<br></p>

<blockquote>
<p>监控系统的扩展性和高可用性绝大部分是由存储决定的。比如著名的zabbix是支持Es做为后端存储的，这就解决了数据可靠性和存储的扩展。而PrometheUS默认是本地存储在tsdb上，如果考虑存储大量的sample，可以考虑remote storage。</p>
</blockquote>
<h4 id="Local-storage-简述"><a href="#Local-storage-简述" class="headerlink" title="Local storage 简述"></a>Local storage 简述</h4><p>本地存储的最小单位是block，每个block是最近两个小时的数据。block里面是多个chunk。chunk里面存储的就是sample。此外block里面还有index，用于索引chunk里面的数据，用于快速查找；还有metadata，用于记录block的元数据（存储的数据的开始时间以及结束时间等）；还有一个tombstones文件，用于标记那些sample已经删除了，这里只是标记不是删除。</p>
<p>本地存储中还有个WAL日志文件（预写日志）。prometheus抓取的数据不会立即刷盘，而是放在内存中。想象一下如果这时候宕机了，数据岂不丢了。wal日志的作用就是防止这个的。wal日志128M作为一个片段，最少也得有三个片段，这个是硬性规定。因为block里面存储的数据是压缩过的，而wal里面的数据是未压缩的，所以wal日志会比block大。在监控项比较多的prometheus上，会看到多于三个片段，这个是正常的，因为WAL日志中最小也要存储两个小时的数据。</p>
<a id="more"></a>
<p><img src="/images/prometheus-prometheus-12.png" alt="在这里插入图片描述"></p>
<p>我说的可能不清楚，如果想详细了解TSDB，可以去GitHub上看：<a href="https://github.com/prometheus/tsdb/blob/master/docs/format/README.md" target="_blank" rel="external">https://github.com/prometheus/tsdb/blob/master/docs/format/README.md</a></p>
<ul>
<li>设置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--storage.tsdb.path 存储位置，默认是data目录</span><br><span class="line">--storage.tsdb.retention.time  sample的保留时间，默认是15天</span><br></pre></td></tr></table></figure>
<p>官方说我们再算存储的时候，每个sample值就按1~2bytes算，那么我们需要的总存储就是：</p>
<p><code>needed_disk_space = retention_time_seconds * ingested_samples_per_second * bytes_per_sample</code></p>
<p>ingested_samples_per_second 是每秒抽取多少个指标。bytes_per_sample是每个指标的值的大小，如果指标的数据类型特别多，我觉得可以按照1~2bytes算，如果指标的数据类型比较单一，我觉得你应该自己评估这个值。</p>
<h4 id="remote-storage简介"><a href="#remote-storage简介" class="headerlink" title="remote storage简介"></a>remote storage简介</h4><p>对于业务比较大的环境Local storage是绝对满足不了的，那么就要用remote storage了。</p>
<ul>
<li>prometheus的remote storage需要借助adapter实现。adapter会提供write url和read url给prometheus，这样prometheus获取到数据后就会先写到本地然后再调用write url写到远端。读数据我理解的不好，这里就不多说，据说remote read 对PromQL 支持不好。不是所有的adapter都提供read url的。</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190330170057102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ2ODYzOTk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li><p>prometheus调用adapter都是HTTP结合snappy。在不远的将来可能就是 grpc结合HTTP/2了</p>
</li>
<li><p>现在prometheus官方和社区整合很多remote storage的adapter,如下图，不只有这些还有clickhouse等，大家可以网上百度去，也可以自行开发:<img src="/images/prometheus-prometheus-13.png" alt="在这里插入图片描述"></p>
</li>
</ul>
<h4 id="remote-storage-to-Elasticsearch"><a href="#remote-storage-to-Elasticsearch" class="headerlink" title="remote storage to Elasticsearch"></a>remote storage to Elasticsearch</h4><p>由于我知识比较贫穷，就了解个Elasticsearch，所以这里就用Elasticsearch做实验了，在上图可以看到，prometheus只能写到Elasticsearch。</p>
<ul>
<li><p>准备prometheusbeat</p>
<p><a href="https://github.com/infonova/prometheusbeat" target="_blank" rel="external">https://github.com/infonova/prometheusbeat</a> 这个是他的github地址。如果懒得编译可以去QQ群里下载，QQ群的地址在最下面。</p>
</li>
<li><p>配置prometheusbeat</p>
<p>设置监听端口</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prometheusbeat:</span><br><span class="line">  # Listen port of the server. Defaults to :8080</span><br><span class="line">  listen: &quot;:8090&quot;</span><br><span class="line">  # Context path. Defaults to /prometheus</span><br><span class="line">  context: &quot;/prometheus</span><br></pre></td></tr></table></figure>
<ul>
<li>设置ES的地址</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#-------------------------- Elasticsearch output ------------------------------</span><br><span class="line">output.elasticsearch:</span><br><span class="line">  # Array of hosts to connect to.</span><br><span class="line">  hosts: [&quot;192.168.0.1:9400&quot;]</span><br><span class="line"></span><br><span class="line">  # Optional protocol and basic auth credentials.</span><br><span class="line">  #protocol: &quot;https&quot;</span><br><span class="line">  #username: &quot;elastic&quot;</span><br><span class="line">  #password: &quot;changeme&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>启动</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#这个正常情况下应该后台启动的</span><br><span class="line">./prometheusbeat -c prometheusbeat.yml</span><br></pre></td></tr></table></figure>
<ul>
<li>配置prometheus</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">remote_write:</span><br><span class="line">  - url: &quot;http://10.161.4.63:8090/prometheus&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>重新加载配置或者重启</p>
</li>
<li><p>静静的过一小会儿，查看ES</p>
</li>
</ul>
<p><img src="/images/prometheus-prometheus-14.png" alt="在这里插入图片描述"></p>
<p><img src="/images/prometheus-prometheus-15.png" alt="在这里插入图片描述"></p>
<p><br></p>
<p>原文：<a href="https://blog.csdn.net/u014686399/article/details/88915195?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.baidujs&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.baidujs" target="_blank" rel="external">prometheus之Local storage和remote storage</a></p>
]]></content>
      
        <categories>
            
            <category> Prometheus </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Prometheus PromQL使用]]></title>
      <url>https://magiceses.github.io/2020/10/07/prometheus-prometheus-6-PromQL%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">改变，永远不嫌晚。无论你是几岁，也无论你目前所处的境况有多糟，只要立定目标、一步一步往前走，人生随时都有翻盘的可能性。<br></p>

<p>Prometheus 提供了其它大量的内置函数，可以对时序数据进行丰富的处理。某些函数有默认的参数，例如：<code>year(v=vector(time()) instant-vector)</code>。其中参数 <code>v</code> 是一个瞬时向量，如果不提供该参数，将使用默认值 <code>vector(time())</code>。instant-vector 表示参数类型。</p>
<h2 id="abs"><a href="#abs" class="headerlink" title="abs()"></a>abs()</h2><p><code>abs(v instant-vector)</code> 返回输入向量的所有样本的绝对值。</p>
<h2 id="absent"><a href="#absent" class="headerlink" title="absent()"></a>absent()</h2><p><code>absent(v instant-vector)</code>，如果传递给它的向量参数具有样本数据，则返回空向量；如果传递的向量参数没有样本数据，则返回不带度量指标名称且带有标签的时间序列，且样本值为1。</p>
<p>当监控度量指标时，如果获取到的样本数据是空的， 使用 absent 方法对告警是非常有用的。例如：</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 这里提供的向量有样本数据absent(http_requests_total&#123;method="get"&#125;)  =&gt; no dataabsent(sum(http_requests_total&#123;method="get"&#125;))  =&gt; no data</span><br><span class="line"># 由于不存在度量指标 nonexistent，所以 返回不带度量指标名称且带有标签的时间序列，且样本值为1absent(nonexistent&#123;job="myjob"&#125;)  =&gt; &#123;job="myjob"&#125;  1# 正则匹配的 instance 不作为返回 labels 中的一部分absent(nonexistent&#123;job="myjob",instance=~".*"&#125;)  =&gt; &#123;job="myjob"&#125;  1</span><br><span class="line"># sum 函数返回的时间序列不带有标签，且没有样本数据absent(sum(nonexistent&#123;job="myjob"&#125;))  =&gt; &#123;&#125;  1</span><br></pre></td></tr></table></figure>
<h2 id="ceil"><a href="#ceil" class="headerlink" title="ceil()"></a>ceil()</h2><p><code>ceil(v instant-vector)</code> 将 v 中所有元素的样本值向上四舍五入到最接近的整数。例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_load5&#123;instance="192.168.1.75:9100"&#125; # 结果为 2.79</span><br><span class="line">ceil(node_load5&#123;instance="192.168.1.75:9100"&#125;) # 结果为 3</span><br></pre></td></tr></table></figure>
<h2 id="changes"><a href="#changes" class="headerlink" title="changes()"></a>changes()</h2><p><code>changes(v range-vector)</code> 输入一个区间向量， 返回这个区间向量内每个样本数据值变化的次数（瞬时向量）。例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 如果样本数据值没有发生变化，则返回结果为 1</span><br><span class="line">changes(node_load5&#123;instance="192.168.1.75:9100"&#125;[1m]) # 结果为 1</span><br></pre></td></tr></table></figure>
<h2 id="clamp-max"><a href="#clamp-max" class="headerlink" title="clamp_max()"></a>clamp_max()</h2><p><code>clamp_max(v instant-vector, max scalar)</code> 函数，输入一个瞬时向量和最大值，样本数据值若大于 max，则改为 max，否则不变。例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node_load5&#123;instance="192.168.1.75:9100"&#125; # 结果为 2.79</span><br><span class="line">clamp_max(node_load5&#123;instance="192.168.1.75:9100"&#125;, 2) # 结果为 2</span><br><span class="line">1.2.</span><br></pre></td></tr></table></figure>
<h2 id="clamp-min"><a href="#clamp-min" class="headerlink" title="clamp_min()"></a>clamp_min()</h2><p><code>clamp_min(v instant-vector, min scalar)</code> 函数，输入一个瞬时向量和最小值，样本数据值若小于 min，则改为 min，否则不变。例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_load5&#123;instance="192.168.1.75:9100"&#125; # 结果为 2.79</span><br><span class="line">clamp_min(node_load5&#123;instance="192.168.1.75:9100"&#125;, 3) # 结果为 3</span><br></pre></td></tr></table></figure>
<h2 id="day-of-month"><a href="#day-of-month" class="headerlink" title="day_of_month()"></a>day_of_month()</h2><p><code>day_of_month(v=vector(time()) instant-vector)</code> 函数，返回被给定 UTC 时间所在月的第几天。返回值范围：1~31。</p>
<h2 id="day-of-week"><a href="#day-of-week" class="headerlink" title="day_of_week()"></a>day_of_week()</h2><p><code>day_of_week(v=vector(time()) instant-vector)</code> 函数，返回被给定 UTC 时间所在周的第几天。返回值范围：0~6，0 表示星期天。</p>
<h2 id="days-in-month"><a href="#days-in-month" class="headerlink" title="days_in_month()"></a>days_in_month()</h2><p><code>days_in_month(v=vector(time()) instant-vector)</code> 函数，返回当月一共有多少天。返回值范围：28~31。</p>
<h2 id="delta"><a href="#delta" class="headerlink" title="delta()"></a>delta()</h2><p><code>delta(v range-vector)</code> 的参数是一个区间向量，返回一个瞬时向量。它计算一个区间向量 v 的第一个元素和最后一个元素之间的差值。由于这个值被外推到指定的整个时间范围，所以即使样本值都是整数，你仍然可能会得到一个非整数值。</p>
<p>例如，下面的例子返回过去两小时的 CPU 温度差：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delta(cpu_temp_celsius&#123;host="zeus"&#125;[2h])</span><br></pre></td></tr></table></figure>
<p>这个函数一般只用在 Gauge 类型的时间序列上。</p>
<h2 id="deriv"><a href="#deriv" class="headerlink" title="deriv()"></a>deriv()</h2><p><code>deriv(v range-vector)</code> 的参数是一个区间向量,返回一个瞬时向量。它使用<a href="http://en.wikipedia.org/wiki/Simple_linear_regression" target="_blank" rel="external">简单的线性回归</a>计算区间向量 v 中各个时间序列的导数。</p>
<p>这个函数一般只用在 Gauge 类型的时间序列上。</p>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp()"></a>exp()</h2><p><code>exp(v instant-vector)</code> 函数，输入一个瞬时向量，返回各个样本值的 <code>e</code> 的指数值，即 e 的 N 次方。当 N 的值足够大时会返回 <code>+Inf</code>。特殊情况为：</p>
<ul>
<li><code>Exp(+Inf) = +Inf</code></li>
<li><code>Exp(NaN) = NaN</code></li>
</ul>
<h2 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h2><p><code>floor(v instant-vector)</code> 函数与 ceil() 函数相反，将 v 中所有元素的样本值向下四舍五入到最接近的整数。</p>
<h2 id="histogram-quantile"><a href="#histogram-quantile" class="headerlink" title="histogram_quantile()"></a>histogram_quantile()</h2><p><code>histogram_quantile(φ float, b instant-vector)</code> 从 bucket 类型的向量 <code>b</code> 中计算 φ (0 ≤ φ ≤ 1) 分位数（百分位数的一般形式）的样本的最大值。（有关 φ 分位数的详细说明以及直方图指标类型的使用，请参阅<a href="https://prometheus.io/docs/practices/histograms" target="_blank" rel="external">直方图和摘要</a>）。向量 <code>b</code> 中的样本是每个 bucket 的采样点数量。每个样本的 labels 中必须要有 <code>le</code> 这个 label 来表示每个 bucket 的上边界，没有 <code>le</code> 标签的样本会被忽略。直方图指标类型自动提供带有 <code>_bucket</code> 后缀和相应标签的时间序列。</p>
<p>可以使用 <code>rate()</code> 函数来指定分位数计算的时间窗口。</p>
<p>例如，一个直方图指标名称为 <code>employee_age_bucket_bucket</code>，要计算过去 10 分钟内 第 90 个百分位数，请使用以下表达式：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">histogram_quantile(0.9, rate(employee_age_bucket_bucket[10m]))</span><br></pre></td></tr></table></figure>
<p>返回：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;instance="10.0.86.71:8080",job="prometheus"&#125; 35.714285714285715</span><br></pre></td></tr></table></figure>
<p>这表示最近 10 分钟之内 90% 的样本的最大值为 35.714285714285715。</p>
<p>这个计算结果是每组标签组合成一个时间序列。我们可能不会对所有这些维度（如 <code>job</code>、<code>instance</code> 和 <code>method</code>）感兴趣，并希望将其中的一些维度进行聚合，则可以使用 sum() 函数。例如，以下表达式根据 <code>job</code> 标签来对第 90 个百分位数进行聚合：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># histogram_quantile() 函数必须包含 le 标签</span><br><span class="line">histogram_quantile(0.9, sum(rate(employee_age_bucket_bucket[10m])) by (job, le))</span><br></pre></td></tr></table></figure>
<p>如果要聚合所有的标签，则使用如下表达式：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">histogram_quantile(0.9,sum(rate(employee_age_bucket_bucket[10m])) by (le))</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>[info] 注意</strong></p>
<p><code>histogram_quantile</code> 这个函数是根据假定每个区间内的样本分布是线性分布来计算结果值的(也就是说它的结果未必准确)，最高的 bucket 必须是 le=“+Inf” (否则就返回 NaN)。</p>
<p>如果分位数位于最高的 bucket（+Inf） 中，则返回第二个最高的 bucket 的上边界。如果该 bucket 的上边界大于 0，则假设最低的 bucket 的的下边界为 0，这种情况下在该 bucket 内使用常规的线性插值。</p>
<p>如果分位数位于最低的 bucket 中，则返回最低 bucket 的上边界。</p>
</blockquote>
<p>如果 b 含有少于 2 个 buckets，那么会返回 <code>NaN</code>，如果 φ &lt; 0 会返回 <code>-Inf</code>，如果 φ &gt; 1 会返回 <code>+Inf</code>。</p>
<h2 id="holt-winters"><a href="#holt-winters" class="headerlink" title="holt_winters()"></a>holt_winters()</h2><p><code>holt_winters(v range-vector, sf scalar, tf scalar)</code> 函数基于区间向量 v，生成时间序列数据平滑值。平滑因子 <code>sf</code> 越低, 对旧数据的重视程度越高。趋势因子 <code>tf</code> 越高，对数据的趋势的考虑就越多。其中，<code>0&lt; sf, tf &lt;=1</code>。</p>
<p>holt_winters 仅适用于 Gauge 类型的时间序列。</p>
<h2 id="hour"><a href="#hour" class="headerlink" title="hour()"></a>hour()</h2><p><code>hour(v=vector(time()) instant-vector)</code> 函数返回被给定 UTC 时间的当前第几个小时，时间范围：0~23。</p>
<h2 id="idelta"><a href="#idelta" class="headerlink" title="idelta()"></a>idelta()</h2><p>idelta(v range-vector) 的参数是一个区间向量, 返回一个瞬时向量。它计算最新的 2 个样本值之间的差值。</p>
<p>这个函数一般只用在 Gauge 类型的时间序列上。</p>
<h2 id="increase"><a href="#increase" class="headerlink" title="increase()"></a>increase()</h2><p><code>increase(v range-vector)</code> 函数获取区间向量中的第一个和最后一个样本并返回其增长量, 它会在单调性发生变化时(如由于采样目标重启引起的计数器复位)自动中断。由于这个值被外推到指定的整个时间范围，所以即使样本值都是整数，你仍然可能会得到一个非整数值。</p>
<p>例如，以下表达式返回区间向量中每个时间序列过去 5 分钟内 HTTP 请求数的增长数：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">increase(http_requests_total&#123;job="apiserver"&#125;[5m])</span><br></pre></td></tr></table></figure>
<p><code>increase</code> 的返回值类型只能是计数器类型，主要作用是增加图表和数据的可读性。使用 <code>rate</code> 函数记录规则的使用率，以便持续跟踪数据样本值的变化。</p>
<h2 id="irate"><a href="#irate" class="headerlink" title="irate()"></a>irate()</h2><p><code>irate(v range-vector)</code> 函数用于计算区间向量的增长率，但是其反应出的是瞬时增长率。irate 函数是通过区间向量中最后两个两本数据来计算区间向量的增长速率，它会在单调性发生变化时(如由于采样目标重启引起的计数器复位)自动中断。这种方式可以避免在时间窗口范围内的“长尾问题”，并且体现出更好的灵敏度，通过irate函数绘制的图标能够更好的反应样本数据的瞬时变化状态。</p>
<p>例如，以下表达式返回区间向量中每个时间序列过去 5 分钟内最后两个样本数据的 HTTP 请求数的增长率：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">irate(http_requests_total&#123;job="api-server"&#125;[5m])</span><br></pre></td></tr></table></figure>
<p>irate 只能用于绘制快速变化的计数器，在长期趋势分析或者告警中更推荐使用 rate 函数。因为使用 irate 函数时，速率的简短变化会重置 <code>FOR</code> 语句，形成的图形有很多波峰，难以阅读。</p>
<blockquote>
<p><strong>[info] 注意</strong></p>
<p>当将 <code>irate()</code> 函数与<a href="https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators" target="_blank" rel="external">聚合运算符</a>（例如 <code>sum()</code>）或随时间聚合的函数（任何以 <code>_over_time</code> 结尾的函数）一起使用时，必须先执行 irate 函数，然后再进行聚合操作，否则当采样目标重新启动时 irate() 无法检测到计数器是否被重置。</p>
</blockquote>
<h2 id="label-join"><a href="#label-join" class="headerlink" title="label_join()"></a>label_join()</h2><p><code>label_join(v instant-vector, dst_label string, separator string, src_label_1 string, src_label_2 string, ...)</code> 函数可以将时间序列 v 中多个标签 <code>src_label</code> 的值，通过 <code>separator</code> 作为连接符写入到一个新的标签 <code>dst_label</code> 中。可以有多个 src_label 标签。</p>
<p>例如，以下表达式返回的时间序列多了一个 <code>foo</code> 标签，标签值为 <code>etcd,etcd-k8s</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">up&#123;endpoint="api",instance="192.168.123.248:2379",job="etcd",namespace="monitoring",service="etcd-k8s"&#125;=&gt; up&#123;endpoint="api",instance="192.168.123.248:2379",job="etcd",namespace="monitoring",service="etcd-k8s"&#125;  1</span><br><span class="line">label_join(up&#123;endpoint="api",instance="192.168.123.248:2379",job="etcd",namespace="monitoring",service="etcd-k8s"&#125;, "foo", ",", "job", "service")=&gt; up&#123;endpoint="api",foo="etcd,etcd-k8s",instance="192.168.123.248:2379",job="etcd",namespace="monitoring",service="etcd-k8s"&#125;  1</span><br></pre></td></tr></table></figure>
<h2 id="label-replace"><a href="#label-replace" class="headerlink" title="label_replace()"></a>label_replace()</h2><p>为了能够让客户端的图标更具有可读性，可以通过 <code>label_replace</code> 函数为时间序列添加额外的标签。label_replace 的具体参数如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)</span><br></pre></td></tr></table></figure>
<p>该函数会依次对 v 中的每一条时间序列进行处理，通过 <code>regex</code> 匹配 src_label 的值，并将匹配部分 <code>relacement</code> 写入到 dst_label 标签中。如下所示：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label_replace(up, "host", "$1", "instance",  "(.*):.*")</span><br></pre></td></tr></table></figure>
<p>函数处理后，时间序列将包含一个 <code>host</code> 标签，host 标签的值为 Exporter 实例的 IP 地址：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">up&#123;host="localhost",instance="localhost:8080",job="cadvisor"&#125;   1</span><br><span class="line">up&#123;host="localhost",instance="localhost:9090",job="prometheus"&#125;   1</span><br><span class="line">up&#123;host="localhost",instance="localhost:9100",job="node"&#125;   1</span><br></pre></td></tr></table></figure>
<h2 id="ln"><a href="#ln" class="headerlink" title="ln()"></a>ln()</h2><p><code>ln(v instant-vector)</code> 计算瞬时向量 v 中所有样本数据的自然对数。特殊情况：</p>
<ul>
<li><code>ln(+Inf) = +Inf</code></li>
<li><code>ln(0) = -Inf</code></li>
<li><code>ln(x &lt; 0) = NaN</code></li>
<li><code>ln(NaN) = NaN</code></li>
</ul>
<h2 id="log2"><a href="#log2" class="headerlink" title="log2()"></a>log2()</h2><p><code>log2(v instant-vector)</code> 函数计算瞬时向量 v 中所有样本数据的二进制对数。特殊情况同上。</p>
<h2 id="log10"><a href="#log10" class="headerlink" title="log10()"></a>log10()</h2><p><code>log10(v instant-vector)</code> 计算瞬时向量 v 中所有样本数据的十进制对数。特殊情况同上。</p>
<h2 id="minute"><a href="#minute" class="headerlink" title="minute()"></a>minute()</h2><p><code>minute(v=vector(time()) instant-vector)</code> 函数返回给定 UTC 时间当前小时的第多少分钟。结果范围：0~59。</p>
<h2 id="month"><a href="#month" class="headerlink" title="month()"></a>month()</h2><p><code>month(v=vector(time()) instant-vector)</code> 函数返回给定 UTC 时间当前属于第几个月，结果范围：0~12。</p>
<h2 id="predict-linear"><a href="#predict-linear" class="headerlink" title="predict_linear()"></a>predict_linear()</h2><p><code>predict_linear(v range-vector, t scalar)</code> 函数可以预测时间序列 v 在 t 秒后的值。它基于简单线性回归的方式，对时间窗口内的样本数据进行统计，从而可以对时间序列的变化趋势做出预测。该函数的返回结果<strong>不带有度量指标</strong>，只有标签列表。</p>
<p>例如，基于 2 小时的样本数据，来预测主机可用磁盘空间的是否在 4 个小时候被占满，可以使用如下表达式：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">predict_linear(node_filesystem_free&#123;job="node"&#125;[2h], 4 * 3600) <span class="tag">&lt; <span class="attr">0</span></span></span><br><span class="line"><span class="tag"><span class="attr">1.</span></span></span><br></pre></td></tr></table></figure>
<p>通过下面的例子来观察返回值：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">predict_linear(http_requests_total&#123;code="200",instance="120.77.65.193:9090",job="prometheus",method="get"&#125;[5m], 5)</span><br><span class="line">结果：</span><br><span class="line">&#123;code="200",handler="query_range",instance="120.77.65.193:9090",job="prometheus",method="get"&#125;  1</span><br><span class="line">&#123;code="200",handler="prometheus",instance="120.77.65.193:9090",job="prometheus",method="get"&#125;   4283.449995397104</span><br><span class="line">&#123;code="200",handler="static",instance="120.77.65.193:9090",job="prometheus",method="get"&#125;   22.99999999999999</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>这个函数一般只用在 Gauge 类型的时间序列上。</p>
<h2 id="rate"><a href="#rate" class="headerlink" title="rate()"></a>rate()</h2><p><code>rate(v range-vector)</code> 函数可以直接计算区间向量 v 在时间窗口内平均增长速率，它会在单调性发生变化时(如由于采样目标重启引起的计数器复位)自动中断。该函数的返回结果<strong>不带有度量指标</strong>，只有标签列表。</p>
<p>例如，以下表达式返回区间向量中每个时间序列过去 5 分钟内 HTTP 请求数的每秒增长率：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rate(http_requests_total[5m])</span><br><span class="line">结果：</span><br><span class="line">&#123;code="200",handler="label_values",instance="120.77.65.193:9090",job="prometheus",method="get"&#125; 0</span><br><span class="line">&#123;code="200",handler="query_range",instance="120.77.65.193:9090",job="prometheus",method="get"&#125;  0</span><br><span class="line">&#123;code="200",handler="prometheus",instance="120.77.65.193:9090",job="prometheus",method="get"&#125;   0.2</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>rate() 函数返回值类型只能用计数器，在长期趋势分析或者告警中推荐使用这个函数。</p>
<blockquote>
<p><strong>[info] 注意</strong></p>
<p>当将 <code>rate()</code> 函数与<a href="https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators" target="_blank" rel="external">聚合运算符</a>（例如 <code>sum()</code>）或随时间聚合的函数（任何以 <code>_over_time</code> 结尾的函数）一起使用时，必须先执行 rate 函数，然后再进行聚合操作，否则当采样目标重新启动时 rate() 无法检测到计数器是否被重置。</p>
</blockquote>
<h2 id="resets"><a href="#resets" class="headerlink" title="resets()"></a>resets()</h2><p><code>resets(v range-vector)</code> 的参数是一个区间向量。对于每个时间序列，它都返回一个计数器重置的次数。两个连续样本之间的值的减少被认为是一次计数器重置。</p>
<p>这个函数一般只用在计数器类型的时间序列上。</p>
<h2 id="round"><a href="#round" class="headerlink" title="round()"></a>round()</h2><p><code>round(v instant-vector, to_nearest=1 scalar)</code> 函数与 <code>ceil</code> 和 <code>floor</code> 函数类似，返回向量中所有样本值的最接近的整数。<code>to_nearest</code> 参数是可选的,默认为 1,表示样本返回的是最接近 1 的整数倍的值。你也可以将该参数指定为任意值（也可以是小数），表示样本返回的是最接近它的整数倍的值。</p>
<h2 id="scalar"><a href="#scalar" class="headerlink" title="scalar()"></a>scalar()</h2><p><code>scalar(v instant-vector)</code> 函数的参数是一个单元素的瞬时向量,它返回其唯一的时间序列的值作为一个标量。如果度量指标的样本数量大于 1 或者等于 0, 则返回 <code>NaN</code>。</p>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><p><code>sort(v instant-vector)</code> 函数对向量按元素的值进行升序排序，返回结果：key: value = 度量指标：样本值[升序排列]。</p>
<h2 id="sort-desc"><a href="#sort-desc" class="headerlink" title="sort_desc()"></a>sort_desc()</h2><p><code>sort(v instant-vector)</code> 函数对向量按元素的值进行降序排序，返回结果：key: value = 度量指标：样本值[降序排列]。</p>
<h2 id="sqrt"><a href="#sqrt" class="headerlink" title="sqrt()"></a>sqrt()</h2><p><code>sqrt(v instant-vector)</code> 函数计算向量 v 中所有元素的平方根。</p>
<h2 id="time"><a href="#time" class="headerlink" title="time()"></a>time()</h2><p><code>time()</code> 函数返回从 1970-01-01 到现在的秒数。注意：它不是直接返回当前时间，而是时间戳</p>
<h2 id="timestamp"><a href="#timestamp" class="headerlink" title="timestamp()"></a>timestamp()</h2><p><code>timestamp(v instant-vector)</code> 函数返回向量 v 中的每个样本的时间戳（从 1970-01-01 到现在的秒数）。</p>
<p>该函数从 Prometheus 2.0 版本开始引入。</p>
<h2 id="vector"><a href="#vector" class="headerlink" title="vector()"></a>vector()</h2><p><code>vector(s scalar)</code> 函数将标量 s 作为没有标签的向量返回，即返回结果为：key: value= {}, s。</p>
<h2 id="year"><a href="#year" class="headerlink" title="year()"></a>year()</h2><p><code>year(v=vector(time()) instant-vector)</code> 函数返回被给定 UTC 时间的当前年份。</p>
<h2 id="over-time"><a href="#over-time" class="headerlink" title="_over_time()"></a><code>_over_time()</code></h2><p>下面的函数列表允许传入一个区间向量，它们会聚合每个时间序列的范围，并返回一个瞬时向量：</p>
<ul>
<li><code>avg_over_time(range-vector)</code> : 区间向量内每个度量指标的平均值。</li>
<li><code>min_over_time(range-vector)</code> : 区间向量内每个度量指标的最小值。</li>
<li><code>max_over_time(range-vector)</code> : 区间向量内每个度量指标的最大值。</li>
<li><code>sum_over_time(range-vector)</code> : 区间向量内每个度量指标的求和。</li>
<li><code>count_over_time(range-vector)</code> : 区间向量内每个度量指标的样本数据个数。</li>
<li><code>quantile_over_time(scalar, range-vector)</code> : 区间向量内每个度量指标的样本数据值分位数，φ-quantile (0 ≤ φ ≤ 1)。</li>
<li><code>stddev_over_time(range-vector)</code> : 区间向量内每个度量指标的总体标准差。</li>
<li><code>stdvar_over_time(range-vector)</code> : 区间向量内每个度量指标的总体标准方差。</li>
</ul>
<blockquote>
<p><strong>[info] 注意</strong></p>
<p>即使区间向量内的值分布不均匀，它们在聚合时的权重也是相同的。</p>
</blockquote>
<p>原文： <a href="https://blog.51cto.com/wzlinux/2490670" target="_blank" rel="external">https://blog.51cto.com/wzlinux/2490670</a></p>
]]></content>
      
        <categories>
            
            <category> Prometheus </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Prometheus 告警规则生成和发送分析]]></title>
      <url>https://magiceses.github.io/2020/10/06/prometheus-prometheus-5-%E5%91%8A%E8%AD%A6%E8%A7%84%E5%88%99%E7%94%9F%E6%88%90%E5%92%8C%E5%8F%91%E9%80%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">每个人真正强大起来都要度过一段没人帮忙，没人支持的日子。所有事情都是自己一个人撑，所有情绪都是只有自己知道。但只要咬牙撑过去，一切都不一样了。<br></p>

<h1 id="rules-配置和使用"><a href="#rules-配置和使用" class="headerlink" title="rules 配置和使用"></a>rules 配置和使用</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>prometheus不仅可以提供数据采集功能，而且还可以做告警服务，通过匹配的性能参数，发出告警；然后把产生的警报发给Alertmanager进行处理。</p>
<p>但是这需要在Prometheus使用的配置文件中添加关联Alertmanager的组件的对应配置信息</p>
<a id="more"></a>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alerting:</span></span><br><span class="line"><span class="attr">  alert_relabel_configs:</span></span><br><span class="line">    <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;relabel_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="attr">  alertmanagers:</span></span><br><span class="line">    <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;alertmanager_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="comment"># alertmanagers 为 alertmanager_config 数组，</span></span><br></pre></td></tr></table></figure>
<p>配置范例：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alerting:</span></span><br><span class="line"><span class="attr">  alert_relabel_configs:</span> <span class="comment"># 动态修改 alert 属性的规则配置。</span></span><br><span class="line"><span class="attr">    - source_labels:</span> <span class="string">[dc]</span> </span><br><span class="line"><span class="attr">      regex:</span> <span class="string">(.+)\d+</span></span><br><span class="line"><span class="attr">      target_label:</span> <span class="string">dc1</span></span><br><span class="line"><span class="attr">  alertmanagers:</span></span><br><span class="line"><span class="attr">    - static_configs:</span></span><br><span class="line"><span class="attr">        - targets:</span> <span class="string">['127.0.0.1:9093']</span> <span class="comment"># 单实例配置</span></span><br><span class="line">        <span class="comment">#- targets: ['172.31.10.167:19093','172.31.10.167:29093','172.31.10.167:39093'] # 集群配置</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'Alertmanager'</span></span><br><span class="line">    <span class="comment"># metrics_path defaults to '/metrics'</span></span><br><span class="line">    <span class="comment"># scheme defaults to 'http'.</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">    - targets:</span> <span class="string">['localhost:19093']</span></span><br></pre></td></tr></table></figure>
<p>上面的配置中的 <code>alert_relabel_configs</code>是指警报重新标记在发送到Alertmanager之前应用于警报。 它具有与目标重新标记相同的配置格式和操作，外部标签标记后应用警报重新标记，主要是针对集群配置。</p>
<p>这个设置的用途是确保具有不同外部label的HA对Prometheus服务端发送相同的警报信息。</p>
<p>Alertmanager 可以通过 <code>static_configs</code> 参数静态配置，也可以使用其中一种支持的服务发现机制动态发现，我们上面的配置是静态的单实例，针对集群HA配置，后面会讲。</p>
<p>此外，<code>relabel_configs</code> 允许从发现的实体中选择 Alertmanager，并对使用的API路径提供高级修改，该路径通过 <code>__alerts_path__</code> 标签公开。</p>
<p>完成以上配置后，重启Prometheus服务，用以加载生效，也可以使用前文说过的热加载功能，使其配置生效。然后通过浏览器，访问 <a href="https://links.jianshu.com/go?to=http%3A%2F%2F192.168.1.220%3A19090%2Falerts" target="_blank" rel="external">http://192.168.1.220:19090/alerts</a> 就可以看 <code>inactive</code> <code>pending</code> <code>firing</code> 三个状态，没有警报信息是因为我们还没有配置警报规则 <code>rules</code>。</p>
<h2 id="告警规则"><a href="#告警规则" class="headerlink" title="告警规则"></a>告警规则</h2><p>警报规则 <code>rules</code> 使用的是 yaml 格式进行定义，在Prometheus中通过我们前面讲过的 <code>PromQL</code> 配置实际警报触发条件，Prometheus 会根据设置的警告规则 <code>Ruels</code> 以及配置间隔时间进行周期性计算，当满足触发条件规则会发送警报通知。</p>
<p>警报规则加载的是在 <code>prometheus.yml</code> 文件中进行配置，默认的警报规则进行周期运行计算的时间是1分钟，可以使用 <code>global</code> 中的 <code>evaluation_interval</code> 来决定时间间隔。</p>
<p>样例：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line"><span class="attr">    evaluation_interval:</span> <span class="number">15</span><span class="string">s</span></span><br></pre></td></tr></table></figure>
<p>警报规则可以指定多个文件，也可以自定到自定义的目录下面，为了管理更为便捷，方便阅读，可以把警报规则拆成多份，用以区分环境，系统，服务等，如：prod，test，dev 等等，并且支持以正则表达式定义。</p>
<p>样例：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">    <span class="comment">#- "/data/prometheus/rules/*.yml" # 正则表达式，会加在此目录下所有警报规则配置文件</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"/data/prometheus/rules/ops.yml"</span> <span class="comment"># 仅加载ops.yml警报规则文件</span></span><br><span class="line">    <span class="comment">#- "/data/prometheus/rules/prod-*.yml" </span></span><br><span class="line">    <span class="comment">#- "/data/prometheus/rules/test-*.yml"</span></span><br><span class="line">    <span class="comment">#- "/data/prometheus/rules/dev-*.yml"</span></span><br></pre></td></tr></table></figure>
<p>现在开始讲警报规则 <code>Rules</code> 的定义，格式为YAML。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">groups:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">&lt;string&gt;</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - alert:</span> <span class="string">&lt;string&gt;</span></span><br><span class="line"><span class="attr">    expr:</span> <span class="string">&lt;string&gt;</span></span><br><span class="line"><span class="attr">    for:</span>  <span class="string">[</span> <span class="string">&lt;duration&gt;</span> <span class="string">| default 0 ]</span></span><br><span class="line"><span class="string"></span><span class="attr">    labels:</span></span><br><span class="line">      <span class="string">[</span> <span class="string">&lt;lable_name&gt;:</span> <span class="string">&lt;label_value&gt;</span> <span class="string">]</span></span><br><span class="line"><span class="attr">    annotations:</span></span><br><span class="line">      <span class="string">[</span> <span class="string">&lt;lable_name&gt;:</span> <span class="string">&lt;tmpl_string&gt;</span> <span class="string">]</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>- name: &lt;string&gt;</code></td>
<td style="text-align:center">警报规则组的名称</td>
</tr>
<tr>
<td style="text-align:center"><code>- alert: &lt;string&gt;</code></td>
<td style="text-align:center">警报规则的名称</td>
</tr>
<tr>
<td style="text-align:center"><code>expr: &lt;string</code></td>
<td style="text-align:center">使用PromQL表达式完成的警报触发条件，用于计算是否有满足触发条件</td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;lable_name&gt;: &lt;label_value&gt;</code></td>
<td style="text-align:center">自定义标签，允许自行定义标签附加在警报上，比如<code>high</code> <code>warning</code></td>
</tr>
<tr>
<td style="text-align:center"><code>annotations: &lt;lable_name&gt;: &lt;tmpl_string&gt;</code></td>
<td style="text-align:center">用来设置有关警报的一组描述信息，其中包括自定义的标签，以及expr计算后的值。</td>
</tr>
</tbody>
</table>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">groups:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">operations</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - alert:</span> <span class="string">node-down</span></span><br><span class="line"><span class="attr">    expr:</span> <span class="string">up&#123;env="operations"&#125;</span> <span class="string">!=</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    for:</span> <span class="number">5</span><span class="string">m</span></span><br><span class="line"><span class="attr">    labels:</span></span><br><span class="line"><span class="attr">      status:</span> <span class="string">High</span></span><br><span class="line"><span class="attr">      team:</span> <span class="string">operations</span></span><br><span class="line"><span class="attr">    annotations:</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">"Environment: <span class="template-variable">&#123;&#123; $labels.env &#125;&#125;</span> Instance: <span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> is Down ! ! !"</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">'<span class="template-variable">&#123;&#123; $value &#125;&#125;</span>'</span></span><br><span class="line"><span class="attr">      summary:</span>  <span class="string">"The host node was down 20 minutes ago"</span></span><br></pre></td></tr></table></figure>
<p>以上就是一个完整 <code>Rules</code> 的配置，如果Prometheus 在周期检测中使用PromQ以<code>env=operations</code>为维度查询，如果当前查询结果中具有标签<code>operations</code>，且返回值都不等于1的时候，发送警报。<br>对于写好的 <code>Rules</code> 可以是常用 <code>promtool</code> 来<code>check ruls.yml</code>的书写格式是否正确。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/bin/promtool check rules /data/prometheus/rules/ops.yml</span><br><span class="line">Checking /data/prometheus/rules/ops.yml</span><br><span class="line">  SUCCESS: 7 rules found</span><br></pre></td></tr></table></figure>
<p>对于修改好的rules文件，保存以后，经过检测没有问题，直接重新热加载 Prometheus就可以在页面看到了。对于触发警报规则，比较简单了，直接修改运算值或者去停掉 node-exporter 服务，便可在界面看到警报信息。一个警报在生命周期会有三种状态</p>
<table>
<thead>
<tr>
<th style="text-align:center">状态</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>Inactive</code></td>
<td style="text-align:center">正常状态，未激活警报</td>
</tr>
<tr>
<td style="text-align:center"><code>Pending</code></td>
<td style="text-align:center">已满足触发条件，但没有满足发送时间条件，此条件就是上面rules范例中的 <code>for 5m</code> 子句中定义的持续时间</td>
</tr>
<tr>
<td style="text-align:center"><code>Firing</code></td>
<td style="text-align:center">满足条件，且超过了 for 子句中的的指定持续时间5m</td>
</tr>
</tbody>
</table>
<p>带有for子句的警报触发以后首先会先转换成 <code>Pending</code> 状态，然后在转换为 <code>Firing</code> 状态。这里需要俩个周期才能触发警报条件，如果没有设置 <code>for</code> 子句，会直接 <code>Inactive</code> 状态转换成 <code>Firing状态</code>，然后触发警报，发送给 <code>Receiver</code> 设置的通知人。</p>
<p>在运行过程中，Prometheus会把Pending或Firing状态的每一个警报创建一个 <code>Alerts</code>指标名称，这个可以通过Rules来触发警报测试，直接在UI中Graph查看指标 <code>ALERTS</code>，格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALERTS&#123;alertname=&quot;alert name&quot;,alertstate=&quot;pending|firing&quot;,&lt;additional alert label&gt;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/prometheus-prometheus-16.png" alt="img"></p>
<p>当警报处于激活状态 <code>Pending</code> 或者 <code>Firing</code>时候，如上图所示，样本值为1。其他状态为0。则不显示。上图已经触发警报，其警报已经被转发给Alertmanager组件，此时可以在浏览器上通过可以用过9093端口访问，查看警报状态。</p>
<p><img src="/images/prometheus-prometheus-17.png" alt="img"></p>
<p>现在我们来说一下整理下Prometheus从收集监控指标信息到触发警报的过程：</p>
<table>
<thead>
<tr>
<th style="text-align:center">状态</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>1.定义规则</code></td>
<td style="text-align:center">在Prometheus配置中，scrape_interval: 15s，默认是1分钟，这个定义是收集监控指标信息的采集周期，同时配置对应的警报规则，可以是全局，也可以单独为某一个metrics定义</td>
</tr>
<tr>
<td style="text-align:center"><code>2.周期计算</code></td>
<td style="text-align:center">对于表达式进行计算时，Prometheus中的配置中配置了 evaluation_interval: 15s，默认也是一分钟，为警报规则的计算周期，<code>evaluation_interval</code> 只是全局计算周期值。</td>
</tr>
<tr>
<td style="text-align:center"><code>3.1警报状态转换(pending)</code></td>
<td style="text-align:center">当首次触发警报规则条件成立，表达式为 <code>true</code>，并且没有满足警报规则中的for子句中的持续时间时，警报状态切换为 <code>Pending</code></td>
</tr>
<tr>
<td style="text-align:center"><code>3.2警报状态转换(firing)</code></td>
<td style="text-align:center">若下一个计算周期中，表达式仍为 <code>true</code>，并且满足警报规则中的for子句的持续时间时，警报状态转换为 <code>Firing</code>，即为 <code>active</code>，警报会被Prometheus推送到ALertmanager组件</td>
</tr>
<tr>
<td style="text-align:center"><code>3.3警报状态转换(period)</code></td>
<td style="text-align:center">如果在 <code>evaluation_interval</code> 的计算周期内，表达式还是为 <code>true</code>，同时满足 for子句的持续时间，持续转发到Alertmanager，这里只是转发状态到Alertmanager，并不是直接发送通知到指定通知源</td>
</tr>
<tr>
<td style="text-align:center"><code>3.4警报状态转换(resolve)</code></td>
<td style="text-align:center">只到某个周期，表达式 为 <code>false</code>，警报状态会变成 <code>inactive</code> ，并且会有一个 <code>resolve</code> 被发送到Alertmanager，用于说明警报故障依解决，发送resolve信息需要自己单独在Alertmanager中定义</td>
</tr>
</tbody>
</table>
<h2 id="Rules-类型"><a href="#Rules-类型" class="headerlink" title="Rules 类型"></a>Rules 类型</h2><p>Prometheus 支持两种类型的 <code>Rules</code> ，可以对其进行配置，然后定期进行运算：<code>recording rules</code> 记录规则 与 <code>alerting rules</code> 警报规则，规则文件的计算频率与警报规则计算频率一致，都是通过全局配置中的 <code>evaluation_interval</code> 定义。</p>
<h3 id="alerting-rules"><a href="#alerting-rules" class="headerlink" title="alerting rules"></a>alerting rules</h3><p>要在Prometheus中使用Rules规则，就必须创建一个包含必要规则语句的文件，并让Prometheus通过Prometheus配置中的rule_files字段加载该文件，前面我们已经讲过了。</p>
<p>其实语法都一样，除了 <code>recording rules</code> 中的收集的指标名称 <code>record: &lt;string&gt;</code> 字段配置方式略有不同，其他都是一样的。</p>
<p>样例：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- alert:</span> <span class="string">ServiceDown</span></span><br><span class="line"><span class="attr">    expr:</span> <span class="string">avg_over_time(up[5m])</span> <span class="string">*</span> <span class="number">100</span> <span class="string">&lt;</span> <span class="number">50</span></span><br><span class="line"><span class="attr">    annotations:</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">The</span> <span class="string">service</span> <span class="string">&#123;&#123;</span> <span class="string">$labels.job</span> <span class="string">&#125;&#125;</span> <span class="string">instance</span> <span class="string">&#123;&#123;</span> <span class="string">$labels.instance</span> <span class="string">&#125;&#125;</span> <span class="string">is</span></span><br><span class="line">        <span class="string">not</span> <span class="string">responding</span> <span class="string">for</span> <span class="string">more</span> <span class="string">than</span> <span class="number">50</span><span class="string">%</span> <span class="string">of</span> <span class="string">the</span> <span class="string">time</span> <span class="string">for</span> <span class="number">5</span> <span class="string">minutes.</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">The</span> <span class="string">service</span> <span class="string">&#123;&#123;</span> <span class="string">$labels.job</span> <span class="string">&#125;&#125;</span> <span class="string">is</span> <span class="string">not</span> <span class="string">responding</span></span><br><span class="line"><span class="attr">  - alert:</span> <span class="string">RedisDown</span></span><br><span class="line"><span class="attr">    expr:</span> <span class="string">avg_over_time(redis_up[5m])</span> <span class="string">*</span> <span class="number">100</span> <span class="string">&lt;</span> <span class="number">50</span></span><br><span class="line"><span class="attr">    annotations:</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">The</span> <span class="string">Redis</span> <span class="string">service</span> <span class="string">&#123;&#123;</span> <span class="string">$labels.job</span> <span class="string">&#125;&#125;</span> <span class="string">instance</span> <span class="string">&#123;&#123;</span> <span class="string">$labels.instance</span></span><br><span class="line">        <span class="string">&#125;&#125;</span> <span class="string">is</span> <span class="string">not</span> <span class="string">responding</span> <span class="string">for</span> <span class="string">more</span> <span class="string">than</span> <span class="number">50</span><span class="string">%</span> <span class="string">of</span> <span class="string">the</span> <span class="string">time</span> <span class="string">for</span> <span class="number">5</span> <span class="string">minutes.</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">The</span> <span class="string">Redis</span> <span class="string">service</span> <span class="string">&#123;&#123;</span> <span class="string">$labels.job</span> <span class="string">&#125;&#125;</span> <span class="string">is</span> <span class="string">not</span> <span class="string">responding</span></span><br><span class="line"><span class="attr">  - alert:</span> <span class="string">PostgresDown</span></span><br><span class="line"><span class="attr">    expr:</span> <span class="string">avg_over_time(pg_up[5m])</span> <span class="string">*</span> <span class="number">100</span> <span class="string">&lt;</span> <span class="number">50</span></span><br><span class="line"><span class="attr">    annotations:</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">The</span> <span class="string">Postgres</span> <span class="string">service</span> <span class="string">&#123;&#123;</span> <span class="string">$labels.job</span> <span class="string">&#125;&#125;</span> <span class="string">instance</span> <span class="string">&#123;&#123;</span> <span class="string">$labels.instance</span></span><br><span class="line">        <span class="string">&#125;&#125;</span> <span class="string">is</span> <span class="string">not</span> <span class="string">responding</span> <span class="string">for</span> <span class="string">more</span> <span class="string">than</span> <span class="number">50</span><span class="string">%</span> <span class="string">of</span> <span class="string">the</span> <span class="string">time</span> <span class="string">for</span> <span class="number">5</span> <span class="string">minutes.</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">The</span> <span class="string">Postgres</span> <span class="string">service</span> <span class="string">&#123;&#123;</span> <span class="string">$labels.job</span> <span class="string">&#125;&#125;</span> <span class="string">is</span> <span class="string">not</span> <span class="string">responding</span></span><br></pre></td></tr></table></figure>
<h3 id="recording-rules"><a href="#recording-rules" class="headerlink" title="recording rules"></a>recording rules</h3><p><code>recording rules</code> 是提前设置好一个比较花费大量时间运算或经常运算的表达式，其结果保存成一组新的时间序列数据。当需要查询的时候直接会返回已经计算好的结果，这样会比直接查询快，同时也减轻了PromQl的计算压力，同时对可视化查询的时候也很有用，可视化展示每次只需要刷新重复查询相同的表达式即可。</p>
<p>在配置的时候，除却 <code>record: &lt;string&gt;</code> 需要注意，其他的基本上是一样的，一个 <code>groups</code> 下可以包含多条规则 <code>rules</code> ，<code>Recording</code> 和 <code>Rules</code> 保存在 <code>group</code> 内，<code>Group</code> 中的规则以规则的配置时间间隔顺序运算，也就是全局中的 <code>evaluation_interval</code> 设置。</p>
<p>样例：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">groups:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">http_requests_total</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - record:</span> <span class="attr">job:http_requests_total:rate10m</span></span><br><span class="line"><span class="attr">    expr:</span> <span class="string">sum</span> <span class="string">by</span> <span class="string">(job)(rate(http_requests_total[10m]))</span></span><br><span class="line"><span class="attr">    lables:</span></span><br><span class="line"><span class="attr">      team:</span> <span class="string">operations</span></span><br><span class="line"><span class="attr">  - record:</span> <span class="attr">job:http_requests_total:rate30m</span></span><br><span class="line"><span class="attr">    expr:</span> <span class="string">sum</span> <span class="string">by</span> <span class="string">(job)(rate(http_requests_total[30m]))</span></span><br><span class="line"><span class="attr">    lables:</span></span><br><span class="line"><span class="attr">      team:</span> <span class="string">operations</span></span><br></pre></td></tr></table></figure>
<p>上面的规则其实就是根据 <code>record</code> 规则中的定义，Prometheus 会在后台完成 <code>expr</code> 中定义的 PromQL 表达式周期性运算，以 <code>job</code> 为维度使用 <code>sum</code> 聚合运算符 计算 函数<code>rate</code> 对<code>http_requests_total</code> 指标区间 <code>10m</code> 内的增长率，并且将计算结果保存到新的时间序列 <code>job:http_requests_total:rate10m</code> 中，</p>
<p>同时还可以通过 <code>labels</code> 为样本数据添加额外的自定义标签，但是要注意的是这个 <code>Lables</code> 一定存在当前表达式 <code>Metrics</code> 中。</p>
<h2 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h2><p>模板是在警报中使用时间序列标签和值展示的一种方法，可以用于警报规则中的注释（annotation）与标签（lable）。模板其实使用的go语言的标准模板语法，并公开一些包含时间序列标签和值的变量。这样查询的时候，更具有可读性，也可以执行其他PromQL查询来向警报添加额外内容，ALertmanager Web UI中会根据标签值显示器警报信息。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;&#123;</span> <span class="string">$lable.&lt;lablename&gt;&#125;&#125;</span> <span class="string">可以获取当前警报实例中的指定标签值</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#123;&#123;</span> <span class="string">$value</span> <span class="string">&#125;&#125;</span> <span class="string">变量可以获取当前PromQL表达式的计算样本值。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">groups:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">operations</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="comment"># monitor node memory usage</span></span><br><span class="line"><span class="attr">  - alert:</span> <span class="string">node-memory-usage</span></span><br><span class="line"><span class="attr">    expr:</span> <span class="string">(1</span> <span class="bullet">-</span> <span class="string">(node_memory_MemAvailable_bytes&#123;env="operations",job!='atlassian'&#125;</span> <span class="string">/</span> <span class="string">(node_memory_MemTotal_bytes&#123;env="operations"&#125;)))*</span> <span class="number">100</span> <span class="string">&gt; 90</span></span><br><span class="line"><span class="string"></span><span class="attr">    for:</span> <span class="number">1</span><span class="string">m</span></span><br><span class="line"><span class="attr">    labels:</span></span><br><span class="line"><span class="attr">      status:</span> <span class="string">Warning</span></span><br><span class="line"><span class="attr">      team:</span> <span class="string">operations</span></span><br><span class="line"><span class="attr">    annotations:</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">"Environment: <span class="template-variable">&#123;&#123; $labels.env &#125;&#125;</span> Instance: <span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> memory usage above <span class="template-variable">&#123;&#123; $value &#125;&#125;</span> ! ! !"</span></span><br><span class="line"><span class="attr">      summary:</span>  <span class="string">"node os memory usage status"</span></span><br></pre></td></tr></table></figure>
<p>调整好rules以后，我们可以使用 <code>curl -XPOST http://localhost:9090/-/reload</code> 或者 对Prometheus服务重启，让警报规则生效。</p>
<p>这个时候，我们可以把阈值调整为 <code>50</code> 来进行故障模拟操作，这时在去访问UI的时候，当持续1分钟满足警报条件，实际警报状态已转换为 <code>Firing</code>，可以在 Annotations中看到模板信息 <code>summary</code> 与 <code>description</code> 已经成功显示。</p>
<p><img src="/images/prometheus-prometheus-18.png" alt="img"></p>
<p>需要注意的是，一个稳定健壮的Prometheus监控系统中，要尽量使用模板化，这样会降低性能开销（Debug调试信息等），同时也易于维护。</p>
<p><strong>下面网站收录了当前大部分的rules规则，大家可以对应自己的环境，配置相关服务的Rules。</strong></p>
<p>Prometheus警报规则收集(<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fawesome-prometheus-alerts.grep.to%2F" target="_blank" rel="external">https://awesome-prometheus-alerts.grep.to/</a>)</p>
<h1 id="rules-源码分析"><a href="#rules-源码分析" class="headerlink" title="rules 源码分析"></a>rules 源码分析</h1><p>入口还是在 prometheus 的 <code>main.go</code></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// notifier 是用于向 alertmanager 发送告警的</span></span><br><span class="line">notifierManager = notifier.NewManager(&amp;cfg.notifier, log.With(logger, <span class="string">"component"</span>, <span class="string">"notifier"</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 声明 ruleManager</span></span><br><span class="line">ruleManager = rules.NewManager(&amp;rules.ManagerOptions&#123;</span><br><span class="line">	Appendable:      fanoutStorage,</span><br><span class="line">	Queryable:       localStorage,</span><br><span class="line">	QueryFunc:       rules.EngineQueryFunc(queryEngine, fanoutStorage),</span><br><span class="line">	<span class="comment">// 若触发告警规则,则通过sendAlerts发送告警信息</span></span><br><span class="line">	NotifyFunc:      sendAlerts(notifierManager, cfg.web.ExternalURL.String()),</span><br><span class="line">	Context:         ctxRule,</span><br><span class="line">	ExternalURL:     cfg.web.ExternalURL,</span><br><span class="line">	Registerer:      prometheus.DefaultRegisterer,</span><br><span class="line">	Logger:          log.With(logger, <span class="string">"component"</span>, <span class="string">"rule manager"</span>),</span><br><span class="line">	OutageTolerance: time.Duration(cfg.outageTolerance),</span><br><span class="line">	ForGracePeriod:  time.Duration(cfg.forGracePeriod),</span><br><span class="line">	ResendDelay:     time.Duration(cfg.resendDelay),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>主要看下这里两个 <code>manager</code> 的初始化，<code>ruleManager</code> 主要是根据定义的告警规则进行定时的计算，<code>notifierManager</code> 主要是在生成告警之后会告警的内容进行发送，与 <code>alertmanager</code> 进行交互，将告警信息交给 <code>alertmanager</code> 进行处理之后再根据配置的发送方式，将内容发送给 <code>receivers</code>。下面分别看下：</p>
<h2 id="ruleManager"><a href="#ruleManager" class="headerlink" title="ruleManager"></a>ruleManager</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	name: <span class="string">"rules"</span>,</span><br><span class="line">	reloader: <span class="function"><span class="keyword">func</span><span class="params">(cfg *config.Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">		<span class="comment">// Get all rule files matching the configuration paths.</span></span><br><span class="line">		<span class="keyword">var</span> files []<span class="keyword">string</span></span><br><span class="line">		<span class="comment">// 列出配置的所有rules文件,比如 /tmp/*.rules</span></span><br><span class="line">		<span class="keyword">for</span> _, pat := <span class="keyword">range</span> cfg.RuleFiles &#123;</span><br><span class="line">			fs, err := filepath.Glob(pat)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="comment">// The only error can be a bad pattern.</span></span><br><span class="line">				<span class="keyword">return</span> errors.Wrapf(err, <span class="string">"error retrieving rule files for %s"</span>, pat)</span><br><span class="line">			&#125;</span><br><span class="line">			files = <span class="built_in">append</span>(files, fs...)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// files["/tmp/kubelet.rules","nodes.rules"]</span></span><br><span class="line">		<span class="keyword">return</span> ruleManager.Update(</span><br><span class="line">			time.Duration(cfg.GlobalConfig.EvaluationInterval),</span><br><span class="line">			files,</span><br><span class="line">			cfg.GlobalConfig.ExternalLabels,</span><br><span class="line">		)</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>遍历配置的苏欧欧 <code>rules</code> 文件，进行解析，并将其加入 <code>files</code> 切片</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Update the rule manager's state as the config requires. If</span></span><br><span class="line"><span class="comment">// loading the new rules failed the old rule set is restored.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">Update</span><span class="params">(interval time.Duration, files []<span class="keyword">string</span>, externalLabels labels.Labels)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	m.mtx.Lock()</span><br><span class="line">	<span class="keyword">defer</span> m.mtx.Unlock()</span><br><span class="line"></span><br><span class="line">	groups, errs := m.LoadGroups(interval, externalLabels, files...)</span><br><span class="line">	<span class="keyword">if</span> errs != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> _, e := <span class="keyword">range</span> errs &#123;</span><br><span class="line">			level.Error(m.logger).Log(<span class="string">"msg"</span>, <span class="string">"loading groups failed"</span>, <span class="string">"err"</span>, e)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> errors.New(<span class="string">"error loading rules, previous rule set restored"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	m.restored = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">	<span class="keyword">for</span> _, newg := <span class="keyword">range</span> groups &#123;</span><br><span class="line">		<span class="comment">// If there is an old group with the same identifier,</span></span><br><span class="line">		<span class="comment">// check if new group equals with the old group, if yes then skip it.</span></span><br><span class="line">		<span class="comment">// If not equals, stop it and wait for it to finish the current iteration.</span></span><br><span class="line">		<span class="comment">// Then copy it into the new group.</span></span><br><span class="line">		gn := GroupKey(newg.file, newg.name)</span><br><span class="line">		oldg, ok := m.groups[gn]</span><br><span class="line">		<span class="built_in">delete</span>(m.groups, gn)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> ok &amp;&amp; oldg.Equals(newg) &#123;</span><br><span class="line">			groups[gn] = oldg</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="comment">// 每一个 group 开一个协程去 run</span></span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(newg *Group)</span></span> &#123;</span><br><span class="line">			<span class="keyword">if</span> ok &#123;</span><br><span class="line">				oldg.stop()</span><br><span class="line">				newg.CopyState(oldg)</span><br><span class="line">			&#125;</span><br><span class="line">			wg.Done()</span><br><span class="line">			<span class="comment">// Wait with starting evaluation until the rule manager</span></span><br><span class="line">			<span class="comment">// is told to run. This is necessary to avoid running</span></span><br><span class="line">			<span class="comment">// queries against a bootstrapping storage.</span></span><br><span class="line">			&lt;-m.block</span><br><span class="line">			newg.run(m.opts.Context)</span><br><span class="line">		&#125;(newg)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Stop remaining old groups.</span></span><br><span class="line">	wg.Add(<span class="built_in">len</span>(m.groups))</span><br><span class="line">	<span class="keyword">for</span> n, oldg := <span class="keyword">range</span> m.groups &#123;</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">string</span>, g *Group)</span></span> &#123;</span><br><span class="line">			g.markStale = <span class="literal">true</span></span><br><span class="line">			g.stop()</span><br><span class="line">			<span class="keyword">if</span> m := g.metrics; m != <span class="literal">nil</span> &#123;</span><br><span class="line">				m.IterationsMissed.DeleteLabelValues(n)</span><br><span class="line">				m.IterationsScheduled.DeleteLabelValues(n)</span><br><span class="line">				m.EvalTotal.DeleteLabelValues(n)</span><br><span class="line">				m.EvalFailures.DeleteLabelValues(n)</span><br><span class="line">				m.GroupInterval.DeleteLabelValues(n)</span><br><span class="line">				m.GroupLastEvalTime.DeleteLabelValues(n)</span><br><span class="line">				m.GroupLastDuration.DeleteLabelValues(n)</span><br><span class="line">				m.GroupRules.DeleteLabelValues(n)</span><br><span class="line">				m.GroupSamples.DeleteLabelValues((n))</span><br><span class="line">			&#125;</span><br><span class="line">			wg.Done()</span><br><span class="line">		&#125;(n, oldg)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	wg.Wait()</span><br><span class="line">	m.groups = groups</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结合上面的初始化看，到这里为止主要做了如下几件事情：</p>
<ol>
<li>列出配置的所有rules文件</li>
<li>解析rules文件</li>
<li>按groupName分组</li>
<li>group.Run()，此处会启动定时任务，按照配置的频率evaluation_interval执行告警或者汇总规则</li>
</ol>
<p>看下 <code>run</code> 方法</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Group)</span> <span class="title">run</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> <span class="built_in">close</span>(g.terminated)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Wait an initial amount to have consistently slotted intervals.</span></span><br><span class="line">	evalTimestamp := g.EvalTimestamp(time.Now().UnixNano()).Add(g.interval)</span><br><span class="line">	<span class="keyword">select</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> &lt;-time.After(time.Until(evalTimestamp)):</span><br><span class="line">	<span class="keyword">case</span> &lt;-g.done:</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ctx = promql.NewOriginContext(ctx, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">		<span class="string">"ruleGroup"</span>: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">			<span class="string">"file"</span>: g.File(),</span><br><span class="line">			<span class="string">"name"</span>: g.Name(),</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	iter := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		g.metrics.IterationsScheduled.WithLabelValues(GroupKey(g.file, g.name)).Inc()</span><br><span class="line"></span><br><span class="line">		start := time.Now()</span><br><span class="line">		<span class="comment">// 将循环当前group的所有rule，并执行eval</span></span><br><span class="line">		g.Eval(ctx, evalTimestamp)</span><br><span class="line">		timeSinceStart := time.Since(start)</span><br><span class="line"></span><br><span class="line">		g.metrics.IterationDuration.Observe(timeSinceStart.Seconds())</span><br><span class="line">		g.setEvaluationTime(timeSinceStart)</span><br><span class="line">		g.setLastEvaluation(start)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// The assumption here is that since the ticker was started after having</span></span><br><span class="line">	<span class="comment">// waited for `evalTimestamp` to pass, the ticks will trigger soon</span></span><br><span class="line">	<span class="comment">// after each `evalTimestamp + N * g.interval` occurrence.</span></span><br><span class="line">	tick := time.NewTicker(g.interval)</span><br><span class="line">	<span class="keyword">defer</span> tick.Stop()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> !g.markStale &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(now time.Time)</span></span> &#123;</span><br><span class="line">			<span class="keyword">for</span> _, rule := <span class="keyword">range</span> g.seriesInPreviousEval &#123;</span><br><span class="line">				<span class="keyword">for</span> _, r := <span class="keyword">range</span> rule &#123;</span><br><span class="line">					g.staleSeries = <span class="built_in">append</span>(g.staleSeries, r)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// That can be garbage collected at this point.</span></span><br><span class="line">			g.seriesInPreviousEval = <span class="literal">nil</span></span><br><span class="line">			<span class="comment">// Wait for 2 intervals to give the opportunity to renamed rules</span></span><br><span class="line">			<span class="comment">// to insert new series in the tsdb. At this point if there is a</span></span><br><span class="line">			<span class="comment">// renamed rule, it should already be started.</span></span><br><span class="line">			<span class="keyword">select</span> &#123;</span><br><span class="line">			<span class="keyword">case</span> &lt;-g.managerDone:</span><br><span class="line">			<span class="keyword">case</span> &lt;-time.After(<span class="number">2</span> * g.interval):</span><br><span class="line">				g.cleanupStaleSeries(ctx, now)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;(time.Now())</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 第一次运行iter，先进行一次rules判断</span></span><br><span class="line">	iter()</span><br><span class="line">	<span class="comment">// 如果我们需要恢复的话，我们等待另一个 Eval 完成。</span></span><br><span class="line">	<span class="comment">// 原因是，在第一次评估期间（或之前），我们可能没有充足的数据，</span></span><br><span class="line">	<span class="comment">// 并且记录规则没有更新某些警报可能依赖的最新值</span></span><br><span class="line">	<span class="keyword">if</span> g.shouldRestore &#123;</span><br><span class="line">		<span class="comment">// If we have to restore, we wait for another Eval to finish.</span></span><br><span class="line">		<span class="comment">// The reason behind this is, during first eval (or before it)</span></span><br><span class="line">		<span class="comment">// we might not have enough data scraped, and recording rules would not</span></span><br><span class="line">		<span class="comment">// have updated the latest values, on which some alerts might depend.</span></span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-g.done:</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="keyword">case</span> &lt;-tick.C:</span><br><span class="line">			missed := (time.Since(evalTimestamp) / g.interval) - <span class="number">1</span></span><br><span class="line">			<span class="keyword">if</span> missed &gt; <span class="number">0</span> &#123;</span><br><span class="line">				g.metrics.IterationsMissed.WithLabelValues(GroupKey(g.file, g.name)).Add(<span class="keyword">float64</span>(missed))</span><br><span class="line">				g.metrics.IterationsScheduled.WithLabelValues(GroupKey(g.file, g.name)).Add(<span class="keyword">float64</span>(missed))</span><br><span class="line">			&#125;</span><br><span class="line">			evalTimestamp = evalTimestamp.Add((missed + <span class="number">1</span>) * g.interval)</span><br><span class="line">			iter()</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		g.RestoreForState(time.Now())</span><br><span class="line">		g.shouldRestore = <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-g.done:</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">select</span> &#123;</span><br><span class="line">			<span class="keyword">case</span> &lt;-g.done:</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			<span class="keyword">case</span> &lt;-tick.C:</span><br><span class="line">				<span class="comment">// 之后按照 interval 周期循环rules判断是否发送告警</span></span><br><span class="line">				missed := (time.Since(evalTimestamp) / g.interval) - <span class="number">1</span></span><br><span class="line">				<span class="keyword">if</span> missed &gt; <span class="number">0</span> &#123;</span><br><span class="line">					g.metrics.IterationsMissed.WithLabelValues(GroupKey(g.file, g.name)).Add(<span class="keyword">float64</span>(missed))</span><br><span class="line">					g.metrics.IterationsScheduled.WithLabelValues(GroupKey(g.file, g.name)).Add(<span class="keyword">float64</span>(missed))</span><br><span class="line">				&#125;</span><br><span class="line">				evalTimestamp = evalTimestamp.Add((missed + <span class="number">1</span>) * g.interval)</span><br><span class="line">				iter()</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里面主要就是根据rules的内容进行定时的计算，判断是否需要生成告警信息，然后将其交给 <code>notifierManager</code> 组件进行处理</p>
<p>通过<code>g.Eval()</code>，遍历rules去匹配</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Eval runs a single evaluation cycle in which all rules are evaluated sequentially.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Group)</span> <span class="title">Eval</span><span class="params">(ctx context.Context, ts time.Time)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> samplesTotal <span class="keyword">float64</span></span><br><span class="line">	<span class="comment">// 循环所有的rules</span></span><br><span class="line">	<span class="keyword">for</span> i, rule := <span class="keyword">range</span> g.rules &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-g.done:</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 循环所有的rules，将每个rule拿出来执行匿名函数</span></span><br><span class="line">		<span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, rule Rule)</span></span> &#123;</span><br><span class="line">			sp, ctx := opentracing.StartSpanFromContext(ctx, <span class="string">"rule"</span>)</span><br><span class="line">			sp.SetTag(<span class="string">"name"</span>, rule.Name())</span><br><span class="line">			<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(t time.Time)</span></span> &#123;</span><br><span class="line">				sp.Finish()</span><br><span class="line"></span><br><span class="line">				since := time.Since(t)</span><br><span class="line">				g.metrics.EvalDuration.Observe(since.Seconds())</span><br><span class="line">				rule.SetEvaluationDuration(since)</span><br><span class="line">				rule.SetEvaluationTimestamp(t)</span><br><span class="line">			&#125;(time.Now())</span><br><span class="line"></span><br><span class="line">			g.metrics.EvalTotal.WithLabelValues(GroupKey(g.File(), g.Name())).Inc()</span><br><span class="line"></span><br><span class="line">			<span class="comment">// AlertingRule.Eval()，通过Engine拉取数据，计算告警表达式，创建告警状态 pending or firing</span></span><br><span class="line">			vector, err := rule.Eval(ctx, ts, g.opts.QueryFunc, g.opts.ExternalURL)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				rule.SetHealth(HealthBad)</span><br><span class="line">				rule.SetLastError(err)</span><br><span class="line">				g.metrics.EvalFailures.WithLabelValues(GroupKey(g.File(), g.Name())).Inc()</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Canceled queries are intentional termination of queries. This normally</span></span><br><span class="line">				<span class="comment">// happens on shutdown and thus we skip logging of any errors here.</span></span><br><span class="line">				<span class="keyword">if</span> _, ok := err.(promql.ErrQueryCanceled); !ok &#123;</span><br><span class="line">					level.Warn(g.logger).Log(<span class="string">"msg"</span>, <span class="string">"Evaluating rule failed"</span>, <span class="string">"rule"</span>, rule, <span class="string">"err"</span>, err)</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">			samplesTotal += <span class="keyword">float64</span>(<span class="built_in">len</span>(vector))</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 判断是否需要发送告警给 alertmanager</span></span><br><span class="line">			<span class="keyword">if</span> ar, ok := rule.(*AlertingRule); ok &#123;</span><br><span class="line">				ar.sendAlerts(ctx, ts, g.opts.ResendDelay, g.interval, g.opts.NotifyFunc)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">var</span> (</span><br><span class="line">				numOutOfOrder = <span class="number">0</span></span><br><span class="line">				numDuplicates = <span class="number">0</span></span><br><span class="line">			)</span><br><span class="line"></span><br><span class="line">			app := g.opts.Appendable.Appender(ctx)</span><br><span class="line">			seriesReturned := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]labels.Labels, <span class="built_in">len</span>(g.seriesInPreviousEval[i]))</span><br><span class="line">			<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">				<span class="keyword">if</span> err := app.Commit(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">					rule.SetHealth(HealthBad)</span><br><span class="line">					rule.SetLastError(err)</span><br><span class="line">					g.metrics.EvalFailures.WithLabelValues(GroupKey(g.File(), g.Name())).Inc()</span><br><span class="line"></span><br><span class="line">					level.Warn(g.logger).Log(<span class="string">"msg"</span>, <span class="string">"Rule sample appending failed"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">					<span class="keyword">return</span></span><br><span class="line">				&#125;</span><br><span class="line">				g.seriesInPreviousEval[i] = seriesReturned</span><br><span class="line">			&#125;()</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> _, s := <span class="keyword">range</span> vector &#123;</span><br><span class="line">				<span class="keyword">if</span> _, err := app.Append(<span class="number">0</span>, s.Metric, s.T, s.V); err != <span class="literal">nil</span> &#123;</span><br><span class="line">					rule.SetHealth(HealthBad)</span><br><span class="line">					rule.SetLastError(err)</span><br><span class="line"></span><br><span class="line">					<span class="keyword">switch</span> errors.Cause(err) &#123;</span><br><span class="line">					<span class="keyword">case</span> storage.ErrOutOfOrderSample:</span><br><span class="line">						numOutOfOrder++</span><br><span class="line">						level.Debug(g.logger).Log(<span class="string">"msg"</span>, <span class="string">"Rule evaluation result discarded"</span>, <span class="string">"err"</span>, err, <span class="string">"sample"</span>, s)</span><br><span class="line">					<span class="keyword">case</span> storage.ErrDuplicateSampleForTimestamp:</span><br><span class="line">						numDuplicates++</span><br><span class="line">						level.Debug(g.logger).Log(<span class="string">"msg"</span>, <span class="string">"Rule evaluation result discarded"</span>, <span class="string">"err"</span>, err, <span class="string">"sample"</span>, s)</span><br><span class="line">					<span class="keyword">default</span>:</span><br><span class="line">						level.Warn(g.logger).Log(<span class="string">"msg"</span>, <span class="string">"Rule evaluation result discarded"</span>, <span class="string">"err"</span>, err, <span class="string">"sample"</span>, s)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					seriesReturned[s.Metric.String()] = s.Metric</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> numOutOfOrder &gt; <span class="number">0</span> &#123;</span><br><span class="line">				level.Warn(g.logger).Log(<span class="string">"msg"</span>, <span class="string">"Error on ingesting out-of-order result from rule evaluation"</span>, <span class="string">"numDropped"</span>, numOutOfOrder)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> numDuplicates &gt; <span class="number">0</span> &#123;</span><br><span class="line">				level.Warn(g.logger).Log(<span class="string">"msg"</span>, <span class="string">"Error on ingesting results from rule evaluation with different value but same timestamp"</span>, <span class="string">"numDropped"</span>, numDuplicates)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> metric, lset := <span class="keyword">range</span> g.seriesInPreviousEval[i] &#123;</span><br><span class="line">				<span class="keyword">if</span> _, ok := seriesReturned[metric]; !ok &#123;</span><br><span class="line">					<span class="comment">// Series no longer exposed, mark it stale.</span></span><br><span class="line">					_, err = app.Append(<span class="number">0</span>, lset, timestamp.FromTime(ts), math.Float64frombits(value.StaleNaN))</span><br><span class="line">					<span class="keyword">switch</span> errors.Cause(err) &#123;</span><br><span class="line">					<span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">					<span class="keyword">case</span> storage.ErrOutOfOrderSample, storage.ErrDuplicateSampleForTimestamp:</span><br><span class="line">						<span class="comment">// Do not count these in logging, as this is expected if series</span></span><br><span class="line">						<span class="comment">// is exposed from a different rule.</span></span><br><span class="line">					<span class="keyword">default</span>:</span><br><span class="line">						level.Warn(g.logger).Log(<span class="string">"msg"</span>, <span class="string">"Adding stale sample failed"</span>, <span class="string">"sample"</span>, metric, <span class="string">"err"</span>, err)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;(i, rule)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> g.metrics != <span class="literal">nil</span> &#123;</span><br><span class="line">		g.metrics.GroupSamples.WithLabelValues(GroupKey(g.File(), g.Name())).Set(samplesTotal)</span><br><span class="line">	&#125;</span><br><span class="line">	g.cleanupStaleSeries(ctx, ts)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>AlertingRule.Eval()</code>，通过<code>Engine</code>拉取数据，计算告警表达式，创建告警状态<code>pending or firing</code>，然后判断是否需要发送告警给 <code>alertmanager</code></p>
<p>如果需要发送的话，执行 <code>sendAlerts</code></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *AlertingRule)</span> <span class="title">sendAlerts</span><span class="params">(ctx context.Context, ts time.Time, resendDelay time.Duration, interval time.Duration, notifyFunc NotifyFunc)</span></span> &#123;</span><br><span class="line">	alerts := []*Alert&#123;&#125;</span><br><span class="line">	r.ForEachActiveAlert(<span class="function"><span class="keyword">func</span><span class="params">(alert *Alert)</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> alert.needsSending(ts, resendDelay) &#123;</span><br><span class="line">			alert.LastSentAt = ts</span><br><span class="line">			<span class="comment">// Allow for two Eval or Alertmanager send failures.</span></span><br><span class="line">			delta := resendDelay</span><br><span class="line">			<span class="keyword">if</span> interval &gt; resendDelay &#123;</span><br><span class="line">				delta = interval</span><br><span class="line">			&#125;</span><br><span class="line">			alert.ValidUntil = ts.Add(<span class="number">4</span> * delta)</span><br><span class="line">			anew := *alert</span><br><span class="line">			alerts = <span class="built_in">append</span>(alerts, &amp;anew)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">	notifyFunc(ctx, r.vector.String(), alerts...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到这边就是将 <code>alert</code> 整合一下，通过 <code>notifyFunc</code> 发送出去，那么这里的 notifyFunc 是什么呢？还记得我们初始化的时候定义的变量吗，回忆一下</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ruleManager = rules.NewManager(&amp;rules.ManagerOptions&#123;</span><br><span class="line">	Appendable:      fanoutStorage,</span><br><span class="line">	Queryable:       localStorage,</span><br><span class="line">	QueryFunc:       rules.EngineQueryFunc(queryEngine, fanoutStorage),</span><br><span class="line">	<span class="comment">// 若触发告警规则,则通过sendAlerts发送告警信息</span></span><br><span class="line">	NotifyFunc:      sendAlerts(notifierManager, cfg.web.ExternalURL.String()),</span><br><span class="line">	Context:         ctxRule,</span><br><span class="line">	ExternalURL:     cfg.web.ExternalURL,</span><br><span class="line">	Registerer:      prometheus.DefaultRegisterer,</span><br><span class="line">	Logger:          log.With(logger, <span class="string">"component"</span>, <span class="string">"rule manager"</span>),</span><br><span class="line">	OutageTolerance: time.Duration(cfg.outageTolerance),</span><br><span class="line">	ForGracePeriod:  time.Duration(cfg.forGracePeriod),</span><br><span class="line">	ResendDelay:     time.Duration(cfg.resendDelay),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>没错就是 <code>sendAlerts(notifierManager, cfg.web.ExternalURL.String())</code> ，具体实现在</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sendAlerts implements the rules.NotifyFunc for a Notifier.</span></span><br><span class="line"><span class="comment">// sendAlerts方法主要作用是把规则管理(ruleManager)把告警信息转换成notifier.Alert类型</span></span><br><span class="line"><span class="comment">// 遍历告警信息,构造告警,告警信息长度大于0, 则发送告警</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendAlerts</span><span class="params">(s sender, externalURL <span class="keyword">string</span>)</span> <span class="title">rules</span>.<span class="title">NotifyFunc</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, expr <span class="keyword">string</span>, alerts ...*rules.Alert)</span></span> &#123;</span><br><span class="line">		<span class="keyword">var</span> res []*notifier.Alert</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 遍历告警信息</span></span><br><span class="line">		<span class="keyword">for</span> _, alert := <span class="keyword">range</span> alerts &#123;</span><br><span class="line">			a := &amp;notifier.Alert&#123;</span><br><span class="line">				StartsAt:     alert.FiredAt,</span><br><span class="line">				Labels:       alert.Labels,</span><br><span class="line">				Annotations:  alert.Annotations,</span><br><span class="line">				GeneratorURL: externalURL + strutil.TableLinkForExpression(expr),</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 若告警结束,设置告警结束时间为ResolverdAt时间</span></span><br><span class="line">			<span class="keyword">if</span> !alert.ResolvedAt.IsZero() &#123;</span><br><span class="line">				a.EndsAt = alert.ResolvedAt</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// 若告警还是active状态,设置告警结束时间为当前时间</span></span><br><span class="line">				a.EndsAt = alert.ValidUntil</span><br><span class="line">			&#125;</span><br><span class="line">			res = <span class="built_in">append</span>(res, a)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 若是有告警信息, 则发送告警</span></span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(alerts) &gt; <span class="number">0</span> &#123;</span><br><span class="line">			s.Send(res...)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到这里的 <code>sender</code> 就是 <code>norifierManager</code> ，规则管理(ruleManager)把告警信息转换成notifier.Alert类型，遍历告警信息，如果存在告警，则发送告警。</p>
<p><code>notifier.go</code></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Send queues the given notification requests for processing.</span></span><br><span class="line"><span class="comment">// Panics if called on a handler that is not running.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Manager)</span> <span class="title">Send</span><span class="params">(alerts ...*Alert)</span></span> &#123;</span><br><span class="line">	n.mtx.Lock()</span><br><span class="line">	<span class="keyword">defer</span> n.mtx.Unlock()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Attach external labels before relabelling and sending.</span></span><br><span class="line">	<span class="comment">// 根据配置文件prometheus.yml的alert_relabel_configs下的relabel_config对告警的label进行重置</span></span><br><span class="line">	<span class="keyword">for</span> _, a := <span class="keyword">range</span> alerts &#123;</span><br><span class="line">		lb := labels.NewBuilder(a.Labels)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> _, l := <span class="keyword">range</span> n.opts.ExternalLabels &#123;</span><br><span class="line">			<span class="keyword">if</span> a.Labels.Get(l.Name) == <span class="string">""</span> &#123;</span><br><span class="line">				lb.Set(l.Name, l.Value)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		a.Labels = lb.Labels()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	alerts = n.relabelAlerts(alerts)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(alerts) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Queue capacity should be significantly larger than a single alert</span></span><br><span class="line">	<span class="comment">// batch could be.</span></span><br><span class="line">	<span class="comment">// 若待告警信息的数量大于队列总容量,则移除待告警信息中最早的告警信息, 依据的规则是先进先移除</span></span><br><span class="line">	<span class="keyword">if</span> d := <span class="built_in">len</span>(alerts) - n.opts.QueueCapacity; d &gt; <span class="number">0</span> &#123;</span><br><span class="line">		alerts = alerts[d:]</span><br><span class="line"></span><br><span class="line">		level.Warn(n.logger).Log(<span class="string">"msg"</span>, <span class="string">"Alert batch larger than queue capacity, dropping alerts"</span>, <span class="string">"num_dropped"</span>, d)</span><br><span class="line">		n.metrics.dropped.Add(<span class="keyword">float64</span>(d))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// If the queue is full, remove the oldest alerts in favor</span></span><br><span class="line">	<span class="comment">// of newer ones.</span></span><br><span class="line">	<span class="comment">// 若队列中已有的告警信息和待发送的告警信息大于队列的总容量,则从队列中移除最早的告警信息, 依据是先进先移除</span></span><br><span class="line">	<span class="keyword">if</span> d := (<span class="built_in">len</span>(n.queue) + <span class="built_in">len</span>(alerts)) - n.opts.QueueCapacity; d &gt; <span class="number">0</span> &#123;</span><br><span class="line">		n.queue = n.queue[d:]</span><br><span class="line"></span><br><span class="line">		level.Warn(n.logger).Log(<span class="string">"msg"</span>, <span class="string">"Alert notification queue full, dropping alerts"</span>, <span class="string">"num_dropped"</span>, d)</span><br><span class="line">		n.metrics.dropped.Add(<span class="keyword">float64</span>(d))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 把待发送的告警信息加入队列</span></span><br><span class="line">	n.queue = <span class="built_in">append</span>(n.queue, alerts...)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Notify sending goroutine that there are alerts to be processed.</span></span><br><span class="line">	<span class="comment">// 告知通知管理(notifierManager)有告警信息需要处理</span></span><br><span class="line">	<span class="comment">// setMore方法相当于一个触发器，向管道n.more发送触发信息, 告知通知管理(notifierManager)有告警信息需要处理，</span></span><br><span class="line">	<span class="comment">// 是连接规则管理(ruleManager)和通知管理(notifierManager)的桥梁</span></span><br><span class="line">	n.setMore()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面看下 <code>notifierManager</code> 的处理</p>
<h2 id="notifierManager"><a href="#notifierManager" class="headerlink" title="notifierManager"></a>notifierManager</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// notifier 是用于向 alertmanager 发送告警的</span></span><br><span class="line">notifierManager = notifier.NewManager(&amp;cfg.notifier, log.With(logger, <span class="string">"component"</span>, <span class="string">"notifier"</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	name:     <span class="string">"notify"</span>,</span><br><span class="line">	reloader: notifierManager.ApplyConfig,</span><br><span class="line">&#123;</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ApplyConfig updates the status state as the new config requires.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Manager)</span> <span class="title">ApplyConfig</span><span class="params">(conf *config.Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	n.mtx.Lock()</span><br><span class="line">	<span class="keyword">defer</span> n.mtx.Unlock()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 配置文件prometheus.yml中global下的external_labels, 用于外部系统标签的，不是用于metrics数据</span></span><br><span class="line">	n.opts.ExternalLabels = conf.GlobalConfig.ExternalLabels</span><br><span class="line">	<span class="comment">// 配置文件prometheus.yml中alertingl下alert_relabel_configs, 动态修改 alert 属性的规则配置</span></span><br><span class="line">	n.opts.RelabelConfigs = conf.AlertingConfig.AlertRelabelConfigs</span><br><span class="line"></span><br><span class="line">	amSets := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*alertmanagerSet)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 遍历告警相关的配置,即配置文件prometheus.yml的alerting</span></span><br><span class="line">	<span class="keyword">for</span> k, cfg := <span class="keyword">range</span> conf.AlertingConfig.AlertmanagerConfigs.ToMap() &#123;</span><br><span class="line">		<span class="comment">// 把alerting下每个配置项, 转换成结构实例:alertmanagerSet</span></span><br><span class="line">		ams, err := newAlertmanagerSet(cfg, n.logger, n.metrics)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		amSets[k] = ams</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	n.alertmanagers = amSets</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看下正式启动的地方：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="comment">// When the notifier manager receives a new targets list</span></span><br><span class="line">	<span class="comment">// it needs to read a valid config for each job.</span></span><br><span class="line">	<span class="comment">// It depends on the config being in sync with the discovery manager</span></span><br><span class="line">	<span class="comment">// so we wait until the config is fully loaded.</span></span><br><span class="line">	&lt;-reloadReady.C</span><br><span class="line"></span><br><span class="line">	notifierManager.Run(discoveryManagerNotify.SyncCh())</span><br><span class="line">	level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Notifier manager stopped"</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">	notifierManager.Stop()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run dispatches notifications continuously.</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Run方法, 监听n.more管道. 若规则管理(ruleManager)向管道n.more发送信号,</span></span><br><span class="line"><span class="comment">	告知通知管理(notifierManager)有告警信息需要发送，则触发接下来的告警信息处理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Run方法和指标采集(scrapeManager)的Run方法共用服务发现 (serviceDiscover)的处理逻辑,</span></span><br><span class="line"><span class="comment">	检测目标(targets)是否有变动, 不同的是通知管理(notifierManager)只监听告警服务的变动</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">指标采集(scrapeManager)的tset为map类型, key为job_name, value为targetgroup.Group．</span></span><br><span class="line"><span class="comment">	而通知管理(notifierManager)的tset也为map类型，不同的是key为AlertmanagerConfig, value为targetgroup.Group</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Manager)</span> <span class="title">Run</span><span class="params">(tsets &lt;-<span class="keyword">chan</span> <span class="keyword">map</span>[<span class="keyword">string</span>][]*targetgroup.Group)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-n.ctx.Done():</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="comment">// 发现告警服务有更新,重新加载配置. 参考服务发现(discoveryManager)</span></span><br><span class="line">		<span class="keyword">case</span> ts := &lt;-tsets:</span><br><span class="line">			n.reload(ts)</span><br><span class="line">		<span class="comment">// 告警信号,这个channel在ruleManager服务在产生告警时，会发出信号</span></span><br><span class="line">		<span class="keyword">case</span> &lt;-n.more:</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 利用告警队列, 获取告警信息</span></span><br><span class="line">		alerts := n.nextBatch()</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 如果全部am都没发送成功，就记录丢弃数量指标</span></span><br><span class="line">		<span class="keyword">if</span> !n.sendAll(alerts...) &#123;</span><br><span class="line">			n.metrics.dropped.Add(<span class="keyword">float64</span>(<span class="built_in">len</span>(alerts)))</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// If the queue still has items left, kick off the next iteration.</span></span><br><span class="line">		<span class="comment">// 若告警队列中还有告警信息,则再次想n.more传入信号,发送告警信息</span></span><br><span class="line">		<span class="keyword">if</span> n.queueLen() &gt; <span class="number">0</span> &#123;</span><br><span class="line">			n.setMore()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里就是通过 <code>n.more</code> channel与 ruleManager 做交互，当那边产生告警的时候，这边会接收到这个信号，进行处理，然后发送</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sendAll sends the alerts to all configured Alertmanagers concurrently.</span></span><br><span class="line"><span class="comment">// It returns true if the alerts could be sent successfully to at least one Alertmanager.</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将告警发送给全部当前配置的 Alertmanager。至少成功发送给一个 Alertmanager 就返回 true。</span></span><br><span class="line"><span class="comment">	1. 如果 alerts 为空就返回 true</span></span><br><span class="line"><span class="comment">	2. 记录函数执行开始时间</span></span><br><span class="line"><span class="comment">	3. 声明 v1Payload, v2Payload 两个字节数组，他们是 alerts 序列化的结果，提前声明是作为缓存，避免在循环中反复声明降低性能</span></span><br><span class="line"><span class="comment">	4. 加锁读取 Alertmanager 集合</span></span><br><span class="line"><span class="comment">	5. 声明一个 WaitGroup 用于同步等待每个 am 都发送完毕后退出函数</span></span><br><span class="line"><span class="comment">	6. 循环 amSets 中的每个 ams，amSet 是不同的服务发现方式配置的am集合，每个 amSet 里面可能有多个 am</span></span><br><span class="line"><span class="comment">	7. 根据 ams 的 API 版本对 alerts 进行序列化成 payload</span></span><br><span class="line"><span class="comment">	8. 循环 ams 中的每个 am，启一个 goroutine，调用 sendOne() 函数将 payload 发送过去，根据成功或者失败的结果记录观测指标</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Manager)</span> <span class="title">sendAll</span><span class="params">(alerts ...*Alert)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(alerts) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	begin := time.Now()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// v1Payload and v2Payload represent 'alerts' marshaled for Alertmanager API</span></span><br><span class="line">	<span class="comment">// v1 or v2. Marshaling happens below. Reference here is for caching between</span></span><br><span class="line">	<span class="comment">// for loop iterations.</span></span><br><span class="line">	<span class="keyword">var</span> v1Payload, v2Payload []<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line">	n.mtx.RLock()</span><br><span class="line">	<span class="comment">// 获取当前最新的告警服务列表</span></span><br><span class="line">	amSets := n.alertmanagers</span><br><span class="line">	n.mtx.RUnlock()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		wg         sync.WaitGroup</span><br><span class="line">		numSuccess atomic.Uint64</span><br><span class="line">	)</span><br><span class="line">	<span class="comment">// 遍历告警服务列表</span></span><br><span class="line">	<span class="keyword">for</span> _, ams := <span class="keyword">range</span> amSets &#123;</span><br><span class="line">		<span class="keyword">var</span> (</span><br><span class="line">			payload []<span class="keyword">byte</span></span><br><span class="line">			err     error</span><br><span class="line">		)</span><br><span class="line"></span><br><span class="line">		ams.mtx.RLock()</span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span> ams.cfg.APIVersion &#123;</span><br><span class="line">		<span class="keyword">case</span> config.AlertmanagerAPIVersionV1:</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> v1Payload == <span class="literal">nil</span> &#123;</span><br><span class="line">					v1Payload, err = json.Marshal(alerts)</span><br><span class="line">					<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">						level.Error(n.logger).Log(<span class="string">"msg"</span>, <span class="string">"Encoding alerts for Alertmanager API v1 failed"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">						ams.mtx.RUnlock()</span><br><span class="line">						<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				payload = v1Payload</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">case</span> config.AlertmanagerAPIVersionV2:</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> v2Payload == <span class="literal">nil</span> &#123;</span><br><span class="line">					openAPIAlerts := alertsToOpenAPIAlerts(alerts)</span><br><span class="line"></span><br><span class="line">					v2Payload, err = json.Marshal(openAPIAlerts)</span><br><span class="line">					<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">						level.Error(n.logger).Log(<span class="string">"msg"</span>, <span class="string">"Encoding alerts for Alertmanager API v2 failed"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">						ams.mtx.RUnlock()</span><br><span class="line">						<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				payload = v2Payload</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			&#123;</span><br><span class="line">				level.Error(n.logger).Log(</span><br><span class="line">					<span class="string">"msg"</span>, fmt.Sprintf(<span class="string">"Invalid Alertmanager API version '%v', expected one of '%v'"</span>, ams.cfg.APIVersion, config.SupportedAlertmanagerAPIVersions),</span><br><span class="line">					<span class="string">"err"</span>, err,</span><br><span class="line">				)</span><br><span class="line">				ams.mtx.RUnlock()</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> _, am := <span class="keyword">range</span> ams.ams &#123;</span><br><span class="line">			wg.Add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">			ctx, cancel := context.WithTimeout(n.ctx, time.Duration(ams.cfg.Timeout))</span><br><span class="line">			<span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 起一个协程发送告警信息</span></span><br><span class="line">			<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(client *http.Client, url <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">				<span class="keyword">if</span> err := n.sendOne(ctx, client, url, payload); err != <span class="literal">nil</span> &#123;</span><br><span class="line">					level.Error(n.logger).Log(<span class="string">"alertmanager"</span>, url, <span class="string">"count"</span>, <span class="built_in">len</span>(alerts), <span class="string">"msg"</span>, <span class="string">"Error sending alert"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">					n.metrics.errors.WithLabelValues(url).Inc()</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					numSuccess.Inc()</span><br><span class="line">				&#125;</span><br><span class="line">				n.metrics.latency.WithLabelValues(url).Observe(time.Since(begin).Seconds())</span><br><span class="line">				n.metrics.sent.WithLabelValues(url).Add(<span class="keyword">float64</span>(<span class="built_in">len</span>(alerts)))</span><br><span class="line"></span><br><span class="line">				wg.Done()</span><br><span class="line">			&#125;(ams.client, am.url().String())</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ams.mtx.RUnlock()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	wg.Wait()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 若至少成功发送给一个告警服务，则返回true</span></span><br><span class="line">	<span class="keyword">return</span> numSuccess.Load() &gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里发送成功之后就到 <code>alertmanager</code> 服务了，如果发送失败了，就将这个指标丢弃了，若告警队列中还有告警信息，则再次想n.more传入信号，再次发送告警信息处理。</p>
<p>参考：</p>
<p><a href="https://blog.csdn.net/u010278923/article/details/70946469?locationNum=9&amp;fps=1" target="_blank" rel="external">Prometheus 实战于源码分析之alert</a></p>
<p><a href="https://www.jianshu.com/p/1697e09e99ac" target="_blank" rel="external">Prometheus监控神器-Rules篇</a></p>
]]></content>
      
        <categories>
            
            <category> Prometheus </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Prometheus 指标抓取源码分析]]></title>
      <url>https://magiceses.github.io/2020/10/05/prometheus-prometheus-4-%E6%8C%87%E6%A0%87%E6%8A%93%E5%8F%96%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">生活像一只蝴蝶，没有破茧的勇气，哪来飞舞的美丽。生活像一只蜜蜂，没有勤劳和努力，怎能尝到花粉的甜蜜，越努力越幸运！<br></p>

<p>scrape模块在prometheus中负责着采集具体指标，并记录到后端存储中的功能，可以说是prometheus最为核心的一个功能模块</p>
<p>篇幅较长，需要耐心</p>
<h2 id="指标采集简介"><a href="#指标采集简介" class="headerlink" title="指标采集简介"></a>指标采集简介</h2><p>为了从服务发现(serviceDiscover)实时获取监控服务(targets)，指标采集(scrapeManager)通过协程把管道(chan)获取来的服务(targets)存</p>
<p>进一个map类型：<code>map[string][]*targetgroup.Group</code>．其中，map的key是job_name，map的value是结构体targetgroup.Group，</p>
<p>该结构体包含该job_name对应的Targets，Labes和Source</p>
<a id="more"></a>
<p>指标采集(scrapeManager)获取服务(targets)的变动，可分为多种情况，以服务增加为例，若有新的job添加，指标采集(scrapeManager)</p>
<p>会进行重载，为新的job创建一个scrapePool，并为job中的每个target创建一个scrapeLoop．若job没有变动，只增加了job下对应的</p>
<p>targets，则只需创建新的targets对应的scrapeLoop</p>
<h2 id="指标采集流程"><a href="#指标采集流程" class="headerlink" title="指标采集流程"></a>指标采集流程</h2><p>总体流程</p>
<p><img src="/images/prometheus-prometheus-9.png" alt="在这里插入图片描述"></p>
<p>静态结构</p>
<p><img src="/images/prometheus-prometheus-10.jpeg" alt="img"></p>
<p>在一个管理面（scrapeManager）中，每次初始化（重载），会根据配置的份数创建出对应的采集缓冲池（scrapePool）；在缓冲池</p>
<p>中，每一个监控目标会对应创建一个采集循环（scrapeLoop）；采集循环可以认为是最小的一个工作单位，下图进一步解析采集循环的</p>
<p>静态结构</p>
<p><img src="/images/prometheus-prometheus-11.jpeg" alt="img"></p>
<p>采集的主要流程函数在scrape.go中的scrapeAndReport，采集接口（scraper）采集到数据后，会先调用append方法写到采集缓冲层</p>
<p>（scrapeCache）中，最后调用持久化的Commit方法写到后端存储</p>
<h2 id="指标采集配置"><a href="#指标采集配置" class="headerlink" title="指标采集配置"></a>指标采集配置</h2><p>指标采集(scrapeManager)调用scrapeManager.ApplyConfig方法，完成配置初始化及应用</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">prometheus/scrape/manager.<span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ApplyConfig resets the manager's target providers and job configurations as defined by the new cfg.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">ApplyConfig</span><span class="params">(cfg *config.Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	m.mtxScrape.Lock()</span><br><span class="line">	<span class="keyword">defer</span> m.mtxScrape.Unlock()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个map，key是job_name，value是结构体config.ScrapeConfig</span></span><br><span class="line">	c := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*config.ScrapeConfig)</span><br><span class="line">	<span class="keyword">for</span> _, scfg := <span class="keyword">range</span> cfg.ScrapeConfigs &#123;</span><br><span class="line">		c[scfg.JobName] = scfg</span><br><span class="line">	&#125;</span><br><span class="line">	m.scrapeConfigs = c</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := m.setJitterSeed(cfg.GlobalConfig.ExternalLabels); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 首次启动不执行</span></span><br><span class="line">	<span class="comment">// Cleanup and reload pool if the configuration has changed.</span></span><br><span class="line">	<span class="keyword">var</span> failed <span class="keyword">bool</span></span><br><span class="line">	<span class="keyword">for</span> name, sp := <span class="keyword">range</span> m.scrapePools &#123;</span><br><span class="line">    <span class="comment">// 若job_name在scrapePools中，不在scrapeConfigs中，则说明已经更新，停止该job_name对应的scrapePool</span></span><br><span class="line">		<span class="keyword">if</span> cfg, ok := m.scrapeConfigs[name]; !ok &#123;</span><br><span class="line">			sp.stop()</span><br><span class="line">			<span class="built_in">delete</span>(m.scrapePools, name)</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> !reflect.DeepEqual(sp.config, cfg) &#123;</span><br><span class="line">      <span class="comment">// 若job_name在scrapePools中，也在scrapeConfigs中，但配置有变化，比如target增加或减少，需要重新加</span></span><br><span class="line">			err := sp.reload(cfg)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				level.Error(m.logger).Log(<span class="string">"msg"</span>, <span class="string">"error reloading scrape pool"</span>, <span class="string">"err"</span>, err, <span class="string">"scrape_pool"</span>, name)</span><br><span class="line">				failed = <span class="literal">true</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> failed &#123;</span><br><span class="line">		<span class="keyword">return</span> errors.New(<span class="string">"failed to apply the new configuration"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用reload方法重新加载配置文件</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">prometheus/scrape/scrape.<span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// reload the scrape pool with the given scrape configuration. The target state is preserved</span></span><br><span class="line"><span class="comment">// but all scrape loops are restarted with the new scrape configuration.</span></span><br><span class="line"><span class="comment">// This method returns after all scrape loops that were stopped have stopped scraping.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sp *scrapePool)</span> <span class="title">reload</span><span class="params">(cfg *config.ScrapeConfig)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	sp.mtx.Lock()</span><br><span class="line">	<span class="keyword">defer</span> sp.mtx.Unlock()</span><br><span class="line">	targetScrapePoolReloads.Inc()</span><br><span class="line">	start := time.Now()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成client，用于获取指标(metircs)</span></span><br><span class="line">	client, err := config_util.NewClientFromConfig(cfg.HTTPClientConfig, cfg.JobName, config_util.WithHTTP2Disabled())</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		targetScrapePoolReloadsFailed.Inc()</span><br><span class="line">		<span class="keyword">return</span> errors.Wrap(err, <span class="string">"error creating HTTP client"</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	reuseCache := reusableCache(sp.config, cfg)</span><br><span class="line">	sp.config = cfg</span><br><span class="line">	oldClient := sp.client</span><br><span class="line">	sp.client = client</span><br><span class="line"></span><br><span class="line">	targetScrapePoolTargetLimit.WithLabelValues(sp.config.JobName).Set(<span class="keyword">float64</span>(sp.config.TargetLimit))</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		wg          sync.WaitGroup</span><br><span class="line">		interval    = time.Duration(sp.config.ScrapeInterval)</span><br><span class="line">		timeout     = time.Duration(sp.config.ScrapeTimeout)</span><br><span class="line">		sampleLimit = <span class="keyword">int</span>(sp.config.SampleLimit)</span><br><span class="line">		labelLimits = &amp;labelLimits&#123;</span><br><span class="line">			labelLimit:            <span class="keyword">int</span>(sp.config.LabelLimit),</span><br><span class="line">			labelNameLengthLimit:  <span class="keyword">int</span>(sp.config.LabelNameLengthLimit),</span><br><span class="line">			labelValueLengthLimit: <span class="keyword">int</span>(sp.config.LabelValueLengthLimit),</span><br><span class="line">		&#125;</span><br><span class="line">		honorLabels     = sp.config.HonorLabels</span><br><span class="line">		honorTimestamps = sp.config.HonorTimestamps</span><br><span class="line">		mrc             = sp.config.MetricRelabelConfigs</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	sp.targetMtx.Lock()</span><br><span class="line"></span><br><span class="line">	forcedErr := sp.refreshTargetLimitErr()</span><br><span class="line">  <span class="comment">// 停止该scrapePool下对应的所有的oldLoop，更具配置创建所有的newLoop，并通过协程启动</span></span><br><span class="line">	<span class="keyword">for</span> fp, oldLoop := <span class="keyword">range</span> sp.loops &#123;</span><br><span class="line">		<span class="keyword">var</span> cache *scrapeCache</span><br><span class="line">		<span class="keyword">if</span> oc := oldLoop.getCache(); reuseCache &amp;&amp; oc != <span class="literal">nil</span> &#123;</span><br><span class="line">			oldLoop.disableEndOfRunStalenessMarkers()</span><br><span class="line">			cache = oc</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			cache = newScrapeCache()</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">var</span> (</span><br><span class="line">			t       = sp.activeTargets[fp]</span><br><span class="line">			s       = &amp;targetScraper&#123;Target: t, client: sp.client, timeout: timeout&#125;</span><br><span class="line">			newLoop = sp.newLoop(scrapeLoopOptions&#123;</span><br><span class="line">				target:          t,</span><br><span class="line">				scraper:         s,</span><br><span class="line">				sampleLimit:     sampleLimit,</span><br><span class="line">				labelLimits:     labelLimits,</span><br><span class="line">				honorLabels:     honorLabels,</span><br><span class="line">				honorTimestamps: honorTimestamps,</span><br><span class="line">				mrc:             mrc,</span><br><span class="line">				cache:           cache,</span><br><span class="line">			&#125;)</span><br><span class="line">		)</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(oldLoop, newLoop loop)</span></span> &#123;</span><br><span class="line">			oldLoop.stop()</span><br><span class="line">			wg.Done()</span><br><span class="line"></span><br><span class="line">			newLoop.setForcedError(forcedErr)</span><br><span class="line">			newLoop.run(interval, timeout, <span class="literal">nil</span>)</span><br><span class="line">		&#125;(oldLoop, newLoop)</span><br><span class="line"></span><br><span class="line">		sp.loops[fp] = newLoop</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	sp.targetMtx.Unlock()</span><br><span class="line"></span><br><span class="line">	wg.Wait()</span><br><span class="line">	oldClient.CloseIdleConnections()</span><br><span class="line">	targetReloadIntervalLength.WithLabelValues(interval.String()).Observe(</span><br><span class="line">		time.Since(start).Seconds(),</span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每次 reload 配置文件的时候都会重新加载 scrape 的配置，config/config.go 中的 ScrapeConfig 结构体</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ScrapeConfig configures a scraping unit for Prometheus.</span></span><br><span class="line"><span class="keyword">type</span> ScrapeConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// The job name to which the job label is set by default.</span></span><br><span class="line">	JobName <span class="keyword">string</span> <span class="string">`yaml:"job_name"`</span></span><br><span class="line">	<span class="comment">// Indicator whether the scraped metrics should remain unmodified.</span></span><br><span class="line">	HonorLabels <span class="keyword">bool</span> <span class="string">`yaml:"honor_labels,omitempty"`</span></span><br><span class="line">	<span class="comment">// Indicator whether the scraped timestamps should be respected.</span></span><br><span class="line">	HonorTimestamps <span class="keyword">bool</span> <span class="string">`yaml:"honor_timestamps"`</span></span><br><span class="line">	<span class="comment">// A set of query parameters with which the target is scraped.</span></span><br><span class="line">	Params url.Values <span class="string">`yaml:"params,omitempty"`</span></span><br><span class="line">	<span class="comment">// How frequently to scrape the targets of this scrape config.</span></span><br><span class="line">	ScrapeInterval model.Duration <span class="string">`yaml:"scrape_interval,omitempty"`</span></span><br><span class="line">	<span class="comment">// The timeout for scraping targets of this config.</span></span><br><span class="line">	ScrapeTimeout model.Duration <span class="string">`yaml:"scrape_timeout,omitempty"`</span></span><br><span class="line">	<span class="comment">// The HTTP resource path on which to fetch metrics from targets.</span></span><br><span class="line">	MetricsPath <span class="keyword">string</span> <span class="string">`yaml:"metrics_path,omitempty"`</span></span><br><span class="line">	<span class="comment">// The URL scheme with which to fetch metrics from targets.</span></span><br><span class="line">	Scheme <span class="keyword">string</span> <span class="string">`yaml:"scheme,omitempty"`</span></span><br><span class="line">	<span class="comment">// More than this many samples post metric-relabeling will cause the scrape to</span></span><br><span class="line">	<span class="comment">// fail.</span></span><br><span class="line">	SampleLimit <span class="keyword">uint</span> <span class="string">`yaml:"sample_limit,omitempty"`</span></span><br><span class="line">	<span class="comment">// More than this many targets after the target relabeling will cause the</span></span><br><span class="line">	<span class="comment">// scrapes to fail.</span></span><br><span class="line">	TargetLimit <span class="keyword">uint</span> <span class="string">`yaml:"target_limit,omitempty"`</span></span><br><span class="line">	<span class="comment">// More than this many labels post metric-relabeling will cause the scrape to</span></span><br><span class="line">	<span class="comment">// fail.</span></span><br><span class="line">	LabelLimit <span class="keyword">uint</span> <span class="string">`yaml:"label_limit,omitempty"`</span></span><br><span class="line">	<span class="comment">// More than this label name length post metric-relabeling will cause the</span></span><br><span class="line">	<span class="comment">// scrape to fail.</span></span><br><span class="line">	LabelNameLengthLimit <span class="keyword">uint</span> <span class="string">`yaml:"label_name_length_limit,omitempty"`</span></span><br><span class="line">	<span class="comment">// More than this label value length post metric-relabeling will cause the</span></span><br><span class="line">	<span class="comment">// scrape to fail.</span></span><br><span class="line">	LabelValueLengthLimit <span class="keyword">uint</span> <span class="string">`yaml:"label_value_length_limit,omitempty"`</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// We cannot do proper Go type embedding below as the parser will then parse</span></span><br><span class="line">	<span class="comment">// values arbitrarily into the overflow maps of further-down types.</span></span><br><span class="line"></span><br><span class="line">	ServiceDiscoveryConfigs discovery.Configs       <span class="string">`yaml:"-"`</span></span><br><span class="line">	HTTPClientConfig        config.HTTPClientConfig <span class="string">`yaml:",inline"`</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// List of target relabel configurations.</span></span><br><span class="line">	RelabelConfigs []*relabel.Config <span class="string">`yaml:"relabel_configs,omitempty"`</span></span><br><span class="line">	<span class="comment">// List of metric relabel configurations.</span></span><br><span class="line">	MetricRelabelConfigs []*relabel.Config <span class="string">`yaml:"metric_relabel_configs,omitempty"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="指标采集启动"><a href="#指标采集启动" class="headerlink" title="指标采集启动"></a>指标采集启动</h2><ol>
<li>main 函数中初始化 scrapeManager 实例</li>
</ol>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 scrapeManager，fanout Storage 是一个读写多个底层存储的代理</span></span><br><span class="line">scrapeManager = scrape.NewManager(log.With(logger, <span class="string">"component"</span>, <span class="string">"scrape manager"</span>), fanoutStorage)</span><br></pre></td></tr></table></figure>
<p>fanoutStorage 是读写多个底层存储的代理，实现了 storage.Appendable 接口</p>
<p>NewManager方法了实例化结构体Manager</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">prometheus/scrape/manager.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// NewManager is the Manager constructor</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewManager</span><span class="params">(logger log.Logger, app Appendable)</span> *<span class="title">Manager</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> logger == <span class="literal">nil</span> &#123;</span><br><span class="line">		logger = log.NewNopLogger()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> &amp;Manager&#123;</span><br><span class="line">		<span class="built_in">append</span>:        app,</span><br><span class="line">		logger:        logger,</span><br><span class="line">		scrapeConfigs: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*config.ScrapeConfig),</span><br><span class="line">		scrapePools:   <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*scrapePool),</span><br><span class="line">		graceShut:     <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">		triggerReload: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">1</span>),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结构体Manager维护map类型的scrapePools和targetSets，两者key都是job_name，但scrapePools的value对应结构体scrapepool，而</p>
<p>targetSets的value对应的结构体是Group，分别给出了两者的示例输出</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">prometheus/scrape/manager.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Manager maintains a set of scrape pools and manages start/stop cycles</span></span><br><span class="line"><span class="comment">// when receiving new target groups form the discovery manager.</span></span><br><span class="line"><span class="keyword">type</span> Manager <span class="keyword">struct</span> &#123;</span><br><span class="line">	logger    log.Logger  <span class="comment">//系统日志</span></span><br><span class="line">	<span class="built_in">append</span>    Appendable  <span class="comment">//存储监控指标</span></span><br><span class="line">	graceShut <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;  <span class="comment">//退出</span></span><br><span class="line"> </span><br><span class="line">	mtxScrape     sync.Mutex <span class="comment">// Guards the fields below. 读写锁</span></span><br><span class="line">	scrapeConfigs <span class="keyword">map</span>[<span class="keyword">string</span>]*config.ScrapeConfig  <span class="comment">//prometheus.yml的srape_config配置部分，key对应job_name，value对应job_name的配置参数</span></span><br><span class="line">	scrapePools   <span class="keyword">map</span>[<span class="keyword">string</span>]*scrapePool  <span class="comment">//key对应job_name，value对应结构体scrapePool，包含该job_name下所有的targets</span></span><br><span class="line">	targetSets    <span class="keyword">map</span>[<span class="keyword">string</span>][]*targetgroup.Group  <span class="comment">//key对应job_name，value对应结构体Group，包含job_name对应的Targets，Labels和Source</span></span><br><span class="line"> </span><br><span class="line">	triggerReload <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125; <span class="comment">//若有新的服务(targets)通过服务发现(serviceDisvoer)传过来，会向该管道传值，触发加载配置文件操作，后面会讲到</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">基于job_name：node的targetSets的示例输出：</span><br><span class="line">(dlv) p m.targetSets[<span class="string">"node"</span>]</span><br><span class="line">[]*github.com/prometheus/prometheus/discovery/targetgroup.Group <span class="built_in">len</span>: <span class="number">1</span>, <span class="built_in">cap</span>: <span class="number">1</span>, [</span><br><span class="line">	*&#123;</span><br><span class="line">		Targets: []github.com/prometheus/common/model.LabelSet <span class="built_in">len</span>: <span class="number">1</span>, <span class="built_in">cap</span>: <span class="number">1</span>, [</span><br><span class="line">	                 [</span><br><span class="line">		                   <span class="string">"__address__"</span>: <span class="string">"localhost:9100"</span>, </span><br><span class="line">	                 ],</span><br><span class="line">		],</span><br><span class="line">		Labels: github.com/prometheus/common/model.LabelSet <span class="literal">nil</span>,</span><br><span class="line">		Source: <span class="string">"0"</span>,&#125;,</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">基于job_name：node的scrapePools示例输出：</span><br><span class="line">(dlv) p m.scrapePools</span><br><span class="line"><span class="keyword">map</span>[<span class="keyword">string</span>]*github.com/prometheus/prometheus/scrape.scrapePool [</span><br><span class="line">	<span class="string">"node"</span>: *&#123;</span><br><span class="line">		appendable: github.com/prometheus/prometheus/scrape.Appendable(*github.com/prometheus/prometheus/storage.fanout) ...,</span><br><span class="line">		logger: github.com/<span class="keyword">go</span>-kit/kit/log.Logger(*github.com/<span class="keyword">go</span>-kit/kit/log.context) ...,</span><br><span class="line">		mtx: (*sync.RWMutex)(<span class="number">0xc001be0020</span>),</span><br><span class="line">		config: *(*<span class="string">"github.com/prometheus/prometheus/config.ScrapeConfig"</span>)(<span class="number">0xc00048ab40</span>),</span><br><span class="line">		client: *(*<span class="string">"net/http.Client"</span>)(<span class="number">0xc000d</span>303c0),</span><br><span class="line">		activeTargets: <span class="keyword">map</span>[<span class="keyword">uint64</span>]*github.com/prometheus/prometheus/scrape.Target [],</span><br><span class="line">		droppedTargets: []*github.com/prometheus/prometheus/scrape.Target <span class="built_in">len</span>: <span class="number">0</span>, <span class="built_in">cap</span>: <span class="number">0</span>, <span class="literal">nil</span>,</span><br><span class="line">		loops: <span class="keyword">map</span>[<span class="keyword">uint64</span>]github.com/prometheus/prometheus/scrape.loop [],</span><br><span class="line">		cancel: context.WithCancel.func1,</span><br><span class="line">		newLoop: github.com/prometheus/prometheus/scrape.newScrapePool.func2,&#125;, </span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<ol>
<li>指标采集(scrapeManager)获取实时监控服务(targets)的入口函数</li>
</ol>
<p><code>scrapeManager.Run(discoveryManagerScrape.SyncCh())</code></p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Scrape manager.</span></span><br><span class="line">g.Add(</span><br><span class="line">	<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">		<span class="comment">// When the scrape manager receives a new targets list</span></span><br><span class="line">		<span class="comment">// it needs to read a valid config for each job.</span></span><br><span class="line">		<span class="comment">// It depends on the config being in sync with the discovery manager so</span></span><br><span class="line">		<span class="comment">// we wait until the config is fully loaded.</span></span><br><span class="line">		&lt;-reloadReady.C</span><br><span class="line"> </span><br><span class="line">		err := scrapeManager.Run(discoveryManagerScrape.SyncCh())</span><br><span class="line">		level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Scrape manager stopped"</span>)</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">		<span class="comment">// Scrape manager needs to be stopped before closing the local TSDB</span></span><br><span class="line">		<span class="comment">// so that it doesn't try to write samples to a closed storage.</span></span><br><span class="line">		level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Stopping scrape manager..."</span>)</span><br><span class="line">		scrapeManager.Stop()</span><br><span class="line">	&#125;,</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// ts即map[string][]*targetgroup.Group</span></span><br><span class="line">(dlv) p ts[<span class="string">"prometheus"</span>]</span><br><span class="line">[]*github.com/prometheus/prometheus/discovery/targetgroup.Group <span class="built_in">len</span>: <span class="number">1</span>, <span class="built_in">cap</span>: <span class="number">1</span>, [</span><br><span class="line">	*&#123;</span><br><span class="line">		Targets: []github.com/prometheus/common/model.LabelSet <span class="built_in">len</span>: <span class="number">1</span>, <span class="built_in">cap</span>: <span class="number">1</span>, [</span><br><span class="line">			[...],</span><br><span class="line">		],</span><br><span class="line">		Labels: github.com/prometheus/common/model.LabelSet <span class="literal">nil</span>,</span><br><span class="line">		Source: <span class="string">"0"</span>,&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如配置文件中 scrape_configs 段是这样做的</span></span><br><span class="line">scrape_configs:</span><br><span class="line">  # The job name is added as a label <span class="string">`job=&lt;job_name&gt;`</span> to any timeseries scraped from this config.</span><br><span class="line">  - job_name: <span class="string">'prometheus'</span></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [<span class="string">'localhost:9090'</span>, <span class="string">'192.168.1.2:9091'</span>]</span><br><span class="line">      labels:</span><br><span class="line">        cluster: es</span><br><span class="line">        env: prod</span><br><span class="line"><span class="comment">// 那么其中的 static_configs 会解析为</span></span><br><span class="line">targetgroup.Group&#123;</span><br><span class="line">	Targets: []model.LabelSet&#123;</span><br><span class="line">		model.LabelSet&#123;<span class="string">"__address__"</span>: <span class="string">"localhost:9090"</span>&#125;, </span><br><span class="line">		model.LabelSet&#123;<span class="string">"__address__"</span>: <span class="string">"192.168.1.2:9091"</span>&#125;</span><br><span class="line">		&#125;, </span><br><span class="line">	Labels: model.LabelSet&#123;</span><br><span class="line">		<span class="string">"cluster"</span>: <span class="string">"es"</span>, </span><br><span class="line">		<span class="string">"env"</span>: <span class="string">"prod"</span></span><br><span class="line">		&#125;, </span><br><span class="line">	Source: <span class="string">""</span></span><br></pre></td></tr></table></figure>
<p>这里会起一个协程运行Run方法，从服务发现(serviceDiscover)实时获取被监控服务(targets)</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">prometheus/scrape/manager.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Run receives and saves target set updates and triggers the scraping loops reloading.</span></span><br><span class="line"><span class="comment">// Reloading happens in the background so that it doesn't block receiving targets updates.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">Run</span><span class="params">(tsets &lt;-<span class="keyword">chan</span> <span class="keyword">map</span>[<span class="keyword">string</span>][]*targetgroup.Group)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="comment">//定时(5s)更新服务(targets)，结合triggerReload一起使用，即每5s判断一次triggerReload是否更新．</span></span><br><span class="line">	<span class="keyword">go</span> m.reloader() </span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="comment">//通过管道获取被监控的服务(targets)</span></span><br><span class="line">		<span class="keyword">case</span> ts := &lt;-tsets:  </span><br><span class="line">			m.updateTsets(ts)</span><br><span class="line"> </span><br><span class="line">			<span class="keyword">select</span> &#123;</span><br><span class="line">　　　 <span class="comment">//若从服务发现 (serviceDiscover)有服务(targets)变动，则给管道triggerReload传值，并触发reloader()方法更新服务．</span></span><br><span class="line">			<span class="keyword">case</span> m.triggerReload &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;: </span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">			&#125;</span><br><span class="line"> </span><br><span class="line">		<span class="keyword">case</span> &lt;-m.graceShut:</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上流程还是比较清晰，若服务发现(serviceDiscovery)有服务(target)变动，Run方法就会向管道triggerReload注入值：</p>
<p>m.triggerReload &lt;- struct{}{}中，并起了一个协程，运行reloader方法．用于定时更新服务(targets)．启动这个协程应该是为了防止阻塞</p>
<p>从服务发现(serviceDiscover)获取变动的服务(targets)</p>
<p>reloader方法启动了一个定时器，在无限循环中每5s判断一下管道triggerReload，若有值，则执行reload方法</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">prometheus/scrape/manager.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">reloader</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//定时器5s</span></span><br><span class="line">	ticker := time.NewTicker(<span class="number">5</span> * time.Second)</span><br><span class="line">	<span class="keyword">defer</span> ticker.Stop()</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-m.graceShut:</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">　      <span class="comment">// 若服务发现(serviceDiscovery)有服务(targets)变动，就会向管道triggerReload写入值，定时器每5s判断一次triggerReload管道是否有值，若有值，则触发reload方法</span></span><br><span class="line">		<span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">			<span class="keyword">select</span> &#123;</span><br><span class="line">			<span class="keyword">case</span> &lt;-m.triggerReload:</span><br><span class="line">				m.reload()</span><br><span class="line">			<span class="keyword">case</span> &lt;-m.graceShut:</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>reload方法会根据job_name比较targetSets，scrapePools和scrapeConfigs的一致性，并把每个job_name下的类型为</p>
<p>[]*targetgroup.Group的groups通过协程传给sp.Sync方法，增加并发</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">prometheus/scrape/manager.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">reload</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m.mtxScrape.Lock()</span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">  <span class="comment">//setName对应job_name，</span></span><br><span class="line">　<span class="comment">//group的结构体包含job_name对应的Targets，Labels和source</span></span><br><span class="line">  <span class="comment">// 遍历最新的抓取目标配置中的每个job 的 targetGroup</span></span><br><span class="line">	<span class="keyword">for</span> setName, groups := <span class="keyword">range</span> m.targetSets &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//若该job_name不在scrapePools中，分为两种情况处理</span></span><br><span class="line">    <span class="comment">//(1)job_name不在scrapeConfigs中，则跳过</span></span><br><span class="line">    <span class="comment">//(2)job_name在scrapeConfigs中，则需要创建这个 job 的scrapePool，并把该job_name加到scrapePools中</span></span><br><span class="line">		<span class="keyword">if</span> _, ok := m.scrapePools[setName]; !ok &#123;</span><br><span class="line">			scrapeConfig, ok := m.scrapeConfigs[setName]</span><br><span class="line">      <span class="comment">// 抓取配置 m.scrapeConfigs 有没有这个 job 的配置，</span></span><br><span class="line">			<span class="comment">// 解析配置的时候有可能出错，就会跳过出错的 job，这里再检查一下</span></span><br><span class="line">			<span class="keyword">if</span> !ok &#123;</span><br><span class="line">				level.Error(m.logger).Log(<span class="string">"msg"</span>, <span class="string">"error reloading target set"</span>, <span class="string">"err"</span>, <span class="string">"invalid config id:"</span>+setName)</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">      <span class="comment">// 创建这个 job 的scrapePool</span></span><br><span class="line">			sp, err := newScrapePool(scrapeConfig, m.<span class="built_in">append</span>, m.jitterSeed, log.With(m.logger, <span class="string">"scrape_pool"</span>, setName))</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				level.Error(m.logger).Log(<span class="string">"msg"</span>, <span class="string">"error creating new scrape pool"</span>, <span class="string">"err"</span>, err, <span class="string">"scrape_pool"</span>, setName)</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			m.scrapePools[setName] = sp</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="comment">// Run the sync in parallel as these take a while and at high load can't catch up.</span></span><br><span class="line">    <span class="comment">// 并发执行 scrapePool.Sync() 方法并等待全部执行完毕。</span></span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(sp *scrapePool, groups []*targetgroup.Group)</span></span> &#123;</span><br><span class="line">      <span class="comment">//把groups转换为targets类型</span></span><br><span class="line">			sp.Sync(groups)</span><br><span class="line">			wg.Done()</span><br><span class="line">		&#125;(m.scrapePools[setName], groups) <span class="comment">// 如果已经有这个 job 就启动，所以此处不用 sp 而用m.scrapePools[setName]</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	m.mtxScrape.Unlock()</span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建这个 job 的scrapePool</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newScrapePool</span><span class="params">(cfg *config.ScrapeConfig, app storage.Appendable, jitterSeed <span class="keyword">uint64</span>, logger log.Logger)</span> <span class="params">(*scrapePool, error)</span></span> &#123;</span><br><span class="line">  <span class="comment">// target_scrape_pools 数量统计，每个 job 一个池</span></span><br><span class="line">	targetScrapePools.Inc()</span><br><span class="line">	<span class="keyword">if</span> logger == <span class="literal">nil</span> &#123;</span><br><span class="line">		logger = log.NewNopLogger()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据配置创建 http client</span></span><br><span class="line">	client, err := config_util.NewClientFromConfig(cfg.HTTPClientConfig, cfg.JobName, config_util.WithHTTP2Disabled())</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		targetScrapePoolsFailed.Inc()</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrap(err, <span class="string">"error creating HTTP client"</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// pool.New 返回一个分桶的 sync.Pool</span></span><br><span class="line">	buffers := pool.New(<span class="number">1e3</span>, <span class="number">100e6</span>, <span class="number">3</span>, <span class="function"><span class="keyword">func</span><span class="params">(sz <span class="keyword">int</span>)</span> <span class="title">interface</span></span>&#123;&#125; &#123; <span class="keyword">return</span> <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0</span>, sz) &#125;)</span><br><span class="line"></span><br><span class="line">	ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">  </span><br><span class="line">	sp := &amp;scrapePool&#123;</span><br><span class="line">		cancel:        cancel,</span><br><span class="line">		appendable:    app,</span><br><span class="line">		config:        cfg,</span><br><span class="line">		client:        client,</span><br><span class="line">		activeTargets: <span class="keyword">map</span>[<span class="keyword">uint64</span>]*Target&#123;&#125;,</span><br><span class="line">		loops:         <span class="keyword">map</span>[<span class="keyword">uint64</span>]loop&#123;&#125;,</span><br><span class="line">		logger:        logger,</span><br><span class="line">	&#125;</span><br><span class="line">	sp.newLoop = <span class="function"><span class="keyword">func</span><span class="params">(opts scrapeLoopOptions)</span> <span class="title">loop</span></span> &#123;</span><br><span class="line">		<span class="comment">// Update the targets retrieval function for metadata to a new scrape cache.</span></span><br><span class="line">		cache := opts.cache</span><br><span class="line">		<span class="keyword">if</span> cache == <span class="literal">nil</span> &#123;</span><br><span class="line">			cache = newScrapeCache()</span><br><span class="line">		&#125;</span><br><span class="line">		opts.target.SetMetadataStore(cache)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> newScrapeLoop(</span><br><span class="line">			ctx,</span><br><span class="line">			opts.scraper,</span><br><span class="line">			log.With(logger, <span class="string">"target"</span>, opts.target),</span><br><span class="line">			buffers,</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">(l labels.Labels)</span> <span class="title">labels</span>.<span class="title">Labels</span></span> &#123;</span><br><span class="line">				<span class="keyword">return</span> mutateSampleLabels(l, opts.target, opts.honorLabels, opts.mrc)</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">(l labels.Labels)</span> <span class="title">labels</span>.<span class="title">Labels</span></span> &#123; <span class="keyword">return</span> mutateReportSampleLabels(l, opts.target) &#125;,</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context)</span> <span class="title">storage</span>.<span class="title">Appender</span></span> &#123; <span class="keyword">return</span> appender(app.Appender(ctx), opts.sampleLimit) &#125;,</span><br><span class="line">			cache,</span><br><span class="line">			jitterSeed,</span><br><span class="line">			opts.honorTimestamps,</span><br><span class="line">			opts.labelLimits,</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> sp, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// scrapePool manages scrapes for sets of targets.</span></span><br><span class="line"><span class="keyword">type</span> scrapePool <span class="keyword">struct</span> &#123;</span><br><span class="line">	appendable Appendable</span><br><span class="line">	logger     log.Logger</span><br><span class="line"></span><br><span class="line">	mtx    sync.RWMutex</span><br><span class="line">	config *config.ScrapeConfig</span><br><span class="line">	client *http.Client</span><br><span class="line">	<span class="comment">// Targets and loops must always be synchronized to have the same</span></span><br><span class="line">	<span class="comment">// set of hashes.</span></span><br><span class="line">	targets        <span class="keyword">map</span>[<span class="keyword">uint64</span>]*Target</span><br><span class="line">	droppedTargets []*Target</span><br><span class="line">	loops          <span class="keyword">map</span>[<span class="keyword">uint64</span>]loop</span><br><span class="line">	cancel         context.CancelFunc</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Constructor for new scrape loops. This is settable for testing convenience.</span></span><br><span class="line">	newLoop <span class="function"><span class="keyword">func</span><span class="params">(*Target, scraper, <span class="keyword">int</span>, <span class="keyword">bool</span>, []*config.RelabelConfig)</span> </span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function">//<span class="title">scrapePool</span>管理一组对象的数据采集，其中的<span class="title">targets</span>和<span class="title">loops</span>都是<span class="title">map</span>，<span class="title">key</span>是一种<span class="title">hash</span>，<span class="title">value</span>分别是<span class="title">Target</span>和<span class="title">loop</span>，<span class="title">Target</span>和<span class="title">loop</span>存在一一对应的关系，<span class="title">Target</span>表示数据采集的对象，而<span class="title">loop</span>是个接口</span></span><br><span class="line"><span class="function">// <span class="title">A</span> <span class="title">loop</span> <span class="title">can</span> <span class="title">run</span> <span class="title">and</span> <span class="title">be</span> <span class="title">stopped</span> <span class="title">again</span>. <span class="title">It</span> <span class="title">must</span> <span class="title">not</span> <span class="title">be</span> <span class="title">reused</span> <span class="title">after</span> <span class="title">it</span> <span class="title">was</span> <span class="title">stopped</span>.</span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">loop</span> <span class="title">interface</span></span> &#123;</span><br><span class="line">	run(interval, timeout time.Duration, errc <span class="keyword">chan</span>&lt;- error)</span><br><span class="line">	stop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其中 scrapeCache 是跟踪暴露的指标字符串到标签集和存储直接按的映射的， 此外它还跟踪相邻两次抓取之间的腐化情况</span></span><br><span class="line"><span class="comment">// scrapeCache tracks mappings of exposed metric strings to label sets and</span></span><br><span class="line"><span class="comment">// storage references. Additionally, it tracks staleness of series between</span></span><br><span class="line"><span class="comment">// scrapes.</span></span><br><span class="line"><span class="keyword">type</span> scrapeCache <span class="keyword">struct</span> &#123;</span><br><span class="line">	iter <span class="keyword">uint64</span> <span class="comment">// Current scrape iteration. 当前抓取的迭代序号。</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// How many series and metadata entries there were at the last success.</span></span><br><span class="line">	<span class="comment">// 最后一次成功抓取的时序和元数据项</span></span><br><span class="line">	successfulCount <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Parsed string to an entry with information about the actual label set</span></span><br><span class="line">	<span class="comment">// and its storage reference.</span></span><br><span class="line">	<span class="comment">// 将字符串解析为标签信息,key是metric,value是cacheEntry结构体</span></span><br><span class="line">	series <span class="keyword">map</span>[<span class="keyword">string</span>]*cacheEntry</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Cache of dropped metric strings and their iteration. The iteration must</span></span><br><span class="line">	<span class="comment">// be a pointer so we can update it without setting a new entry with an unsafe</span></span><br><span class="line">	<span class="comment">// string in addDropped().</span></span><br><span class="line">	<span class="comment">// 丢弃的指标字符串和他们的迭代序号,缓存不合法指标(metrics)</span></span><br><span class="line">	droppedSeries <span class="keyword">map</span>[<span class="keyword">string</span>]*<span class="keyword">uint64</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// seriesCur and seriesPrev store the labels of series that were seen</span></span><br><span class="line">	<span class="comment">// in the current and previous scrape.</span></span><br><span class="line">	<span class="comment">// We hold two maps and swap them out to save allocations.</span></span><br><span class="line">	<span class="comment">// 当前抓取和上次抓取中见到的标签集，两个映射轮换可以节省分配。</span></span><br><span class="line">	seriesCur  <span class="keyword">map</span>[<span class="keyword">uint64</span>]labels.Labels <span class="comment">//缓存本次scrape的指标(metrics)</span></span><br><span class="line">	seriesPrev <span class="keyword">map</span>[<span class="keyword">uint64</span>]labels.Labels <span class="comment">//缓存上次scrape的指标(metrics)</span></span><br><span class="line"></span><br><span class="line">	metaMtx  sync.Mutex <span class="comment">//同步锁</span></span><br><span class="line">	metadata <span class="keyword">map</span>[<span class="keyword">string</span>]*metaEntry <span class="comment">//元数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sp.Sync方法引入了Target结构体，把[]*targetgroup.Group类型的groups转换为targets类型，其中每个groups对应一个job_name下多</p>
<p>个targets．随后，调用sp.sync方法，同步scrape服务</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sync converts target groups into actual scrape targets and synchronizes</span></span><br><span class="line"><span class="comment">// the currently running scraper with the resulting set and returns all scraped and dropped targets.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sp *scrapePool)</span> <span class="title">Sync</span><span class="params">(tgs []*targetgroup.Group)</span></span> &#123;</span><br><span class="line">	sp.mtx.Lock()</span><br><span class="line">	<span class="keyword">defer</span> sp.mtx.Unlock()</span><br><span class="line">	start := time.Now()</span><br><span class="line"></span><br><span class="line">	sp.targetMtx.Lock()</span><br><span class="line">	<span class="keyword">var</span> all []*Target</span><br><span class="line">	sp.droppedTargets = []*Target&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> _, tg := <span class="keyword">range</span> tgs &#123;</span><br><span class="line">    <span class="comment">// 转换targetgroup.Group类型为Target</span></span><br><span class="line">		targets, err := targetsFromGroup(tg, sp.config)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			level.Error(sp.logger).Log(<span class="string">"msg"</span>, <span class="string">"creating targets failed"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> _, t := <span class="keyword">range</span> targets &#123;</span><br><span class="line">      <span class="comment">// 判断Target的有效label是否大于0</span></span><br><span class="line">			<span class="keyword">if</span> t.Labels().Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">				all = <span class="built_in">append</span>(all, t)</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> t.DiscoveredLabels().Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// 若为无效Target，则加入scrapeLoop的droppedTargets中</span></span><br><span class="line">				sp.droppedTargets = <span class="built_in">append</span>(sp.droppedTargets, t)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sp.targetMtx.Unlock()</span><br><span class="line">	sp.sync(all)</span><br><span class="line"></span><br><span class="line">	targetSyncIntervalLength.WithLabelValues(sp.config.JobName).Observe(</span><br><span class="line">		time.Since(start).Seconds(),</span><br><span class="line">	)</span><br><span class="line">	targetScrapePoolSyncsCounter.WithLabelValues(sp.config.JobName).Inc()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>scrape.Target 是一次抓取的具体对象，包含了抓取和抓取后存储所需要的全部信息。从 targetGroup.Group 到 scrape.Target 的转换过程如下：</p>
<ol>
<li><p>targetsFromGroup函数遍历每个targetGroup.Group中的Target，合并targetGroup.Group的公共标签集（记为A）和这个Target本身的标签集（记为B）为标签集C。</p>
</li>
<li><p>populateLabels函数从C和*config.ScrapeConfig中创建Target。</p>
</li>
</ol>
<p>Target结构体以及方法定义</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TargetHealth describes the health state of a target.</span></span><br><span class="line"><span class="keyword">type</span> TargetHealth <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The possible health states of a target based on the last performed scrape.</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	HealthUnknown TargetHealth = <span class="string">"unknown"</span></span><br><span class="line">	HealthGood    TargetHealth = <span class="string">"up"</span></span><br><span class="line">	HealthBad     TargetHealth = <span class="string">"down"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Target refers to a singular HTTP or HTTPS endpoint.</span></span><br><span class="line"><span class="keyword">type</span> Target <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// Labels before any processing.</span></span><br><span class="line">	<span class="comment">// 未经处理的抓取到的原始标签集</span></span><br><span class="line">	discoveredLabels labels.Labels</span><br><span class="line">	<span class="comment">// Any labels that are added to this target and its metrics.</span></span><br><span class="line">	<span class="comment">// 经过 relabel 处理后的标签集，会记录进 TSDB</span></span><br><span class="line">	labels labels.Labels</span><br><span class="line">	<span class="comment">// Additional URL parameters that are part of the target URL.</span></span><br><span class="line">	<span class="comment">// 目标 URL 的额外参数</span></span><br><span class="line">	params url.Values</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 读写锁保护下面的变量</span></span><br><span class="line">	mtx                sync.RWMutex</span><br><span class="line">	<span class="comment">// 最后一次抓取的错误值</span></span><br><span class="line">	lastError          error</span><br><span class="line">	<span class="comment">// 最后一次抓取的时间</span></span><br><span class="line">	lastScrape         time.Time</span><br><span class="line">	<span class="comment">// 最后一次抓取的耗时</span></span><br><span class="line">	lastScrapeDuration time.Duration</span><br><span class="line">	<span class="comment">// 目标的健康状态</span></span><br><span class="line">	health             TargetHealth</span><br><span class="line">	<span class="comment">// 标签的元数据</span></span><br><span class="line">	metadata           MetricMetadataStore</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewTarget creates a reasonably configured target for querying.</span></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTarget</span><span class="params">(labels, discoveredLabels labels.Labels, params url.Values)</span> *<span class="title">Target</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;Target&#123;</span><br><span class="line">		labels:           labels,</span><br><span class="line">		discoveredLabels: discoveredLabels,</span><br><span class="line">		params:           params,</span><br><span class="line">		health:           HealthUnknown,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Target)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> t.URL().String()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MetricMetadataStore represents a storage for metadata.</span></span><br><span class="line"><span class="comment">// MetricMetadataStore 接口代表元数据的存储</span></span><br><span class="line"><span class="keyword">type</span> MetricMetadataStore <span class="keyword">interface</span> &#123;</span><br><span class="line">	ListMetadata() []MetricMetadata</span><br><span class="line">	GetMetadata(metric <span class="keyword">string</span>) (MetricMetadata, <span class="keyword">bool</span>)</span><br><span class="line">	SizeMetadata() <span class="keyword">int</span></span><br><span class="line">	LengthMetadata() <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MetricMetadata is a piece of metadata for a metric.</span></span><br><span class="line"><span class="comment">// MetricMetadata 是一个指标的元数据。</span></span><br><span class="line"><span class="comment">// 包括指标名、指标类型、帮助信息（这三项在用客户端写观测指标时都要写）</span></span><br><span class="line"><span class="comment">// 和指标单位。</span></span><br><span class="line"><span class="keyword">type</span> MetricMetadata <span class="keyword">struct</span> &#123;</span><br><span class="line">	Metric <span class="keyword">string</span></span><br><span class="line">	Type   textparse.MetricType</span><br><span class="line">	Help   <span class="keyword">string</span></span><br><span class="line">	Unit   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// target 有 MetadataList()、MetadataSize()、MetadataLength() 和 Metadata() 方法，</span></span><br><span class="line"><span class="comment">// 获取元数据的一些信息，这些方法内部就是加读锁调用 metadata 字段的相对应的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Target)</span> <span class="title">MetadataList</span><span class="params">()</span> []<span class="title">MetricMetadata</span></span> &#123;</span><br><span class="line">	t.mtx.RLock()</span><br><span class="line">	<span class="keyword">defer</span> t.mtx.RUnlock()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> t.metadata == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> t.metadata.ListMetadata()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Target)</span> <span class="title">MetadataSize</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	t.mtx.RLock()</span><br><span class="line">	<span class="keyword">defer</span> t.mtx.RUnlock()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> t.metadata == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> t.metadata.SizeMetadata()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Target)</span> <span class="title">MetadataLength</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	t.mtx.RLock()</span><br><span class="line">	<span class="keyword">defer</span> t.mtx.RUnlock()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> t.metadata == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> t.metadata.LengthMetadata()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Metadata returns type and help metadata for the given metric.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Target)</span> <span class="title">Metadata</span><span class="params">(metric <span class="keyword">string</span>)</span> <span class="params">(MetricMetadata, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">	t.mtx.RLock()</span><br><span class="line">	<span class="keyword">defer</span> t.mtx.RUnlock()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> t.metadata == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> MetricMetadata&#123;&#125;, <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> t.metadata.GetMetadata(metric)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置元数据，参数是个接口类型，也就是实现了接口方法的结构体</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Target)</span> <span class="title">SetMetadataStore</span><span class="params">(s MetricMetadataStore)</span></span> &#123;</span><br><span class="line">	t.mtx.Lock()</span><br><span class="line">	<span class="keyword">defer</span> t.mtx.Unlock()</span><br><span class="line">	t.metadata = s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hash returns an identifying hash for the target.</span></span><br><span class="line"><span class="comment">// 用于得到一个目标的唯一标识。FVN-1a 是一个简单的非加密哈希算法，性能较高，碰撞率较低。</span></span><br><span class="line"><span class="comment">// 该方法用目标的标签集的哈希值和目标的端点 URL 作为参数计算哈希值，其中标签集的哈希值使用 xxHash 算法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Target)</span> <span class="title">hash</span><span class="params">()</span> <span class="title">uint64</span></span> &#123;</span><br><span class="line">	h := fnv.New64a()</span><br><span class="line">	<span class="comment">//nolint: errcheck</span></span><br><span class="line">	h.Write([]<span class="keyword">byte</span>(fmt.Sprintf(<span class="string">"%016d"</span>, t.labels.Hash())))</span><br><span class="line">	<span class="comment">//nolint: errcheck</span></span><br><span class="line">	h.Write([]<span class="keyword">byte</span>(t.URL().String()))</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> h.Sum64()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// offset returns the time until the next scrape cycle for the target.</span></span><br><span class="line"><span class="comment">// It includes the global server jitterSeed for scrapes from multiple Prometheus to try to be at different times.</span></span><br><span class="line"><span class="comment">// 得到距离目标开始下一次抓取循环的时间。参数中包含一个随机数，用于打散抓取开始时间，均匀化 Prometheus 的负载</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Target)</span> <span class="title">offset</span><span class="params">(interval time.Duration, jitterSeed <span class="keyword">uint64</span>)</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line">	now := time.Now().UnixNano()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Base is a pinned to absolute time, no matter how often offset is called.</span></span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		base   = <span class="keyword">int64</span>(interval) - now%<span class="keyword">int64</span>(interval)</span><br><span class="line">		offset = (t.hash() ^ jitterSeed) % <span class="keyword">uint64</span>(interval)</span><br><span class="line">		next   = base + <span class="keyword">int64</span>(offset)</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> next &gt; <span class="keyword">int64</span>(interval) &#123;</span><br><span class="line">		next -= <span class="keyword">int64</span>(interval)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> time.Duration(next)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Labels returns a copy of the set of all public labels of the target.</span></span><br><span class="line"><span class="comment">// Labels()、DiscoveredLabels()、SetDiscoveredLabels(l labels.Labels) 分别用于获取目标的非元信息</span></span><br><span class="line"><span class="comment">// （不以“————”开头）标签集、relabel 前的原始标签集和设置 relabel 前的原始标签集。需要注意的是 Labels() 方法没有加锁</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Target)</span> <span class="title">Labels</span><span class="params">()</span> <span class="title">labels</span>.<span class="title">Labels</span></span> &#123;</span><br><span class="line">	lset := <span class="built_in">make</span>(labels.Labels, <span class="number">0</span>, <span class="built_in">len</span>(t.labels))</span><br><span class="line">	<span class="keyword">for</span> _, l := <span class="keyword">range</span> t.labels &#123;</span><br><span class="line">		<span class="keyword">if</span> !strings.HasPrefix(l.Name, model.ReservedLabelPrefix) &#123;</span><br><span class="line">			lset = <span class="built_in">append</span>(lset, l)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> lset</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DiscoveredLabels returns a copy of the target's labels before any processing.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Target)</span> <span class="title">DiscoveredLabels</span><span class="params">()</span> <span class="title">labels</span>.<span class="title">Labels</span></span> &#123;</span><br><span class="line">	t.mtx.Lock()</span><br><span class="line">	<span class="keyword">defer</span> t.mtx.Unlock()</span><br><span class="line">	lset := <span class="built_in">make</span>(labels.Labels, <span class="built_in">len</span>(t.discoveredLabels))</span><br><span class="line">	<span class="built_in">copy</span>(lset, t.discoveredLabels)</span><br><span class="line">	<span class="keyword">return</span> lset</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetDiscoveredLabels sets new DiscoveredLabels</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Target)</span> <span class="title">SetDiscoveredLabels</span><span class="params">(l labels.Labels)</span></span> &#123;</span><br><span class="line">	t.mtx.Lock()</span><br><span class="line">	<span class="keyword">defer</span> t.mtx.Unlock()</span><br><span class="line">	t.discoveredLabels = l</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// URL returns a copy of the target's URL.</span></span><br><span class="line"><span class="comment">// URL() 方法组装 net/url.URL</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Target)</span> <span class="title">URL</span><span class="params">()</span> *<span class="title">url</span>.<span class="title">URL</span></span> &#123;</span><br><span class="line">	params := url.Values&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> t.params &#123;</span><br><span class="line">		params[k] = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(v))</span><br><span class="line">		<span class="built_in">copy</span>(params[k], v)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 将 url 参数相关的标签添加到参数中</span></span><br><span class="line">	<span class="keyword">for</span> _, l := <span class="keyword">range</span> t.labels &#123;</span><br><span class="line">		<span class="keyword">if</span> !strings.HasPrefix(l.Name, model.ParamLabelPrefix) &#123;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		ks := l.Name[<span class="built_in">len</span>(model.ParamLabelPrefix):]</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(params[ks]) &gt; <span class="number">0</span> &#123;</span><br><span class="line">			params[ks][<span class="number">0</span>] = l.Value</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			params[ks] = []<span class="keyword">string</span>&#123;l.Value&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> &amp;url.URL&#123;</span><br><span class="line">		Scheme:   t.labels.Get(model.SchemeLabel),</span><br><span class="line">		Host:     t.labels.Get(model.AddressLabel),</span><br><span class="line">		Path:     t.labels.Get(model.MetricsPathLabel),</span><br><span class="line">		RawQuery: params.Encode(),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Report sets target data about the last scrape.</span></span><br><span class="line"><span class="comment">// Report() 设置最后一次抓取的结构体字段值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Target)</span> <span class="title">Report</span><span class="params">(start time.Time, dur time.Duration, err error)</span></span> &#123;</span><br><span class="line">	t.mtx.Lock()</span><br><span class="line">	<span class="keyword">defer</span> t.mtx.Unlock()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">		t.health = HealthGood</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		t.health = HealthBad</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	t.lastError = err</span><br><span class="line">	t.lastScrape = start</span><br><span class="line">	t.lastScrapeDuration = dur</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LastError returns the error encountered during the last scrape.</span></span><br><span class="line"><span class="comment">// LastError()、LastScrape()、LastScrapeDuration()、Health()</span></span><br><span class="line"><span class="comment">// 方法加读锁获取结构体最后一次抓取的错误、最后一次抓取的时间、最后一次抓取的耗时和最后一次抓取目标的状态字段</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Target)</span> <span class="title">LastError</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	t.mtx.RLock()</span><br><span class="line">	<span class="keyword">defer</span> t.mtx.RUnlock()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> t.lastError</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LastScrape returns the time of the last scrape.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Target)</span> <span class="title">LastScrape</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Time</span></span> &#123;</span><br><span class="line">	t.mtx.RLock()</span><br><span class="line">	<span class="keyword">defer</span> t.mtx.RUnlock()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> t.lastScrape</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LastScrapeDuration returns how long the last scrape of the target took.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Target)</span> <span class="title">LastScrapeDuration</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line">	t.mtx.RLock()</span><br><span class="line">	<span class="keyword">defer</span> t.mtx.RUnlock()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> t.lastScrapeDuration</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Health returns the last known health state of the target.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Target)</span> <span class="title">Health</span><span class="params">()</span> <span class="title">TargetHealth</span></span> &#123;</span><br><span class="line">	t.mtx.RLock()</span><br><span class="line">	<span class="keyword">defer</span> t.mtx.RUnlock()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> t.health</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Targets is a sortable list of targets.</span></span><br><span class="line"><span class="comment">// 是一个实现了 sort 接口的 Target 指针切片，排序依据是 URL 字符串</span></span><br><span class="line"><span class="keyword">type</span> Targets []*Target</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ts Targets)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(ts) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ts Targets)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> ts[i].URL().String() &lt; ts[j].URL().String() &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ts Targets)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; ts[i], ts[j] = ts[j], ts[i] &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> errSampleLimit = errors.New(<span class="string">"sample limit exceeded"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// limitAppender limits the number of total appended samples in a batch.</span></span><br><span class="line"><span class="comment">// limitAppender 结构体限制一次批量追加的样本数</span></span><br><span class="line"><span class="keyword">type</span> limitAppender <span class="keyword">struct</span> &#123;</span><br><span class="line">	storage.Appender</span><br><span class="line"></span><br><span class="line">	limit <span class="keyword">int</span></span><br><span class="line">	i     <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(app *limitAppender)</span> <span class="title">Append</span><span class="params">(ref <span class="keyword">uint64</span>, lset labels.Labels, t <span class="keyword">int64</span>, v <span class="keyword">float64</span>)</span> <span class="params">(<span class="keyword">uint64</span>, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> !value.IsStaleNaN(v) &#123;</span><br><span class="line">		app.i++</span><br><span class="line">		<span class="keyword">if</span> app.i &gt; app.limit &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>, errSampleLimit</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ref, err := app.Appender.Append(ref, lset, t, v)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ref, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// timeLimitAppender 结构体是限制插入时间的，如果要追加的样本时间戳超过限制就返回错误</span></span><br><span class="line"><span class="keyword">type</span> timeLimitAppender <span class="keyword">struct</span> &#123;</span><br><span class="line">	storage.Appender</span><br><span class="line"></span><br><span class="line">	maxTime <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(app *timeLimitAppender)</span> <span class="title">Append</span><span class="params">(ref <span class="keyword">uint64</span>, lset labels.Labels, t <span class="keyword">int64</span>, v <span class="keyword">float64</span>)</span> <span class="params">(<span class="keyword">uint64</span>, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> t &gt; app.maxTime &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>, storage.ErrOutOfBounds</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ref, err := app.Appender.Append(ref, lset, t, v)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ref, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// populateLabels builds a label set from the given label set and scrape configuration.</span></span><br><span class="line"><span class="comment">// It returns a label set before relabeling was applied as the second return value.</span></span><br><span class="line"><span class="comment">// Returns the original discovered label set found before relabelling was applied if the target is dropped during relabeling.</span></span><br><span class="line"><span class="comment">// populateLabels 函数从给定的标签集和抓取配置中构造一个标签集。返回的第二个值是 relabel 之前的标签集。</span></span><br><span class="line"><span class="comment">// 如果目标在 rebalel 期间被丢弃，就返回 relabel 之前的原始标签集</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">populateLabels</span><span class="params">(lset labels.Labels, cfg *config.ScrapeConfig)</span> <span class="params">(res, orig labels.Labels, err error)</span></span> &#123;</span><br><span class="line">	<span class="comment">// Copy labels into the labelset for the target if they are not set already.</span></span><br><span class="line">	scrapeLabels := []labels.Label&#123;</span><br><span class="line">		&#123;Name: model.JobLabel, Value: cfg.JobName&#125;,</span><br><span class="line">		&#123;Name: model.MetricsPathLabel, Value: cfg.MetricsPath&#125;,</span><br><span class="line">		&#123;Name: model.SchemeLabel, Value: cfg.Scheme&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	lb := labels.NewBuilder(lset)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 如果参数标签集 lset 中不含有 job、metricPath 和 scheme 标签就把它们添加进去</span></span><br><span class="line">	<span class="keyword">for</span> _, l := <span class="keyword">range</span> scrapeLabels &#123;</span><br><span class="line">		<span class="keyword">if</span> lv := lset.Get(l.Name); lv == <span class="string">""</span> &#123;</span><br><span class="line">			lb.Set(l.Name, l.Value)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Encode scrape query parameters as labels.</span></span><br><span class="line">	<span class="comment">// 添加 url 参数标签</span></span><br><span class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> cfg.Params &#123;</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(v) &gt; <span class="number">0</span> &#123;</span><br><span class="line">			lb.Set(model.ParamLabelPrefix+k, v[<span class="number">0</span>])</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// relabel 之前的标签集</span></span><br><span class="line">	preRelabelLabels := lb.Labels()</span><br><span class="line">	<span class="comment">// 应用 relabel</span></span><br><span class="line">	lset = relabel.Process(preRelabelLabels, cfg.RelabelConfigs...)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Check if the target was dropped.</span></span><br><span class="line">	<span class="comment">// 如果 relabel 把这个标签集丢弃了就返回 relabel 之前的标签集</span></span><br><span class="line">	<span class="keyword">if</span> lset == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, preRelabelLabels, <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 如果 relabel 后 __address__ 标签没有了就返回错误</span></span><br><span class="line">	<span class="keyword">if</span> v := lset.Get(model.AddressLabel); v == <span class="string">""</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, errors.New(<span class="string">"no address"</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	lb = labels.NewBuilder(lset)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// addPort checks whether we should add a default port to the address.</span></span><br><span class="line">	<span class="comment">// If the address is not valid, we don't append a port either.</span></span><br><span class="line">	<span class="comment">// addPort 检查是否需要为地址添加默认端口。如果地址不合法，也不添加端口</span></span><br><span class="line">	addPort := <span class="function"><span class="keyword">func</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">		<span class="comment">// If we can split, a port exists and we don't have to add one.</span></span><br><span class="line">		<span class="comment">// 有端口就不用添加了</span></span><br><span class="line">		<span class="keyword">if</span> _, _, err := net.SplitHostPort(s); err == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// If adding a port makes it valid, the previous error</span></span><br><span class="line">		<span class="comment">// was not due to an invalid address and we can append a port.</span></span><br><span class="line">		<span class="comment">// 如果添加以后不合法就可以添加</span></span><br><span class="line">		_, _, err := net.SplitHostPort(s + <span class="string">":1234"</span>)</span><br><span class="line">		<span class="keyword">return</span> err == <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	addr := lset.Get(model.AddressLabel)</span><br><span class="line">	<span class="comment">// If it's an address with no trailing port, infer it based on the used scheme.</span></span><br><span class="line">	<span class="comment">// __address__ 标签如果没有端口就根据 http 或 https 推断一个默认值</span></span><br><span class="line">	<span class="keyword">if</span> addPort(addr) &#123;</span><br><span class="line">		<span class="comment">// Addresses reaching this point are already wrapped in [] if necessary.</span></span><br><span class="line">		<span class="keyword">switch</span> lset.Get(model.SchemeLabel) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"http"</span>, <span class="string">""</span>:</span><br><span class="line">			addr = addr + <span class="string">":80"</span></span><br><span class="line">		<span class="keyword">case</span> <span class="string">"https"</span>:</span><br><span class="line">			addr = addr + <span class="string">":443"</span></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, errors.Errorf(<span class="string">"invalid scheme: %q"</span>, cfg.Scheme)</span><br><span class="line">		&#125;</span><br><span class="line">		lb.Set(model.AddressLabel, addr)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 检查地址标签的值是否是合法地址</span></span><br><span class="line">	<span class="keyword">if</span> err := config.CheckTargetAddress(model.LabelValue(addr)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Meta labels are deleted after relabelling. Other internal labels propagate to</span></span><br><span class="line">	<span class="comment">// the target which decides whether they will be part of their label set.</span></span><br><span class="line">	<span class="comment">// relabel 以后删除 __meta_ 开头的标签。其他的内部标签保留</span></span><br><span class="line">	<span class="keyword">for</span> _, l := <span class="keyword">range</span> lset &#123;</span><br><span class="line">		<span class="keyword">if</span> strings.HasPrefix(l.Name, model.MetaLabelPrefix) &#123;</span><br><span class="line">			lb.Del(l.Name)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Default the instance label to the target address.</span></span><br><span class="line">	<span class="comment">// instance 标签为空就设置为地址</span></span><br><span class="line">	<span class="keyword">if</span> v := lset.Get(model.InstanceLabel); v == <span class="string">""</span> &#123;</span><br><span class="line">		lb.Set(model.InstanceLabel, addr)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 最终标签集</span></span><br><span class="line">	res = lb.Labels()</span><br><span class="line">	<span class="comment">// 最后检查一遍，标签值必须都是合法的 UTF8 字符</span></span><br><span class="line">	<span class="keyword">for</span> _, l := <span class="keyword">range</span> res &#123;</span><br><span class="line">		<span class="comment">// Check label values are valid, drop the target if not.</span></span><br><span class="line">		<span class="keyword">if</span> !model.LabelValue(l.Value).IsValid() &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, errors.Errorf(<span class="string">"invalid label value for %q: %q"</span>, l.Name, l.Value)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res, preRelabelLabels, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// targetsFromGroup builds targets based on the given TargetGroup and config.</span></span><br><span class="line"><span class="comment">// targetGroup.Group 在 prometheus/discovery/targetgroup/targetgroup.go 中，</span></span><br><span class="line"><span class="comment">// Target 在 prometheus/scrape/target.go 中。这是从服务发现到抓取目标的转换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">targetsFromGroup</span><span class="params">(tg *targetgroup.Group, cfg *config.ScrapeConfig)</span> <span class="params">([]*Target, error)</span></span> &#123;</span><br><span class="line">	targets := <span class="built_in">make</span>([]*Target, <span class="number">0</span>, <span class="built_in">len</span>(tg.Targets))</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i, tlset := <span class="keyword">range</span> tg.Targets &#123;</span><br><span class="line">		<span class="comment">// tlset 是这个目标独有的标签，tg.Labels 是这个 group 公共的标签</span></span><br><span class="line">		lbls := <span class="built_in">make</span>([]labels.Label, <span class="number">0</span>, <span class="built_in">len</span>(tlset)+<span class="built_in">len</span>(tg.Labels))</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> ln, lv := <span class="keyword">range</span> tlset &#123;</span><br><span class="line">			lbls = <span class="built_in">append</span>(lbls, labels.Label&#123;Name: <span class="keyword">string</span>(ln), Value: <span class="keyword">string</span>(lv)&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> ln, lv := <span class="keyword">range</span> tg.Labels &#123;</span><br><span class="line">			<span class="keyword">if</span> _, ok := tlset[ln]; !ok &#123;</span><br><span class="line">				lbls = <span class="built_in">append</span>(lbls, labels.Label&#123;Name: <span class="keyword">string</span>(ln), Value: <span class="keyword">string</span>(lv)&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		lset := labels.New(lbls...)</span><br><span class="line"></span><br><span class="line">		lbls, origLabels, err := populateLabels(lset, cfg)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrapf(err, <span class="string">"instance %d in group %s"</span>, i, tg)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> lbls != <span class="literal">nil</span> || origLabels != <span class="literal">nil</span> &#123;</span><br><span class="line">			targets = <span class="built_in">append</span>(targets, NewTarget(lbls, origLabels, cfg.Params))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> targets, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sp.sync方法对比新的Target列表和原来的Target列表，若发现不在原来的Target列表中，则新建该targets的scrapeLoop，通过协程启动</p>
<p>scrapeLoop的run方法，并发采集存储指标．然后判断原来的Target列表是否存在失效的Target，若存在，则移除</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sync takes a list of potentially duplicated targets, deduplicates them, starts</span></span><br><span class="line"><span class="comment">// scrape loops for new targets, and stops scrape loops for disappeared targets.</span></span><br><span class="line"><span class="comment">// It returns after all stopped scrape loops terminated.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sp *scrapePool)</span> <span class="title">sync</span><span class="params">(targets []*Target)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		uniqueLoops = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">uint64</span>]loop)</span><br><span class="line">		interval    = time.Duration(sp.config.ScrapeInterval) <span class="comment">// 指标采集周期</span></span><br><span class="line">		timeout     = time.Duration(sp.config.ScrapeTimeout) <span class="comment">// 指标采集超时时间</span></span><br><span class="line">		sampleLimit = <span class="keyword">int</span>(sp.config.SampleLimit)</span><br><span class="line">		labelLimits = &amp;labelLimits&#123;</span><br><span class="line">			labelLimit:            <span class="keyword">int</span>(sp.config.LabelLimit),</span><br><span class="line">			labelNameLengthLimit:  <span class="keyword">int</span>(sp.config.LabelNameLengthLimit),</span><br><span class="line">			labelValueLengthLimit: <span class="keyword">int</span>(sp.config.LabelValueLengthLimit),</span><br><span class="line">		&#125;</span><br><span class="line">		honorLabels     = sp.config.HonorLabels</span><br><span class="line">		honorTimestamps = sp.config.HonorTimestamps</span><br><span class="line">		mrc             = sp.config.MetricRelabelConfigs</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	sp.targetMtx.Lock()</span><br><span class="line">	<span class="keyword">for</span> _, t := <span class="keyword">range</span> targets &#123;</span><br><span class="line">		hash := t.hash()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若发现不在原来的Target列表中，则新建该target的scrapeLoop</span></span><br><span class="line">		<span class="keyword">if</span> _, ok := sp.activeTargets[hash]; !ok &#123;</span><br><span class="line">			s := &amp;targetScraper&#123;Target: t, client: sp.client, timeout: timeout&#125;</span><br><span class="line">			l := sp.newLoop(scrapeLoopOptions&#123;</span><br><span class="line">				target:          t,</span><br><span class="line">				scraper:         s,</span><br><span class="line">				sampleLimit:     sampleLimit,</span><br><span class="line">				labelLimits:     labelLimits,</span><br><span class="line">				honorLabels:     honorLabels,</span><br><span class="line">				honorTimestamps: honorTimestamps,</span><br><span class="line">				mrc:             mrc,</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">			sp.activeTargets[hash] = t</span><br><span class="line">			sp.loops[hash] = l</span><br><span class="line"></span><br><span class="line">			uniqueLoops[hash] = l</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// This might be a duplicated target.</span></span><br><span class="line">			<span class="keyword">if</span> _, ok := uniqueLoops[hash]; !ok &#123;</span><br><span class="line">				uniqueLoops[hash] = <span class="literal">nil</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// Need to keep the most updated labels information</span></span><br><span class="line">			<span class="comment">// for displaying it in the Service Discovery web page.</span></span><br><span class="line">			sp.activeTargets[hash].SetDiscoveredLabels(t.DiscoveredLabels())</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Stop and remove old targets and scraper loops.</span></span><br><span class="line">  <span class="comment">// 判断原来的Target列表是否存在失效的Target，若存在则移除</span></span><br><span class="line">	<span class="keyword">for</span> hash := <span class="keyword">range</span> sp.activeTargets &#123;</span><br><span class="line">		<span class="keyword">if</span> _, ok := uniqueLoops[hash]; !ok &#123;</span><br><span class="line">			wg.Add(<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(l loop)</span></span> &#123;</span><br><span class="line">				l.stop()</span><br><span class="line">				wg.Done()</span><br><span class="line">			&#125;(sp.loops[hash])</span><br><span class="line"></span><br><span class="line">			<span class="built_in">delete</span>(sp.loops, hash)</span><br><span class="line">			<span class="built_in">delete</span>(sp.activeTargets, hash)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	sp.targetMtx.Unlock()</span><br><span class="line"></span><br><span class="line">	targetScrapePoolTargetsAdded.WithLabelValues(sp.config.JobName).Set(<span class="keyword">float64</span>(<span class="built_in">len</span>(uniqueLoops)))</span><br><span class="line">	forcedErr := sp.refreshTargetLimitErr()</span><br><span class="line">	<span class="keyword">for</span> _, l := <span class="keyword">range</span> sp.loops &#123;</span><br><span class="line">		l.setForcedError(forcedErr)</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="comment">// 通过协程启动scrapeLoop的run方法，采集存储指标</span></span><br><span class="line">	<span class="keyword">for</span> _, l := <span class="keyword">range</span> uniqueLoops &#123;</span><br><span class="line">		<span class="keyword">if</span> l != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">go</span> l.run(interval, timeout, <span class="literal">nil</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Wait for all potentially stopped scrapers to terminate.</span></span><br><span class="line">	<span class="comment">// This covers the case of flapping targets. If the server is under high load, a new scraper</span></span><br><span class="line">	<span class="comment">// may be active and tries to insert. The old scraper that didn't terminate yet could still</span></span><br><span class="line">	<span class="comment">// be inserting a previous sample set.</span></span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sp.sync方法起了一个协程运行scrapePool的run方法去采集并存储监控指标(metrics)</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sl *scrapeLoop)</span> <span class="title">run</span><span class="params">(interval, timeout time.Duration, errc <span class="keyword">chan</span>&lt;- error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="comment">// 检测超时</span></span><br><span class="line">	<span class="keyword">case</span> &lt;-time.After(sl.scraper.offset(interval, sl.jitterSeed)):</span><br><span class="line">		<span class="comment">// Continue after a scraping offset.</span></span><br><span class="line">    <span class="comment">// 停止， 退出</span></span><br><span class="line">	<span class="keyword">case</span> &lt;-sl.ctx.Done():</span><br><span class="line">		<span class="built_in">close</span>(sl.stopped)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> last time.Time</span><br><span class="line"></span><br><span class="line">	alignedScrapeTime := time.Now().Round(<span class="number">0</span>)</span><br><span class="line">	ticker := time.NewTicker(interval)</span><br><span class="line">	<span class="keyword">defer</span> ticker.Stop()</span><br><span class="line"></span><br><span class="line">mainLoop:</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-sl.parentCtx.Done():</span><br><span class="line">			<span class="built_in">close</span>(sl.stopped)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="keyword">case</span> &lt;-sl.ctx.Done():</span><br><span class="line">			<span class="keyword">break</span> mainLoop</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Temporary workaround for a jitter in go timers that causes disk space</span></span><br><span class="line">		<span class="comment">// increase in TSDB.</span></span><br><span class="line">		<span class="comment">// See https://github.com/prometheus/prometheus/issues/7846</span></span><br><span class="line">		<span class="comment">// Calling Round ensures the time used is the wall clock, as otherwise .Sub</span></span><br><span class="line">		<span class="comment">// and .Add on time.Time behave differently (see time package docs).</span></span><br><span class="line">		scrapeTime := time.Now().Round(<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">if</span> AlignScrapeTimestamps &amp;&amp; interval &gt; <span class="number">100</span>*scrapeTimestampTolerance &#123;</span><br><span class="line">			<span class="comment">// For some reason, a tick might have been skipped, in which case we</span></span><br><span class="line">			<span class="comment">// would call alignedScrapeTime.Add(interval) multiple times.</span></span><br><span class="line">			<span class="keyword">for</span> scrapeTime.Sub(alignedScrapeTime) &gt;= interval &#123;</span><br><span class="line">				alignedScrapeTime = alignedScrapeTime.Add(interval)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// Align the scrape time if we are in the tolerance boundaries.</span></span><br><span class="line">			<span class="keyword">if</span> scrapeTime.Sub(alignedScrapeTime) &lt;= scrapeTimestampTolerance &#123;</span><br><span class="line">				scrapeTime = alignedScrapeTime</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		last = sl.scrapeAndReport(interval, timeout, last, scrapeTime, errc)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-sl.parentCtx.Done():</span><br><span class="line">			<span class="built_in">close</span>(sl.stopped)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="keyword">case</span> &lt;-sl.ctx.Done():</span><br><span class="line">			<span class="keyword">break</span> mainLoop</span><br><span class="line">		<span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">close</span>(sl.stopped)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> !sl.disabledEndOfRunStalenessMarkers &#123;</span><br><span class="line">		sl.endOfRunStaleness(last, ticker, interval)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// scrapeAndReport performs a scrape and then appends the result to the storage</span></span><br><span class="line"><span class="comment">// together with reporting metrics, by using as few appenders as possible.</span></span><br><span class="line"><span class="comment">// In the happy scenario, a single appender is used.</span></span><br><span class="line"><span class="comment">// This function uses sl.parentCtx instead of sl.ctx on purpose. A scrape should</span></span><br><span class="line"><span class="comment">// only be cancelled on shutdown, not on reloads.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sl *scrapeLoop)</span> <span class="title">scrapeAndReport</span><span class="params">(interval, timeout time.Duration, last, appendTime time.Time, errc <span class="keyword">chan</span>&lt;- error)</span> <span class="title">time</span>.<span class="title">Time</span></span> &#123;</span><br><span class="line">	start := time.Now()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Only record after the first scrape.</span></span><br><span class="line">	<span class="keyword">if</span> !last.IsZero() &#123;</span><br><span class="line">		targetIntervalLength.WithLabelValues(interval.String()).Observe(</span><br><span class="line">			time.Since(last).Seconds(),</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取上次scrape(拉取)指标(metric)占用空间</span></span><br><span class="line">	b := sl.buffers.Get(sl.lastScrapeSize).([]<span class="keyword">byte</span>)</span><br><span class="line">	<span class="keyword">defer</span> sl.buffers.Put(b)</span><br><span class="line">  <span class="comment">//根据上次的占用的空间申请存储空间</span></span><br><span class="line">	buf := bytes.NewBuffer(b)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> total, added, seriesAdded <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">var</span> err, appErr, scrapeErr error</span><br><span class="line"></span><br><span class="line">	app := sl.appender(sl.parentCtx)</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> forcedErr := sl.getForcedError(); forcedErr != <span class="literal">nil</span> &#123;</span><br><span class="line">		scrapeErr = forcedErr</span><br><span class="line">		<span class="comment">// Add stale markers.</span></span><br><span class="line">		<span class="keyword">if</span> _, _, _, err := sl.<span class="built_in">append</span>(app, []<span class="keyword">byte</span>&#123;&#125;, <span class="string">""</span>, appendTime); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			app.Rollback()</span><br><span class="line">			app = sl.appender(sl.parentCtx)</span><br><span class="line">			level.Warn(sl.l).Log(<span class="string">"msg"</span>, <span class="string">"Append failed"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> errc != <span class="literal">nil</span> &#123;</span><br><span class="line">			errc &lt;- forcedErr</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> start</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> contentType <span class="keyword">string</span></span><br><span class="line">	scrapeCtx, cancel := context.WithTimeout(sl.parentCtx, timeout)</span><br><span class="line">  <span class="comment">//开始scrape(拉取)指标</span></span><br><span class="line">	contentType, scrapeErr = sl.scraper.scrape(scrapeCtx, buf)</span><br><span class="line">	cancel()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> scrapeErr == <span class="literal">nil</span> &#123;</span><br><span class="line">		b = buf.Bytes()</span><br><span class="line">		<span class="comment">// <span class="doctag">NOTE:</span> There were issues with misbehaving clients in the past</span></span><br><span class="line">		<span class="comment">// that occasionally returned empty results. We don't want those</span></span><br><span class="line">		<span class="comment">// to falsely reset our buffer size.</span></span><br><span class="line">    <span class="comment">// 存储本次scrape拉取磁盘占用的空间，留待下次scrape(拉取)使用</span></span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(b) &gt; <span class="number">0</span> &#123;</span><br><span class="line">			sl.lastScrapeSize = <span class="built_in">len</span>(b)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		level.Debug(sl.l).Log(<span class="string">"msg"</span>, <span class="string">"Scrape failed"</span>, <span class="string">"err"</span>, scrapeErr)</span><br><span class="line">		<span class="keyword">if</span> errc != <span class="literal">nil</span> &#123;</span><br><span class="line">			errc &lt;- scrapeErr</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// A failed scrape is the same as an empty scrape,</span></span><br><span class="line">	<span class="comment">// we still call sl.append to trigger stale markers.</span></span><br><span class="line">  <span class="comment">// 存储指标</span></span><br><span class="line">	total, added, seriesAdded, appErr = sl.<span class="built_in">append</span>(app, b, contentType, appendTime)</span><br><span class="line">	<span class="keyword">if</span> appErr != <span class="literal">nil</span> &#123;</span><br><span class="line">		app.Rollback()</span><br><span class="line">		app = sl.appender(sl.parentCtx)</span><br><span class="line">		level.Debug(sl.l).Log(<span class="string">"msg"</span>, <span class="string">"Append failed"</span>, <span class="string">"err"</span>, appErr)</span><br><span class="line">		<span class="comment">// The append failed, probably due to a parse error or sample limit.</span></span><br><span class="line">		<span class="comment">// Call sl.append again with an empty scrape to trigger stale markers.</span></span><br><span class="line">		<span class="keyword">if</span> _, _, _, err := sl.<span class="built_in">append</span>(app, []<span class="keyword">byte</span>&#123;&#125;, <span class="string">""</span>, appendTime); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			app.Rollback()</span><br><span class="line">			app = sl.appender(sl.parentCtx)</span><br><span class="line">			level.Warn(sl.l).Log(<span class="string">"msg"</span>, <span class="string">"Append failed"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> scrapeErr == <span class="literal">nil</span> &#123;</span><br><span class="line">		scrapeErr = appErr</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> start</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>run方法主要实现两个功能：指标采集(scrape)和指标存储．此外，为了实现对象的复用，在采集(scrape)过程中，使用了sync.Pool机制</p>
<p>提高性能，即每次采集(scrape)完成后，都会申请和本次采集(scrape)指标存储空间一样的大小的bytes，加入到buffer中，以备下次指标</p>
<p>采集(scrape)直接使用</p>
<p>最后看一下<code>scrape</code>函数的代码，这个函数其实就是发送http get请求，并把响应结果写入到<code>io.Writer</code>中</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *targetScraper)</span> <span class="title">scrape</span><span class="params">(ctx context.Context, w io.Writer)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> s.req == <span class="literal">nil</span> &#123;</span><br><span class="line">		req, err := http.NewRequest(<span class="string">"GET"</span>, s.URL().String(), <span class="literal">nil</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">		&#125;</span><br><span class="line">		req.Header.Add(<span class="string">"Accept"</span>, acceptHeader)</span><br><span class="line">		req.Header.Add(<span class="string">"Accept-Encoding"</span>, <span class="string">"gzip"</span>)</span><br><span class="line">		req.Header.Set(<span class="string">"User-Agent"</span>, userAgentHeader)</span><br><span class="line">		req.Header.Set(<span class="string">"X-Prometheus-Scrape-Timeout-Seconds"</span>, fmt.Sprintf(<span class="string">"%f"</span>, s.timeout.Seconds()))</span><br><span class="line"></span><br><span class="line">		s.req = req</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	resp, err := s.client.Do(s.req.WithContext(ctx))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		io.Copy(ioutil.Discard, resp.Body)</span><br><span class="line">		resp.Body.Close()</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> resp.StatusCode != http.StatusOK &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>, errors.Errorf(<span class="string">"server returned HTTP status %s"</span>, resp.Status)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> resp.Header.Get(<span class="string">"Content-Encoding"</span>) != <span class="string">"gzip"</span> &#123;</span><br><span class="line">		_, err = io.Copy(w, resp.Body)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> resp.Header.Get(<span class="string">"Content-Type"</span>), <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> s.gzipr == <span class="literal">nil</span> &#123;</span><br><span class="line">		s.buf = bufio.NewReader(resp.Body)</span><br><span class="line">		s.gzipr, err = gzip.NewReader(s.buf)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		s.buf.Reset(resp.Body)</span><br><span class="line">		<span class="keyword">if</span> err = s.gzipr.Reset(s.buf); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	_, err = io.Copy(w, s.gzipr)</span><br><span class="line">	s.gzipr.Close()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> resp.Header.Get(<span class="string">"Content-Type"</span>), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此就完成了指标采集</p>
<p>参考：</p>
<p><a href="https://blog.csdn.net/dengxiafubi/article/details/102996336?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162311811516780265424839%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162311811516780265424839&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-102996336.pc_v2_rank_blog_default&amp;utm_term=Prometheus%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97&amp;spm=1018.2226.3001.4450" target="_blank" rel="external">https://blog.csdn.net/dengxiafubi/article/details/102996336?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162311811516780265424839%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162311811516780265424839&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-102996336.pc_v2_rank_blog_default&amp;utm_term=Prometheus%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97&amp;spm=1018.2226.3001.4450</a></p>
<p><a href="https://blog.csdn.net/qq_35753140/article/details/117148565?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162304613116780269873364%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162304613116780269873364&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-3-117148565.pc_v2_rank_blog_default&amp;utm_term=Prometheus%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0&amp;spm=1018.2226.3001.4450" target="_blank" rel="external">https://blog.csdn.net/qq_35753140/article/details/117148565?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162304613116780269873364%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162304613116780269873364&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-3-117148565.pc_v2_rank_blog_default&amp;utm_term=Prometheus%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0&amp;spm=1018.2226.3001.4450</a></p>
<p><a href="https://blog.csdn.net/qq_35753140/article/details/117201128?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162304613116780269873364%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162304613116780269873364&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-6-117201128.pc_v2_rank_blog_default&amp;utm_term=Prometheus%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0&amp;spm=1018.2226.3001.4450" target="_blank" rel="external">https://blog.csdn.net/qq_35753140/article/details/117201128?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162304613116780269873364%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162304613116780269873364&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-6-117201128.pc_v2_rank_blog_default&amp;utm_term=Prometheus%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0&amp;spm=1018.2226.3001.4450</a></p>
]]></content>
      
        <categories>
            
            <category> Prometheus </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Prometheus 服务发现源码分析]]></title>
      <url>https://magiceses.github.io/2020/10/04/prometheus-prometheus-3-%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">我不知道萧红可有类似的体验，是否担心华美的袍上爬满虱子，也许她知道，但她不在乎，她更想要取暖，即使将虱子一道披挂上身。她像忍耐虱子一样，忍耐着世界的冷眼，还装成一派天真模样，仿佛因不谙世事而无从察觉，就可以不受伤害。<br></p>

<h2 id="服务发现简介"><a href="#服务发现简介" class="headerlink" title="服务发现简介"></a>服务发现简介</h2><p>云原生、容器场景下按需的资源使用方式对于监控系统而言就意味着没有了一个固定的监控目标，所有的监控对象(基础设施、应用、服</p>
<p>务)都在动态的变化，这对基于Push模式传统监控软件带来挑战。</p>
<a id="more"></a>
<p>对于Prometheus这一类基于Pull模式的监控系统，显然也无法继续使用的static_configs的方式静态的定义监控目标。而对于</p>
<p>Prometheus而言其解决方案就是引入一个中间的代理人（服务注册中心），这个代理人掌握着当前所有监控目标的访问信息，</p>
<p>Prometheus只需要向这个代理人询问有哪些监控目标控即可， 这种模式被称为服务发现。</p>
<p>通过服务发现的方式，管理员可以在不重启Prometheus服务的情况下动态的发现需要监控的Target实例信息。</p>
<p>Prometheus 每个被控目标暴露一个 endpoint 供 server 抓取，要获知这些 endpoint 有多种方式，最简单的是在配置文件里静态配置，</p>
<p>还有基于 k8s、consul、dns 等多种方式，基于文件的服务发现是比较灵活普遍的一种方式。</p>
<p>Prometheus采用pull方式拉取监控数据，需要实时感知被监控服务(Target)的变化．服务发现(serviceDiscover)支持多种服务发现系统，</p>
<p>这些系统可以动态感知被监控的服务(Target)的变化，把变化的被监控服务(Target)转换为targetgroup.Group的结构，通过管道up发送个</p>
<p>服务发现(serviceDiscover)．以版本 v2.27为例，目前服务发现(serviceDiscover)支持的服务发现系统类型如下：</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package install has the side-effect of registering all builtin</span></span><br><span class="line"><span class="comment">// service discovery config types.</span></span><br><span class="line"><span class="keyword">package</span> install</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	_ <span class="string">"github.com/prometheus/prometheus/discovery/aws"</span>          <span class="comment">// register aws</span></span><br><span class="line">	_ <span class="string">"github.com/prometheus/prometheus/discovery/azure"</span>        <span class="comment">// register azure</span></span><br><span class="line">	_ <span class="string">"github.com/prometheus/prometheus/discovery/consul"</span>       <span class="comment">// register consul</span></span><br><span class="line">	_ <span class="string">"github.com/prometheus/prometheus/discovery/digitalocean"</span> <span class="comment">// register digitalocean</span></span><br><span class="line">	_ <span class="string">"github.com/prometheus/prometheus/discovery/dns"</span>          <span class="comment">// register dns</span></span><br><span class="line">	_ <span class="string">"github.com/prometheus/prometheus/discovery/eureka"</span>       <span class="comment">// register eureka</span></span><br><span class="line">	_ <span class="string">"github.com/prometheus/prometheus/discovery/file"</span>         <span class="comment">// register file</span></span><br><span class="line">	_ <span class="string">"github.com/prometheus/prometheus/discovery/gce"</span>          <span class="comment">// register gce</span></span><br><span class="line">	_ <span class="string">"github.com/prometheus/prometheus/discovery/hetzner"</span>      <span class="comment">// register hetzner</span></span><br><span class="line">	_ <span class="string">"github.com/prometheus/prometheus/discovery/kubernetes"</span>   <span class="comment">// register kubernetes</span></span><br><span class="line">	_ <span class="string">"github.com/prometheus/prometheus/discovery/marathon"</span>     <span class="comment">// register marathon</span></span><br><span class="line">	_ <span class="string">"github.com/prometheus/prometheus/discovery/moby"</span>         <span class="comment">// register moby</span></span><br><span class="line">	_ <span class="string">"github.com/prometheus/prometheus/discovery/openstack"</span>    <span class="comment">// register openstack</span></span><br><span class="line">	_ <span class="string">"github.com/prometheus/prometheus/discovery/scaleway"</span>     <span class="comment">// register scaleway</span></span><br><span class="line">	_ <span class="string">"github.com/prometheus/prometheus/discovery/triton"</span>       <span class="comment">// register triton</span></span><br><span class="line">	_ <span class="string">"github.com/prometheus/prometheus/discovery/zookeeper"</span>    <span class="comment">// register zookeeper</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="服务发现接口"><a href="#服务发现接口" class="headerlink" title="服务发现接口"></a>服务发现接口</h2><p>服务发现(serviceDiscover)为了实现对以上服务发现系统的统一管理，提供了一个Discoverer接口，由各个服务发现系统来实现，然后把</p>
<p>上线的服务(Target)通过up管道发送给服务发现(serviceDiscover)</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">prometheus/discovery/manager.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> Discoverer <span class="keyword">interface</span> &#123;</span><br><span class="line">	<span class="comment">// Run hands a channel to the discovery provider (Consul, DNS etc) through which it can send</span></span><br><span class="line">	<span class="comment">// updated target groups.</span></span><br><span class="line">	<span class="comment">// Must returns if the context gets canceled. It should not close the update</span></span><br><span class="line">	<span class="comment">// channel on returning.</span></span><br><span class="line">	Run(ctx context.Context, up <span class="keyword">chan</span>&lt;- []*targetgroup.Group)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">prometheus/discovery/targetgroup/targetgroup.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Group is a set of targets with a common label set(production , test, staging etc.).</span></span><br><span class="line"><span class="keyword">type</span> Group <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// Targets is a list of targets identified by a label set. Each target is</span></span><br><span class="line">	<span class="comment">// uniquely identifiable in the group by its address label.</span></span><br><span class="line">	Targets []model.LabelSet <span class="comment">//服务(Target)主要标签，比如ip + port，示例："__address__": "localhost:9100"</span></span><br><span class="line">	<span class="comment">// Labels is a set of labels that is common across all targets in the group.</span></span><br><span class="line">	Labels model.LabelSet　<span class="comment">//服务(Target)其他标签，可以为空：</span></span><br><span class="line"> </span><br><span class="line">	<span class="comment">// Source is an identifier that describes a group of targets.</span></span><br><span class="line">	Source <span class="keyword">string</span> <span class="comment">//全局唯一个ID，示例：Source: "0"</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Group的一个示例：</span><br><span class="line">(dlv) p tg</span><br><span class="line">*github.com/prometheus/prometheus/discovery/targetgroup.Group &#123;</span><br><span class="line">	Targets: []github.com/prometheus/common/model.LabelSet <span class="built_in">len</span>: <span class="number">1</span>, <span class="built_in">cap</span>: <span class="number">1</span>, [</span><br><span class="line">	　　　　　　　[</span><br><span class="line">		　　　　　　　<span class="string">"__address__"</span>: <span class="string">"localhost:9100"</span>, </span><br><span class="line">	　　　　　　　],</span><br><span class="line">　　　　　　　　]</span><br><span class="line">	],</span><br><span class="line">	Labels: github.com/prometheus/common/model.LabelSet <span class="literal">nil</span>,</span><br><span class="line">	Source: <span class="string">"0"</span>,&#125;</span><br></pre></td></tr></table></figure>
<p>除了静态服务发现系统(StaticConfigs)在prometheus/discovery/manager.go中实现了以上接口，其他动态服务发现系统，在</p>
<p>prometheus/discovery/下都在有各自的目录下实现。</p>
<h2 id="服务发现配置"><a href="#服务发现配置" class="headerlink" title="服务发现配置"></a>服务发现配置</h2><p>示例配置文件：prometheus.yml</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line"><span class="attr">  scrape_interval:</span>     <span class="number">15</span><span class="string">s</span> <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line"><span class="attr">  evaluation_interval:</span> <span class="number">15</span><span class="string">s</span> <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line"><span class="attr">  alertmanagers:</span></span><br><span class="line"><span class="attr">  - static_configs:</span></span><br><span class="line"><span class="attr">    - targets:</span></span><br><span class="line"><span class="attr">       - alertmanager:</span><span class="number">9093</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="comment"># - "first_rules.yml"</span></span><br><span class="line">  <span class="comment"># - "second_rules.yml"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it's Prometheus itself.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># metrics_path defaults to '/metrics'</span></span><br><span class="line">    <span class="comment"># scheme defaults to 'http'.</span></span><br><span class="line"><span class="attr">    scrape_interval:</span> <span class="number">5</span><span class="string">s</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">    - targets:</span> <span class="string">['localhost:9090']</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'node'</span></span><br><span class="line"><span class="attr">    scrape_interval:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">['localhost:9100']</span></span><br></pre></td></tr></table></figure>
<ol>
<li><p>配置文件初始化</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//discovery.Name("scrape")用于区分notify</span></span><br><span class="line">discoveryManagerScrape  = discovery.NewManager(ctxScrape, log.With(logger, <span class="string">"component"</span>, <span class="string">"discovery manager scrape"</span>), discovery.Name(<span class="string">"scrape"</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用NewManager方法，实例化Manager结构体</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">prometheus/discovery/manager.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// NewManager is the Discovery Manager constructor.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewManager</span><span class="params">(ctx context.Context, logger log.Logger, options ...<span class="keyword">func</span>(*Manager)</span>) *<span class="title">Manager</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> logger == <span class="literal">nil</span> &#123;</span><br><span class="line">		logger = log.NewNopLogger()</span><br><span class="line">	&#125;</span><br><span class="line">	mgr := &amp;Manager&#123;</span><br><span class="line">		logger:         logger,</span><br><span class="line">		syncCh:         <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">map</span>[<span class="keyword">string</span>][]*targetgroup.Group),</span><br><span class="line">		targets:        <span class="built_in">make</span>(<span class="keyword">map</span>[poolKey]<span class="keyword">map</span>[<span class="keyword">string</span>]*targetgroup.Group),</span><br><span class="line">		discoverCancel: []context.CancelFunc&#123;&#125;,</span><br><span class="line">		ctx:            ctx,</span><br><span class="line">		updatert:       <span class="number">5</span> * time.Second,</span><br><span class="line">		triggerSend:    <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">1</span>),</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, option := <span class="keyword">range</span> options &#123;</span><br><span class="line">		option(mgr)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> mgr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结构体Manager定义如下</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">prometheus/discovery/manager.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Manager maintains a set of discovery providers and sends each update to a map channel.</span></span><br><span class="line"><span class="comment">// Targets are grouped by the target set name.</span></span><br><span class="line"><span class="keyword">type</span> Manager <span class="keyword">struct</span> &#123;</span><br><span class="line">	logger         log.Logger <span class="comment">//日志</span></span><br><span class="line">	name           <span class="keyword">string</span>　　　<span class="comment">// 用于区分srape和notify，因为他们用的同一个discovery/manager.go</span></span><br><span class="line">	mtx            sync.RWMutex <span class="comment">//同步读写锁</span></span><br><span class="line">	ctx            context.Context <span class="comment">//协同控制，比如系统退出</span></span><br><span class="line">	discoverCancel []context.CancelFunc <span class="comment">// 处理服务下线</span></span><br><span class="line"> </span><br><span class="line">	<span class="comment">// Some Discoverers(eg. k8s) send only the updates for a given target group</span></span><br><span class="line">	<span class="comment">// so we use map[tg.Source]*targetgroup.Group to know which group to update.</span></span><br><span class="line">	targets <span class="keyword">map</span>[poolKey]<span class="keyword">map</span>[<span class="keyword">string</span>]*targetgroup.Group <span class="comment">//发现的服务(Targets)</span></span><br><span class="line">	<span class="comment">// providers keeps track of SD providers.</span></span><br><span class="line">	providers []*provider <span class="comment">// providers的类型可分为kubernetes，DNS等</span></span><br><span class="line">	<span class="comment">// The sync channel sends the updates as a map where the key is the job value from the scrape config.</span></span><br><span class="line">	<span class="comment">// key 是 prometheus 配置文件的 job_name，value 是其对应的 targetgroup</span></span><br><span class="line">  <span class="comment">// 把发现的服务Targets)通过管道形式通知给scrapeManager</span></span><br><span class="line">  syncCh <span class="keyword">chan</span> <span class="keyword">map</span>[<span class="keyword">string</span>][]*targetgroup.Group </span><br><span class="line"> </span><br><span class="line">	<span class="comment">// How long to wait before sending updates to the channel. The variable</span></span><br><span class="line">	<span class="comment">// should only be modified in unit tests.</span></span><br><span class="line">	updatert time.Duration</span><br><span class="line"> </span><br><span class="line">	<span class="comment">// The triggerSend channel signals to the manager that new updates have been received from providers.</span></span><br><span class="line">	<span class="comment">// 这是一个用于通知 manager 有 provider 进行了更新的 channel</span></span><br><span class="line">  triggerSend <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比较重要的成员是 targets，它保存了全量的 target，poolKey 是一个结构体，由 job_name 和 provider_name 组成</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">prometheus/discovery/manager.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// poolKey定义了每个发现的服务的来源</span></span><br><span class="line"><span class="keyword">type</span> poolKey <span class="keyword">struct</span> &#123;</span><br><span class="line">	setName  <span class="keyword">string</span> <span class="comment">//对应系统名/索引值，比如：string/0(静态服务发现)，DNS/1(动态服务发现)</span></span><br><span class="line">	provider <span class="keyword">string</span> <span class="comment">//对应job_name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 m.registerProviders 可以看到 setName 就是 “file”/“dns”/“consul”…,provider 是 provider 对象的 name 字段，是 “file”/“dns”/</p>
<p>“consul”… 后面跟上这个 m.provider 有多少个发现文件，比如 file_SD_discovrer 配置了3个yml文件，poolKey 的 provider 字段就</p>
<p>是 “file/3”</p>
</li>
<li><p>通过匿名函数加载prometheus.yml的scrape_configs下对应配置</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(cfg *config.Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]sd_config.ServiceDiscoveryConfig)</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> cfg.ScrapeConfigs &#123;</span><br><span class="line">        c[v.JobName] = v.ServiceDiscoveryConfig</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> discoveryManagerScrape.ApplyConfig(c)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>以示例配置文件prometheus.yml为例，包含两个jobs，job_name分别是prometheus和node，每个job可以包含多个targets．以job_name：node为例，匿名函数变量v输出如下:</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(dlv) p v</span><br><span class="line">*github.com/prometheus/prometheus/config.ScrapeConfig &#123;</span><br><span class="line">	JobName: <span class="string">"node"</span>,</span><br><span class="line">	HonorLabels: <span class="literal">false</span>,</span><br><span class="line">	Params: net/url.Values <span class="literal">nil</span>,</span><br><span class="line">	ScrapeInterval: <span class="number">10000000000</span>,</span><br><span class="line">	ScrapeTimeout: <span class="number">10000000000</span>,</span><br><span class="line">	MetricsPath: <span class="string">"/metrics"</span>,</span><br><span class="line">	Scheme: <span class="string">"http"</span>,</span><br><span class="line">	SampleLimit: <span class="number">0</span>,</span><br><span class="line">	ServiceDiscoveryConfig: github.com/prometheus/prometheus/discovery/config.ServiceDiscoveryConfig &#123;</span><br><span class="line">		StaticConfigs: []*github.com/prometheus/prometheus/discovery/targetgroup.Group <span class="built_in">len</span>: <span class="number">1</span>, <span class="built_in">cap</span>: <span class="number">1</span>, [</span><br><span class="line">			*(*<span class="string">"github.com/prometheus/prometheus/discovery/targetgroup.Group"</span>)(<span class="number">0xc0018a27b0</span>),</span><br><span class="line">		],</span><br><span class="line">		DNSSDConfigs: []*github.com/prometheus/prometheus/discovery/dns.SDConfig <span class="built_in">len</span>: <span class="number">0</span>, <span class="built_in">cap</span>: <span class="number">0</span>, <span class="literal">nil</span>,</span><br><span class="line">		FileSDConfigs: []*github.com/prometheus/prometheus/discovery/file.SDConfig <span class="built_in">len</span>: <span class="number">0</span>, <span class="built_in">cap</span>: <span class="number">0</span>, <span class="literal">nil</span>,</span><br><span class="line">        ．．．．．．</span><br><span class="line">        ．．．．．．</span><br><span class="line">        ．．．．．．</span><br><span class="line">		AzureSDConfigs: []*github.com/prometheus/prometheus/discovery/azure.SDConfig <span class="built_in">len</span>: <span class="number">0</span>, <span class="built_in">cap</span>: <span class="number">0</span>, <span class="literal">nil</span>,</span><br><span class="line">		TritonSDConfigs: []*github.com/prometheus/prometheus/discovery/triton.SDConfig <span class="built_in">len</span>: <span class="number">0</span>, <span class="built_in">cap</span>: <span class="number">0</span>, <span class="literal">nil</span>,&#125;,</span><br><span class="line">	HTTPClientConfig: github.com/prometheus/common/config.HTTPClientConfig &#123;</span><br><span class="line">		BasicAuth: *github.com/prometheus/common/config.BasicAuth <span class="literal">nil</span>,</span><br><span class="line">		BearerToken: <span class="string">""</span>,</span><br><span class="line">		BearerTokenFile: <span class="string">""</span>,</span><br><span class="line">		ProxyURL: (*<span class="string">"github.com/prometheus/common/config.URL"</span>)(<span class="number">0xc000458cf</span>8),</span><br><span class="line">		TLSConfig: (*<span class="string">"github.com/prometheus/common/config.TLSConfig"</span>)(<span class="number">0xc000458d</span>00),&#125;,</span><br><span class="line">	RelabelConfigs: []*github.com/prometheus/prometheus/pkg/relabel.Config <span class="built_in">len</span>: <span class="number">0</span>, <span class="built_in">cap</span>: <span class="number">0</span>, <span class="literal">nil</span>,</span><br><span class="line">	MetricRelabelConfigs: []*github.com/prometheus/prometheus/pkg/relabel.Config <span class="built_in">len</span>: <span class="number">0</span>, <span class="built_in">cap</span>: <span class="number">0</span>, <span class="literal">nil</span>,&#125;</span><br></pre></td></tr></table></figure>
<p>由以上结果可知，job_name：node对应静态服务发现系统(StaticConfigs)．其实，在配置文件prometheus.yml中的两个job_names</p>
<p>都对应静态服务发现系统(StaticConfigs)</p>
</li>
<li><p>ApplyConfig方法实现逻辑比较清晰：先实现每个job的Discoverer接口，然后启动该job对应的服务发现系统</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">prometheus/discovery/manager.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// ApplyConfig removes all running discovery providers and starts new ones using the provided config.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">ApplyConfig</span><span class="params">(cfg <span class="keyword">map</span>[<span class="keyword">string</span>]sd_config.ServiceDiscoveryConfig)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	m.mtx.Lock()</span><br><span class="line">	<span class="keyword">defer</span> m.mtx.Unlock()</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span> pk := <span class="keyword">range</span> m.targets &#123;</span><br><span class="line">		<span class="keyword">if</span> _, ok := cfg[pk.setName]; !ok &#123;</span><br><span class="line">			discoveredTargets.DeleteLabelValues(m.name, pk.setName)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="comment">// 先把所有的Discoverer取消掉，这样做比较简单，毕竟配置文件修改频率非常低，没大毛病</span></span><br><span class="line">  <span class="comment">// 实现方式就是我们上面提到的Manager.discoverCancel这个取消函数的数组，遍历调用就是了</span></span><br><span class="line">	m.cancelDiscoverers()</span><br><span class="line">  <span class="comment">// name对应job_name，scfg是给出该job_name对应的服务发现系统类型，每个job_name下可以包含多种服务发现系统类型，但用的比较少</span></span><br><span class="line">	<span class="keyword">for</span> name, scfg := <span class="keyword">range</span> cfg &#123;</span><br><span class="line">		m.registerProviders(scfg, name)</span><br><span class="line">		discoveredTargets.WithLabelValues(m.name, name).Set(<span class="number">0</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, prov := <span class="keyword">range</span> m.providers &#123;</span><br><span class="line">　　　　<span class="comment">//启动每个job下对应的服务发现系统</span></span><br><span class="line">		m.startProvider(m.ctx, prov)</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ApplyConfig方法主要通过调用方法：registerProviders()和startProvider()实现以上功能</p>
<ul>
<li><p>registerProviders方法先判断每个job_name下包含所有的服务发现系统类型，接着由其对应的服务发现系统实现Discoverer接口，并构建provider和TargetGroups</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// registerProviders returns a number of failed SD config.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">registerProviders</span><span class="params">(cfgs Configs, setName <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        failed <span class="keyword">int</span></span><br><span class="line">        added  <span class="keyword">bool</span></span><br><span class="line">    )</span><br><span class="line">    add := <span class="function"><span class="keyword">func</span><span class="params">(cfg Config)</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> _, p := <span class="keyword">range</span> m.providers &#123;</span><br><span class="line">            <span class="keyword">if</span> reflect.DeepEqual(cfg, p.config) &#123;</span><br><span class="line">                p.subs = <span class="built_in">append</span>(p.subs, setName)</span><br><span class="line">                added = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        typ := cfg.Name()</span><br><span class="line">        d, err := cfg.NewDiscoverer(DiscovererOptions&#123;</span><br><span class="line">            Logger: log.With(m.logger, <span class="string">"discovery"</span>, typ),</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            level.Error(m.logger).Log(<span class="string">"msg"</span>, <span class="string">"Cannot create service discovery"</span>, <span class="string">"err"</span>, err, <span class="string">"type"</span>, typ)</span><br><span class="line">            failed++</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        m.providers = <span class="built_in">append</span>(m.providers, &amp;provider&#123;</span><br><span class="line">            name:   fmt.Sprintf(<span class="string">"%s/%d"</span>, typ, <span class="built_in">len</span>(m.providers)),</span><br><span class="line">            d:      d,</span><br><span class="line">            config: cfg,</span><br><span class="line">            subs:   []<span class="keyword">string</span>&#123;setName&#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        added = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, cfg := <span class="keyword">range</span> cfgs &#123;</span><br><span class="line">        add(cfg)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !added &#123;</span><br><span class="line">        <span class="comment">// Add an empty target group to force the refresh of the corresponding</span></span><br><span class="line">        <span class="comment">// scrape pool and to notify the receiver that this target set has no</span></span><br><span class="line">        <span class="comment">// current targets.</span></span><br><span class="line">        <span class="comment">// It can happen because the combined set of SD configurations is empty</span></span><br><span class="line">        <span class="comment">// or because we fail to instantiate all the SD configurations.</span></span><br><span class="line">        add(StaticConfig&#123;&#123;&#125;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> failed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>StaticConfigs对应TargetGroups， 以job_name：node为例，TargetGroups对应输出如下:</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(dlv) p setName</span><br><span class="line"><span class="string">"node"</span></span><br><span class="line">(dlv) p StaticConfigs</span><br><span class="line">[]*github.com/prometheus/prometheus/discovery/targetgroup.Group <span class="built_in">len</span>: <span class="number">1</span>, <span class="built_in">cap</span>: <span class="number">1</span>, [</span><br><span class="line">    *&#123;</span><br><span class="line">        Targets: []github.com/prometheus/common/model.LabelSet <span class="built_in">len</span>: <span class="number">1</span>, <span class="built_in">cap</span>: <span class="number">1</span>, [</span><br><span class="line">    　　　　　　　　　　[</span><br><span class="line">        　　　　　　　　　　<span class="string">"__address__"</span>: <span class="string">"localhost:9100"</span>, </span><br><span class="line">    　　　　　　　　　　],</span><br><span class="line">        ],</span><br><span class="line">        Labels: github.com/prometheus/common/model.LabelSet <span class="literal">nil</span>,</span><br><span class="line">        Source: <span class="string">"0"</span>,&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>每个job_name对应一个TargetGroups，而每个TargetGroups可以包含多个provider，每个provider包含实现对应的Discoverer接口和job_name等．所以，对应关系：job_name －&gt; TargetGroups －&gt; 多个targets －&gt; 多个provider －&gt; 多个Discover．部分示例如下：</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(dlv) p m.providers</span><br><span class="line">[]*github.com/prometheus/prometheus/discovery.provider <span class="built_in">len</span>: <span class="number">2</span>, <span class="built_in">cap</span>: <span class="number">2</span>, [</span><br><span class="line">    *&#123;</span><br><span class="line">        name: <span class="string">"string/0"</span>,</span><br><span class="line">        d: github.com/prometheus/prometheus/discovery.Discoverer(*github.com/prometheus/prometheus/discovery.StaticProvider) ...,</span><br><span class="line">        subs: []<span class="keyword">string</span> <span class="built_in">len</span>: <span class="number">1</span>, <span class="built_in">cap</span>: <span class="number">1</span>, [</span><br><span class="line">            <span class="string">"prometheus"</span>,</span><br><span class="line">        ],</span><br><span class="line">        config: <span class="keyword">interface</span> &#123;&#125;(<span class="keyword">string</span>) *(*<span class="keyword">interface</span> &#123;&#125;)(<span class="number">0xc000536268</span>),&#125;,</span><br><span class="line">    *&#123;</span><br><span class="line">        name: <span class="string">"string/1"</span>,</span><br><span class="line">        d: github.com/prometheus/prometheus/discovery.Discoverer(*github.com/prometheus/prometheus/discovery.StaticProvider) ...,</span><br><span class="line">        subs: []<span class="keyword">string</span> <span class="built_in">len</span>: <span class="number">1</span>, <span class="built_in">cap</span>: <span class="number">1</span>, [<span class="string">"node"</span>],</span><br><span class="line">        config: <span class="keyword">interface</span> &#123;&#125;(<span class="keyword">string</span>) *(*<span class="keyword">interface</span> &#123;&#125;)(<span class="number">0xc000518b78</span>),&#125;,</span><br><span class="line">]</span><br><span class="line">(dlv) p m.providers[<span class="number">0</span>].d</span><br><span class="line">github.com/prometheus/prometheus/discovery.Discoverer(*github.com/prometheus/prometheus/discovery.StaticProvider) *&#123;</span><br><span class="line">    TargetGroups: []*github.com/prometheus/prometheus/discovery/targetgroup.Group <span class="built_in">len</span>: <span class="number">1</span>, <span class="built_in">cap</span>: <span class="number">1</span>, [</span><br><span class="line">        *(*<span class="string">"github.com/prometheus/prometheus/discovery/targetgroup.Group"</span>)(<span class="number">0xc000ce09f</span>0),</span><br><span class="line">    ],&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>startProvider方法逐一启动job_name对应的所有服务发现系统</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">prometheus/discovery/manager.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">startProvider</span><span class="params">(ctx context.Context, p *provider)</span></span> &#123;</span><br><span class="line">    level.Debug(m.logger).Log(<span class="string">"msg"</span>, <span class="string">"Starting provider"</span>, <span class="string">"provider"</span>, p.name, <span class="string">"subs"</span>, fmt.Sprintf(<span class="string">"%v"</span>, p.subs))</span><br><span class="line">    ctx, cancel := context.WithCancel(ctx)</span><br><span class="line">    updates := <span class="built_in">make</span>(<span class="keyword">chan</span> []*targetgroup.Group)</span><br><span class="line"> </span><br><span class="line">    m.discoverCancel = <span class="built_in">append</span>(m.discoverCancel, cancel)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 第一个协程启动具体的发现的服务，作为[]*targetgroup.Group的生产者</span></span><br><span class="line">    <span class="keyword">go</span> p.d.Run(ctx, updates)</span><br><span class="line">  <span class="comment">// 第二个协程是[]*targetgroup.Group的消费者</span></span><br><span class="line">    <span class="keyword">go</span> m.updater(ctx, p, updates)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 备注：Run方法调用位置是实现Discoverer的服务发现系统中．若是静态服务发现，Run方法在prometheus/discovery/manager.go中实现，若是动态服务发现系统，则在对应系统的目录下实现．</span></span><br></pre></td></tr></table></figure>
<p>Run方法从结构体StaticProvider中取值，传递给[]*targetgroup.Group，作为服务发现的生产者</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">prometheus/discovery/discovery.<span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Discoverer <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// Run hands a channel to the discovery provider (Consul, DNS, etc.) through which</span></span><br><span class="line">    <span class="comment">// it can send updated target groups. It must return when the context is canceled.</span></span><br><span class="line">    <span class="comment">// It should not close the update channel on returning.</span></span><br><span class="line">    Run(ctx context.Context, up <span class="keyword">chan</span>&lt;- []*targetgroup.Group)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prometheus/discovery/manager.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// StaticProvider holds a list of target groups that never change.</span></span><br><span class="line"><span class="keyword">type</span> StaticProvider <span class="keyword">struct</span> &#123;</span><br><span class="line">    TargetGroups []*targetgroup.Group</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Run implements the Worker interface.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sd *StaticProvider)</span> <span class="title">Run</span><span class="params">(ctx context.Context, ch <span class="keyword">chan</span>&lt;- []*targetgroup.Group)</span></span> &#123;</span><br><span class="line">    <span class="comment">// We still have to consider that the consumer exits right away in which case</span></span><br><span class="line">    <span class="comment">// the context will be canceled.</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> ch &lt;- sd.TargetGroups:</span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>updater方法从[]*targetgroup.Group获取TargetGroups，并把它发传给结构体Manager中对应的Targets，Manager中对应的Targets是map类型</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">prometheus/discovery/manager.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">updater</span><span class="params">(ctx context.Context, p *provider, updates <span class="keyword">chan</span> []*targetgroup.Group)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-ctx.Done(): <span class="comment">//退出</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">case</span> tgs, ok := &lt;-updates: <span class="comment">// 从[]*targetgroup.Group取TargetGroups</span></span><br><span class="line">            receivedUpdates.WithLabelValues(m.name).Inc()</span><br><span class="line">            <span class="keyword">if</span> !ok &#123;</span><br><span class="line">                level.Debug(m.logger).Log(<span class="string">"msg"</span>, <span class="string">"discoverer channel closed"</span>, <span class="string">"provider"</span>, p.name)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// subs对应job_names，p.name对应系统名/索引值，比如：string/0</span></span><br><span class="line">            <span class="keyword">for</span> _, s := <span class="keyword">range</span> p.subs &#123;</span><br><span class="line">                m.updateGroup(poolKey&#123;setName: s, provider: p.name&#125;, tgs)</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> m.triggerSend &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更新结构体Manager对应的targets，key是结构体poolKey，value是传递过来的TargetGroups，其中包含targets</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">prometheus/discovery/manager.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">updateGroup</span><span class="params">(poolKey poolKey, tgs []*targetgroup.Group)</span></span> &#123;</span><br><span class="line">    m.mtx.Lock()</span><br><span class="line">    <span class="keyword">defer</span> m.mtx.Unlock()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> _, tg := <span class="keyword">range</span> tgs &#123;</span><br><span class="line">        <span class="keyword">if</span> tg != <span class="literal">nil</span> &#123; <span class="comment">// Some Discoverers send nil target group so need to check for it to avoid panics.</span></span><br><span class="line">            <span class="keyword">if</span> _, ok := m.targets[poolKey]; !ok &#123;</span><br><span class="line">                m.targets[poolKey] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*targetgroup.Group)</span><br><span class="line">            &#125;</span><br><span class="line">            m.targets[poolKey][tg.Source] = tg <span class="comment">//一个tg对应一个job，在map类型targets中，结构体poolkey和tg.Source可以确定一个tg，即job</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="服务发现启动"><a href="#服务发现启动" class="headerlink" title="服务发现启动"></a>服务发现启动</h2><p>在main.go方法中启一个协程，运行Run()方法</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Scrape discovery manager.</span></span><br><span class="line">    g.Add(</span><br><span class="line">        <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">            err := discoveryManagerScrape.Run()</span><br><span class="line">            level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Scrape discovery manager stopped"</span>)</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">            level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Stopping scrape discovery manager..."</span>)</span><br><span class="line">            cancelScrape()</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run starts the background processing</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">Run</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> m.sender()</span><br><span class="line">	<span class="keyword">for</span> <span class="keyword">range</span> m.ctx.Done() &#123;</span><br><span class="line">		m.cancelDiscoverers()</span><br><span class="line">		<span class="keyword">return</span> m.ctx.Err()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Run方法再起一个协程，运行sender()方法，sender方法的主要功能是处理结构体Manager中map类型的targets，然后传给结构</p>
<p>体Manager中的map类型<code>syncCh：syncCh chan map[string][]*targetgroup.Group</code></p>
<p>sender 通过一个计时器达到限制更新速率的目的，因为有些 discoverer 可能会过于频繁的更新 target。每次 Run() 都会根据 context 执</p>
<p>行取消发现的操作。周期计时器用法值得学，注意创建以后要延迟关闭。</p>
<p>每5秒检查一次 m.triggerSend 中有没有更新的信号，如果有更新的信号，就组装 <code>map[string][]*targetgroup.Group</code> 发送到</p>
<p>m.SyncCh 中，由于 m.SyncCh 是无缓冲通道，如果没能接收的话，就等到下次检查到更新信号再重试发送，这里的嵌套 select case 非</p>
<p>常值得学习</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">sender</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ticker := time.NewTicker(m.updatert)</span><br><span class="line">	<span class="keyword">defer</span> ticker.Stop()</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-m.ctx.Done():</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="keyword">case</span> &lt;-ticker.C: <span class="comment">// Some discoverers send updates too often so we throttle these with the ticker.</span></span><br><span class="line">			<span class="keyword">select</span> &#123;</span><br><span class="line">			<span class="keyword">case</span> &lt;-m.triggerSend:</span><br><span class="line">				sentUpdates.WithLabelValues(m.name).Inc()</span><br><span class="line">				<span class="keyword">select</span> &#123;</span><br><span class="line">　　　　　<span class="comment">//方法allGroups负责类型转换，并传给syncCh</span></span><br><span class="line">				<span class="keyword">case</span> m.syncCh &lt;- m.allGroups(): </span><br><span class="line">				<span class="keyword">default</span>:</span><br><span class="line">					delayedUpdates.WithLabelValues(m.name).Inc()</span><br><span class="line">					level.Debug(m.logger).Log(<span class="string">"msg"</span>, <span class="string">"discovery receiver's channel was full so will retry the next cycle"</span>)</span><br><span class="line">					<span class="keyword">select</span> &#123;</span><br><span class="line">					<span class="keyword">case</span> m.triggerSend &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;:</span><br><span class="line">					<span class="keyword">default</span>:</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>负责转换的allGroups()方法，<code>m.allGroups</code> 方法读取自身的 <code>targets</code> 成员变量中的值组装成 map 返回给调用者，用于向自身的 <code>syncCh</code> 发送这个 map，最终通知给 scraper；</p>
<p>当 SD 发现删除了某个 target group 时会发送一个空的 target group，此处对这个动作的意义做了说明，空的 target group 会通知</p>
<p>scraper 停止再抓取这些 target</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">allGroups</span><span class="params">()</span> <span class="title">map</span>[<span class="title">string</span>][]*<span class="title">targetgroup</span>.<span class="title">Group</span></span> &#123;</span><br><span class="line">	m.mtx.Lock()</span><br><span class="line">	<span class="keyword">defer</span> m.mtx.Unlock()</span><br><span class="line"> </span><br><span class="line">	tSets := <span class="keyword">map</span>[<span class="keyword">string</span>][]*targetgroup.Group&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> pkey, tsets := <span class="keyword">range</span> m.targets &#123;</span><br><span class="line">		<span class="keyword">var</span> n <span class="keyword">int</span></span><br><span class="line">		<span class="keyword">for</span> _, tg := <span class="keyword">range</span> tsets &#123;</span><br><span class="line">			<span class="comment">// Even if the target group 'tg' is empty we still need to send it to the 'Scrape manager'</span></span><br><span class="line">			<span class="comment">// to signal that it needs to stop all scrape loops for this target set.</span></span><br><span class="line">			tSets[pkey.setName] = <span class="built_in">append</span>(tSets[pkey.setName], tg)</span><br><span class="line">			n += <span class="built_in">len</span>(tg.Targets)</span><br><span class="line">		&#125;</span><br><span class="line">		discoveredTargets.WithLabelValues(m.name, pkey.setName).Set(<span class="keyword">float64</span>(n))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> tSets</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="服务发现和指标采集通信"><a href="#服务发现和指标采集通信" class="headerlink" title="服务发现和指标采集通信"></a>服务发现和指标采集通信</h2><p>服务发现 (serviceDiscover)和指标采集 (scrapeManager)通信，负责指标采集的服务监听的正是结构体Manager中的syncCh，由此实现了两个服务的通信</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Scrape manager.</span></span><br><span class="line">		g.Add(</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				<span class="comment">// When the scrape manager receives a new targets list</span></span><br><span class="line">				<span class="comment">// it needs to read a valid config for each job.</span></span><br><span class="line">				<span class="comment">// It depends on the config being in sync with the discovery manager so</span></span><br><span class="line">				<span class="comment">// we wait until the config is fully loaded.</span></span><br><span class="line">				&lt;-reloadReady.C</span><br><span class="line"> </span><br><span class="line">				err := scrapeManager.Run(discoveryManagerScrape.SyncCh())</span><br><span class="line">				level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Scrape manager stopped"</span>)</span><br><span class="line">				<span class="keyword">return</span> err</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">				<span class="comment">// Scrape manager needs to be stopped before closing the local TSDB</span></span><br><span class="line">				<span class="comment">// so that it doesn't try to write samples to a closed storage.</span></span><br><span class="line">				level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Stopping scrape manager..."</span>)</span><br><span class="line">				scrapeManager.Stop()</span><br><span class="line">			&#125;,</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">prometheus/discovery/manager.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// SyncCh returns a read only channel used by all the clients to receive target updates.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">SyncCh</span><span class="params">()</span> &lt;-<span class="title">chan</span> <span class="title">map</span>[<span class="title">string</span>][]*<span class="title">targetgroup</span>.<span class="title">Group</span></span> &#123;</span><br><span class="line">    <span class="comment">//结构体Manager中的syncCh</span></span><br><span class="line">	<span class="keyword">return</span> m.syncCh</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>至此，服务发现的主要功能就梳理出来了</p>
<p><img src="/images/prometheus-prometheus-8.png" alt="在这里插入图片描述"></p>
<ol>
<li><p>主程序调用 NewManager() Manager 实例</p>
</li>
<li><p>主程序调用 m.ApplyConfig() 根据配置文件配置并启动 Manager 实例，Manager 实例包括一组 Provider，其持有具体的 Discoverer，Discoverer 在运行时定期刷新target group，通过 channel 发送给 Manager 将其保存在 m.targets 中，并向 m.triggerSend channel 发送通知信号</p>
</li>
<li><p>m.Run() 按照 m.updatert 设定的时间间隔检查有没有更新的信号，有的话就把自己的 targets 字段中的 targets 发送给自身的 m.syncCh channel</p>
</li>
<li><p>主程序调用 m.SyncCh() 方法获取 channel 并从中取得 target</p>
</li>
</ol>
<p>参考：</p>
<p><a href="https://blog.csdn.net/dengxiafubi/article/details/102741656?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162311811516780265424839%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162311811516780265424839&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-5-102741656.pc_v2_rank_blog_default&amp;utm_term=Prometheus%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97&amp;spm=1018.2226.3001.4450" target="_blank" rel="external">https://blog.csdn.net/dengxiafubi/article/details/102741656?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162311811516780265424839%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162311811516780265424839&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-5-102741656.pc_v2_rank_blog_default&amp;utm_term=Prometheus%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97&amp;spm=1018.2226.3001.4450</a></p>
<p><a href="https://blog.csdn.net/qq_35753140/article/details/112999768?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162304613116780269873364%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162304613116780269873364&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-4-112999768.pc_v2_rank_blog_default&amp;utm_term=Prometheus%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0&amp;spm=1018.2226.3001.4450" target="_blank" rel="external">https://blog.csdn.net/qq_35753140/article/details/112999768?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162304613116780269873364%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162304613116780269873364&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-4-112999768.pc_v2_rank_blog_default&amp;utm_term=Prometheus%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0&amp;spm=1018.2226.3001.4450</a></p>
<p><a href="https://blog.csdn.net/weixin_42663840/article/details/81450705?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-13.baidujs&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-13.baidujs" target="_blank" rel="external">https://blog.csdn.net/weixin_42663840/article/details/81450705?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-13.baidujs&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-13.baidujs</a></p>
]]></content>
      
        <categories>
            
            <category> Prometheus </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Prometheus 源码分析-总览]]></title>
      <url>https://magiceses.github.io/2020/10/03/prometheus-prometheus-2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E6%80%BB%E8%A7%88/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">人的一生更是如此不要去看低每一个人，更不要以自己现有的权利去欺压别人。现在混得好不代表以后就混的好，时刻提醒自己你今天奋斗了吗？<br></p>

<p>以下包括链接中的分析皆是平时网上学习以及自己用到的一些知识，简单做个总结，基于版本2.27</p>
<h2 id="架构总览"><a href="#架构总览" class="headerlink" title="架构总览"></a>架构总览</h2><p><img src="/images/prometheus-prometheus-6.png" alt="image"></p>
<a id="more"></a>
<p>Prometheus server 的核心功能模块是 HTTP server、TSDB 、服务发现和指标抓取</p>
<p>Prometheus 整个工作流程大概是这样的：</p>
<ul>
<li>通过 Service discovery 知道要抓取什么指标</li>
<li>抓取指标数据存入 TSDB</li>
<li>客户通过 HTTP server 使用 PromQL 查询结果</li>
</ul>
<h2 id="主要工作流程（main-go）"><a href="#主要工作流程（main-go）" class="headerlink" title="主要工作流程（main.go）"></a>主要工作流程（main.go）</h2><ol>
<li>设置命令行参数及其默认值和描述信息</li>
<li>解析启动命令的命令行参数为 cfg 实例</li>
<li>校验配置文件（–config.file 设置），默认是 prometheus.yml</li>
<li>打印 “Starting Prometheus” 和主机系统信息日志</li>
<li>初始化子任务对象</li>
<li>并发启动各个子任务</li>
</ol>
<h2 id="服务启动流程"><a href="#服务启动流程" class="headerlink" title="服务启动流程"></a>服务启动流程</h2><ol>
<li>接收 kill/web 终止信号，退出程序</li>
<li>启动 Scrape Discovery manager</li>
<li>启动 Notify Discovery manager</li>
<li>启动 Scrape manager</li>
<li>启动 Reload handler</li>
<li>初始加载配置</li>
<li>启动 Rule manager</li>
<li>初始化 TSDB</li>
<li>启动 Web server</li>
<li>启动 Notifier</li>
</ol>
<h2 id="服务预启动分析"><a href="#服务预启动分析" class="headerlink" title="服务预启动分析"></a>服务预启动分析</h2><ol>
<li><p>Storage组件初始化</p>
<p>Prometheus的Storage组件是时序数据库，包含两个：localStorage和remoteStorage．localStorage当前版本指TSDB，用于对metrics的本地存储存储，remoteStorage用于metrics的远程存储，其中fanoutStorage作为localStorage和remoteStorage的读写代理服务器．初始化流程如下</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line">localStorage  = &amp;tsdb.ReadyStorage&#123;&#125; <span class="comment">//本地存储</span></span><br><span class="line">remoteStorage = remote.NewStorage(log.With(logger, <span class="string">"component"</span>, <span class="string">"remote"</span>), <span class="comment">//远端存储 localStorage.StartTime, time.Duration(cfg.RemoteFlushDeadline))</span></span><br><span class="line">fanoutStorage = storage.NewFanout(logger, localStorage, remoteStorage) <span class="comment">//读写代理服务器</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>notifier 组件初始化</p>
<p>notifier组件用于发送告警信息给AlertManager，通过方法notifier.NewManager完成初始化</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line">notifierManager = notifier.NewManager(&amp;cfg.notifier, log.With(logger, <span class="string">"component"</span>, <span class="string">"notifier"</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>discoveryManagerScrape组件初始化</p>
<p>discoveryManagerScrape组件用于服务发现，当前版本支持多种服务发现系统，比如kuberneters等，通过方法discovery.NewManager完成初始化</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line">discoveryManagerScrape  = discovery.NewManager(ctxScrape, log.With(logger, <span class="string">"component"</span>, <span class="string">"discovery manager scrape"</span>), discovery.Name(<span class="string">"scrape"</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>discoveryManagerNotify组件初始化</p>
<p>discoveryManagerNotify组件用于告警通知服务发现，比如AlertManager服务．也是通过方法discovery.NewManager完成初始化，不同的是，discoveryManagerNotify服务于notify，而discoveryManagerScrape服务与scrape</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line">discoveryManagerNotify  = discovery.NewManager(ctxNotify, log.With(logger, <span class="string">"component"</span>, <span class="string">"discovery manager notify"</span>), discovery.Name(<span class="string">"notify"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>scrapeManager组件初始化</p>
<p>scrapeManager组件利用discoveryManagerScrape组件发现的targets，抓取对应targets的所有metrics，并将抓取的metrics存储到fanoutStorage中，通过方法scrape.NewManager完成初始化</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line">scrapeManager = scrape.NewManager(log.With(logger, <span class="string">"component"</span>, <span class="string">"scrape manager"</span>), fanoutStorage)</span><br></pre></td></tr></table></figure>
</li>
<li><p>queryEngine组件</p>
<p>queryEngine组件用于rules查询和计算，通过方法promql.NewEngine完成初始化</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line">opts = promql.EngineOpts&#123;</span><br><span class="line">    Logger:        log.With(logger, <span class="string">"component"</span>, <span class="string">"query engine"</span>),</span><br><span class="line">    Reg:           prometheus.DefaultRegisterer,</span><br><span class="line">    MaxConcurrent: cfg.queryConcurrency,　　　　　　　<span class="comment">//最大并发查询个数</span></span><br><span class="line">    MaxSamples:    cfg.queryMaxSamples,</span><br><span class="line">    Timeout:       time.Duration(cfg.queryTimeout),　<span class="comment">//查询超时时间</span></span><br><span class="line">&#125;</span><br><span class="line">queryEngine = promql.NewEngine(opts)</span><br></pre></td></tr></table></figure>
</li>
<li><p>ruleManager组件初始化</p>
<p>ruleManager组件通过方法rules.NewManager完成初始化．其中rules.NewManager的参数涉及多个组件：存储，queryEngine和notifier，整个流程包含rule计算和发送告警</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line">ruleManager = rules.NewManager(&amp;rules.ManagerOptions&#123;</span><br><span class="line">    Appendable:      fanoutStorage,                        <span class="comment">//存储器</span></span><br><span class="line">    TSDB:            localStorage,　　　　　　　　　　　　　　<span class="comment">//本地时序数据库TSDB</span></span><br><span class="line">    QueryFunc:       rules.EngineQueryFunc(queryEngine, fanoutStorage), <span class="comment">//rules计算</span></span><br><span class="line">    NotifyFunc:      sendAlerts(notifierManager, cfg.web.ExternalURL.String()),　<span class="comment">//告警通知</span></span><br><span class="line">    Context:         ctxRule,　<span class="comment">//用于控制ruleManager组件的协程</span></span><br><span class="line">    ExternalURL:     cfg.web.ExternalURL,　<span class="comment">//通过Web对外开放的URL</span></span><br><span class="line">    Registerer:      prometheus.DefaultRegisterer, </span><br><span class="line">    Logger:          log.With(logger, <span class="string">"component"</span>, <span class="string">"rule manager"</span>),</span><br><span class="line">    OutageTolerance: time.Duration(cfg.outageTolerance), <span class="comment">//当prometheus重启时，保持alert状态（https://ganeshvernekar.com/gsoc-2018/persist-for-state/）</span></span><br><span class="line">    ForGracePeriod:  time.Duration(cfg.forGracePeriod),</span><br><span class="line">    ResendDelay:     time.Duration(cfg.resendDelay),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Web组件初始化</p>
<p>Web组件用于为Storage组件，queryEngine组件，scrapeManager组件， ruleManager组件和notifier 组件提供外部HTTP访问方式，初始化代码如下</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">cfg.web.Context = ctxWeb</span><br><span class="line">cfg.web.TSDB = localStorage.Get</span><br><span class="line">cfg.web.Storage = fanoutStorage</span><br><span class="line">cfg.web.QueryEngine = queryEngine</span><br><span class="line">cfg.web.ScrapeManager = scrapeManager</span><br><span class="line">cfg.web.RuleManager = ruleManager</span><br><span class="line">cfg.web.Notifier = notifierManager</span><br><span class="line"> </span><br><span class="line">cfg.web.Version = &amp;web.PrometheusVersion&#123;</span><br><span class="line">    Version:   version.Version,</span><br><span class="line">    Revision:  version.Revision,</span><br><span class="line">    Branch:    version.Branch,</span><br><span class="line">    BuildUser: version.BuildUser,</span><br><span class="line">    BuildDate: version.BuildDate,</span><br><span class="line">    GoVersion: version.GoVersion,</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">cfg.web.Flags = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Depends on cfg.web.ScrapeManager so needs to be after cfg.web.ScrapeManager = scrapeManager</span></span><br><span class="line">webHandler := web.New(log.With(logger, <span class="string">"component"</span>, <span class="string">"web"</span>), &amp;cfg.web)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>以上几个服务组件在Web页面对外的访问如图所示</p>
<p><img src="/images/prometheus-prometheus-7.png" alt="img"></p>
<h2 id="服务配置分析"><a href="#服务配置分析" class="headerlink" title="服务配置分析"></a>服务配置分析</h2><p>可以发现，除了服务组件ruleManager用的方法是Update，其他服务组件的在匿名函数中通过各自的ApplyConfig方法，实现配置的管理</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line">reloaders := []<span class="function"><span class="keyword">func</span><span class="params">(cfg *config.Config)</span> <span class="title">error</span></span>&#123;</span><br><span class="line">    remoteStorage.ApplyConfig, <span class="comment">//存储配置</span></span><br><span class="line">    webHandler.ApplyConfig,    <span class="comment">//web配置</span></span><br><span class="line">    notifierManager.ApplyConfig, <span class="comment">//notifier配置</span></span><br><span class="line">    scrapeManager.ApplyConfig,　　<span class="comment">//scrapeManger配置</span></span><br><span class="line">　　<span class="comment">//从配置文件中提取Section:scrape_configs</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(cfg *config.Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        c := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]sd_config.ServiceDiscoveryConfig)</span><br><span class="line">        <span class="keyword">for</span> _, v := <span class="keyword">range</span> cfg.ScrapeConfigs &#123;</span><br><span class="line">            c[v.JobName] = v.ServiceDiscoveryConfig</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> discoveryManagerScrape.ApplyConfig(c)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//从配置文件中提取Section:alerting</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(cfg *config.Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        c := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]sd_config.ServiceDiscoveryConfig)</span><br><span class="line">        <span class="keyword">for</span> _, v := <span class="keyword">range</span> cfg.AlertingConfig.AlertmanagerConfigs &#123;</span><br><span class="line">            <span class="comment">// AlertmanagerConfigs doesn't hold an unique identifier so we use the config hash as the identifier.</span></span><br><span class="line">            b, err := json.Marshal(v)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> err</span><br><span class="line">            &#125;</span><br><span class="line">            c[fmt.Sprintf(<span class="string">"%x"</span>, md5.Sum(b))] = v.ServiceDiscoveryConfig</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> discoveryManagerNotify.ApplyConfig(c)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//从配置文件中提取Section:rule_files</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(cfg *config.Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        <span class="comment">// Get all rule files matching the configuration paths.</span></span><br><span class="line">        <span class="keyword">var</span> files []<span class="keyword">string</span></span><br><span class="line">        <span class="keyword">for</span> _, pat := <span class="keyword">range</span> cfg.RuleFiles &#123;</span><br><span class="line">            fs, err := filepath.Glob(pat)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="comment">// The only error can be a bad pattern.</span></span><br><span class="line">                <span class="keyword">return</span> fmt.Errorf(<span class="string">"error retrieving rule files for %s: %s"</span>, pat, err)</span><br><span class="line">            &#125;</span><br><span class="line">            files = <span class="built_in">append</span>(files, fs...)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ruleManager.Update(time.Duration(cfg.GlobalConfig.EvaluationInterval), files)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，服务组件remoteStorage，webHandler，notifierManager和ScrapeManager的ApplyConfig方法，参数cfg *config.Config中传递的配置文件，是整个文件prometheus.yml，点击<a href="https://blog.csdn.net/weixin_43700106/article/details/117565266" target="_blank" rel="external">prometheus.yml</a>查看一个完整的配置文件示例</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prometheus/scrape/manager.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">ApplyConfig</span><span class="params">(cfg *config.Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">   .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而服务组件discoveryManagerScrape和discoveryManagerNotify的Appliconfig方法，参数中传递的配置文件，是文件中的一个Section</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prometheus/discovery/manager.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">ApplyConfig</span><span class="params">(cfg <span class="keyword">map</span>[<span class="keyword">string</span>]sd_config.ServiceDiscoveryConfig)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">     ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以，需要利用匿名函数提前处理下，取出对应的Section</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//从配置文件中提取Section:scrape_configs</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(cfg *config.Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]sd_config.ServiceDiscoveryConfig)</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> cfg.ScrapeConfigs &#123;</span><br><span class="line">        c[v.JobName] = v.ServiceDiscoveryConfig</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> discoveryManagerScrape.ApplyConfig(c)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//从配置文件中提取Section:alerting</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(cfg *config.Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]sd_config.ServiceDiscoveryConfig)</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> cfg.AlertingConfig.AlertmanagerConfigs &#123;</span><br><span class="line">        <span class="comment">// AlertmanagerConfigs doesn't hold an unique identifier so we use the config hash as the identifier.</span></span><br><span class="line">        b, err := json.Marshal(v)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        c[fmt.Sprintf(<span class="string">"%x"</span>, md5.Sum(b))] = v.ServiceDiscoveryConfig</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> discoveryManagerNotify.ApplyConfig(c)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>服务组件ruleManager，在匿名函数中提取出Section:rule_files</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//从配置文件中提取Section:rule_files</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(cfg *config.Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// Get all rule files matching the configuration paths.</span></span><br><span class="line">    <span class="keyword">var</span> files []<span class="keyword">string</span></span><br><span class="line">    <span class="keyword">for</span> _, pat := <span class="keyword">range</span> cfg.RuleFiles &#123;</span><br><span class="line">        fs, err := filepath.Glob(pat)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// The only error can be a bad pattern.</span></span><br><span class="line">            <span class="keyword">return</span> fmt.Errorf(<span class="string">"error retrieving rule files for %s: %s"</span>, pat, err)</span><br><span class="line">        &#125;</span><br><span class="line">        files = <span class="built_in">append</span>(files, fs...)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ruleManager.Update(time.Duration(cfg.GlobalConfig.EvaluationInterval), files)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>利用该组件内置的Update方法完成配置管理</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prometheus/rules/manager.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">Update</span><span class="params">(interval time.Duration, files []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，通过reloadConfig方法，加载各个服务组件的配置项</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reloadConfig</span><span class="params">(filename <span class="keyword">string</span>, logger log.Logger, rls ...<span class="keyword">func</span>(*config.Config)</span> <span class="title">error</span>) <span class="params">(err error)</span></span> &#123;</span><br><span class="line">	level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Loading configuration file"</span>, <span class="string">"filename"</span>, filename)</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">			configSuccess.Set(<span class="number">1</span>)</span><br><span class="line">			configSuccessTime.SetToCurrentTime()</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			configSuccess.Set(<span class="number">0</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line"> </span><br><span class="line">	conf, err := config.LoadFile(filename)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> fmt.Errorf(<span class="string">"couldn't load configuration (--config.file=%q): %v"</span>, filename, err)</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	failed := <span class="literal">false</span></span><br><span class="line">　　<span class="comment">//通过一个for循环，加载各个服务组件的配置项</span></span><br><span class="line">	<span class="keyword">for</span> _, rl := <span class="keyword">range</span> rls &#123;</span><br><span class="line">		<span class="keyword">if</span> err := rl(conf); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			level.Error(logger).Log(<span class="string">"msg"</span>, <span class="string">"Failed to apply configuration"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">			failed = <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> failed &#123;</span><br><span class="line">		<span class="keyword">return</span> fmt.Errorf(<span class="string">"one or more errors occurred while applying the new configuration (--config.file=%q)"</span>, filename)</span><br><span class="line">	&#125;</span><br><span class="line">	promql.SetDefaultEvaluationInterval(time.Duration(conf.GlobalConfig.EvaluationInterval))</span><br><span class="line">	level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Completed loading of configuration file"</span>, <span class="string">"filename"</span>, filename)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="服务启动分析"><a href="#服务启动分析" class="headerlink" title="服务启动分析"></a>服务启动分析</h2><p>这里引用了github.com/oklog/oklog/pkg/group包，实例化一个对象g，<a href="https://www.cnblogs.com/huanggze/p/11695602.html" target="_blank" rel="external">包详解</a></p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// "github.com/oklog/oklog/pkg/group"</span></span><br><span class="line"><span class="keyword">var</span> g group.Group</span><br><span class="line">&#123;</span><br><span class="line">　　......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对象g中包含各个服务组件的入口，通过调用Add方法把把这些入口添加到对象g中，以组件scrapeManager为例：</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Scrape manager.</span></span><br><span class="line">　　<span class="comment">//通过方法Add，把ScrapeManager组件添加到g中</span></span><br><span class="line">    g.Add(</span><br><span class="line">        <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">            <span class="comment">// When the scrape manager receives a new targets list</span></span><br><span class="line">            <span class="comment">// it needs to read a valid config for each job.</span></span><br><span class="line">            <span class="comment">// It depends on the config being in sync with the discovery manager so</span></span><br><span class="line">            <span class="comment">// we wait until the config is fully loaded.</span></span><br><span class="line">            &lt;-reloadReady.C</span><br><span class="line">　　　　　　　<span class="comment">//ScrapeManager组件的启动函数</span></span><br><span class="line">            err := scrapeManager.Run(discoveryManagerScrape.SyncCh())</span><br><span class="line">            level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Scrape manager stopped"</span>)</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">            <span class="comment">// Scrape manager needs to be stopped before closing the local TSDB</span></span><br><span class="line">            <span class="comment">// so that it doesn't try to write samples to a closed storage.</span></span><br><span class="line">            level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Stopping scrape manager..."</span>)</span><br><span class="line">            scrapeManager.Stop()</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过对象g，调用方法run，启动所有服务组件</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">prometheus/cmd/prometheus/main.<span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> err := g.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    level.Error(logger).Log(<span class="string">"err"</span>, err)</span><br><span class="line">    os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"See you next time!"</span>)</span><br></pre></td></tr></table></figure>
<p>启动完成。</p>
<h2 id="main-函数注解"><a href="#main-函数注解" class="headerlink" title="main 函数注解"></a>main 函数注解</h2><p>prometheus/cmd/prometheus/main.go</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2015 The Prometheus Authors</span></span><br><span class="line"><span class="comment">// Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">// you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">// You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">// distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">// See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">// limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The main package for the Prometheus server executable.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"context"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"io"</span></span><br><span class="line">	<span class="string">"math"</span></span><br><span class="line">	<span class="string">"math/bits"</span></span><br><span class="line">	<span class="string">"net"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">	_ <span class="string">"net/http/pprof"</span> <span class="comment">// Comment this line to disable pprof endpoint.</span></span><br><span class="line">	<span class="string">"net/url"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">	<span class="string">"os/signal"</span></span><br><span class="line">	<span class="string">"path/filepath"</span></span><br><span class="line">	<span class="string">"regexp"</span></span><br><span class="line">	<span class="string">"runtime"</span></span><br><span class="line">	<span class="string">"strings"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">	<span class="string">"syscall"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"github.com/alecthomas/units"</span></span><br><span class="line">	<span class="string">"github.com/go-kit/kit/log"</span></span><br><span class="line">	<span class="string">"github.com/go-kit/kit/log/level"</span></span><br><span class="line">	conntrack <span class="string">"github.com/mwitkow/go-conntrack"</span></span><br><span class="line">	<span class="string">"github.com/oklog/run"</span></span><br><span class="line">	<span class="string">"github.com/opentracing/opentracing-go"</span></span><br><span class="line">	<span class="string">"github.com/pkg/errors"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/client_golang/prometheus"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/common/model"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/common/promlog"</span></span><br><span class="line">	promlogflag <span class="string">"github.com/prometheus/common/promlog/flag"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/common/version"</span></span><br><span class="line">	toolkit_web <span class="string">"github.com/prometheus/exporter-toolkit/web"</span></span><br><span class="line">	toolkit_webflag <span class="string">"github.com/prometheus/exporter-toolkit/web/kingpinflag"</span></span><br><span class="line">	jcfg <span class="string">"github.com/uber/jaeger-client-go/config"</span></span><br><span class="line">	jprom <span class="string">"github.com/uber/jaeger-lib/metrics/prometheus"</span></span><br><span class="line">	<span class="string">"go.uber.org/atomic"</span></span><br><span class="line">	kingpin <span class="string">"gopkg.in/alecthomas/kingpin.v2"</span></span><br><span class="line">	klog <span class="string">"k8s.io/klog"</span></span><br><span class="line">	klogv2 <span class="string">"k8s.io/klog/v2"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"github.com/prometheus/prometheus/config"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/prometheus/discovery"</span></span><br><span class="line">	_ <span class="string">"github.com/prometheus/prometheus/discovery/install"</span> <span class="comment">// Register service discovery implementations.</span></span><br><span class="line">	<span class="string">"github.com/prometheus/prometheus/notifier"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/prometheus/pkg/exemplar"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/prometheus/pkg/labels"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/prometheus/pkg/logging"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/prometheus/pkg/relabel"</span></span><br><span class="line">	prom_runtime <span class="string">"github.com/prometheus/prometheus/pkg/runtime"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/prometheus/promql"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/prometheus/rules"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/prometheus/scrape"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/prometheus/storage"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/prometheus/storage/remote"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/prometheus/tsdb"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/prometheus/util/strutil"</span></span><br><span class="line">	<span class="string">"github.com/prometheus/prometheus/web"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	<span class="comment">// 声明两个程序自身的监控指标</span></span><br><span class="line">	configSuccess = prometheus.NewGauge(prometheus.GaugeOpts&#123;</span><br><span class="line">		Name: <span class="string">"prometheus_config_last_reload_successful"</span>,</span><br><span class="line">		Help: <span class="string">"Whether the last configuration reload attempt was successful."</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">	configSuccessTime = prometheus.NewGauge(prometheus.GaugeOpts&#123;</span><br><span class="line">		Name: <span class="string">"prometheus_config_last_reload_success_timestamp_seconds"</span>,</span><br><span class="line">		Help: <span class="string">"Timestamp of the last successful configuration reload."</span>,</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 默认数据保留时间 15 天</span></span><br><span class="line">	defaultRetentionString   = <span class="string">"15d"</span></span><br><span class="line">	defaultRetentionDuration model.Duration</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	prometheus.MustRegister(version.NewCollector(<span class="string">"prometheus"</span>))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将默认数据保留时间从字符串转换为 model.Duration 类型，</span></span><br><span class="line">	<span class="comment">// 其底层是 time.Duration 类型。</span></span><br><span class="line">	<span class="keyword">var</span> err error</span><br><span class="line">	<span class="comment">// model.ParseDuration 会对 defaultRetentionString 进行正则匹配，提取</span></span><br><span class="line">	<span class="comment">// 各个单位的数值然后计算总的毫秒数</span></span><br><span class="line">	<span class="comment">// 例如 "1y2w3d4h5m6s7ms" 就 解析成 [1y2w3d4h5m6s7ms 1y 1 2w 2 3d 3 4h 4 5m 5 6s 6 7ms 7]</span></span><br><span class="line">	<span class="comment">// 然后计算乘积</span></span><br><span class="line">	defaultRetentionDuration, err = model.ParseDuration(defaultRetentionString)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> flagConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">	configFile <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">	localStoragePath    <span class="keyword">string</span></span><br><span class="line">	notifier            notifier.Options</span><br><span class="line">	forGracePeriod      model.Duration</span><br><span class="line">	outageTolerance     model.Duration</span><br><span class="line">	resendDelay         model.Duration</span><br><span class="line">	web                 web.Options</span><br><span class="line">	tsdb                tsdbOptions</span><br><span class="line">	lookbackDelta       model.Duration</span><br><span class="line">	webTimeout          model.Duration</span><br><span class="line">	queryTimeout        model.Duration</span><br><span class="line">	queryConcurrency    <span class="keyword">int</span></span><br><span class="line">	queryMaxSamples     <span class="keyword">int</span></span><br><span class="line">	RemoteFlushDeadline model.Duration</span><br><span class="line"></span><br><span class="line">	featureList []<span class="keyword">string</span></span><br><span class="line">	<span class="comment">// These options are extracted from featureList</span></span><br><span class="line">	<span class="comment">// for ease of use.</span></span><br><span class="line">	enablePromQLAtModifier     <span class="keyword">bool</span></span><br><span class="line">	enablePromQLNegativeOffset <span class="keyword">bool</span></span><br><span class="line">	enableExpandExternalLabels <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	prometheusURL   <span class="keyword">string</span></span><br><span class="line">	corsRegexString <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">	promlogConfig promlog.Config</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setFeatureListOptions sets the corresponding options from the featureList.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *flagConfig)</span> <span class="title">setFeatureListOptions</span><span class="params">(logger log.Logger)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	maxExemplars := c.tsdb.MaxExemplars</span><br><span class="line">	<span class="comment">// Disabled at first. Value from the flag is used if exemplar-storage is set.</span></span><br><span class="line">	c.tsdb.MaxExemplars = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> _, f := <span class="keyword">range</span> c.featureList &#123;</span><br><span class="line">		opts := strings.Split(f, <span class="string">","</span>)</span><br><span class="line">		<span class="keyword">for</span> _, o := <span class="keyword">range</span> opts &#123;</span><br><span class="line">			<span class="keyword">switch</span> o &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">"promql-at-modifier"</span>:</span><br><span class="line">				c.enablePromQLAtModifier = <span class="literal">true</span></span><br><span class="line">				level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Experimental promql-at-modifier enabled"</span>)</span><br><span class="line">			<span class="keyword">case</span> <span class="string">"promql-negative-offset"</span>:</span><br><span class="line">				c.enablePromQLNegativeOffset = <span class="literal">true</span></span><br><span class="line">				level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Experimental promql-negative-offset enabled"</span>)</span><br><span class="line">			<span class="keyword">case</span> <span class="string">"remote-write-receiver"</span>:</span><br><span class="line">				c.web.RemoteWriteReceiver = <span class="literal">true</span></span><br><span class="line">				level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Experimental remote-write-receiver enabled"</span>)</span><br><span class="line">			<span class="keyword">case</span> <span class="string">"expand-external-labels"</span>:</span><br><span class="line">				c.enableExpandExternalLabels = <span class="literal">true</span></span><br><span class="line">				level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Experimental expand-external-labels enabled"</span>)</span><br><span class="line">			<span class="keyword">case</span> <span class="string">"exemplar-storage"</span>:</span><br><span class="line">				c.tsdb.MaxExemplars = maxExemplars</span><br><span class="line">				level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Experimental in-memory exemplar storage enabled"</span>, <span class="string">"maxExemplars"</span>, maxExemplars)</span><br><span class="line">			<span class="keyword">case</span> <span class="string">""</span>:</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				level.Warn(logger).Log(<span class="string">"msg"</span>, <span class="string">"Unknown option for --enable-feature"</span>, <span class="string">"option"</span>, o)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> os.Getenv(<span class="string">"DEBUG"</span>) != <span class="string">""</span> &#123;</span><br><span class="line">		runtime.SetBlockProfileRate(<span class="number">20</span>)</span><br><span class="line">		runtime.SetMutexProfileFraction(<span class="number">20</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		oldFlagRetentionDuration model.Duration</span><br><span class="line">		newFlagRetentionDuration model.Duration</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 启动配置项</span></span><br><span class="line">	cfg := flagConfig&#123;</span><br><span class="line">		notifier: notifier.Options&#123;</span><br><span class="line">			<span class="comment">// 默认注册器注册 cpu 和 go 指标收集器</span></span><br><span class="line">			Registerer: prometheus.DefaultRegisterer,</span><br><span class="line">		&#125;,</span><br><span class="line">		web: web.Options&#123;</span><br><span class="line">			Registerer: prometheus.DefaultRegisterer,</span><br><span class="line">			Gatherer:   prometheus.DefaultGatherer,</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">// 初始化 go kit logger</span></span><br><span class="line">		promlogConfig: promlog.Config&#123;&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// kingpin 解析 Args[0]，即 prometheus，初始化 kingpin.Application</span></span><br><span class="line">	a := kingpin.New(filepath.Base(os.Args[<span class="number">0</span>]), <span class="string">"The Prometheus monitoring server"</span>).UsageWriter(os.Stdout)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置一些标志位参数及其默认值</span></span><br><span class="line">	a.Version(version.Print(<span class="string">"prometheus"</span>))</span><br><span class="line"></span><br><span class="line">	a.HelpFlag.Short(<span class="string">'h'</span>)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"config.file"</span>, <span class="string">"Prometheus configuration file path."</span>).</span><br><span class="line">		Default(<span class="string">"prometheus.yml"</span>).StringVar(&amp;cfg.configFile)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"web.listen-address"</span>, <span class="string">"Address to listen on for UI, API, and telemetry."</span>).</span><br><span class="line">		Default(<span class="string">"0.0.0.0:9090"</span>).StringVar(&amp;cfg.web.ListenAddress)</span><br><span class="line"></span><br><span class="line">	webConfig := toolkit_webflag.AddFlags(a)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// web 读取超时</span></span><br><span class="line">	a.Flag(<span class="string">"web.read-timeout"</span>,</span><br><span class="line">		<span class="string">"Maximum duration before timing out read of the request, and closing idle connections."</span>).</span><br><span class="line">		Default(<span class="string">"5m"</span>).SetValue(&amp;cfg.webTimeout)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// web 的最大连接数</span></span><br><span class="line">	a.Flag(<span class="string">"web.max-connections"</span>, <span class="string">"Maximum number of simultaneous connections."</span>).</span><br><span class="line">		Default(<span class="string">"512"</span>).IntVar(&amp;cfg.web.MaxConnections)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"web.external-url"</span>,</span><br><span class="line">		<span class="string">"The URL under which Prometheus is externally reachable (for example, if Prometheus is served via a reverse proxy). Used for generating relative and absolute links back to Prometheus itself. If the URL has a path portion, it will be used to prefix all HTTP endpoints served by Prometheus. If omitted, relevant URL components will be derived automatically."</span>).</span><br><span class="line">		PlaceHolder(<span class="string">"&lt;URL&gt;"</span>).StringVar(&amp;cfg.prometheusURL)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"web.route-prefix"</span>,</span><br><span class="line">		<span class="string">"Prefix for the internal routes of web endpoints. Defaults to path of --web.external-url."</span>).</span><br><span class="line">		PlaceHolder(<span class="string">"&lt;path&gt;"</span>).StringVar(&amp;cfg.web.RoutePrefix)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"web.user-assets"</span>, <span class="string">"Path to static asset directory, available at /user."</span>).</span><br><span class="line">		PlaceHolder(<span class="string">"&lt;path&gt;"</span>).StringVar(&amp;cfg.web.UserAssetsPath)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 通过 http 请求热加载配置文件或者关闭服务器</span></span><br><span class="line">	a.Flag(<span class="string">"web.enable-lifecycle"</span>, <span class="string">"Enable shutdown and reload via HTTP request."</span>).</span><br><span class="line">		Default(<span class="string">"false"</span>).BoolVar(&amp;cfg.web.EnableLifecycle)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"web.enable-admin-api"</span>, <span class="string">"Enable API endpoints for admin control actions."</span>).</span><br><span class="line">		Default(<span class="string">"false"</span>).BoolVar(&amp;cfg.web.EnableAdminAPI)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"web.console.templates"</span>, <span class="string">"Path to the console template directory, available at /consoles."</span>).</span><br><span class="line">		Default(<span class="string">"consoles"</span>).StringVar(&amp;cfg.web.ConsoleTemplatesPath)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"web.console.libraries"</span>, <span class="string">"Path to the console library directory."</span>).</span><br><span class="line">		Default(<span class="string">"console_libraries"</span>).StringVar(&amp;cfg.web.ConsoleLibrariesPath)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"web.page-title"</span>, <span class="string">"Document title of Prometheus instance."</span>).</span><br><span class="line">		Default(<span class="string">"Prometheus Time Series Collection and Processing Server"</span>).StringVar(&amp;cfg.web.PageTitle)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 限制访问源</span></span><br><span class="line">	a.Flag(<span class="string">"web.cors.origin"</span>, <span class="string">`Regex for CORS origin. It is fully anchored. Example: 'https?://(domain1|domain2)\.com'`</span>).</span><br><span class="line">		Default(<span class="string">".*"</span>).StringVar(&amp;cfg.corsRegexString)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"storage.tsdb.path"</span>, <span class="string">"Base path for metrics storage."</span>).</span><br><span class="line">		Default(<span class="string">"data/"</span>).StringVar(&amp;cfg.localStoragePath)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 每两小时将 wal 落盘</span></span><br><span class="line">	a.Flag(<span class="string">"storage.tsdb.min-block-duration"</span>, <span class="string">"Minimum duration of a data block before being persisted. For use in testing."</span>).</span><br><span class="line">		Hidden().Default(<span class="string">"2h"</span>).SetValue(&amp;cfg.tsdb.MinBlockDuration)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"storage.tsdb.max-block-duration"</span>,</span><br><span class="line">		<span class="string">"Maximum duration compacted blocks may span. For use in testing. (Defaults to 10% of the retention period.)"</span>).</span><br><span class="line">		Hidden().PlaceHolder(<span class="string">"&lt;duration&gt;"</span>).SetValue(&amp;cfg.tsdb.MaxBlockDuration)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"storage.tsdb.max-block-chunk-segment-size"</span>,</span><br><span class="line">		<span class="string">"The maximum size for a single chunk segment in a block. Example: 512MB"</span>).</span><br><span class="line">		Hidden().PlaceHolder(<span class="string">"&lt;bytes&gt;"</span>).BytesVar(&amp;cfg.tsdb.MaxBlockChunkSegmentSize)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"storage.tsdb.wal-segment-size"</span>,</span><br><span class="line">		<span class="string">"Size at which to split the tsdb WAL segment files. Example: 100MB"</span>).</span><br><span class="line">		Hidden().PlaceHolder(<span class="string">"&lt;bytes&gt;"</span>).BytesVar(&amp;cfg.tsdb.WALSegmentSize)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"storage.tsdb.retention"</span>, <span class="string">"[DEPRECATED] How long to retain samples in storage. This flag has been deprecated, use \"storage.tsdb.retention.time\" instead."</span>).</span><br><span class="line">		SetValue(&amp;oldFlagRetentionDuration)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 保存的时序数据的长度，默认15天，最多</span></span><br><span class="line">	a.Flag(<span class="string">"storage.tsdb.retention.time"</span>, <span class="string">"How long to retain samples in storage. When this flag is set it overrides \"storage.tsdb.retention\". If neither this flag nor \"storage.tsdb.retention\" nor \"storage.tsdb.retention.size\" is set, the retention time defaults to "</span>+defaultRetentionString+<span class="string">". Units Supported: y, w, d, h, m, s, ms."</span>).</span><br><span class="line">		SetValue(&amp;newFlagRetentionDuration)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"storage.tsdb.retention.size"</span>, <span class="string">"[EXPERIMENTAL] Maximum number of bytes that can be stored for blocks. A unit is required, supported units: B, KB, MB, GB, TB, PB, EB. Ex: \"512MB\". This flag is experimental and can be changed in future releases."</span>).</span><br><span class="line">		BytesVar(&amp;cfg.tsdb.MaxBytes)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 不在 data 目录创建锁文件</span></span><br><span class="line">	a.Flag(<span class="string">"storage.tsdb.no-lockfile"</span>, <span class="string">"Do not create lockfile in data directory."</span>).</span><br><span class="line">		Default(<span class="string">"false"</span>).BoolVar(&amp;cfg.tsdb.NoLockfile)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"storage.tsdb.allow-overlapping-blocks"</span>, <span class="string">"[EXPERIMENTAL] Allow overlapping blocks, which in turn enables vertical compaction and vertical query merge."</span>).</span><br><span class="line">		Default(<span class="string">"false"</span>).BoolVar(&amp;cfg.tsdb.AllowOverlappingBlocks)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 压缩 wal，默认压缩</span></span><br><span class="line">	a.Flag(<span class="string">"storage.tsdb.wal-compression"</span>, <span class="string">"Compress the tsdb WAL."</span>).</span><br><span class="line">		Default(<span class="string">"true"</span>).BoolVar(&amp;cfg.tsdb.WALCompression)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 关闭或者重新加载配置前等待样本远程写落盘的时长，默认1分钟，应该是写 wal 的时间，不确定，远程读写没有接触过</span></span><br><span class="line">	a.Flag(<span class="string">"storage.remote.flush-deadline"</span>, <span class="string">"How long to wait flushing sample on shutdown or config reload."</span>).</span><br><span class="line">		Default(<span class="string">"1m"</span>).PlaceHolder(<span class="string">"&lt;duration&gt;"</span>).SetValue(&amp;cfg.RemoteFlushDeadline)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"storage.remote.read-sample-limit"</span>, <span class="string">"Maximum overall number of samples to return via the remote read interface, in a single query. 0 means no limit. This limit is ignored for streamed response types."</span>).</span><br><span class="line">		Default(<span class="string">"5e7"</span>).IntVar(&amp;cfg.web.RemoteReadSampleLimit)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"storage.remote.read-concurrent-limit"</span>, <span class="string">"Maximum number of concurrent remote read calls. 0 means no limit."</span>).</span><br><span class="line">		Default(<span class="string">"10"</span>).IntVar(&amp;cfg.web.RemoteReadConcurrencyLimit)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"storage.remote.read-max-bytes-in-frame"</span>, <span class="string">"Maximum number of bytes in a single frame for streaming remote read response types before marshalling. Note that client might have limit on frame size as well. 1MB as recommended by protobuf by default."</span>).</span><br><span class="line">		Default(<span class="string">"1048576"</span>).IntVar(&amp;cfg.web.RemoteReadBytesInFrame)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"storage.exemplars.exemplars-limit"</span>, <span class="string">"[EXPERIMENTAL] Maximum number of exemplars to store in in-memory exemplar storage total. 0 disables the exemplar storage. This flag is effective only with --enable-feature=exemplar-storage."</span>).</span><br><span class="line">		Default(<span class="string">"100000"</span>).IntVar(&amp;cfg.tsdb.MaxExemplars)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// rules 文件允许设置的 for 字段的最大值</span></span><br><span class="line">	a.Flag(<span class="string">"rules.alert.for-outage-tolerance"</span>, <span class="string">"Max time to tolerate prometheus outage for restoring \"for\" state of alert."</span>).</span><br><span class="line">		Default(<span class="string">"1h"</span>).SetValue(&amp;cfg.outageTolerance)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"rules.alert.for-grace-period"</span>, <span class="string">"Minimum duration between alert and restored \"for\" state. This is maintained only for alerts with configured \"for\" time greater than grace period."</span>).</span><br><span class="line">		Default(<span class="string">"10m"</span>).SetValue(&amp;cfg.forGracePeriod)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 间隔多久向 am 重发一次告警信息</span></span><br><span class="line">	a.Flag(<span class="string">"rules.alert.resend-delay"</span>, <span class="string">"Minimum amount of time to wait before resending an alert to Alertmanager."</span>).</span><br><span class="line">		Default(<span class="string">"1m"</span>).SetValue(&amp;cfg.resendDelay)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"scrape.adjust-timestamps"</span>, <span class="string">"Adjust scrape timestamps by up to 2ms to align them to the intended schedule. See https://github.com/prometheus/prometheus/issues/7846 for more context. Experimental. This flag will be removed in a future release."</span>).</span><br><span class="line">		Hidden().Default(<span class="string">"true"</span>).BoolVar(&amp;scrape.AlignScrapeTimestamps)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// pending 状态的告警队列长度</span></span><br><span class="line">	a.Flag(<span class="string">"alertmanager.notification-queue-capacity"</span>, <span class="string">"The capacity of the queue for pending Alertmanager notifications."</span>).</span><br><span class="line">		Default(<span class="string">"10000"</span>).IntVar(&amp;cfg.notifier.QueueCapacity)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> Remove in Prometheus 3.0.</span></span><br><span class="line">	<span class="comment">// 发送给 am 告警的超时时长</span></span><br><span class="line">	alertmanagerTimeout := a.Flag(<span class="string">"alertmanager.timeout"</span>, <span class="string">"[DEPRECATED] This flag has no effect."</span>).Hidden().String()</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"query.lookback-delta"</span>, <span class="string">"The maximum lookback duration for retrieving metrics during expression evaluations and federation."</span>).</span><br><span class="line">		Default(<span class="string">"5m"</span>).SetValue(&amp;cfg.lookbackDelta)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 查询表达式超时时长，默认2分钟</span></span><br><span class="line">	a.Flag(<span class="string">"query.timeout"</span>, <span class="string">"Maximum time a query may take before being aborted."</span>).</span><br><span class="line">		Default(<span class="string">"2m"</span>).SetValue(&amp;cfg.queryTimeout)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 并发查询的数量，感觉 cpu 和内存资源比较充裕的话可以适当放大</span></span><br><span class="line">	a.Flag(<span class="string">"query.max-concurrency"</span>, <span class="string">"Maximum number of queries executed concurrently."</span>).</span><br><span class="line">		Default(<span class="string">"20"</span>).IntVar(&amp;cfg.queryConcurrency)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 一次查询最多加载到内存的样本数，也是最多返回的样本数</span></span><br><span class="line">	a.Flag(<span class="string">"query.max-samples"</span>, <span class="string">"Maximum number of samples a single query can load into memory. Note that queries will fail if they try to load more samples than this into memory, so this also limits the number of samples a query can return."</span>).</span><br><span class="line">		Default(<span class="string">"50000000"</span>).IntVar(&amp;cfg.queryMaxSamples)</span><br><span class="line"></span><br><span class="line">	a.Flag(<span class="string">"enable-feature"</span>, <span class="string">"Comma separated feature names to enable. Valid options: promql-at-modifier, promql-negative-offset, remote-write-receiver, exemplar-storage, expand-external-labels. See https://prometheus.io/docs/prometheus/latest/disabled_features/ for more details."</span>).</span><br><span class="line">		Default(<span class="string">""</span>).StringsVar(&amp;cfg.featureList)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加日志设置的标志位参数，有日志级别（[debug, info, warn, error]"）和日志格式（[logfmt, json]）</span></span><br><span class="line">	promlogflag.AddFlags(a, &amp;cfg.promlogConfig)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解析、校验参数</span></span><br><span class="line">	_, err := a.Parse(os.Args[<span class="number">1</span>:])</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Fprintln(os.Stderr, errors.Wrapf(err, <span class="string">"Error parsing commandline arguments"</span>))</span><br><span class="line">		a.Usage(os.Args[<span class="number">1</span>:])</span><br><span class="line">		os.Exit(<span class="number">2</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 根据配置文件初始化 logger</span></span><br><span class="line">	logger := promlog.New(&amp;cfg.promlogConfig)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := cfg.setFeatureListOptions(logger); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Fprintln(os.Stderr, errors.Wrapf(err, <span class="string">"Error parsing feature list"</span>))</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 检验配置参数</span></span><br><span class="line">	cfg.web.ExternalURL, err = computeExternalURL(cfg.prometheusURL, cfg.web.ListenAddress)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Fprintln(os.Stderr, errors.Wrapf(err, <span class="string">"parse external URL %q"</span>, cfg.prometheusURL))</span><br><span class="line">		os.Exit(<span class="number">2</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cfg.web.CORSOrigin, err = compileCORSRegexString(cfg.corsRegexString)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Fprintln(os.Stderr, errors.Wrapf(err, <span class="string">"could not compile CORS regex string %q"</span>, cfg.corsRegexString))</span><br><span class="line">		os.Exit(<span class="number">2</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> *alertmanagerTimeout != <span class="string">""</span> &#123;</span><br><span class="line">		level.Warn(logger).Log(<span class="string">"msg"</span>, <span class="string">"The flag --alertmanager.timeout has no effect and will be removed in the future."</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Throw error for invalid config before starting other components.</span></span><br><span class="line">	<span class="comment">// 校验命令行参数配置的 prometheus 配置文件是否有效，如果 配置文件（yml）为空就使用默认配置</span></span><br><span class="line">	<span class="comment">// 校验后并没有声明 config 对象并把解析结果赋值给它，这里仅仅是解析。</span></span><br><span class="line">	<span class="keyword">if</span> _, err := config.LoadFile(cfg.configFile, <span class="literal">false</span>, log.NewNopLogger()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		level.Error(logger).Log(<span class="string">"msg"</span>, fmt.Sprintf(<span class="string">"Error loading config (--config.file=%s)"</span>, cfg.configFile), <span class="string">"err"</span>, err)</span><br><span class="line">		os.Exit(<span class="number">2</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Now that the validity of the config is established, set the config</span></span><br><span class="line">	<span class="comment">// success metrics accordingly, although the config isn't really loaded</span></span><br><span class="line">	<span class="comment">// yet. This will happen later (including setting these metrics again),</span></span><br><span class="line">	<span class="comment">// but if we don't do it now, the metrics will stay at zero until the</span></span><br><span class="line">	<span class="comment">// startup procedure is complete, which might take long enough to</span></span><br><span class="line">	<span class="comment">// trigger alerts about an invalid config.</span></span><br><span class="line">	<span class="comment">// 配置文件的有效性已经确立，即便尚未加载配置，将自身的 metrics 里的 prometheus_config_last_reload_successful 设置为1。</span></span><br><span class="line">	<span class="comment">// 后面会加载配置并再次设置这个 metric，但是如果现在不做这一步，这个 metric 会一直为 0 直到启动过程完成，</span></span><br><span class="line">	<span class="comment">// prometheus_config_last_reload_successful 为 0 的时间也就是启动的时间足够长就可能触发配置无效的告警。</span></span><br><span class="line">	configSuccess.Set(<span class="number">1</span>)</span><br><span class="line">	configSuccessTime.SetToCurrentTime()</span><br><span class="line"></span><br><span class="line">	cfg.web.ReadTimeout = time.Duration(cfg.webTimeout)</span><br><span class="line">	<span class="comment">// Default -web.route-prefix to path of -web.external-url.</span></span><br><span class="line">	<span class="keyword">if</span> cfg.web.RoutePrefix == <span class="string">""</span> &#123;</span><br><span class="line">		cfg.web.RoutePrefix = cfg.web.ExternalURL.Path</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// RoutePrefix must always be at least '/'.</span></span><br><span class="line">	cfg.web.RoutePrefix = <span class="string">"/"</span> + strings.Trim(cfg.web.RoutePrefix, <span class="string">"/"</span>)</span><br><span class="line"></span><br><span class="line">	&#123; <span class="comment">// Time retention settings.</span></span><br><span class="line">		<span class="keyword">if</span> oldFlagRetentionDuration != <span class="number">0</span> &#123;</span><br><span class="line">			level.Warn(logger).Log(<span class="string">"deprecation_notice"</span>, <span class="string">"'storage.tsdb.retention' flag is deprecated use 'storage.tsdb.retention.time' instead."</span>)</span><br><span class="line">			cfg.tsdb.RetentionDuration = oldFlagRetentionDuration</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// When the new flag is set it takes precedence.</span></span><br><span class="line">		<span class="keyword">if</span> newFlagRetentionDuration != <span class="number">0</span> &#123;</span><br><span class="line">			cfg.tsdb.RetentionDuration = newFlagRetentionDuration</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> cfg.tsdb.RetentionDuration == <span class="number">0</span> &amp;&amp; cfg.tsdb.MaxBytes == <span class="number">0</span> &#123;</span><br><span class="line">			cfg.tsdb.RetentionDuration = defaultRetentionDuration</span><br><span class="line">			level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"No time or size retention was set so using the default time retention"</span>, <span class="string">"duration"</span>, defaultRetentionDuration)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Check for overflows. This limits our max retention to 100y.</span></span><br><span class="line">		<span class="comment">// 如果设置的时序数据保留时长溢出整数，就限制为 100 年。最大可设置的值为292y。</span></span><br><span class="line">		<span class="keyword">if</span> cfg.tsdb.RetentionDuration &lt; <span class="number">0</span> &#123;</span><br><span class="line">			y, err := model.ParseDuration(<span class="string">"100y"</span>)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="built_in">panic</span>(err)</span><br><span class="line">			&#125;</span><br><span class="line">			cfg.tsdb.RetentionDuration = y</span><br><span class="line">			level.Warn(logger).Log(<span class="string">"msg"</span>, <span class="string">"Time retention value is too high. Limiting to: "</span>+y.String())</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#123; <span class="comment">// Max block size  settings.</span></span><br><span class="line">		<span class="keyword">if</span> cfg.tsdb.MaxBlockDuration == <span class="number">0</span> &#123;</span><br><span class="line">			maxBlockDuration, err := model.ParseDuration(<span class="string">"31d"</span>)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="built_in">panic</span>(err)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// When the time retention is set and not too big use to define the max block duration.</span></span><br><span class="line">			<span class="keyword">if</span> cfg.tsdb.RetentionDuration != <span class="number">0</span> &amp;&amp; cfg.tsdb.RetentionDuration/<span class="number">10</span> &lt; maxBlockDuration &#123;</span><br><span class="line">				maxBlockDuration = cfg.tsdb.RetentionDuration / <span class="number">10</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			cfg.tsdb.MaxBlockDuration = maxBlockDuration</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置默认的指标估值时间间隔</span></span><br><span class="line">	noStepSubqueryInterval := &amp;safePromQLNoStepSubqueryInterval&#123;&#125;</span><br><span class="line">	noStepSubqueryInterval.Set(config.DefaultGlobalConfig.EvaluationInterval)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Above level 6, the k8s client would log bearer tokens in clear-text.</span></span><br><span class="line">	klog.ClampLevel(<span class="number">6</span>)</span><br><span class="line">	klog.SetLogger(log.With(logger, <span class="string">"component"</span>, <span class="string">"k8s_client_runtime"</span>))</span><br><span class="line">	klogv2.ClampLevel(<span class="number">6</span>)</span><br><span class="line">	klogv2.SetLogger(log.With(logger, <span class="string">"component"</span>, <span class="string">"k8s_client_runtime"</span>))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打印启动日志</span></span><br><span class="line">	level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Starting Prometheus"</span>, <span class="string">"version"</span>, version.Info())</span><br><span class="line">	<span class="comment">// 32位系统兼容性提示信息</span></span><br><span class="line">	<span class="keyword">if</span> bits.UintSize &lt; <span class="number">64</span> &#123;</span><br><span class="line">		level.Warn(logger).Log(<span class="string">"msg"</span>, <span class="string">"This Prometheus binary has not been compiled for a 64-bit architecture. Due to virtual memory constraints of 32-bit systems, it is highly recommended to switch to a 64-bit binary of Prometheus."</span>, <span class="string">"GOARCH"</span>, runtime.GOARCH)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打印系统信息日志</span></span><br><span class="line">	level.Info(logger).Log(<span class="string">"build_context"</span>, version.BuildContext())</span><br><span class="line">	level.Info(logger).Log(<span class="string">"host_details"</span>, prom_runtime.Uname())</span><br><span class="line">	level.Info(logger).Log(<span class="string">"fd_limits"</span>, prom_runtime.FdLimits())</span><br><span class="line">	level.Info(logger).Log(<span class="string">"vm_limits"</span>, prom_runtime.VMLimits())</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 声明和 scraper 和存储相关结构体变量</span></span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		localStorage  = &amp;readyStorage&#123;&#125;</span><br><span class="line">		scraper       = &amp;readyScrapeManager&#123;&#125;</span><br><span class="line">		remoteStorage = remote.NewStorage(log.With(logger, <span class="string">"component"</span>, <span class="string">"remote"</span>), prometheus.DefaultRegisterer, localStorage.StartTime, cfg.localStoragePath, time.Duration(cfg.RemoteFlushDeadline), scraper)</span><br><span class="line">		fanoutStorage = storage.NewFanout(logger, localStorage, remoteStorage)</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		<span class="comment">// cancel web 的 context</span></span><br><span class="line">		ctxWeb, cancelWeb = context.WithCancel(context.Background())</span><br><span class="line">		ctxRule           = context.Background()</span><br><span class="line"></span><br><span class="line">		<span class="comment">// notifier 是用于向 am 发送告警的</span></span><br><span class="line">		notifierManager = notifier.NewManager(&amp;cfg.notifier, log.With(logger, <span class="string">"component"</span>, <span class="string">"notifier"</span>))</span><br><span class="line"></span><br><span class="line">		<span class="comment">// cancel scrape 的 context</span></span><br><span class="line">		ctxScrape, cancelScrape = context.WithCancel(context.Background())</span><br><span class="line">		<span class="comment">// 声明 discovery manager，将其 context 设置为 scrape 的 context</span></span><br><span class="line">		discoveryManagerScrape  = discovery.NewManager(ctxScrape, log.With(logger, <span class="string">"component"</span>, <span class="string">"discovery manager scrape"</span>), discovery.Name(<span class="string">"scrape"</span>))</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 一共有两个 discovery.Manager 一个是上面的 scrape，一个是下面的 notify</span></span><br><span class="line">		ctxNotify, cancelNotify = context.WithCancel(context.Background())</span><br><span class="line">		discoveryManagerNotify  = discovery.NewManager(ctxNotify, log.With(logger, <span class="string">"component"</span>, <span class="string">"discovery manager notify"</span>), discovery.Name(<span class="string">"notify"</span>))</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 声明 scrapeManager，fanout Storage 是一个读写多个底层存储的代理</span></span><br><span class="line">		scrapeManager = scrape.NewManager(log.With(logger, <span class="string">"component"</span>, <span class="string">"scrape manager"</span>), fanoutStorage)</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 声明 promql 的引擎配置</span></span><br><span class="line">		opts = promql.EngineOpts&#123;</span><br><span class="line">			Logger:                   log.With(logger, <span class="string">"component"</span>, <span class="string">"query engine"</span>),</span><br><span class="line">			Reg:                      prometheus.DefaultRegisterer,</span><br><span class="line">			MaxSamples:               cfg.queryMaxSamples,</span><br><span class="line">			Timeout:                  time.Duration(cfg.queryTimeout),</span><br><span class="line">			ActiveQueryTracker:       promql.NewActiveQueryTracker(cfg.localStoragePath, cfg.queryConcurrency, log.With(logger, <span class="string">"component"</span>, <span class="string">"activeQueryTracker"</span>)),</span><br><span class="line">			LookbackDelta:            time.Duration(cfg.lookbackDelta),</span><br><span class="line">			NoStepSubqueryIntervalFn: noStepSubqueryInterval.Get,</span><br><span class="line">			EnableAtModifier:         cfg.enablePromQLAtModifier,</span><br><span class="line">			EnableNegativeOffset:     cfg.enablePromQLNegativeOffset,</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//  声明 promql 的 quieryEngine</span></span><br><span class="line">		queryEngine = promql.NewEngine(opts)</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 声明 ruleManager</span></span><br><span class="line">		ruleManager = rules.NewManager(&amp;rules.ManagerOptions&#123;</span><br><span class="line">			Appendable:      fanoutStorage,</span><br><span class="line">			Queryable:       localStorage,</span><br><span class="line">			QueryFunc:       rules.EngineQueryFunc(queryEngine, fanoutStorage),</span><br><span class="line">			NotifyFunc:      sendAlerts(notifierManager, cfg.web.ExternalURL.String()),</span><br><span class="line">			Context:         ctxRule,</span><br><span class="line">			ExternalURL:     cfg.web.ExternalURL,</span><br><span class="line">			Registerer:      prometheus.DefaultRegisterer,</span><br><span class="line">			Logger:          log.With(logger, <span class="string">"component"</span>, <span class="string">"rule manager"</span>),</span><br><span class="line">			OutageTolerance: time.Duration(cfg.outageTolerance),</span><br><span class="line">			ForGracePeriod:  time.Duration(cfg.forGracePeriod),</span><br><span class="line">			ResendDelay:     time.Duration(cfg.resendDelay),</span><br><span class="line">		&#125;)</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置 scraper 的 scrapeManager 字段值</span></span><br><span class="line">	scraper.Set(scrapeManager)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 从命令行解析的配置项都赋值给 cfg.web 的配置项</span></span><br><span class="line">	cfg.web.Context = ctxWeb</span><br><span class="line">	cfg.web.TSDBRetentionDuration = cfg.tsdb.RetentionDuration</span><br><span class="line">	cfg.web.TSDBMaxBytes = cfg.tsdb.MaxBytes</span><br><span class="line">	cfg.web.TSDBDir = cfg.localStoragePath</span><br><span class="line">	cfg.web.LocalStorage = localStorage</span><br><span class="line">	cfg.web.Storage = fanoutStorage</span><br><span class="line">	cfg.web.ExemplarStorage = localStorage</span><br><span class="line">	cfg.web.QueryEngine = queryEngine</span><br><span class="line">	cfg.web.ScrapeManager = scrapeManager</span><br><span class="line">	cfg.web.RuleManager = ruleManager</span><br><span class="line">	cfg.web.Notifier = notifierManager</span><br><span class="line">	cfg.web.LookbackDelta = time.Duration(cfg.lookbackDelta)</span><br><span class="line"></span><br><span class="line">	cfg.web.Version = &amp;web.PrometheusVersion&#123;</span><br><span class="line">		Version:   version.Version,</span><br><span class="line">		Revision:  version.Revision,</span><br><span class="line">		Branch:    version.Branch,</span><br><span class="line">		BuildUser: version.BuildUser,</span><br><span class="line">		BuildDate: version.BuildDate,</span><br><span class="line">		GoVersion: version.GoVersion,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 把 Prometheus 启动的配置参数都记录在这个 map 里</span></span><br><span class="line">	cfg.web.Flags = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Exclude kingpin default flags to expose only Prometheus ones.</span></span><br><span class="line">	boilerplateFlags := kingpin.New(<span class="string">""</span>, <span class="string">""</span>).Version(<span class="string">""</span>)</span><br><span class="line">	<span class="keyword">for</span> _, f := <span class="keyword">range</span> a.Model().Flags &#123;</span><br><span class="line">		<span class="keyword">if</span> boilerplateFlags.GetFlag(f.Name) != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		cfg.web.Flags[f.Name] = f.Value.String()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Depends on cfg.web.ScrapeManager so needs to be after cfg.web.ScrapeManager = scrapeManager.</span></span><br><span class="line">	webHandler := web.New(log.With(logger, <span class="string">"component"</span>, <span class="string">"web"</span>), &amp;cfg.web)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Monitor outgoing connections on default transport with conntrack.</span></span><br><span class="line">	http.DefaultTransport.(*http.Transport).DialContext = conntrack.NewDialContextFunc(</span><br><span class="line">		conntrack.DialWithTracing(),</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 声明多个 reloader</span></span><br><span class="line">	reloaders := []reloader&#123;</span><br><span class="line">		&#123;</span><br><span class="line">			name:     <span class="string">"remote_storage"</span>,</span><br><span class="line">			reloader: remoteStorage.ApplyConfig,</span><br><span class="line">		&#125;, &#123;</span><br><span class="line">			name:     <span class="string">"web_handler"</span>,</span><br><span class="line">			reloader: webHandler.ApplyConfig,</span><br><span class="line">		&#125;, &#123;</span><br><span class="line">			name: <span class="string">"query_engine"</span>,</span><br><span class="line">			reloader: <span class="function"><span class="keyword">func</span><span class="params">(cfg *config.Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				<span class="keyword">if</span> cfg.GlobalConfig.QueryLogFile == <span class="string">""</span> &#123;</span><br><span class="line">					queryEngine.SetQueryLogger(<span class="literal">nil</span>)</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				l, err := logging.NewJSONFileLogger(cfg.GlobalConfig.QueryLogFile)</span><br><span class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> err</span><br><span class="line">				&#125;</span><br><span class="line">				queryEngine.SetQueryLogger(l)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;, &#123;</span><br><span class="line">			<span class="comment">// The Scrape and notifier managers need to reload before the Discovery manager as</span></span><br><span class="line">			<span class="comment">// they need to read the most updated config when receiving the new targets list.</span></span><br><span class="line">			<span class="comment">// scrape 和 notifier manager 要在 discovery manager 之前重新加载，因为它们要在获取新的监控目标之前重新配置。</span></span><br><span class="line">			name:     <span class="string">"scrape"</span>,</span><br><span class="line">			reloader: scrapeManager.ApplyConfig,</span><br><span class="line">		&#125;, &#123;</span><br><span class="line">			name: <span class="string">"scrape_sd"</span>,</span><br><span class="line">			reloader: <span class="function"><span class="keyword">func</span><span class="params">(cfg *config.Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				c := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]discovery.Configs)</span><br><span class="line">				<span class="keyword">for</span> _, v := <span class="keyword">range</span> cfg.ScrapeConfigs &#123;</span><br><span class="line">					c[v.JobName] = v.ServiceDiscoveryConfigs</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> discoveryManagerScrape.ApplyConfig(c)</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;, &#123;</span><br><span class="line">			name:     <span class="string">"notify"</span>,</span><br><span class="line">			reloader: notifierManager.ApplyConfig,</span><br><span class="line">		&#125;, &#123;</span><br><span class="line">			name: <span class="string">"notify_sd"</span>,</span><br><span class="line">			reloader: <span class="function"><span class="keyword">func</span><span class="params">(cfg *config.Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				c := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]discovery.Configs)</span><br><span class="line">				<span class="keyword">for</span> k, v := <span class="keyword">range</span> cfg.AlertingConfig.AlertmanagerConfigs.ToMap() &#123;</span><br><span class="line">					c[k] = v.ServiceDiscoveryConfigs</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> discoveryManagerNotify.ApplyConfig(c)</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;, &#123;</span><br><span class="line">			name: <span class="string">"rules"</span>,</span><br><span class="line">			reloader: <span class="function"><span class="keyword">func</span><span class="params">(cfg *config.Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				<span class="comment">// Get all rule files matching the configuration paths.</span></span><br><span class="line">				<span class="keyword">var</span> files []<span class="keyword">string</span></span><br><span class="line">				<span class="keyword">for</span> _, pat := <span class="keyword">range</span> cfg.RuleFiles &#123;</span><br><span class="line">					fs, err := filepath.Glob(pat)</span><br><span class="line">					<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">						<span class="comment">// The only error can be a bad pattern.</span></span><br><span class="line">						<span class="keyword">return</span> errors.Wrapf(err, <span class="string">"error retrieving rule files for %s"</span>, pat)</span><br><span class="line">					&#125;</span><br><span class="line">					files = <span class="built_in">append</span>(files, fs...)</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> ruleManager.Update(</span><br><span class="line">					time.Duration(cfg.GlobalConfig.EvaluationInterval),</span><br><span class="line">					files,</span><br><span class="line">					cfg.GlobalConfig.ExternalLabels,</span><br><span class="line">				)</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 注册自身的 metric</span></span><br><span class="line">	prometheus.MustRegister(configSuccess)</span><br><span class="line">	prometheus.MustRegister(configSuccessTime)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Start all components while we wait for TSDB to open but only load</span></span><br><span class="line">	<span class="comment">// initial config and mark ourselves as ready after it completed.</span></span><br><span class="line">	<span class="comment">// 在等待开启 TSDB 的时候启动所有的组件，进加载初始配置，全部启动完成后标记为 ready。</span></span><br><span class="line">	<span class="comment">// 这个 channel 初始化 DB 完成的信号</span></span><br><span class="line">	dbOpen := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// sync.Once is used to make sure we can close the channel at different execution stages(SIGTERM or when the config is loaded).</span></span><br><span class="line">	<span class="comment">// sync.Once 用于确保在不同的执行阶段（SIGTERM 或加载完配置）关闭 channel。</span></span><br><span class="line">	<span class="keyword">type</span> closeOnce <span class="keyword">struct</span> &#123;</span><br><span class="line">		C     <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">		once  sync.Once</span><br><span class="line">		Close <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	&#125;</span></span><br><span class="line"><span class="function">	// <span class="title">Wait</span> <span class="title">until</span> <span class="title">the</span> <span class="title">server</span> <span class="title">is</span> <span class="title">ready</span> <span class="title">to</span> <span class="title">handle</span> <span class="title">reloading</span>.</span></span><br><span class="line"><span class="function">	// 等待直到 <span class="title">server</span> 准备好处理配置重加载。</span></span><br><span class="line"><span class="function">	<span class="title">reloadReady</span> := &amp;<span class="title">closeOnce</span></span>&#123;</span><br><span class="line">		C: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">	&#125;</span><br><span class="line">	reloadReady.Close = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		reloadReady.once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			<span class="built_in">close</span>(reloadReady.C)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 启动 jaeger 链路追踪</span></span><br><span class="line">	closer, err := initTracing(logger)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		level.Error(logger).Log(<span class="string">"msg"</span>, <span class="string">"Unable to init tracing"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">		os.Exit(<span class="number">2</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> closer.Close()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 启动 web 服务</span></span><br><span class="line">	listener, err := webHandler.Listener()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		level.Error(logger).Log(<span class="string">"msg"</span>, <span class="string">"Unable to start web listener"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 验证额外的 web 配置，比如 tsl</span></span><br><span class="line">	err = toolkit_web.Validate(*webConfig)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		level.Error(logger).Log(<span class="string">"msg"</span>, <span class="string">"Unable to validate web configuration file"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// oklog.run.Group 和 google errgroup 功能相近，维护一组并发任务的执行。</span></span><br><span class="line">	<span class="keyword">var</span> g run.Group</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Termination handler.</span></span><br><span class="line">		term := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">		signal.Notify(term, os.Interrupt, syscall.SIGTERM)</span><br><span class="line">		cancel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">		<span class="comment">// 接收信号退出</span></span><br><span class="line">		g.Add(</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				<span class="comment">// Don't forget to release the reloadReady channel so that waiting blocks can exit normally.</span></span><br><span class="line">				<span class="keyword">select</span> &#123;</span><br><span class="line">				<span class="keyword">case</span> &lt;-term:</span><br><span class="line">					level.Warn(logger).Log(<span class="string">"msg"</span>, <span class="string">"Received SIGTERM, exiting gracefully..."</span>)</span><br><span class="line">					reloadReady.Close()</span><br><span class="line">				<span class="keyword">case</span> &lt;-webHandler.Quit():</span><br><span class="line">					level.Warn(logger).Log(<span class="string">"msg"</span>, <span class="string">"Received termination request via web service, exiting gracefully..."</span>)</span><br><span class="line">				<span class="keyword">case</span> &lt;-cancel:</span><br><span class="line">					reloadReady.Close()</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">				<span class="built_in">close</span>(cancel)</span><br><span class="line">			&#125;,</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Scrape discovery manager.</span></span><br><span class="line">		g.Add(</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				err := discoveryManagerScrape.Run()</span><br><span class="line">				level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Scrape discovery manager stopped"</span>)</span><br><span class="line">				<span class="keyword">return</span> err</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">				level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Stopping scrape discovery manager..."</span>)</span><br><span class="line">				cancelScrape()</span><br><span class="line">			&#125;,</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Notify discovery manager.</span></span><br><span class="line">		g.Add(</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				err := discoveryManagerNotify.Run()</span><br><span class="line">				level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Notify discovery manager stopped"</span>)</span><br><span class="line">				<span class="keyword">return</span> err</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">				level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Stopping notify discovery manager..."</span>)</span><br><span class="line">				cancelNotify()</span><br><span class="line">			&#125;,</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Scrape manager.</span></span><br><span class="line">		g.Add(</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				<span class="comment">// When the scrape manager receives a new targets list</span></span><br><span class="line">				<span class="comment">// it needs to read a valid config for each job.</span></span><br><span class="line">				<span class="comment">// It depends on the config being in sync with the discovery manager so</span></span><br><span class="line">				<span class="comment">// we wait until the config is fully loaded.</span></span><br><span class="line">				<span class="comment">// scrape manager 获取到新的抓取目标列表时，它需要读取每个 job 的合法的配置。</span></span><br><span class="line">				<span class="comment">// 这依赖于正在被 discovery manager 同步的配置文件，所以要等到配置加载完成。</span></span><br><span class="line">				&lt;-reloadReady.C</span><br><span class="line"></span><br><span class="line">				err := scrapeManager.Run(discoveryManagerScrape.SyncCh())</span><br><span class="line">				level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Scrape manager stopped"</span>)</span><br><span class="line">				<span class="keyword">return</span> err</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">				<span class="comment">// Scrape manager needs to be stopped before closing the local TSDB</span></span><br><span class="line">				<span class="comment">// so that it doesn't try to write samples to a closed storage.</span></span><br><span class="line">				level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Stopping scrape manager..."</span>)</span><br><span class="line">				scrapeManager.Stop()</span><br><span class="line">			&#125;,</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Reload handler.</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// Make sure that sighup handler is registered with a redirect to the channel before the potentially</span></span><br><span class="line">		<span class="comment">// long and synchronous tsdb init.</span></span><br><span class="line">		<span class="comment">// tsdb 初始化时间可能很长，确保 sighup 处理函数在这之前注册完成。</span></span><br><span class="line">		hup := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">		signal.Notify(hup, syscall.SIGHUP)</span><br><span class="line">		cancel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">		g.Add(</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				&lt;-reloadReady.C</span><br><span class="line"></span><br><span class="line">				<span class="keyword">for</span> &#123;</span><br><span class="line">					<span class="keyword">select</span> &#123;</span><br><span class="line">					<span class="keyword">case</span> &lt;-hup:</span><br><span class="line">						<span class="keyword">if</span> err := reloadConfig(cfg.configFile, cfg.enableExpandExternalLabels, logger, noStepSubqueryInterval, reloaders...); err != <span class="literal">nil</span> &#123;</span><br><span class="line">							level.Error(logger).Log(<span class="string">"msg"</span>, <span class="string">"Error reloading config"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">						&#125;</span><br><span class="line">					<span class="keyword">case</span> rc := &lt;-webHandler.Reload():</span><br><span class="line">						<span class="keyword">if</span> err := reloadConfig(cfg.configFile, cfg.enableExpandExternalLabels, logger, noStepSubqueryInterval, reloaders...); err != <span class="literal">nil</span> &#123;</span><br><span class="line">							level.Error(logger).Log(<span class="string">"msg"</span>, <span class="string">"Error reloading config"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">							rc &lt;- err</span><br><span class="line">						&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">							rc &lt;- <span class="literal">nil</span></span><br><span class="line">						&#125;</span><br><span class="line">					<span class="keyword">case</span> &lt;-cancel:</span><br><span class="line">						<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">				<span class="comment">// Wait for any in-progress reloads to complete to avoid</span></span><br><span class="line">				<span class="comment">// reloading things after they have been shutdown.</span></span><br><span class="line">				cancel &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Initial configuration loading.</span></span><br><span class="line">		cancel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">		g.Add(</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				<span class="keyword">select</span> &#123;</span><br><span class="line">				<span class="keyword">case</span> &lt;-dbOpen:</span><br><span class="line">				<span class="comment">// In case a shutdown is initiated before the dbOpen is released</span></span><br><span class="line">				<span class="keyword">case</span> &lt;-cancel:</span><br><span class="line">					reloadReady.Close()</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> err := reloadConfig(cfg.configFile, cfg.enableExpandExternalLabels, logger, noStepSubqueryInterval, reloaders...); err != <span class="literal">nil</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> errors.Wrapf(err, <span class="string">"error loading config from %q"</span>, cfg.configFile)</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				reloadReady.Close()</span><br><span class="line"></span><br><span class="line">				webHandler.Ready()</span><br><span class="line">				level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Server is ready to receive web requests."</span>)</span><br><span class="line">				&lt;-cancel</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">				<span class="built_in">close</span>(cancel)</span><br><span class="line">			&#125;,</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Rule manager.</span></span><br><span class="line">		g.Add(</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				&lt;-reloadReady.C</span><br><span class="line">				ruleManager.Run()</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">				ruleManager.Stop()</span><br><span class="line">			&#125;,</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// TSDB.</span></span><br><span class="line">		opts := cfg.tsdb.ToTSDBOptions()</span><br><span class="line">		cancel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">		g.Add(</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Starting TSDB ..."</span>)</span><br><span class="line">				<span class="keyword">if</span> cfg.tsdb.WALSegmentSize != <span class="number">0</span> &#123;</span><br><span class="line">					<span class="keyword">if</span> cfg.tsdb.WALSegmentSize &lt; <span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span> || cfg.tsdb.WALSegmentSize &gt; <span class="number">256</span>*<span class="number">1024</span>*<span class="number">1024</span> &#123;</span><br><span class="line">						<span class="keyword">return</span> errors.New(<span class="string">"flag 'storage.tsdb.wal-segment-size' must be set between 10MB and 256MB"</span>)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> cfg.tsdb.MaxBlockChunkSegmentSize != <span class="number">0</span> &#123;</span><br><span class="line">					<span class="keyword">if</span> cfg.tsdb.MaxBlockChunkSegmentSize &lt; <span class="number">1024</span>*<span class="number">1024</span> &#123;</span><br><span class="line">						<span class="keyword">return</span> errors.New(<span class="string">"flag 'storage.tsdb.max-block-chunk-segment-size' must be set over 1MB"</span>)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				db, err := openDBWithMetrics(</span><br><span class="line">					cfg.localStoragePath,</span><br><span class="line">					logger,</span><br><span class="line">					prometheus.DefaultRegisterer,</span><br><span class="line">					&amp;opts,</span><br><span class="line">				)</span><br><span class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> errors.Wrapf(err, <span class="string">"opening storage failed"</span>)</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">switch</span> fsType := prom_runtime.Statfs(cfg.localStoragePath); fsType &#123;</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"NFS_SUPER_MAGIC"</span>:</span><br><span class="line">					level.Warn(logger).Log(<span class="string">"fs_type"</span>, fsType, <span class="string">"msg"</span>, <span class="string">"This filesystem is not supported and may lead to data corruption and data loss. Please carefully read https://prometheus.io/docs/prometheus/latest/storage/ to learn more about supported filesystems."</span>)</span><br><span class="line">				<span class="keyword">default</span>:</span><br><span class="line">					level.Info(logger).Log(<span class="string">"fs_type"</span>, fsType)</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"TSDB started"</span>)</span><br><span class="line">				level.Debug(logger).Log(<span class="string">"msg"</span>, <span class="string">"TSDB options"</span>,</span><br><span class="line">					<span class="string">"MinBlockDuration"</span>, cfg.tsdb.MinBlockDuration,</span><br><span class="line">					<span class="string">"MaxBlockDuration"</span>, cfg.tsdb.MaxBlockDuration,</span><br><span class="line">					<span class="string">"MaxBytes"</span>, cfg.tsdb.MaxBytes,</span><br><span class="line">					<span class="string">"NoLockfile"</span>, cfg.tsdb.NoLockfile,</span><br><span class="line">					<span class="string">"RetentionDuration"</span>, cfg.tsdb.RetentionDuration,</span><br><span class="line">					<span class="string">"WALSegmentSize"</span>, cfg.tsdb.WALSegmentSize,</span><br><span class="line">					<span class="string">"AllowOverlappingBlocks"</span>, cfg.tsdb.AllowOverlappingBlocks,</span><br><span class="line">					<span class="string">"WALCompression"</span>, cfg.tsdb.WALCompression,</span><br><span class="line">				)</span><br><span class="line"></span><br><span class="line">				startTimeMargin := <span class="keyword">int64</span>(<span class="number">2</span> * time.Duration(cfg.tsdb.MinBlockDuration).Seconds() * <span class="number">1000</span>)</span><br><span class="line">				localStorage.Set(db, startTimeMargin)</span><br><span class="line">				<span class="built_in">close</span>(dbOpen)</span><br><span class="line">				&lt;-cancel</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">				<span class="keyword">if</span> err := fanoutStorage.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">					level.Error(logger).Log(<span class="string">"msg"</span>, <span class="string">"Error stopping storage"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">close</span>(cancel)</span><br><span class="line">			&#125;,</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Web handler.</span></span><br><span class="line">		g.Add(</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				<span class="keyword">if</span> err := webHandler.Run(ctxWeb, listener, *webConfig); err != <span class="literal">nil</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> errors.Wrapf(err, <span class="string">"error starting web server"</span>)</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">				cancelWeb()</span><br><span class="line">			&#125;,</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Notifier.</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// Calling notifier.Stop() before ruleManager.Stop() will cause a panic if the ruleManager isn't running,</span></span><br><span class="line">		<span class="comment">// so keep this interrupt after the ruleManager.Stop().</span></span><br><span class="line">		<span class="comment">// 如果 ruleManager不在运行，在调用 ruleManager.Stop() 之前调用 notifier.Stop() 会引发 pannic，</span></span><br><span class="line">		<span class="comment">// 所以确保在 ruleManager.Stop() 中断 notifier。</span></span><br><span class="line">		g.Add(</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">				<span class="comment">// When the notifier manager receives a new targets list</span></span><br><span class="line">				<span class="comment">// it needs to read a valid config for each job.</span></span><br><span class="line">				<span class="comment">// It depends on the config being in sync with the discovery manager</span></span><br><span class="line">				<span class="comment">// so we wait until the config is fully loaded.</span></span><br><span class="line">				&lt;-reloadReady.C</span><br><span class="line"></span><br><span class="line">				notifierManager.Run(discoveryManagerNotify.SyncCh())</span><br><span class="line">				level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Notifier manager stopped"</span>)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">				notifierManager.Stop()</span><br><span class="line">			&#125;,</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err := g.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		level.Error(logger).Log(<span class="string">"err"</span>, err)</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"See you next time!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">openDBWithMetrics</span><span class="params">(dir <span class="keyword">string</span>, logger log.Logger, reg prometheus.Registerer, opts *tsdb.Options)</span> <span class="params">(*tsdb.DB, error)</span></span> &#123;</span><br><span class="line">	db, err := tsdb.Open(</span><br><span class="line">		dir,</span><br><span class="line">		log.With(logger, <span class="string">"component"</span>, <span class="string">"tsdb"</span>),</span><br><span class="line">		reg,</span><br><span class="line">		opts,</span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	reg.MustRegister(</span><br><span class="line">		prometheus.NewGaugeFunc(prometheus.GaugeOpts&#123;</span><br><span class="line">			Name: <span class="string">"prometheus_tsdb_lowest_timestamp_seconds"</span>,</span><br><span class="line">			Help: <span class="string">"Lowest timestamp value stored in the database."</span>,</span><br><span class="line">		&#125;, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">			bb := db.Blocks()</span><br><span class="line">			<span class="keyword">if</span> <span class="built_in">len</span>(bb) == <span class="number">0</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">float64</span>(db.Head().MinTime() / <span class="number">1000</span>)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">float64</span>(db.Blocks()[<span class="number">0</span>].Meta().MinTime / <span class="number">1000</span>)</span><br><span class="line">		&#125;), prometheus.NewGaugeFunc(prometheus.GaugeOpts&#123;</span><br><span class="line">			Name: <span class="string">"prometheus_tsdb_head_min_time_seconds"</span>,</span><br><span class="line">			Help: <span class="string">"Minimum time bound of the head block."</span>,</span><br><span class="line">		&#125;, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">float64</span></span> &#123; <span class="keyword">return</span> <span class="keyword">float64</span>(db.Head().MinTime() / <span class="number">1000</span>) &#125;),</span><br><span class="line">		prometheus.NewGaugeFunc(prometheus.GaugeOpts&#123;</span><br><span class="line">			Name: <span class="string">"prometheus_tsdb_head_max_time_seconds"</span>,</span><br><span class="line">			Help: <span class="string">"Maximum timestamp of the head block."</span>,</span><br><span class="line">		&#125;, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">float64</span></span> &#123; <span class="keyword">return</span> <span class="keyword">float64</span>(db.Head().MaxTime() / <span class="number">1000</span>) &#125;),</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> db, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> safePromQLNoStepSubqueryInterval <span class="keyword">struct</span> &#123;</span><br><span class="line">	value atomic.Int64</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">durationToInt64Millis</span><span class="params">(d time.Duration)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">int64</span>(d / time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *safePromQLNoStepSubqueryInterval)</span> <span class="title">Set</span><span class="params">(ev model.Duration)</span></span> &#123;</span><br><span class="line">	i.value.Store(durationToInt64Millis(time.Duration(ev)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *safePromQLNoStepSubqueryInterval)</span> <span class="title">Get</span><span class="params">(<span class="keyword">int64</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> i.value.Load()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> reloader <span class="keyword">struct</span> &#123;</span><br><span class="line">	name     <span class="keyword">string</span></span><br><span class="line">	reloader <span class="function"><span class="keyword">func</span><span class="params">(*config.Config)</span> <span class="title">error</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">reloadConfig</span><span class="params">(filename <span class="keyword">string</span>, expandExternalLabels <span class="keyword">bool</span>, logger log.Logger, noStepSuqueryInterval *safePromQLNoStepSubqueryInterval, rls ...reloader)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">	start := time.Now()</span><br><span class="line">	timings := []<span class="keyword">interface</span>&#123;&#125;&#123;&#125;</span><br><span class="line">	level.Info(logger).Log(<span class="string">"msg"</span>, <span class="string">"Loading configuration file"</span>, <span class="string">"filename"</span>, filename)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">			configSuccess.Set(<span class="number">1</span>)</span><br><span class="line">			configSuccessTime.SetToCurrentTime()</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			configSuccess.Set(<span class="number">0</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	conf, err := config.LoadFile(filename, expandExternalLabels, logger)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> errors.Wrapf(err, <span class="string">"couldn't load configuration (--config.file=%q)"</span>, filename)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	failed := <span class="literal">false</span></span><br><span class="line">	<span class="keyword">for</span> _, rl := <span class="keyword">range</span> rls &#123;</span><br><span class="line">		rstart := time.Now()</span><br><span class="line">		<span class="keyword">if</span> err := rl.reloader(conf); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			level.Error(logger).Log(<span class="string">"msg"</span>, <span class="string">"Failed to apply configuration"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">			failed = <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">		timings = <span class="built_in">append</span>(timings, rl.name, time.Since(rstart))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> failed &#123;</span><br><span class="line">		<span class="keyword">return</span> errors.Errorf(<span class="string">"one or more errors occurred while applying the new configuration (--config.file=%q)"</span>, filename)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	noStepSuqueryInterval.Set(conf.GlobalConfig.EvaluationInterval)</span><br><span class="line">	l := []<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">"msg"</span>, <span class="string">"Completed loading of configuration file"</span>, <span class="string">"filename"</span>, filename, <span class="string">"totalDuration"</span>, time.Since(start)&#125;</span><br><span class="line">	level.Info(logger).Log(<span class="built_in">append</span>(l, timings...)...)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startsOrEndsWithQuote</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> strings.HasPrefix(s, <span class="string">"\""</span>) || strings.HasPrefix(s, <span class="string">"'"</span>) ||</span><br><span class="line">		strings.HasSuffix(s, <span class="string">"\""</span>) || strings.HasSuffix(s, <span class="string">"'"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compileCORSRegexString compiles given string and adds anchors</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compileCORSRegexString</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(*regexp.Regexp, error)</span></span> &#123;</span><br><span class="line">	r, err := relabel.NewRegexp(s)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r.Regexp, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// computeExternalURL computes a sanitized external URL from a raw input. It infers unset</span></span><br><span class="line"><span class="comment">// URL parts from the OS and the given listen address.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">computeExternalURL</span><span class="params">(u, listenAddr <span class="keyword">string</span>)</span> <span class="params">(*url.URL, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> u == <span class="string">""</span> &#123;</span><br><span class="line">		hostname, err := os.Hostname()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">		&#125;</span><br><span class="line">		_, port, err := net.SplitHostPort(listenAddr)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">		&#125;</span><br><span class="line">		u = fmt.Sprintf(<span class="string">"http://%s:%s/"</span>, hostname, port)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> startsOrEndsWithQuote(u) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"URL must not begin or end with quotes"</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	eu, err := url.Parse(u)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ppref := strings.TrimRight(eu.Path, <span class="string">"/"</span>)</span><br><span class="line">	<span class="keyword">if</span> ppref != <span class="string">""</span> &amp;&amp; !strings.HasPrefix(ppref, <span class="string">"/"</span>) &#123;</span><br><span class="line">		ppref = <span class="string">"/"</span> + ppref</span><br><span class="line">	&#125;</span><br><span class="line">	eu.Path = ppref</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> eu, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> sender <span class="keyword">interface</span> &#123;</span><br><span class="line">	Send(alerts ...*notifier.Alert)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sendAlerts implements the rules.NotifyFunc for a Notifier.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendAlerts</span><span class="params">(s sender, externalURL <span class="keyword">string</span>)</span> <span class="title">rules</span>.<span class="title">NotifyFunc</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, expr <span class="keyword">string</span>, alerts ...*rules.Alert)</span></span> &#123;</span><br><span class="line">		<span class="keyword">var</span> res []*notifier.Alert</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> _, alert := <span class="keyword">range</span> alerts &#123;</span><br><span class="line">			a := &amp;notifier.Alert&#123;</span><br><span class="line">				StartsAt:     alert.FiredAt,</span><br><span class="line">				Labels:       alert.Labels,</span><br><span class="line">				Annotations:  alert.Annotations,</span><br><span class="line">				GeneratorURL: externalURL + strutil.TableLinkForExpression(expr),</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> !alert.ResolvedAt.IsZero() &#123;</span><br><span class="line">				a.EndsAt = alert.ResolvedAt</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				a.EndsAt = alert.ValidUntil</span><br><span class="line">			&#125;</span><br><span class="line">			res = <span class="built_in">append</span>(res, a)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(alerts) &gt; <span class="number">0</span> &#123;</span><br><span class="line">			s.Send(res...)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// readyStorage implements the Storage interface while allowing to set the actual</span></span><br><span class="line"><span class="comment">// storage at a later point in time.</span></span><br><span class="line"><span class="keyword">type</span> readyStorage <span class="keyword">struct</span> &#123;</span><br><span class="line">	mtx             sync.RWMutex</span><br><span class="line">	db              *tsdb.DB</span><br><span class="line">	startTimeMargin <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the storage.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *readyStorage)</span> <span class="title">Set</span><span class="params">(db *tsdb.DB, startTimeMargin <span class="keyword">int64</span>)</span></span> &#123;</span><br><span class="line">	s.mtx.Lock()</span><br><span class="line">	<span class="keyword">defer</span> s.mtx.Unlock()</span><br><span class="line"></span><br><span class="line">	s.db = db</span><br><span class="line">	s.startTimeMargin = startTimeMargin</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get is internal, you should use readyStorage as the front implementation layer.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *readyStorage)</span> <span class="title">get</span><span class="params">()</span> *<span class="title">tsdb</span>.<span class="title">DB</span></span> &#123;</span><br><span class="line">	s.mtx.RLock()</span><br><span class="line">	x := s.db</span><br><span class="line">	s.mtx.RUnlock()</span><br><span class="line">	<span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StartTime implements the Storage interface.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *readyStorage)</span> <span class="title">StartTime</span><span class="params">()</span> <span class="params">(<span class="keyword">int64</span>, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x := s.get(); x != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> startTime <span class="keyword">int64</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(x.Blocks()) &gt; <span class="number">0</span> &#123;</span><br><span class="line">			startTime = x.Blocks()[<span class="number">0</span>].Meta().MinTime</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			startTime = time.Now().Unix() * <span class="number">1000</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// Add a safety margin as it may take a few minutes for everything to spin up.</span></span><br><span class="line">		<span class="keyword">return</span> startTime + s.startTimeMargin, <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> math.MaxInt64, tsdb.ErrNotReady</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Querier implements the Storage interface.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *readyStorage)</span> <span class="title">Querier</span><span class="params">(ctx context.Context, mint, maxt <span class="keyword">int64</span>)</span> <span class="params">(storage.Querier, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x := s.get(); x != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x.Querier(ctx, mint, maxt)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, tsdb.ErrNotReady</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChunkQuerier implements the Storage interface.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *readyStorage)</span> <span class="title">ChunkQuerier</span><span class="params">(ctx context.Context, mint, maxt <span class="keyword">int64</span>)</span> <span class="params">(storage.ChunkQuerier, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x := s.get(); x != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x.ChunkQuerier(ctx, mint, maxt)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, tsdb.ErrNotReady</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *readyStorage)</span> <span class="title">ExemplarQuerier</span><span class="params">(ctx context.Context)</span> <span class="params">(storage.ExemplarQuerier, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x := s.get(); x != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x.ExemplarQuerier(ctx)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, tsdb.ErrNotReady</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Appender implements the Storage interface.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *readyStorage)</span> <span class="title">Appender</span><span class="params">(ctx context.Context)</span> <span class="title">storage</span>.<span class="title">Appender</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x := s.get(); x != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x.Appender(ctx)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> notReadyAppender&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> notReadyAppender <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n notReadyAppender)</span> <span class="title">Append</span><span class="params">(ref <span class="keyword">uint64</span>, l labels.Labels, t <span class="keyword">int64</span>, v <span class="keyword">float64</span>)</span> <span class="params">(<span class="keyword">uint64</span>, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>, tsdb.ErrNotReady</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n notReadyAppender)</span> <span class="title">AppendExemplar</span><span class="params">(ref <span class="keyword">uint64</span>, l labels.Labels, e exemplar.Exemplar)</span> <span class="params">(<span class="keyword">uint64</span>, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>, tsdb.ErrNotReady</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n notReadyAppender)</span> <span class="title">Commit</span><span class="params">()</span> <span class="title">error</span></span> &#123; <span class="keyword">return</span> tsdb.ErrNotReady &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n notReadyAppender)</span> <span class="title">Rollback</span><span class="params">()</span> <span class="title">error</span></span> &#123; <span class="keyword">return</span> tsdb.ErrNotReady &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Close implements the Storage interface.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *readyStorage)</span> <span class="title">Close</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x := s.get(); x != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x.Close()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CleanTombstones implements the api_v1.TSDBAdminStats and api_v2.TSDBAdmin interfaces.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *readyStorage)</span> <span class="title">CleanTombstones</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x := s.get(); x != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x.CleanTombstones()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> tsdb.ErrNotReady</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete implements the api_v1.TSDBAdminStats and api_v2.TSDBAdmin interfaces.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *readyStorage)</span> <span class="title">Delete</span><span class="params">(mint, maxt <span class="keyword">int64</span>, ms ...*labels.Matcher)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x := s.get(); x != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x.Delete(mint, maxt, ms...)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> tsdb.ErrNotReady</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Snapshot implements the api_v1.TSDBAdminStats and api_v2.TSDBAdmin interfaces.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *readyStorage)</span> <span class="title">Snapshot</span><span class="params">(dir <span class="keyword">string</span>, withHead <span class="keyword">bool</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x := s.get(); x != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x.Snapshot(dir, withHead)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> tsdb.ErrNotReady</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stats implements the api_v1.TSDBAdminStats interface.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *readyStorage)</span> <span class="title">Stats</span><span class="params">(statsByLabelName <span class="keyword">string</span>)</span> <span class="params">(*tsdb.Stats, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> x := s.get(); x != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x.Head().Stats(statsByLabelName), <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, tsdb.ErrNotReady</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ErrNotReady is returned if the underlying scrape manager is not ready yet.</span></span><br><span class="line"><span class="keyword">var</span> ErrNotReady = errors.New(<span class="string">"Scrape manager not ready"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadyScrapeManager allows a scrape manager to be retrieved. Even if it's set at a later point in time.</span></span><br><span class="line"><span class="keyword">type</span> readyScrapeManager <span class="keyword">struct</span> &#123;</span><br><span class="line">	mtx sync.RWMutex</span><br><span class="line">	m   *scrape.Manager</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the scrape manager.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rm *readyScrapeManager)</span> <span class="title">Set</span><span class="params">(m *scrape.Manager)</span></span> &#123;</span><br><span class="line">	rm.mtx.Lock()</span><br><span class="line">	<span class="keyword">defer</span> rm.mtx.Unlock()</span><br><span class="line"></span><br><span class="line">	rm.m = m</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the scrape manager. If is not ready, return an error.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rm *readyScrapeManager)</span> <span class="title">Get</span><span class="params">()</span> <span class="params">(*scrape.Manager, error)</span></span> &#123;</span><br><span class="line">	rm.mtx.RLock()</span><br><span class="line">	<span class="keyword">defer</span> rm.mtx.RUnlock()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> rm.m != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> rm.m, <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, ErrNotReady</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tsdbOptions is tsdb.Option version with defined units.</span></span><br><span class="line"><span class="comment">// This is required as tsdb.Option fields are unit agnostic (time).</span></span><br><span class="line"><span class="keyword">type</span> tsdbOptions <span class="keyword">struct</span> &#123;</span><br><span class="line">	WALSegmentSize           units.Base2Bytes</span><br><span class="line">	MaxBlockChunkSegmentSize units.Base2Bytes</span><br><span class="line">	RetentionDuration        model.Duration</span><br><span class="line">	MaxBytes                 units.Base2Bytes</span><br><span class="line">	NoLockfile               <span class="keyword">bool</span></span><br><span class="line">	AllowOverlappingBlocks   <span class="keyword">bool</span></span><br><span class="line">	WALCompression           <span class="keyword">bool</span></span><br><span class="line">	StripeSize               <span class="keyword">int</span></span><br><span class="line">	MinBlockDuration         model.Duration</span><br><span class="line">	MaxBlockDuration         model.Duration</span><br><span class="line">	MaxExemplars             <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(opts tsdbOptions)</span> <span class="title">ToTSDBOptions</span><span class="params">()</span> <span class="title">tsdb</span>.<span class="title">Options</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> tsdb.Options&#123;</span><br><span class="line">		WALSegmentSize:           <span class="keyword">int</span>(opts.WALSegmentSize),</span><br><span class="line">		MaxBlockChunkSegmentSize: <span class="keyword">int64</span>(opts.MaxBlockChunkSegmentSize),</span><br><span class="line">		RetentionDuration:        <span class="keyword">int64</span>(time.Duration(opts.RetentionDuration) / time.Millisecond),</span><br><span class="line">		MaxBytes:                 <span class="keyword">int64</span>(opts.MaxBytes),</span><br><span class="line">		NoLockfile:               opts.NoLockfile,</span><br><span class="line">		AllowOverlappingBlocks:   opts.AllowOverlappingBlocks,</span><br><span class="line">		WALCompression:           opts.WALCompression,</span><br><span class="line">		StripeSize:               opts.StripeSize,</span><br><span class="line">		MinBlockDuration:         <span class="keyword">int64</span>(time.Duration(opts.MinBlockDuration) / time.Millisecond),</span><br><span class="line">		MaxBlockDuration:         <span class="keyword">int64</span>(time.Duration(opts.MaxBlockDuration) / time.Millisecond),</span><br><span class="line">		MaxExemplars:             opts.MaxExemplars,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initTracing</span><span class="params">(logger log.Logger)</span> <span class="params">(io.Closer, error)</span></span> &#123;</span><br><span class="line">	<span class="comment">// Set tracing configuration defaults.</span></span><br><span class="line">	cfg := &amp;jcfg.Configuration&#123;</span><br><span class="line">		ServiceName: <span class="string">"prometheus"</span>,</span><br><span class="line">		Disabled:    <span class="literal">true</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Available options can be seen here:</span></span><br><span class="line">	<span class="comment">// https://github.com/jaegertracing/jaeger-client-go#environment-variables</span></span><br><span class="line">	cfg, err := cfg.FromEnv()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrap(err, <span class="string">"unable to get tracing config from environment"</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	jLogger := jaegerLogger&#123;logger: log.With(logger, <span class="string">"component"</span>, <span class="string">"tracing"</span>)&#125;</span><br><span class="line"></span><br><span class="line">	tracer, closer, err := cfg.NewTracer(</span><br><span class="line">		jcfg.Logger(jLogger),</span><br><span class="line">		jcfg.Metrics(jprom.New()),</span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrap(err, <span class="string">"unable to init tracing"</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	opentracing.SetGlobalTracer(tracer)</span><br><span class="line">	<span class="keyword">return</span> closer, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> jaegerLogger <span class="keyword">struct</span> &#123;</span><br><span class="line">	logger log.Logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l jaegerLogger)</span> <span class="title">Error</span><span class="params">(msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	level.Error(l.logger).Log(<span class="string">"msg"</span>, msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l jaegerLogger)</span> <span class="title">Infof</span><span class="params">(msg <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	keyvals := []<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">"msg"</span>, fmt.Sprintf(msg, args...)&#125;</span><br><span class="line">	level.Info(l.logger).Log(keyvals...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="https://blog.csdn.net/dengxiafubi/article/details/102845639" target="_blank" rel="external">https://blog.csdn.net/dengxiafubi/article/details/102845639</a></p>
<p><a href="https://so.csdn.net/so/search?q=Prometheus%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0&amp;t=blog&amp;u=qq_35753140" target="_blank" rel="external">https://so.csdn.net/so/search?q=Prometheus%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0&amp;t=blog&amp;u=qq_35753140</a></p>
]]></content>
      
        <categories>
            
            <category> Prometheus </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Prometheus 安装(二进制和Docker)]]></title>
      <url>https://magiceses.github.io/2020/10/02/prometheus-prometheus-1-%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">走好自己的路就要有自己的思考，有坚定的意志，坚持自己的信念，坚持自己的追求，不能放松对自己的要求，更不能糊里糊涂地度过自己的人生。人生不能虚度，自己要对得起自己。<br></p>

<h1 id="二进制包安装"><a href="#二进制包安装" class="headerlink" title="二进制包安装"></a>二进制包安装</h1><p>我们可以到 Prometheus 二进制安装包<a href="https://prometheus.io/download/" target="_blank" rel="external">下载页面</a>，根据自己的操作系统选择下载对应的安装包。下面我们将以 Amazon Linux 2 作为演示。</p>
<p>下载版本 <code>v2.17.1</code>。</p>
<a id="more"></a>
<h2 id="下载-Prometheus-Server"><a href="#下载-Prometheus-Server" class="headerlink" title="下载 Prometheus Server"></a>下载 Prometheus Server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/prometheus/prometheus/releases/download/v2.17.1/prometheus-2.17.1.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">tar xf prometheus-2.17.1.linux-amd64.tar.gz</span><br><span class="line">mv prometheus-2.17.1.linux-amd64/prometheus /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure>
<h2 id="配置启动文件"><a href="#配置启动文件" class="headerlink" title="配置启动文件"></a>配置启动文件</h2><p>因为是生产环境，我们为其配置启动文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/prometheus.service</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Prometheus Server</span><br><span class="line">After=network.target</span><br><span class="line">Documentation=https://prometheus.io/docs/introduction/overview/</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">WorkingDirectory=/home/data/prometheus/</span><br><span class="line">ExecStart=/usr/local/bin/prometheus \</span><br><span class="line">  --config.file=/etc/prometheus/prometheus.yml \</span><br><span class="line">  --web.read-timeout=5m \</span><br><span class="line">  --web.max-connections=512 \</span><br><span class="line">  --storage.tsdb.retention=15d \</span><br><span class="line">  --storage.tsdb.path=/home/data/prometheus \</span><br><span class="line">  --query.timeout=2m</span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>Prometheus 通过在目标节点的 HTTP 端口上采集 metrics（遥测专用词，度量指标）来监控目标节点（以下会称为“采样目标”）。因为 Prometheus 也以相同的方式暴露自己的数据，所以他也可以采集和检查自己的健康状况。</p>
<p>我们把配置文件转移到标准目录<code>/etc/prometheus/</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/prometheus</span><br><span class="line">mv prometheus-2.17.1.linux-amd64/prometheus.yml /etc/prometheus</span><br></pre></td></tr></table></figure>
<p>初始的配置文件比较简单，如下，自带了一个 job，来监控 prometheus server 的状态。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line"><span class="attr">  scrape_interval:</span>     <span class="number">15</span><span class="string">s</span> </span><br><span class="line"><span class="attr">  evaluation_interval:</span> <span class="number">15</span><span class="string">s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line"><span class="attr">  alertmanagers:</span></span><br><span class="line"><span class="attr">  - static_configs:</span></span><br><span class="line"><span class="attr">    - targets:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">['localhost:9090']</span></span><br></pre></td></tr></table></figure>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start prometheus</span><br><span class="line">systemctl enable prometheus</span><br></pre></td></tr></table></figure>
<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>启动好之后，prometheus 服务会监听在端口 9090，我们使用 IP + Port，即可查看 prometheus 简单的图像界面：</p>
<p><img src="/images/prometheus-prometheus-0.png" alt="image-20200410205833898"></p>
<ol>
<li>可以看出 Prometheus 二进制安装非常方便，没有依赖，自带查询 web 界面。</li>
<li>在生产环境中，我们可以将 Prometheus 添加到 init 配置里，或者使用 supervisord 作为服务自启动。</li>
</ol>
<h1 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h1><p>首先确保你已安装了最新版本的 Docker, 如果没有安装请点击<a href="https://docs.docker.com/engine/installation/" target="_blank" rel="external">这里</a>。</p>
<p>下面我将以 Mac 版本的 Docker 作为演示。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -p 9090:9090 \</span><br><span class="line">    -v /etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml \</span><br><span class="line">    prom/prometheus</span><br></pre></td></tr></table></figure>
<h2 id="Docker-管理-prometheus"><a href="#Docker-管理-prometheus" class="headerlink" title="Docker 管理 prometheus"></a>Docker 管理 prometheus</h2><p>运行 docker ps 查看所有服务:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS              PORTS                      NAMES</span><br><span class="line">e9ebc2435387        quay.io/prometheus/prometheus   &quot;/bin/prometheus -...&quot;   26 minutes ago      Up 26 minutes       0.0.0.0:9090-&gt;9090/tcp   prometheus</span><br></pre></td></tr></table></figure>
<p>运行 <code>docker start prometheus</code> 启动服务</p>
<p>运行 <code>docker stats prometheus</code> 查看 prometheus 状态</p>
<p>运行 <code>docker stop prometheus</code> 停止服务</p>
<h1 id="node-export-安装"><a href="#node-export-安装" class="headerlink" title="node_export 安装"></a>node_export 安装</h1><p><a href="https://github.com/prometheus/node_exporter" target="_blank" rel="external">node_exporter</a> 主要用于 *NIX 系统监控, 用 Golang 编写。</p>
<h2 id="二进制安装"><a href="#二进制安装" class="headerlink" title="二进制安装"></a>二进制安装</h2><p>下载地址：<a href="https://prometheus.io/download/" target="_blank" rel="external">https://prometheus.io/download/</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">tar xf node_exporter-0.18.1.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">mv node_exporter-0.18.1.linux-amd64/node_exporter /usr/local/bin/</span><br></pre></td></tr></table></figure>
<h2 id="配置启动文件-1"><a href="#配置启动文件-1" class="headerlink" title="配置启动文件"></a>配置启动文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/node_export.service</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Node Export</span><br><span class="line">After=network.target</span><br><span class="line">Documentation=https://prometheus.io/docs/guides/node-exporter/</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">WorkingDirectory=/tmp/</span><br><span class="line">ExecStart=/usr/local/bin/node_exporter </span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start node_export</span><br><span class="line">systemctl enable node_export</span><br></pre></td></tr></table></figure>
<h2 id="加入监控"><a href="#加入监控" class="headerlink" title="加入监控"></a>加入监控</h2><p>我们手动加入 prometheus 监控，修改其配置文件，再尾部增加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- job_name: &apos;node_export&apos;</span><br><span class="line">  static_configs:</span><br><span class="line">    - targets: </span><br><span class="line">      - localhost:9100</span><br><span class="line">      - web1:9100</span><br><span class="line">      - web2:9100</span><br><span class="line">      - web3:9100</span><br><span class="line">      - web4:9100</span><br></pre></td></tr></table></figure>
<blockquote>
<p>prometheus 服务器需要可以解析这些地址，我们可以修改其 /etc/hosts 文件。</p>
</blockquote>
<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --net=&quot;host&quot; \</span><br><span class="line">  --pid=&quot;host&quot; \</span><br><span class="line">  -v &quot;/:/host:ro,rslave&quot; \</span><br><span class="line">  quay.io/prometheus/node-exporter \</span><br><span class="line">  --path.rootfs=/host</span><br></pre></td></tr></table></figure>
<h1 id="grafana-rpm-安装"><a href="#grafana-rpm-安装" class="headerlink" title="grafana rpm 安装"></a>grafana rpm 安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载地址：<a href="https://grafana.com/grafana/download" target="_blank" rel="external">https://grafana.com/grafana/download</a></p>
<p>我推荐使用 rpm 包进行安装，这样很多依赖可以自动解决，而且也配置好了启动脚本。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.grafana.com/oss/release/grafana-6.7.2-1.x86_64.rpm</span><br><span class="line">sudo yum install grafana-6.7.2-1.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h2 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> grafana-server</span><br><span class="line">systemctl start grafana-server</span><br></pre></td></tr></table></figure>
<h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>访问 IP + Port，grafana 默认的启动 port 是 3000，初始账号和密码都是 admin，下面是登陆之后的界面，我这里截图是已经配置好数据源的。</p>
<p><img src="/images/prometheus-prometheus-1.png" alt="image-20200410235820764"></p>
<h2 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h2><p>grafana 支持的数据源非常多，我们这里选择 prometheus。</p>
<p><img src="/images/prometheus-prometheus-2.png" alt="image-20200410235935430"></p>
<p>因为我们的 grafana 和 prometheus 在同一台机器上面，地址填写 localhost:9090 即可。</p>
<p><img src="/images/prometheus-prometheus-3.png" alt="image-20200411000041835"></p>
<h2 id="导入模板"><a href="#导入模板" class="headerlink" title="导入模板"></a>导入模板</h2><p>开始我们可能不会制作模板，我们先导入一个模板，只需要输入其编号即可。更多的官方 Dashboard 请参见：</p>
<p><a href="https://grafana.com/grafana/dashboards?orderBy=name&amp;direction=asc" target="_blank" rel="external">https://grafana.com/grafana/dashboards?orderBy=name&amp;direction=asc</a></p>
<p><img src="/images/prometheus-prometheus-4.png" alt="image-20200411000223078"></p>
<h2 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h2><p><img src="/images/prometheus-prometheus-5.png" alt="image-20200411000413028"></p>
<p>原文：<a href="https://blog.51cto.com/wzlinux/2489659" target="_blank" rel="external">https://blog.51cto.com/wzlinux/2489659</a></p>
]]></content>
      
        <categories>
            
            <category> Prometheus </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Prometheus 简单使用]]></title>
      <url>https://magiceses.github.io/2020/10/01/prometheus-prometheus-0-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">与其每天担心未来，不如努力现在。别对自己丧失信心，成长的路上，只有奋斗才能给你最大的安全感。<br></p>

<h1 id="Prometheus-简介"><a href="#Prometheus-简介" class="headerlink" title="Prometheus 简介"></a>Prometheus 简介</h1><h2 id="Prometheus-是啥"><a href="#Prometheus-是啥" class="headerlink" title="Prometheus 是啥"></a>Prometheus 是啥</h2><p>Prometheus 是一套开源的系统监控报警框架。它启发于 Google 的 borgmon 监控系统，由工作在 SoundCloud 的 google 前员工在 2012 年创建，作为社区开源项目进行开发，并于 2015 年正式发布。2016 年，Prometheus 正式加入 Cloud Native Computing Foundation，成为受欢迎度仅次于 Kubernetes 的项目。</p>
<a id="more"></a>
<h2 id="Prometheus-优点"><a href="#Prometheus-优点" class="headerlink" title="Prometheus 优点"></a>Prometheus 优点</h2><ul>
<li>强大的多维度数据模型：<ol>
<li>时间序列数据通过 metric 名和键值对来区分。</li>
<li>所有的 metrics 都可以设置任意的多维标签。</li>
<li>数据模型更随意，不需要刻意设置为以点分隔的字符串。</li>
<li>可以对数据模型进行聚合，切割和切片操作。</li>
<li>支持双精度浮点类型，标签可以设为全 unicode。</li>
</ol>
</li>
<li>灵活而强大的查询语句（PromQL）：在同一个查询语句，可以对多个 metrics 进行乘法、加法、连接、取分数位等操作。</li>
<li>易于管理： Prometheus server 是一个单独的二进制文件，可直接在本地工作，不依赖于分布式存储。</li>
<li>高效：平均每个采样点仅占 3.5 bytes，且一个 Prometheus server 可以处理数百万的 metrics。</li>
<li>使用 pull 模式采集时间序列数据，这样不仅有利于本机测试而且可以避免有问题的服务器推送坏的 metrics。</li>
<li>可以采用 push gateway 的方式把时间序列数据推送至 Prometheus server 端。</li>
<li>可以通过服务发现或者静态配置去获取监控的 targets。</li>
<li>有多种可视化图形界面。</li>
<li>易于伸缩。</li>
</ul>
<h2 id="Prometheus-组件"><a href="#Prometheus-组件" class="headerlink" title="Prometheus 组件"></a>Prometheus 组件</h2><p>Prometheus 生态圈中包含了多个组件，其中许多组件是可选的：</p>
<ul>
<li><strong>Prometheus Server</strong>: 用于收集和存储时间序列数据。</li>
<li><strong>Client Library</strong>: 客户端库，为需要监控的服务生成相应的 metrics 并暴露给 Prometheus server。当 Prometheus server 来 pull 时，直接返回实时状态的 metrics。</li>
<li><strong>Push Gateway</strong>: 主要用于短期的 jobs。由于这类 jobs 存在时间较短，可能在 Prometheus 来 pull 之前就消失了。为此，这次 jobs 可以直接向 Prometheus server 端推送它们的 metrics。这种方式主要用于服务层面的 metrics，对于机器层面的 metrices，需要使用 node exporter。</li>
<li><strong>Exporters</strong>: 用于暴露已有的第三方服务的 metrics 给 Prometheus。</li>
<li><strong>Alertmanager</strong>: 从 Prometheus server 端接收到 alerts 后，会进行去除重复数据，分组，并路由到对收的接受方式，发出报警。常见的接收方式有：电子邮件，pagerduty，OpsGenie, webhook 等。</li>
<li>一些其他的工具。</li>
</ul>
<h2 id="Prometheus-架构"><a href="#Prometheus-架构" class="headerlink" title="Prometheus 架构"></a>Prometheus 架构</h2><p><img src="/Users/stark/Documents/mdPicture/151049-824797.png" alt="img"></p>
<p>从这个架构图，也可以看出 Prometheus 的主要模块包含， Server, Exporters, Pushgateway, PromQL, Alertmanager, WebUI 等。</p>
<p>它大致使用逻辑是这样：</p>
<ol>
<li>Prometheus server 定期从静态配置的 targets 或者服务发现的 targets 拉取数据。</li>
<li>当新拉取的数据大于配置内存缓存区的时候，Prometheus 会将数据持久化到磁盘（如果使用 remote storage 将持久化到云端）。</li>
<li>Prometheus 可以配置 rules，然后定时查询数据，当条件触发的时候，会将 alert 推送到配置的 Alertmanager。</li>
<li>Alertmanager 收到警告的时候，可以根据配置，聚合，去重，降噪，最后发送警告。</li>
<li>可以使用 API， Prometheus Console 或者 Grafana 查询和聚合数据。</li>
</ol>
<h2 id="Prometheus-适用于什么场景"><a href="#Prometheus-适用于什么场景" class="headerlink" title="Prometheus 适用于什么场景"></a>Prometheus 适用于什么场景</h2><p>Prometheus 适用于记录文本格式的时间序列，它既适用于以机器为中心的监控，也适用于高度动态的面向服务架构的监控。在微服务的世界中，它对多维数据收集和查询的支持有特殊优势。Prometheus 是专为提高系统可靠性而设计的，它可以在断电期间快速诊断问题，每个 Prometheus Server 都是相互独立的，不依赖于网络存储或其他远程服务。当基础架构出现故障时，你可以通过 Prometheus 快速定位故障点，而且不会消耗大量的基础架构资源。</p>
<h2 id="Prometheus-不适合什么场景"><a href="#Prometheus-不适合什么场景" class="headerlink" title="Prometheus 不适合什么场景"></a>Prometheus 不适合什么场景</h2><p>Prometheus 非常重视可靠性，即使在出现故障的情况下，你也可以随时查看有关系统的可用统计信息。如果你需要百分之百的准确度，例如按请求数量计费，那么 Prometheus 不太适合你，因为它收集的数据可能不够详细完整。这种情况下，你最好使用其他系统来收集和分析数据以进行计费，并使用 Prometheus 来监控系统的其余部分。</p>
<h1 id="Prometheus-数据模型"><a href="#Prometheus-数据模型" class="headerlink" title="Prometheus 数据模型"></a>Prometheus 数据模型</h1><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>Prometheus 所有采集的监控数据均以指标（metric）的形式保存在内置的<a href="https://www.wikiwand.com/zh/時間序列" target="_blank" rel="external">时间序列</a>数据库当中（TSDB）：属于同一指标名称，同一标签集合的、有时间戳标记的数据流。除了存储的时间序列，Prometheus 还可以根据查询请求产生临时的、衍生的时间序列作为返回结果。</p>
<h3 id="指标名称和标签"><a href="#指标名称和标签" class="headerlink" title="指标名称和标签"></a>指标名称和标签</h3><p>每一条时间序列由指标名称（Metrics Name）以及一组标签（键值对）唯一标识。其中指标的名称（metric name）可以反映被监控样本的含义（例如，<code>http_requests_total</code> — 表示当前系统接收到的 HTTP 请求总量），指标名称只能由 ASCII 字符、数字、下划线以及冒号组成，同时必须匹配正则表达式 <code>[a-zA-Z_:][a-zA-Z0-9_:]*</code>。</p>
<blockquote>
<p><strong>[info] 注意</strong></p>
<p>冒号用来表示用户自定义的记录规则，不能在 exporter 中或监控对象直接暴露的指标中使用冒号来定义指标名称。</p>
</blockquote>
<p>通过使用标签，Prometheus 开启了强大的多维数据模型：对于相同的指标名称，通过不同标签列表的集合，会形成特定的度量维度实例（例如：所有包含度量名称为 <code>/api/tracks</code> 的 http 请求，打上 <code>method=POST</code> 的标签，就会形成具体的 http 请求）。该查询语言在这些指标和标签列表的基础上进行过滤和聚合。改变任何度量指标上的任何标签值（包括添加或删除指标），都会创建新的时间序列。</p>
<p>标签的名称只能由 ASCII 字符、数字以及下划线组成并满足正则表达式 <code>[a-zA-Z_][a-zA-Z0-9_]*</code>。其中以 <code>__</code> 作为前缀的标签，是系统保留的关键字，只能在系统内部使用。标签的值则可以包含任何 <code>Unicode</code> 编码的字符。</p>
<h3 id="时序样本"><a href="#时序样本" class="headerlink" title="时序样本"></a>时序样本</h3><p>在时间序列中的每一个点称为一个样本（sample），样本由以下三部分组成：</p>
<ul>
<li>指标（metric）：指标名称和描述当前样本特征的 labelsets；</li>
<li>时间戳（timestamp）：一个精确到毫秒的时间戳；</li>
<li>样本值（value）： 一个 folat64 的浮点型数据表示当前样本的值。</li>
</ul>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>通过如下表达方式表示指定指标名称和指定标签集合的时间序列：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;metric name&gt;&#123;&lt;label name&gt;=&lt;label value&gt;, ...&#125; value timestamps</span><br></pre></td></tr></table></figure>
<p>例如，指标名称为 <code>api_http_requests_total</code>，标签为 <code>method=&quot;POST&quot;</code> 和 <code>handler=&quot;/messages&quot;</code> 的时间序列可以表示为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api_http_requests_total&#123;method=&quot;POST&quot;, handler=&quot;/messages&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>这与 <a href="http://opentsdb.net/" target="_blank" rel="external">OpenTSDB</a> 中使用的标记法相同。</p>
<h2 id="指标类型"><a href="#指标类型" class="headerlink" title="指标类型"></a>指标类型</h2><p>Prometheus 的客户端库中提供了四种核心的指标类型。但这些类型只是在客户端库（客户端可以根据不同的数据类型调用不同的 API 接口）和在线协议中，实际在 Prometheus server 中并不对指标类型进行区分，而是简单地把这些指标统一视为无类型的时间序列。不过，将来我们会努力改变这一现状的。</p>
<h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><ul>
<li>一种累加的 metric，典型的应用如：请求的个数，结束的任务数， 出现的错误数等等。</li>
</ul>
<p>例如 Prometheus server 中 <code>http_requests_total</code>, 表示 Prometheus 处理的 http 请求总数，我们可以使用 <code>delta</code>, 很容易得到任意区间数据的增量，这个会在 PromQL 一节中细讲。</p>
<p><img src="/Users/stark/Documents/mdPicture/152346-582157.png" alt="image-20200410152345078"></p>
<h3 id="Gauge"><a href="#Gauge" class="headerlink" title="Gauge"></a>Gauge</h3><ul>
<li>一种常规的 metric，典型的应用如：温度，运行的 goroutines 的个数。</li>
<li>可以任意加减。</li>
</ul>
<p>例如 Prometheus server 中 <code>go_goroutines</code>, 表示 Prometheus 当前 goroutines 的数量。</p>
<p><img src="/Users/stark/Documents/mdPicture/152303-862227.png" alt="image-20200410152301768"></p>
<h3 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h3><ul>
<li>可以理解为柱状图，典型的应用如：请求持续时间，响应大小。</li>
<li>可以对观察结果采样，分组及统计。</li>
</ul>
<p>例如，查询prometheus_http_request_duration_seconds_sum{handler=“/api/v1/query”,instance=“localhost:9090”,job=“prometheus”}时，返回结果如下：</p>
<p><img src="/Users/stark/Documents/mdPicture/152806-378296.png" alt="image-20200410152805983"></p>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><strong>Summary</strong></h3><ul>
<li>类似于 Histogram, 典型的应用如：请求持续时间，响应大小。</li>
<li>提供观测值的 count 和 sum 功能。</li>
<li>提供百分位的功能，即可以按百分比划分跟踪结果。</li>
</ul>
<h2 id="instance-和-jobs"><a href="#instance-和-jobs" class="headerlink" title="instance 和 jobs"></a>instance 和 jobs</h2><p>Prometheus 中，将任意一个独立的数据源（target）称之为实例（instance）。包含相同类型的实例的集合称之为作业（job）。 如下是一个含有四个重复实例的作业：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- job: api-server</span><br><span class="line">    - instance 1: 1.2.3.4:5670</span><br><span class="line">    - instance 2: 1.2.3.4:5671</span><br><span class="line">    - instance 3: 5.6.7.8:5670</span><br><span class="line">    - instance 4: 5.6.7.8:5671</span><br></pre></td></tr></table></figure>
<p><strong>自生成标签和时序</strong></p>
<p>Prometheus 在采集数据的同时，会自动在时序的基础上添加标签，作为数据源（target）的标识，以便区分：</p>
<ul>
<li><code>job</code>: The configured job name that the target belongs to.</li>
<li><code>instance</code>: The <code>&lt;host&gt;:&lt;port&gt;</code> part of the target’s URL that was scraped.</li>
</ul>
<p>如果其中任一标签已经在此前采集的数据中存在，那么将会根据 <code>honor_labels</code> 设置选项来决定新标签。详见官网解释： <a href="https://prometheus.io/docs/operating/configuration/#" target="_blank" rel="external">scrape configuration documentation</a></p>
<p>对每一个实例而言，Prometheus 按照以下时序来存储所采集的数据样本：</p>
<ul>
<li><code>up{job=&quot;&lt;job-name&gt;&quot;, instance=&quot;&lt;instance-id&gt;&quot;}</code>: 1 表示该实例正常工作</li>
<li><code>up{job=&quot;&lt;job-name&gt;&quot;, instance=&quot;&lt;instance-id&gt;&quot;}</code>: 0 表示该实例故障</li>
<li><code>scrape_duration_seconds{job=&quot;&lt;job-name&gt;&quot;, instance=&quot;&lt;instance-id&gt;&quot;}</code> 表示拉取数据的时间间隔</li>
<li><code>scrape_samples_post_metric_relabeling{job=&quot;&lt;job-name&gt;&quot;, instance=&quot;&lt;instance-id&gt;&quot;}</code> 表示采用重定义标签（relabeling）操作后仍然剩余的样本数</li>
<li><code>scrape_samples_scraped{job=&quot;&lt;job-name&gt;&quot;, instance=&quot;&lt;instance-id&gt;&quot;}</code> 表示从该数据源获取的样本数</li>
</ul>
<p>其中 <code>up</code> 时序可以有效应用于监控该实例是否正常工作。</p>
<h1 id="Export"><a href="#Export" class="headerlink" title="Export"></a>Export</h1><h2 id="文本格式"><a href="#文本格式" class="headerlink" title="文本格式"></a>文本格式</h2><p>在讨论 Exporter 之前，有必要先介绍一下 Prometheus 文本数据格式，因为一个 Exporter 本质上就是将收集的数据，转化为对应的文本格式，并提供 http 请求。</p>
<p>Exporter 收集的数据转化的文本内容以行 (<code>\n</code>) 为单位，空行将被忽略, 文本内容最后一行为空行</p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>文本内容，如果以 <code>#</code> 开头通常表示注释。</p>
<ul>
<li>以 <code># HELP</code> 开头表示 metric 帮助说明。</li>
<li>以 <code># TYPE</code> 开头表示定义 metric 类型，包含 <code>counter</code>, <code>gauge</code>, <code>histogram</code>, <code>summary</code>, 和 <code>untyped</code> 类型。</li>
<li>其他表示一般注释，供阅读使用，将被 Prometheus 忽略。</li>
</ul>
<h3 id="采样数据"><a href="#采样数据" class="headerlink" title="采样数据"></a>采样数据</h3><p>内容如果不以 <code>#</code> 开头，表示采样数据。它通常紧挨着类型定义行，满足以下格式：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">metric_name [</span><br><span class="line">  "&#123;" label_name "=" `"` label_value `"` &#123; "," label_name "=" `"` label_value `"` &#125; [ "," ] "&#125;"</span><br><span class="line">] value [ timestamp ]</span><br><span class="line">1.2.3.</span><br></pre></td></tr></table></figure>
<p>下面是一个完整的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># HELP http_requests_total The total number of HTTP requests.</span><br><span class="line"># TYPE http_requests_total counter</span><br><span class="line">http_requests_total&#123;method=&quot;post&quot;,code=&quot;200&quot;&#125; 1027 1395066363000</span><br><span class="line">http_requests_total&#123;method=&quot;post&quot;,code=&quot;400&quot;&#125;    3 1395066363000</span><br><span class="line"></span><br><span class="line"># Escaping in label values:</span><br><span class="line">msdos_file_access_time_seconds&#123;path=&quot;C:\\DIR\\FILE.TXT&quot;,error=&quot;Cannot find file:\n\&quot;FILE.TXT\&quot;&quot;&#125; 1.458255915e9</span><br><span class="line"></span><br><span class="line"># Minimalistic line:</span><br><span class="line">metric_without_timestamp_and_labels 12.47</span><br><span class="line"></span><br><span class="line"># A weird metric from before the epoch:</span><br><span class="line">something_weird&#123;problem=&quot;division by zero&quot;&#125; +Inf -3982045</span><br><span class="line"></span><br><span class="line"># A histogram, which has a pretty complex representation in the text format:</span><br><span class="line"># HELP http_request_duration_seconds A histogram of the request duration.</span><br><span class="line"># TYPE http_request_duration_seconds histogram</span><br><span class="line">http_request_duration_seconds_bucket&#123;le=&quot;0.05&quot;&#125; 24054</span><br><span class="line">http_request_duration_seconds_bucket&#123;le=&quot;0.1&quot;&#125; 33444</span><br><span class="line">http_request_duration_seconds_bucket&#123;le=&quot;0.2&quot;&#125; 100392</span><br><span class="line">http_request_duration_seconds_bucket&#123;le=&quot;0.5&quot;&#125; 129389</span><br><span class="line">http_request_duration_seconds_bucket&#123;le=&quot;1&quot;&#125; 133988</span><br><span class="line">http_request_duration_seconds_bucket&#123;le=&quot;+Inf&quot;&#125; 144320</span><br><span class="line">http_request_duration_seconds_sum 53423</span><br><span class="line">http_request_duration_seconds_count 144320</span><br><span class="line"></span><br><span class="line"># Finally a summary, which has a complex representation, too:</span><br><span class="line"># HELP rpc_duration_seconds A summary of the RPC duration in seconds.</span><br><span class="line"># TYPE rpc_duration_seconds summary</span><br><span class="line">rpc_duration_seconds&#123;quantile=&quot;0.01&quot;&#125; 3102</span><br><span class="line">rpc_duration_seconds&#123;quantile=&quot;0.05&quot;&#125; 3272</span><br><span class="line">rpc_duration_seconds&#123;quantile=&quot;0.5&quot;&#125; 4773</span><br><span class="line">rpc_duration_seconds&#123;quantile=&quot;0.9&quot;&#125; 9001</span><br><span class="line">rpc_duration_seconds&#123;quantile=&quot;0.99&quot;&#125; 76656</span><br><span class="line">rpc_duration_seconds_sum 1.7560473e+07</span><br><span class="line">rpc_duration_seconds_count 2693</span><br></pre></td></tr></table></figure>
<p>需要特别注意的是，假设采样数据 metric 叫做 <code>x</code>, 如果 <code>x</code> 是 <code>histogram</code> 或 <code>summary</code> 类型必需满足以下条件：</p>
<ul>
<li>采样数据的总和应表示为 <code>x_sum</code>。</li>
<li>采样数据的总量应表示为 <code>x_count</code>。</li>
<li><code>summary</code> 类型的采样数据的 quantile 应表示为 <code>x{quantile=&quot;y&quot;}</code>。</li>
<li><code>histogram</code> 类型的采样分区统计数据将表示为 <code>x_bucket{le=&quot;y&quot;}</code>。</li>
<li><code>histogram</code> 类型的采样必须包含 <code>x_bucket{le=&quot;+Inf&quot;}</code>, 它的值等于 <code>x_count</code> 的值。</li>
<li><code>summary</code> 和 <code>historam</code> 中 <code>quantile</code> 和 <code>le</code> 必需按从小到大顺序排列。</li>
</ul>
<h2 id="常用查询"><a href="#常用查询" class="headerlink" title="常用查询"></a>常用查询</h2><p>收集到 node_exporter 的数据后，我们可以使用 PromQL 进行一些业务查询和监控，下面是一些比较常见的查询。</p>
<p>注意：以下查询均以单个节点作为例子，如果大家想查看所有节点，将 <code>instance=&quot;xxx&quot;</code> 去掉即可。</p>
<h3 id="CPU-使用率"><a href="#CPU-使用率" class="headerlink" title="CPU 使用率"></a>CPU 使用率</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100 - (avg by (instance) (irate(node_cpu_seconds_total&#123;mode=<span class="string">"idle"</span>&#125;[5m])) * 100)</span><br><span class="line">1.</span><br></pre></td></tr></table></figure>
<h3 id="CPU-各-mode-占比率"><a href="#CPU-各-mode-占比率" class="headerlink" title="CPU 各 mode 占比率"></a>CPU 各 mode 占比率</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">avg by (instance, mode) (irate(node_cpu_seconds_total[5m])) * 100</span><br><span class="line">1.</span><br></pre></td></tr></table></figure>
<h3 id="机器平均负载"><a href="#机器平均负载" class="headerlink" title="机器平均负载"></a>机器平均负载</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node_load1&#123;instance="xxx"&#125; // 1分钟负载</span><br><span class="line">node_load5&#123;instance="xxx"&#125; // 5分钟负载</span><br><span class="line">node_load15&#123;instance="xxx"&#125; // 15分钟负载</span><br><span class="line">1.2.3.</span><br></pre></td></tr></table></figure>
<h3 id="内存使用率"><a href="#内存使用率" class="headerlink" title="内存使用率"></a>内存使用率</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100 - ((node_memory_MemFree_bytes+node_memory_Cached_bytes+node_memory_Buffers_bytes)/node_memory_MemTotal_bytes) * 100</span><br><span class="line">1.</span><br></pre></td></tr></table></figure>
<h3 id="磁盘使用率"><a href="#磁盘使用率" class="headerlink" title="磁盘使用率"></a>磁盘使用率</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100 - node_filesystem_free&#123;instance="xxx",fstype!~"rootfs|selinuxfs|autofs|rpc_pipefs|tmpfs|udev|none|devpts|sysfs|debugfs|fuse.*"&#125; / node_filesystem_size&#123;instance="xxx",fstype!~"rootfs|selinuxfs|autofs|rpc_pipefs|tmpfs|udev|none|devpts|sysfs|debugfs|fuse.*"&#125; * 100</span><br><span class="line">1.</span><br></pre></td></tr></table></figure>
<p>或者你也可以直接使用 {fstype=“xxx”} 来指定想查看的磁盘信息</p>
<h3 id="网络-IO"><a href="#网络-IO" class="headerlink" title="网络 IO"></a>网络 IO</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 上行带宽</span><br><span class="line">sum by (instance) (irate(node_network_receive_bytes&#123;instance="xxx",device!~"bond.*?|lo"&#125;[5m])/128)</span><br><span class="line"></span><br><span class="line">// 下行带宽</span><br><span class="line">sum by (instance) (irate(node_network_transmit_bytes&#123;instance="xxx",device!~"bond.*?|lo"&#125;[5m])/128)</span><br><span class="line">1.2.3.4.5.</span><br></pre></td></tr></table></figure>
<h3 id="网卡出-入包"><a href="#网卡出-入包" class="headerlink" title="网卡出/入包"></a>网卡出/入包</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 入包量</span><br><span class="line">sum by (instance) (rate(node_network_receive_bytes&#123;instance="xxx",device!="lo"&#125;[5m]))</span><br><span class="line"></span><br><span class="line">// 出包量</span><br><span class="line">sum by (instance) (rate(node_network_transmit_bytes&#123;instance="xxx",device!="lo"&#125;[5m]))</span><br><span class="line">1.2.3.4.5.</span><br></pre></td></tr></table></figure>
<h1 id="Prometheus-配置详解"><a href="#Prometheus-配置详解" class="headerlink" title="Prometheus 配置详解"></a>Prometheus 配置详解</h1><p>要想知道一个工具是如何运行的，那么了解其配置参数，对了解整个工具以及后续的瓶颈了解、优化是非常有帮助的。</p>
<p>官方文档说明: <a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/" target="_blank" rel="external">https://prometheus.io/docs/prometheus/latest/configuration/configuration/</a></p>
<p>Prometheus 配置分为两个部分，命令行传递的不可变配置，配置文件传递的可变配置。所谓不可变是指进程进行运行中是不可以动态更新。</p>
<p>Prometheus提供了两个可执行文件：prometheus 和 promtool，前者用于prometheus server的启停，后者为prometheus调试工具，常用于配置文件检查。</p>
<p>prometheus 常用参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-h, --help                              显示帮助信息</span><br><span class="line">    --version                           显示版本</span><br><span class="line">    --config.file=&quot;prometheus.yml&quot;      指定配置文件</span><br><span class="line">    --web.listen-address=&quot;0.0.0.0:9090&quot; 指定监听的端口</span><br><span class="line">    --web.max-connections=512           最大连接数</span><br><span class="line">    --web.enable-lifecycle              是否开启reload和shutdown的远程API</span><br><span class="line">    --web.enable-admin-api              是否开启管理API</span><br><span class="line">    --web.console.templates=&quot;consoles&quot;  控制台模板目录</span><br><span class="line">    --web.console.libraries=&quot;console_libraries&quot;  控制台库文件目录</span><br><span class="line">    --storage.tsdb.path=&quot;data/&quot;         数据存储路径</span><br><span class="line">    --storage.tsdb.retention.time       数据保留时间，默认15天</span><br><span class="line">    --query.timeout=2m                  查询超时时间</span><br><span class="line">    --query.max-concurrency=20          最大并发查询数量</span><br><span class="line">    --query.max-samples=50000000        单次查询返回的最大样本数</span><br><span class="line">    --log.level=info                    日志级别: [debug, info, warn, error]</span><br><span class="line">    --log.format=logfmt                 日志输出格式：[logfmt, json]</span><br></pre></td></tr></table></figure>
<p>promtool 常用参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">check config &lt;config-files&gt;...  检查配置文件</span><br><span class="line">check rules &lt;rule-files&gt;...     检查规则文件</span><br></pre></td></tr></table></figure>
<h2 id="热加载"><a href="#热加载" class="headerlink" title="热加载"></a>热加载</h2><p>Prometheus改变参数可以通过命令行参数以及配置文件，其中命令行参数只要是修改系统参数，例如存储路径的指定或者挂载磁盘<br>Prometheus可以在运行时重新加载它的配置。 如果新配置格式不正确，则更改将不会应用。 通过向Prometheus进程发送<code>SIGHUP</code>或向<code>/-/reload</code>端点发送HTTP POST请求（启用<code>--web.enable-lifecycle</code>标志时）来触发配置reload。 这也将重新加载任何配置的规则文件。</p>
<p>prometheus通过<code>--config.file</code>命令行参数指定配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">配置热加载：</span><br><span class="line">#1.  kill -HUP pid # 发送 SIGHUP 信号给prometheus进程</span><br><span class="line">#2.  curl -X POST http://IP/-/reload # 调用 /-/reload API，仅在启用 --web.enable-lifecycle 状态下</span><br></pre></td></tr></table></figure>
<h2 id="通用类型"><a href="#通用类型" class="headerlink" title="通用类型"></a>通用类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. &lt;boolean&gt;：true false</span><br><span class="line">2. &lt;duration&gt;：与正则表达式[0-9]+(ms|[smhdwy])匹配的持续时间</span><br><span class="line">3. &lt;labelname&gt;：与正则表达式匹配的字符串[a-zA-Z_][a-zA-Z0-9_]*</span><br><span class="line">4. &lt;labelvalue&gt;：一个unicode字符串</span><br><span class="line">5. &lt;filename&gt;：当前工作目录中的有效路径</span><br><span class="line">6. &lt;host&gt;：一个有效的字符串，由一个主机名或IP后跟一个可选的端口号组成</span><br><span class="line">7. &lt;path&gt;：有效的URL路径</span><br><span class="line">8. &lt;scheme&gt;：可以取值为http或https的字符串</span><br><span class="line">9. &lt;string&gt;：一个常规字符串</span><br><span class="line">10. &lt;secret&gt;：一个常用的密码字符串，例如密码</span><br><span class="line">11. &lt;tmpl_string&gt;：在使用前被模板扩展的字符串</span><br></pre></td></tr></table></figure>
<h2 id="配置文件格式"><a href="#配置文件格式" class="headerlink" title="配置文件格式"></a>配置文件格式</h2><p>原始配置文件内容：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="comment"># 默认情况下抓取目标的频率.</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">scrape_interval:</span> <span class="string">&lt;duration&gt;</span> <span class="string">| default = 1m ]</span></span><br><span class="line"><span class="string">  # 抓取超时时间.</span></span><br><span class="line"><span class="string">  [ scrape_timeout: &lt;duration&gt; | default = 10s ]</span></span><br><span class="line"><span class="string">  # 评估规则的频率.</span></span><br><span class="line"><span class="string">  [ evaluation_interval: &lt;duration&gt; | default = 1m ]</span></span><br><span class="line"><span class="string">  # 与外部系统通信时对时间序列或者告警信息添加的标签，如remote storage、alertmanager等</span></span><br><span class="line"><span class="string"></span><span class="attr">  external_labels:</span></span><br><span class="line">    <span class="string">[</span> <span class="string">&lt;labelname&gt;:</span> <span class="string">&lt;labelvalue&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line">  <span class="comment"># PromQL查询日志，reload操作会重新打开日志</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">query_log_file:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 警报指定与Alertmanager相关的设置.</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="comment"># 告警标签重写</span></span><br><span class="line"><span class="attr">  alert_relabel_configs:</span></span><br><span class="line">    <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;relabel_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line">  <span class="comment"># alertmanager 配置</span></span><br><span class="line"><span class="attr">  alertmanagers:</span></span><br><span class="line"><span class="attr">  - static_configs:</span></span><br><span class="line"><span class="attr">    - targets:</span></span><br><span class="line">      <span class="comment"># - alertmanager:9093</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 规则文件指定了一个globs列表. </span></span><br><span class="line"><span class="comment"># 从所有匹配的文件中读取规则和警报. </span></span><br><span class="line"><span class="comment"># 根据 global 的 'evaluation_interval'.</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="comment"># - "first_rules.yml"</span></span><br><span class="line">  <span class="comment"># - "second_rules.yml"</span></span><br><span class="line">  <span class="comment"># - "/etc/config/rules/*.yml" # 代表rules目录下的所有以.yml结尾的文件</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it's Prometheus itself.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=` to any timeseries scraped from this config.</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line">    <span class="comment"># metrics_path defaults to '/metrics'</span></span><br><span class="line">    <span class="comment"># scheme defaults to 'http'.</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">    - targets:</span> <span class="string">['localhost:9090']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与远程写入功能相关的设置.</span></span><br><span class="line"><span class="attr">remote_write:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;remote_write&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与远程读取功能相关的设置.</span></span><br><span class="line"><span class="attr">remote_read:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;remote_read&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>global: 全局配置（如果有内部单独设定，会覆盖这个参数）<br>alerting: 告警插件定义。这里会设定alertmanager这个报警插件。<br>rule_files: 告警规则。 按照设定参数进行扫描加载，用于自定义报警规则，其报警媒介和route路由由alertmanager插件实现。<br>scrape_configs:采集配置。配置数据源，包含分组job_name以及具体target。又分为静态配置和服务发现</p>
</blockquote>
<h2 id="global-模块"><a href="#global-模块" class="headerlink" title="global 模块"></a>global 模块</h2><p>global配置是一个全局的配置，如果没有对每一个<code>job（scrape_configs下的job_name项）</code>配置，就采用全局的配置。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">scrape_interval:</span> <span class="number">15</span><span class="string">s</span> <span class="comment"># 默认15s 全局每次数据收集的间隔</span></span><br><span class="line"><span class="attr">evaluation_interval:</span> <span class="number">15</span><span class="string">s</span> <span class="comment"># 规则扫描时间间隔是15秒，默认不填写是 1分钟</span></span><br><span class="line"><span class="attr">scrape_timeout:</span> <span class="number">5</span><span class="string">s</span>    <span class="comment">#超时时间</span></span><br><span class="line"><span class="attr">external_labels:</span> <span class="comment"># 用于外部系统标签的，不是用于metrics(度量)数据</span></span><br></pre></td></tr></table></figure>
<p>常用的命令行参数(prometheus插件基本都是二进制的，可以通过二进制文件 -h了解参数用于自定义启动参数，否则默认)</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./prometheus</span> <span class="bullet">-h</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-config.file="/opt/config/prometheus.yml"</span>  <span class="comment"># 读取指定配置文件</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-web.listen-address="0.0.0.0:9090"</span>  <span class="comment"># 指定prometheus运行端口 </span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-log.level=info</span> <span class="comment"># 日志级别</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-alertmanager.timeout=10s</span> <span class="comment"># 与报警组件的超时时间</span></span><br></pre></td></tr></table></figure>
<h2 id="alerting-模块"><a href="#alerting-模块" class="headerlink" title="alerting 模块"></a>alerting 模块</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 警报指定与Alertmanager相关的设置.</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="comment"># 告警标签重写</span></span><br><span class="line"><span class="attr">  alert_relabel_configs:</span></span><br><span class="line">    <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;relabel_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line">  <span class="comment"># alertmanager 配置</span></span><br><span class="line"><span class="attr">  alertmanagers:</span></span><br><span class="line"><span class="attr">  - static_configs:</span></span><br><span class="line"><span class="attr">    - targets:</span></span><br><span class="line">      <span class="comment"># - alertmanager:9093</span></span><br></pre></td></tr></table></figure>
<p>这里定义和prometheus集成的alertmanager插件，用于监控报警。</p>
<h3 id="alert-relabel-configs"><a href="#alert-relabel-configs" class="headerlink" title="alert_relabel_configs"></a>alert_relabel_configs</h3><p>警报重新标记在发送到Alertmanager之前应用于警报。 它具有与目标重新标记相同的配置格式和操作。 外部标签后应用警报重新标记。</p>
<p>这样做的一个用途是确保具有不同外部标签的HA对Prometheus服务器发送相同的警报。</p>
<h3 id="alertmanager-config"><a href="#alertmanager-config" class="headerlink" title="alertmanager_config"></a>alertmanager_config</h3><p><code>alertmanager</code>部分指定Prometheus服务器向其发送警报的Alertmanager实例。 它还提供参数以配置如何与这些Alertmanagers进行通信。</p>
<p>Alertmanagers可以通过<code>static_configs</code>参数静态配置，也可以使用其中一种支持的服务发现机制动态发现。</p>
<p>此外，<code>relabel_configs</code>允许从发现的实体中选择Alertmanagers，并对使用的API路径提供高级修改，该路径通过<code>__alerts_path__</code>标签公开。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推送警报时按目标Alertmanager超时。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">timeout:</span> <span class="string">&lt;duration&gt;</span> <span class="string">| default = 10s ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 将推送HTTP路径警报的前缀。</span></span><br><span class="line"><span class="string">[ path_prefix: &lt;path&gt; | default = / ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 配置用于请求的协议方案。</span></span><br><span class="line"><span class="string">[ scheme: &lt;scheme&gt; | default = http ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 使用配置的用户名和密码在每个请求上设置`Authorization`标头。 password和password_file是互斥的。</span></span><br><span class="line"><span class="string"></span><span class="attr">basic_auth:</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">username:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">password:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">password_file:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用配置的承载令牌在每个请求上设置“Authorization”标头。 它与`bearer_token_file`互斥。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">bearer_token:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用配置的承载令牌在每个请求上设置“Authorization”标头。 它与`bearer_token`互斥。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">bearer_token_file:</span> <span class="string">/path/to/bearer/token/file</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置scrape请求的TLS设置。</span></span><br><span class="line"><span class="attr">tls_config:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;tls_config&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选的代理URL。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">proxy_url:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Azure服务发现配置列表。</span></span><br><span class="line"><span class="attr">azure_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;azure_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="comment"># Consul服务发现配置列表。</span></span><br><span class="line"><span class="attr">consul_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;consul_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="comment"># DNS服务发现配置列表。</span></span><br><span class="line"><span class="attr">dns_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;dns_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="comment"># ECS服务发现配置列表。</span></span><br><span class="line"><span class="attr">ec2_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;ec2_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="comment"># 文件服务发现配置列表。</span></span><br><span class="line"><span class="attr">file_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;file_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="comment"># GCE服务发现配置列表。</span></span><br><span class="line"><span class="attr">gce_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;gce_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="comment"># K8S服务发现配置列表。</span></span><br><span class="line"><span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;kubernetes_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="comment"># Marathon服务发现配置列表。</span></span><br><span class="line"><span class="attr">marathon_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;marathon_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="comment"># AirBnB's Nerve 服务发现配置列表。</span></span><br><span class="line"><span class="attr">nerve_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;nerve_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="comment"># Zookepper服务发现配置列表。</span></span><br><span class="line"><span class="attr">serverset_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;serverset_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="comment"># Triton服务发现配置列表。</span></span><br><span class="line"><span class="attr">triton_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;triton_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="comment"># 标记为静态配置的Alertmanagers列表。</span></span><br><span class="line"><span class="attr">static_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;static_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对发现的alertmanager进行筛选和标签重写，比如API中PATH</span></span><br><span class="line"><span class="attr">relabel_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;relabel_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br></pre></td></tr></table></figure>
<h2 id="rule-files-模块"><a href="#rule-files-模块" class="headerlink" title="rule_files 模块"></a>rule_files 模块</h2><p>这个主要是用来设置告警规则，基于设定什么指标进行报警（类似触发器trigger）。这里设定好规则以后，prometheus会根据全局global设定的evaluation_interval参数进行扫描加载，规则改动后会自动加载。其报警媒介和route路由由alertmanager插件实现。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="comment"># - "first_rules.yml"</span></span><br><span class="line">  <span class="comment"># - "second_rules.yml"</span></span><br><span class="line">  <span class="comment"># - "/etc/config/rules/*.yml" # 代表rules目录下的所有以.yml结尾的文件</span></span><br></pre></td></tr></table></figure>
<p>规则文件分为两种：记录规则(recording rule)和报警规则(altering rule)。报警规则在告警管理中。recording rules 目的是将常用的复杂查询结果周期性写入数据库，避免频繁计算带来的资源消耗，一般将dashboard中复杂查询写入recording rules 中。</p>
<h3 id="recording-rule"><a href="#recording-rule" class="headerlink" title="recording rule"></a>recording rule</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># recording rule</span></span><br><span class="line"><span class="attr">groups:</span></span><br><span class="line">  <span class="comment"># 组名，配置文件中不能重复</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">&lt;string&gt;</span></span><br><span class="line">    <span class="comment"># 多久计算计算一次</span></span><br><span class="line">    <span class="string">[</span> <span class="attr">interval:</span> <span class="string">&lt;duration&gt;</span> <span class="string">| default = global.evaluation_interval ]</span></span><br><span class="line"><span class="string"></span><span class="attr">    rules:</span></span><br><span class="line">      <span class="comment"># 入库的指标名称</span></span><br><span class="line"><span class="attr">      - record:</span> <span class="string">&lt;string&gt;</span></span><br><span class="line">        <span class="comment"># PromQL表达式</span></span><br><span class="line"><span class="attr">        expr:</span> <span class="string">&lt;string&gt;</span></span><br><span class="line">        <span class="comment"># 标签</span></span><br><span class="line"><span class="attr">    labels:</span></span><br><span class="line">      <span class="string">[</span> <span class="string">&lt;labelname&gt;:</span> <span class="string">&lt;labelvalue&gt;</span> <span class="string">]</span></span><br></pre></td></tr></table></figure>
<h3 id="altering-rule"><a href="#altering-rule" class="headerlink" title="altering rule"></a>altering rule</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># alerting rule</span></span><br><span class="line"><span class="attr">groups:</span></span><br><span class="line">  <span class="comment"># 组名，一个文件中唯一标识</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">&lt;string&gt;</span></span><br><span class="line">    <span class="string">[</span> <span class="attr">interval:</span> <span class="string">&lt;duration&gt;</span> <span class="string">| default = global.evaluation_interval ]</span></span><br><span class="line"><span class="string"></span><span class="attr">    rules:</span></span><br><span class="line"><span class="attr">      - alert:</span> <span class="string">&lt;string&gt;</span> <span class="comment"># 报警名称</span></span><br><span class="line"><span class="attr">        expr:</span> <span class="string">&lt;string&gt;</span>  <span class="comment"># 报警规则表达式</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">for:</span> <span class="string">&lt;duration&gt;</span> <span class="string">| default = 0s ] # 当触发条件持续指定时间再发送告警，发送前告警为pending</span></span><br><span class="line"><span class="string"></span><span class="attr">  labels:</span>         <span class="comment"># 告警标签</span></span><br><span class="line">      <span class="string">[</span> <span class="string">&lt;labelname&gt;:</span> <span class="string">&lt;tmpl_string&gt;</span> <span class="string">]</span> <span class="comment"># 会覆盖已有的标签，用于后面alertmanager中筛选</span></span><br><span class="line"><span class="attr">  annotations:</span>         <span class="comment"># 告警注释</span></span><br><span class="line">    <span class="string">[</span> <span class="string">&lt;labelname&gt;:</span> <span class="string">&lt;tmpl_string&gt;</span> <span class="string">]</span>   <span class="comment"># 一般添加发送邮件的内容、标题等等。常用字段有:summary,description</span></span><br></pre></td></tr></table></figure>
<h2 id="scrape-configs-模块"><a href="#scrape-configs-模块" class="headerlink" title="scrape_configs 模块"></a>scrape_configs 模块</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">scrape_configs</span> <span class="string">默认规则：</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=` to any timeseries scraped from this config.</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># metrics_path defaults to '/metrics'</span></span><br><span class="line">    <span class="comment"># scheme defaults to 'http'.</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">    - targets:</span> <span class="string">['localhost:9090']</span></span><br></pre></td></tr></table></figure>
<p>prometheus获取数据源target的方式有多种，如静态配置和服务发现配置，prometheus支持多种服务发现，在prometheus中的服务发现主要分为以下几种：</p>
<ul>
<li>static_configs：静态服务发现</li>
<li>kubernetes_sd_configs: 基于Kubernetes的服务发现，这章讲的内容</li>
<li>consul_sd_configs: Consul 服务发现</li>
<li>dns_sd_configs: DNS 服务发现</li>
<li>file_sd_configs: 文件服务发现</li>
<li>……</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认分配给已抓取指标的job名称。</span></span><br><span class="line"><span class="attr">job_name:</span> <span class="string">&lt;job_name&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从job中抓取目标的频率.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">scrape_interval:</span> <span class="string">&lt;duration&gt;</span> <span class="string">| default = &lt;global_config.scrape_interval&gt; ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 抓取此job时，每次抓取超时时间.</span></span><br><span class="line"><span class="string">[ scrape_timeout: &lt;duration&gt; | default = &lt;global_config.scrape_timeout&gt; ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 从目标获取指标的HTTP资源路径.</span></span><br><span class="line"><span class="string">[ metrics_path: &lt;path&gt; | default = /metrics ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># honor_labels控制Prometheus如何处理已经存在于已抓取数据中的标签与Prometheus将附加服务器端的标签之间的冲突（"job"和"instance"标签，手动配置的目标标签以及服务发现实现生成的标签）。</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string"># 如果honor_labels设置为"true"，则通过保留已抓取数据的标签值并忽略冲突的服务器端标签来解决标签冲突。</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># 如果honor_labels设置为"false"，则通过将已抓取数据中的冲突标签重命名为"exported_ &lt;original-label&gt;"（例如"exported_instance"，"exported_job"）然后附加服务器端标签来解决标签冲突。 这对于联合等用例很有用，其中应保留目标中指定的所有标签。</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string"># 请注意，任何全局配置的"external_labels"都不受此设置的影响。 在与外部系统通信时，它们始终仅在时间序列尚未具有给定标签时应用，否则将被忽略。</span></span><br><span class="line"><span class="string"># </span></span><br><span class="line"><span class="string">[ honor_labels: &lt;boolean&gt; | default = false ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 配置用于请求的协议方案.</span></span><br><span class="line"><span class="string">[ scheme: &lt;scheme&gt; | default = http ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 可选的HTTP URL参数.</span></span><br><span class="line"><span class="string"></span><span class="attr">params:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;string&gt;:</span> <span class="string">[&lt;string&gt;,</span> <span class="string">...]</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用配置的用户名和密码在每个scrape请求上设置`Authorization`标头。 password和password_file是互斥的。</span></span><br><span class="line"><span class="attr">basic_auth:</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">username:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">password:</span> <span class="string">&lt;secret&gt;</span> <span class="string">]</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">password_file:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用配置的承载令牌在每个scrape请求上设置`Authorization`标头。 它`bearer_token_file`和是互斥的。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">bearer_token:</span> <span class="string">&lt;secret&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用配置的承载令牌在每个scrape请求上设置`Authorization`标头。 它`bearer_token`和是互斥的。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">bearer_token_file:</span> <span class="string">/path/to/bearer/token/file</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置scrape请求的TLS设置.</span></span><br><span class="line"><span class="attr">tls_config:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;tls_config&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选的代理URL.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">proxy_url:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Azure服务发现配置列表.</span></span><br><span class="line"><span class="attr">azure_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;azure_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Consul服务发现配置列表.</span></span><br><span class="line"><span class="attr">consul_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;consul_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DNS服务发现配置列表。</span></span><br><span class="line"><span class="attr">dns_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;dns_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># EC2服务发现配置列表。</span></span><br><span class="line"><span class="attr">ec2_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;ec2_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># OpenStack服务发现配置列表。</span></span><br><span class="line"><span class="attr">openstack_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;openstack_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件服务发现配置列表。</span></span><br><span class="line"><span class="attr">file_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;file_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GCE服务发现配置列表。</span></span><br><span class="line"><span class="attr">gce_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;gce_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Kubernetes服务发现配置列表。</span></span><br><span class="line"><span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;kubernetes_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Marathon服务发现配置列表。</span></span><br><span class="line"><span class="attr">marathon_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;marathon_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># AirBnB的神经服务发现配置列表。</span></span><br><span class="line"><span class="attr">nerve_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;nerve_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Zookeeper Serverset服务发现配置列表。</span></span><br><span class="line"><span class="attr">serverset_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;serverset_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Triton服务发现配置列表。</span></span><br><span class="line"><span class="attr">triton_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;triton_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态抓取目标配置，一般只有极个别场景才会配置，否则会导致主配置文件更新频繁，并且很臃肿</span></span><br><span class="line"><span class="attr">static_configs:</span></span><br><span class="line">  <span class="comment"># 指定抓取目标的地址</span></span><br><span class="line"><span class="attr">  targets:</span></span><br><span class="line">    <span class="string">[</span> <span class="bullet">-</span> <span class="string">'&lt;host&gt;'</span> <span class="string">]</span></span><br><span class="line">  <span class="comment"># 对采集到的数据指定额外的标签</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">[</span> <span class="string">&lt;labelname&gt;:</span> <span class="string">&lt;labelvalue&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># target 标签重写规则</span></span><br><span class="line"><span class="attr">relabel_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;relabel_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># metrics 标签重写规则。</span></span><br><span class="line"><span class="attr">metric_relabel_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;relabel_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 样本数限制，超过规定之则被丢弃。0表示不限制</span></span><br><span class="line"><span class="string">[</span> <span class="attr">sample_limit:</span> <span class="string">&lt;int&gt;</span> <span class="string">| default = 0 ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># target 数量限制，超过的将被丢弃，目前为实验性功能。0表示不限制</span></span><br><span class="line"><span class="string">[ target_limit: &lt;int&gt; | default = 0 ]</span></span><br></pre></td></tr></table></figure>
<h3 id="tls-config"><a href="#tls-config" class="headerlink" title="tls_config"></a>tls_config</h3><p><code>tls_config</code>允许配置TLS连接。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于验证API服务器证书的CA证书。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">ca_file:</span> <span class="string">&lt;filename&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于服务器的客户端证书身份验证的证书和密钥文件。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">cert_file:</span> <span class="string">&lt;filename&gt;</span> <span class="string">]</span></span><br><span class="line"><span class="string">[</span> <span class="attr">key_file:</span> <span class="string">&lt;filename&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ServerName扩展名，用于指示服务器的名称。</span></span><br><span class="line"><span class="comment"># https://tools.ietf.org/html/rfc4366#section-3.1</span></span><br><span class="line"><span class="string">[</span> <span class="attr">server_name:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用服务器证书的验证。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">insecure_skip_verify:</span> <span class="string">&lt;boolean&gt;</span> <span class="string">]</span></span><br></pre></td></tr></table></figure>
<h3 id="file-sd-config"><a href="#file-sd-config" class="headerlink" title="file_sd_config"></a>file_sd_config</h3><p>配置target 的文件可以是json也可以是yaml，推荐使用yaml，方便查看。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主配置文件中 &lt;file_sd_config&gt;</span></span><br><span class="line"><span class="comment"># 配置target的文件列表</span></span><br><span class="line"><span class="attr">files:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;filename_pattern&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从这些文件中读取配置的时间间隔</span></span><br><span class="line"><span class="string">[</span> <span class="attr">refresh_interval:</span> <span class="string">&lt;duration&gt;</span> <span class="string">| default = 5m ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 自动发现文件配置案例</span></span><br><span class="line"><span class="string"></span><span class="attr">- targets:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">address1</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">address2</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    labelname1:</span> <span class="string">labelvalue1</span></span><br><span class="line"><span class="attr">    labelname2:</span> <span class="string">labelvalue2</span></span><br></pre></td></tr></table></figure>
<h3 id="dns-sd-config"><a href="#dns-sd-config" class="headerlink" title="dns_sd_config"></a>dns_sd_config</h3><p>基于DNS的服务发现配置允许指定一组DNS域名，这些域名会定期查询以发现目标列表。 要联系的DNS服务器从<code>/etc/resolv.conf</code>中读取。</p>
<p>此服务发现方法仅支持基本的DNS A，AAAA和SRV记录查询，但不支持RFC6763中指定的高级DNS-SD方法。</p>
<p>在重新标记阶段，元标签<code>__meta_dns_name</code>在每个目标上可用，并设置为生成已发现目标的记录名称。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要查询的DNS域名列表。</span></span><br><span class="line"><span class="attr">names:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;domain_name&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要执行的DNS查询的类型。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">type:</span> <span class="string">&lt;query_type&gt;</span> <span class="string">| default = 'SRV' ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 查询类型不是SRV时使用的端口号。</span></span><br><span class="line"><span class="string">[ port: &lt;number&gt;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 提供名称后刷新的时间。</span></span><br><span class="line"><span class="string">[ refresh_interval: &lt;duration&gt; | default = 30s ]</span></span><br></pre></td></tr></table></figure>
<p>其中<code>&lt;domain_name&gt;</code>是有效的DNS域名。 其中<code>&lt;query_type&gt;</code>是SRV，A或AAAA。</p>
<h3 id="consul-sd-configs"><a href="#consul-sd-configs" class="headerlink" title="consul_sd_configs"></a>consul_sd_configs</h3><p>consul 是基于go语言写的注册中心，在生产中可以作为prometheus自动发现的中间件。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># consul 地址信息</span></span><br><span class="line"><span class="string">[</span> <span class="attr">server:</span> <span class="string">&lt;host&gt;</span> <span class="string">| default = "localhost:8500" ]</span></span><br><span class="line"><span class="string">[ token: &lt;secret&gt; ]</span></span><br><span class="line"><span class="string">[ datacenter: &lt;string&gt; ]</span></span><br><span class="line"><span class="string">[ scheme: &lt;string&gt; | default = "http" ]</span></span><br><span class="line"><span class="string">[ username: &lt;string&gt; ]</span></span><br><span class="line"><span class="string">[ password: &lt;secret&gt; ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">tls_config:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;tls_config&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动发现请求访问哪些服务，默认是所有服务</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤目标节点，只有全部包含这些tag的服务地址才会给prometheus认定为target</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过元数据的键值对节点进行过滤</span></span><br><span class="line"><span class="string">[</span> <span class="attr">node_meta:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;string&gt;:</span> <span class="string">&lt;string&gt;</span> <span class="string">...</span> <span class="string">]</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The string by which Consul tags are joined into the tag label.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">tag_separator:</span> <span class="string">&lt;string&gt;</span> <span class="string">| default = , ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Allow stale Consul results (see https://www.consul.io/api/features/consistency.html). Will reduce load on Consul.</span></span><br><span class="line"><span class="string">[ allow_stale: &lt;boolean&gt; | default = true ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 访问consul的时间间隔</span></span><br><span class="line"><span class="string">[ refresh_interval: &lt;duration&gt; | default = 30s ]</span></span><br></pre></td></tr></table></figure>
<h3 id="kubernetes-sd-config"><a href="#kubernetes-sd-config" class="headerlink" title="kubernetes_sd_config"></a>kubernetes_sd_config</h3><p>Kubernetes SD配置允许从<a href="https://kubernetes.io/" target="_blank" rel="external">Kubernetes</a>的RESTAPI中检索scrape目标，并始终与群集状态保持同步。</p>
<p>可以配置以下<code>role</code>类型之一来发现目标：</p>
<ul>
<li>node</li>
<li>service</li>
<li>pod</li>
<li>endpoints</li>
<li>ingress</li>
</ul>
<h4 id="node"><a href="#node" class="headerlink" title="node"></a>node</h4><p><code>node</code>角色发现每个群集节点有一个目标，其地址默认为Kubelet的HTTP端口。 目标地址默认为<code>NodeInternalIP</code>，<code>NodeExternalIP</code>，<code>NodeLegacyHostIP</code>和<code>NodeHostName</code>的地址类型顺序中Kubernetes节点对象的第一个现有地址。</p>
<p>可用元标签：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__meta_kubernetes_node_name: 节点名称</span><br><span class="line">__meta_kubernetes_node_label_&lt;labelname&gt;: node的labels</span><br><span class="line">__meta_kubernetes_node_annotation_&lt;annotationname&gt;: node的annotation</span><br><span class="line">__meta_kubernetes_node_address_&lt;address_type&gt;: 如果存在四个值中(NodeInternalIP, NodeExternalIP, NodeLegacyHostIP, and NodeHostName)的一个</span><br></pre></td></tr></table></figure>
<p>此外，节点的<code>instance</code>标签将设置为从API服务器检索的节点名称。</p>
<h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><p><code>service</code>角色为每个服务发现每个服务端口的目标。 这对于服务的黑盒监控通常很有用。 该地址将设置为服务的Kubernetes DNS名称和相应的服务端口。</p>
<p>可用元标签：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__meta_kubernetes_namespace：服务对象的命名空间。</span><br><span class="line">__meta_kubernetes_service_annotation_&lt;annotationname&gt;：服务对象的注释。</span><br><span class="line">__meta_kubernetes_service_cluster_ip：服务的群集IP地址。 （不适用于ExternalName类型的服务）</span><br><span class="line">__meta_kubernetes_service_external_name：服务的DNS名称。 （适用于ExternalName类型的服务）</span><br><span class="line">__meta_kubernetes_service_label_ &lt;labelname&gt;：服务对象的标签。</span><br><span class="line">__meta_kubernetes_service_name：服务对象的名称。</span><br><span class="line">__meta_kubernetes_service_port_name：目标服务端口的名称。</span><br><span class="line">__meta_kubernetes_service_port_number：目标的服务端口号。</span><br><span class="line">__meta_kubernetes_service_port_protocol：目标服务端口的协议。</span><br></pre></td></tr></table></figure>
<h4 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h4><p><code>pod</code>角色发现所有<code>pod</code>并将其容器暴露为目标。 对于容器的每个声明端口，将生成单个目标。 如果容器没有指定端口，则会创建每个容器的无端口目标，以通过重新标记手动添加端口。</p>
<p>可用元标签：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__meta_kubernetes_namespace：pod对象的命名空间。</span><br><span class="line">__meta_kubernetes_pod_name：pod对象的名称。</span><br><span class="line">__meta_kubernetes_pod_ip：pod对象的pod IP。</span><br><span class="line">__meta_kubernetes_pod_label_ &lt;labelname&gt;：pod对象的标签。</span><br><span class="line">__meta_kubernetes_pod_annotation_ &lt;annotationname&gt;：pod对象的注释。</span><br><span class="line">__meta_kubernetes_pod_container_name：目标地址指向的容器的名称。</span><br><span class="line">__meta_kubernetes_pod_container_port_name：容器端口的名称。</span><br><span class="line">__meta_kubernetes_pod_container_port_number：容器端口号。</span><br><span class="line">__meta_kubernetes_pod_container_port_protocol：容器端口的协议。</span><br><span class="line">__meta_kubernetes_pod_ready：对于pod的就绪状态，设置为true或false。</span><br><span class="line">__meta_kubernetes_pod_phase：在生命周期中设置为Pending，Running，Succeeded，Failed或Unknown。</span><br><span class="line">__meta_kubernetes_pod_node_name：将pod安排到的节点的名称。</span><br><span class="line">__meta_kubernetes_pod_host_ip：pod对象的当前主机IP。</span><br><span class="line">__meta_kubernetes_pod_uid：pod对象的UID。</span><br><span class="line">__meta_kubernetes_pod_controller_kind：对象类型的pod控制器。</span><br><span class="line">__meta_kubernetes_pod_controller_name：pod控制器的名称。</span><br></pre></td></tr></table></figure>
<h4 id="endpoints"><a href="#endpoints" class="headerlink" title="endpoints"></a>endpoints</h4><p><code>endpoints</code>角色从列出的服务端点发现目标。 对于每个端点地址，每个端口发现一个目标。 如果端点由<code>pod</code>支持，则<code>pod</code>的所有其他容器端口（未绑定到端点端口）也会被发现为目标。</p>
<p>可用元标签：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__meta_kubernetes_namespace：端点对象的命名空间。</span><br><span class="line">__meta_kubernetes_endpoints_name：端点对象的名称。对于直接从端点列表中发现的所有目标（不是从底层pod中另外推断的那些），附加以下标签：</span><br><span class="line">__meta_kubernetes_endpoint_ready：对端点的就绪状态设置为true或false。</span><br><span class="line">__meta_kubernetes_endpoint_port_name：端点端口的名称。</span><br><span class="line">__meta_kubernetes_endpoint_port_protocol：端点端口的协议。</span><br><span class="line">__meta_kubernetes_endpoint_address_target_kind：端点地址目标的种类。</span><br><span class="line">__meta_kubernetes_endpoint_address_target_name：端点地址目标的名称。</span><br></pre></td></tr></table></figure>
<p>如果端点属于某个服务，则会附加角色：服务发现的所有标签。<br>对于由pod支持的所有目标，将附加角色的所有标签：pod发现。</p>
<h4 id="ingress"><a href="#ingress" class="headerlink" title="ingress"></a>ingress</h4><p><code>ingress</code>角色发现每个入口的每个路径的目标。 这通常用于黑盒监控入口。 地址将设置为入口规范中指定的主机。</p>
<p>可用元标签：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__meta_kubernetes_namespace：入口对象的名称空间。</span><br><span class="line">__meta_kubernetes_ingress_name：入口对象的名称。</span><br><span class="line">__meta_kubernetes_ingress_label_ &lt;labelname&gt;：入口对象的标签。</span><br><span class="line">__meta_kubernetes_ingress_annotation_&lt;annotationname&gt;：入口对象的注释。</span><br><span class="line">__meta_kubernetes_ingress_scheme：入口的协议方案，如果设置了TLS配置，则为https。 默认为http。</span><br><span class="line">__meta_kubernetes_ingress_path：来自入口规范的路径。 默认为/。</span><br></pre></td></tr></table></figure>
<p>有关Kubernetes发现的配置选项，请参见下文：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问Kubernetes API的信息。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># API服务器地址。 如果保留为空，则假定Prometheus在集群内部运行并自动发现API服务器，并在/var/run/secrets/kubernetes.io/serviceaccount/上使用pod的CA证书和不记名令牌文件。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">api_server:</span> <span class="string">&lt;host&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应该被发现的实体的Kubernetes角色。</span></span><br><span class="line"><span class="attr">role:</span> <span class="string">&lt;role&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于向API服务器进行身份验证的可选身份验证信息。请注意，`basic_auth`，`bearer_token`和`bearer_token_file`选项是互斥的.password和password_file是互斥的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选的HTTP基本认证信息。</span></span><br><span class="line"><span class="attr">basic_auth:</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">username:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">password:</span> <span class="string">&lt;secret&gt;</span> <span class="string">]</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">password_file:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选的承载令牌认证信息。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">bearer_token:</span> <span class="string">&lt;secret&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选的承载令牌文件认证信息。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">bearer_token_file:</span> <span class="string">&lt;filename&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选的代理URL。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">proxy_url:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TLS配置。</span></span><br><span class="line"><span class="attr">tls_config:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;tls_config&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选命名空间发现 如果省略，则使用所有名称空间。</span></span><br><span class="line"><span class="attr">namespaces:</span></span><br><span class="line"><span class="attr">  names:</span></span><br><span class="line">    <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br></pre></td></tr></table></figure>
<p>其中<code>&lt;role&gt;</code>必须是<code>endpoints</code>，<code>service</code>，<code>pod</code>，<code>node</code>或<code>ingress</code>。</p>
<p>有关为Kubernetes配置Prometheus的详细<a href="https://github.com/prometheus/prometheus/blob/release-2.8/documentation/examples/prometheus-kubernetes.yml" target="_blank" rel="external">示例</a>，请参阅此示例Prometheus配置文件。</p>
<p>您可能希望查看第三方Prometheus<a href="https://github.com/coreos/prometheus-operator" target="_blank" rel="external">操作</a>，它可以在Kubernetes上自动执行Prometheus设置。</p>
<h3 id="static-config"><a href="#static-config" class="headerlink" title="static_config"></a>static_config</h3><p>static_config允许指定目标列表和它们的公共标签集。 这是在scrape配置中指定静态目标的规范方法。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 静态配置指定的目标。</span></span><br><span class="line"><span class="attr">targets:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">'&lt;host&gt;'</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配给从目标中已抓取的所有指标的标签。</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;labelname&gt;:</span> <span class="string">&lt;labelvalue&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br></pre></td></tr></table></figure>
<h3 id="relabel-config"><a href="#relabel-config" class="headerlink" title="relabel_config"></a>relabel_config</h3><p>重新标记是一个功能强大的工具，可以在目标的标签集被抓取之前重写它，每个采集配置可以配置多个重写标签设置，并按照配置的顺序来应用于每个目标的标签集。</p>
<p>目标重新标签之后，以__开头的标签将从标签集中删除的。</p>
<p>如果使用只需要临时的存储临时标签值的，可以使用_tmp作为前缀标识。</p>
<p><strong>relabel的action类型</strong></p>
<ul>
<li>replace: regex匹配source_labels，替换为 replacement ，写入 target_label</li>
<li>keep：删除regex与source_labels不匹配的target</li>
<li>drop: 删除regex与source_labels匹配的target</li>
<li>labelmap: 对所有标签key进行regex匹配(不是source_labels)，将原标签的key替换为replacement指定的key，通常用于改写 <code>__</code> 开头的标签</li>
<li>labeldrop: 对所有标签key进行regex匹配(不是source_labels)，匹配到的标签被删除(不是target被删除)</li>
<li>labelkeep: 对所有标签key进行regex匹配(不是source_labels)，不匹配到的标签被删除(不是target被删除)</li>
<li>hashmod: 当一个job中监控目标数量太多时(自动发现中容易出现)，将任务分散到不同的机器上。hashmod会将 source_labels值哈希后采用 modulus 取余数，并赋值到一个标签，然后在接下来的relabel中进行保留或者剔除，这样能实现每个prometheus采集一部分target数据</li>
</ul>
<p>对于标签重写规则重点关注下。本节针对不同 action 进行 target 的标签重写，实验环境如下: 在 prometheus-72 上启动三个 node_exporter 实例，分别监听 8081, 8082, 8083 端口，prometheus-72 从这三个 node_exporter 中采集数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@prometheus-72 ~]# jobs</span><br><span class="line">[1]   Running                 /opt/apps/node_exporter/node_exporter --log.level=error --web.listen-address=&quot;:8081&quot; &amp;</span><br><span class="line">[2]-  Running                 /opt/apps/node_exporter/node_exporter --log.level=error --web.listen-address=&quot;:8082&quot; &amp;</span><br><span class="line">[3]+  Running                 /opt/apps/node_exporter/node_exporter --log.level=error --web.listen-address=&quot;:8083&quot; &amp;</span><br></pre></td></tr></table></figure>
<h4 id="action-replace"><a href="#action-replace" class="headerlink" title="action: replace"></a>action: replace</h4><p>重写规则之前：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@prometheus-72</span> <span class="string">prometheus]#</span> <span class="string">cat</span> <span class="string">prometheus.yml</span> </span><br><span class="line"><span class="attr">global:</span></span><br><span class="line"><span class="attr">  scrape_interval:</span>     <span class="number">60</span><span class="string">s</span></span><br><span class="line"><span class="attr">  external_labels:</span></span><br><span class="line"><span class="attr">    monitor:</span> <span class="string">'codelab-monitor'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'node'</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8081"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-01</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8082"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-02</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8083"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-02</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">slave</span></span><br></pre></td></tr></table></figure>
<p><img src="/Users/stark/Documents/mdPicture/v2-b1941b40a97078f539a5b1330bda4d27_1440w.jpg" alt="img"></p>
<p>添加新标签host，使其格式为: master-dev-72</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line"><span class="attr">  scrape_interval:</span>     <span class="number">60</span><span class="string">s</span></span><br><span class="line"><span class="attr">  external_labels:</span></span><br><span class="line"><span class="attr">    monitor:</span> <span class="string">'codelab-monitor'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'node'</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8081"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-01</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8082"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-02</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8083"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-02</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">slave</span></span><br><span class="line"><span class="attr">    relabel_configs:</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">["role",</span> <span class="string">"env"</span><span class="string">,</span> <span class="string">"__address__"</span><span class="string">]</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">host</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">(.+);(.+);([0-9]&#123;1,3&#125;\.)&#123;3&#125;([0-9]+):[0-9]+</span> <span class="comment"># source_labels默认 ; 拼接</span></span><br><span class="line"><span class="attr">        replacement:</span> <span class="string">$1-$2-$4</span></span><br></pre></td></tr></table></figure>
<p><img src="/Users/stark/Documents/mdPicture/v2-e50d6ab7222a91290374f9cec06d7da8_1440w.jpg" alt="img"></p>
<h4 id="action-keep"><a href="#action-keep" class="headerlink" title="action: keep"></a>action: keep</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line"><span class="attr">  scrape_interval:</span>     <span class="number">60</span><span class="string">s</span></span><br><span class="line"><span class="attr">  external_labels:</span></span><br><span class="line"><span class="attr">    monitor:</span> <span class="string">'codelab-monitor'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'node'</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8081"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-01</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8082"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-02</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8083"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-02</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">slave</span></span><br><span class="line"><span class="attr">    relabel_configs:</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">["role",</span> <span class="string">"env"</span><span class="string">,</span> <span class="string">"__address__"</span><span class="string">]</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">host</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">(.+);(.+);([0-9]&#123;1,3&#125;\.)&#123;3&#125;([0-9]+):[0-9]+</span> <span class="comment"># source_labels默认 ; 拼接</span></span><br><span class="line"><span class="attr">        replacement:</span> <span class="string">$1-$2-$4</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">["env"]</span>  <span class="comment"># 仅保留 env=prod 的target</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">keep</span></span><br></pre></td></tr></table></figure>
<p><img src="/Users/stark/Documents/mdPicture/v2-76caeb3f849f51aeb201d2ca4314c72e_1440w.jpg" alt="img"></p>
<h4 id="action-drop"><a href="#action-drop" class="headerlink" title="action: drop"></a>action: drop</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line"><span class="attr">  scrape_interval:</span>     <span class="number">60</span><span class="string">s</span></span><br><span class="line"><span class="attr">  external_labels:</span></span><br><span class="line"><span class="attr">    monitor:</span> <span class="string">'codelab-monitor'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'node'</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8081"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-01</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8082"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-02</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8083"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-02</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">slave</span></span><br><span class="line"><span class="attr">    relabel_configs:</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">["role",</span> <span class="string">"env"</span><span class="string">,</span> <span class="string">"__address__"</span><span class="string">]</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">host</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">(.+);(.+);([0-9]&#123;1,3&#125;\.)&#123;3&#125;([0-9]+):[0-9]+</span> <span class="comment"># source_labels默认 ; 拼接</span></span><br><span class="line"><span class="attr">        replacement:</span> <span class="string">$1-$2-$4</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">["env"]</span>  <span class="comment"># 删除 lable_name 为env，切value为prod的target</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">drop</span></span><br></pre></td></tr></table></figure>
<p><img src="/Users/stark/Documents/mdPicture/v2-fbb4a88fbc5b39703537a70c716d6eca_1440w.jpg" alt="img"></p>
<h4 id="action-labelkeep"><a href="#action-labelkeep" class="headerlink" title="action: labelkeep"></a>action: labelkeep</h4><p>尽量不要删除 <code>__</code> 的标签，比如删了 <code>__address__</code> 标签会导致 <code>instance</code> 生成异常，进而导致无法获取target信息</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@prometheus-72</span> <span class="string">prometheus]#</span> <span class="string">cat</span> <span class="string">prometheus.yml</span> </span><br><span class="line"><span class="attr">global:</span></span><br><span class="line"><span class="attr">  scrape_interval:</span>     <span class="number">60</span><span class="string">s</span></span><br><span class="line"><span class="attr">  external_labels:</span></span><br><span class="line"><span class="attr">    monitor:</span> <span class="string">'codelab-monitor'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'node'</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8081"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-01</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8082"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-02</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8083"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-02</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">slave</span></span><br><span class="line"><span class="attr">    relabel_configs:</span></span><br><span class="line"><span class="attr">      - regex:</span> <span class="string">(__|role).*</span> <span class="comment"># 非临时标签仅保留 role</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">labelkeep</span></span><br></pre></td></tr></table></figure>
<p><img src="/Users/stark/Documents/mdPicture/v2-bb66413af170d5fefb95de1b3a3b9e57_1440w.jpg" alt="img"></p>
<h4 id="action-labeldrop"><a href="#action-labeldrop" class="headerlink" title="action: labeldrop"></a>action: labeldrop</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line"><span class="attr">  scrape_interval:</span>     <span class="number">60</span><span class="string">s</span></span><br><span class="line"><span class="attr">  external_labels:</span></span><br><span class="line"><span class="attr">    monitor:</span> <span class="string">'codelab-monitor'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'node'</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8081"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-01</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8082"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-02</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8083"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-02</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">slave</span></span><br><span class="line"><span class="attr">    relabel_configs:</span></span><br><span class="line"><span class="attr">      - regex:</span> <span class="string">env</span>  <span class="comment"># 将env标签删除，并是上次target</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">labeldrop</span></span><br></pre></td></tr></table></figure>
<p><img src="/Users/stark/Documents/mdPicture/v2-2acf180c991f0125c96ef6cf1c0ea5f0_1440w.png" alt="img"></p>
<h4 id="action-labelmap"><a href="#action-labelmap" class="headerlink" title="action: labelmap"></a>action: labelmap</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line"><span class="attr">  scrape_interval:</span>     <span class="number">60</span><span class="string">s</span></span><br><span class="line"><span class="attr">  external_labels:</span></span><br><span class="line"><span class="attr">    monitor:</span> <span class="string">'codelab-monitor'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'node'</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8081"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-01</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8082"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-02</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8083"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-02</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">slave</span></span><br><span class="line"><span class="attr">    relabel_configs:</span></span><br><span class="line"><span class="attr">      - regex:</span> <span class="string">__(.+)__</span> <span class="comment"># 将所有双下划线的标签名改为非双下划线的标签名称</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">labelmap</span></span><br></pre></td></tr></table></figure>
<p><img src="/Users/stark/Documents/mdPicture/v2-ca15037ee5e370b049e832ed77c68564_1440w.jpg" alt="img"></p>
<h4 id="action-hashmod"><a href="#action-hashmod" class="headerlink" title="action: hashmod"></a>action: hashmod</h4><p>当一个job中监控目标数量太多时(自动发现中容易出现)，将任务分散到不同的机器上。hashmod会将 source_labels值哈希后采用 modulus 取余数，并赋值到一个标签，然后在接下来的relabel中进行保留或者剔除，这样能实现每个prometheus采集一部分target数据。下面案例中，其余后 __tmp_hash_value 值有 0、1、2，因此将target分为三组，可以由三个不同的prometheus去获取监控指标。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line"><span class="attr">  scrape_interval:</span>     <span class="number">60</span><span class="string">s</span></span><br><span class="line"><span class="attr">  external_labels:</span></span><br><span class="line"><span class="attr">    monitor:</span> <span class="string">'codelab-monitor'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'node'</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8081"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-01</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8082"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-02</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">["10.4.7.72:8083"]</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">          app:</span> <span class="string">app-02</span></span><br><span class="line"><span class="attr">          env:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">          role:</span> <span class="string">slave</span></span><br><span class="line"><span class="attr">    relabel_configs:</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">["__address__"]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">hashmod</span></span><br><span class="line"><span class="attr">        modulus:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">__tmp_hash_value</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__tmp_hash_value]</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">"0"</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">drop</span></span><br></pre></td></tr></table></figure>
<p><img src="/Users/stark/Documents/mdPicture/v2-c7ac5f9c6fce85d158cce27d886d1f55_1440w.jpg" alt="img"></p>
<h3 id="metric-relabel-configs"><a href="#metric-relabel-configs" class="headerlink" title="metric_relabel_configs"></a>metric_relabel_configs</h3><p>Prometheus 从数据源拉取数据后，会对原始数据进行编辑</p>
<p>其中 <code>metric_relabel_configs</code>是 Prometheus 在保存数据前的最后一步标签重新编辑（relabel_configs）。所以，哪怕你将 <code>metric_relabel_configs</code>模块放在 <code>job_name</code>模块的最前端，Prometheus 解析编辑文件后，也会将 <code>metric_relabel_configs</code>放在最后。</p>
<p><code>metric_relabel_configs</code> 模块和 <code>relabel_config</code> 模块很相似。<code>metric_relabel_configs</code>一个很常用的用途：将监控不需要的数据，直接丢掉，不在Prometheus 中保存。</p>
<p>一般用于：</p>
<ol>
<li>删除不必要的指标。</li>
<li>从指标中删除敏感或不需要的标签。</li>
<li>添加、编辑或者修改指标的标签值或者标签格式。</li>
</ol>
<h4 id="删除不需要的指标-metric"><a href="#删除不需要的指标-metric" class="headerlink" title="删除不需要的指标(metric)"></a>删除不需要的指标(metric)</h4><p>prometheus 默认会将所有拉取到的 metrics 都写入自己的存储中。如果某些 metrics 对我们并没有太多意义，可以设置直接丢掉，减少磁盘空间的浪费。<code>‘node_netstat_Icmp_OutMsgs’</code> 指标数据。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">metric_relabel_configs:</span></span><br><span class="line"><span class="attr"> - source_labels:</span> <span class="string">[</span> <span class="string">__name__</span> <span class="string">]</span></span><br><span class="line"><span class="attr">   regex:</span> <span class="string">'node_netstat_Icmp_OutMsgs'</span></span><br><span class="line"><span class="attr">   action:</span> <span class="string">drop</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>source_labels</code> 参数选择要要操作的指标，并且还需要一组标签名称。<br>示例中使用 <code>__name__</code> 标签，此标签是标识指标名称的预留标签。</p>
<p>如上，我们丢掉指定<code>job_name</code>中的</p>
<p>参考上面的配置，我们可以对指标(metric) 进行添加，删除，重命名等操作。</p>
<h4 id="修改指标-metric-中的标签-label"><a href="#修改指标-metric-中的标签-label" class="headerlink" title="修改指标(metric) 中的标签(label)"></a>修改指标(metric) 中的标签(label)</h4><p>如果我们使用 prometheus 监控 Kubernetes 运行状态；应该会遇到，在一个 <code>query</code> 中结合一个以上的<code>job_name(metric_source)</code>的情况。<br>不同的<code>job_name</code>中<code>metric</code>的<code>label</code>命名可能不相同。比如：pod的名称可以使用“pod”或者“pod_name” 这两个 <code>label</code>记录。如果相同含义的label，名称却不相同；对query的编写就很困难了。至少我没有在<code>PromQL</code>中找到类似<code>SQL 语句中的 as 的功能的关键词和方法</code>。<br>这样的话，正确的解决思路应该是在 Prometheus 拉取数据后，保存数据前；将 label 的名称进行重写；保证相同含义的label 有相同的名称。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">metric_relabel_configs:</span></span><br><span class="line"><span class="attr">  - source_labels:</span> <span class="string">[pod]</span></span><br><span class="line"><span class="attr">    separator:</span> <span class="string">;</span></span><br><span class="line"><span class="attr">    regex:</span> <span class="string">(.+)</span></span><br><span class="line"><span class="attr">    target_label:</span> <span class="string">pod_name</span></span><br><span class="line"><span class="attr">    replacement:</span> <span class="string">$1</span></span><br><span class="line"><span class="attr">    action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">  - source_labels:</span> <span class="string">[container]</span></span><br><span class="line"><span class="attr">    separator:</span> <span class="string">;</span></span><br><span class="line"><span class="attr">    regex:</span> <span class="string">(.+)</span></span><br><span class="line"><span class="attr">    target_label:</span> <span class="string">container_name</span></span><br><span class="line"><span class="attr">    replacement:</span> <span class="string">$1</span></span><br><span class="line"><span class="attr">    action:</span> <span class="string">replace</span></span><br></pre></td></tr></table></figure>
<p>如上，将指定<code>job_name</code>中，所有的<code>metrics</code>中含有名为“pod”和“container”名称的<code>label</code>分别拷贝到名为“pod_name”，“container_name”的label中。<br>注意：如果metric 的 label的名称包含了“pod”和“container”关键词，但是不等于；则不会处理此label。</p>
<h4 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h4><p>删除标签通常用于隐藏敏感信息或者简化时间序列。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">metric_relabel_configs:</span></span><br><span class="line"><span class="attr">- regex:</span> <span class="string">'kernelVersion'</span></span><br><span class="line"><span class="attr">  action:</span> <span class="string">labeldrop</span></span><br></pre></td></tr></table></figure>
<p>为了删除标签，我们指定了一个正则表达式，然后指定删除标签的操作labeldrop。<br>这将删除与正在表达式匹配的所有标签。</p>
<h3 id="remote-write"><a href="#remote-write" class="headerlink" title="remote_write"></a>remote_write</h3><p><code>write_relabel_configs</code>是在将样本发送到远程端点之前应用于样本的重新标记。 在外部标签之后应用写入重新标记。 这可用于限制发送的样本。</p>
<p>有一个如何使用此功能的小型<a href="https://github.com/prometheus/prometheus/tree/release-2.8/documentation/examples/remote_storage" target="_blank" rel="external">演示</a>。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要发送样本的端点的URL.</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">&lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对远程写端点的请求超时。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">remote_timeout:</span> <span class="string">&lt;duration&gt;</span> <span class="string">| default = 30s ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 远程写入重新标记配置列表。</span></span><br><span class="line"><span class="string"></span><span class="attr">write_relabel_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;relabel_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用配置的用户名和密码在每个远程写请求上设置`Authorization`标头.password和password_file是互斥的。</span></span><br><span class="line"><span class="attr">basic_auth:</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">username:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">password:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">password_file:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用配置的承载令牌在每个远程写请求上设置`Authorization`头。 它与`bearer_token_file`互斥。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">bearer_token:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用配置的承载令牌在每个远程写请求上设置`Authorization`头。 它与`bearer_token`互斥。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">bearer_token_file:</span> <span class="string">/path/to/bearer/token/file</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置远程写入请求的TLS设置。</span></span><br><span class="line"><span class="attr">tls_config:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;tls_config&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选的代理URL。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">proxy_url:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置用于写入远程存储的队列。</span></span><br><span class="line"><span class="attr">queue_config:</span></span><br><span class="line">  <span class="comment"># 在我们开始删除之前每个分片缓冲的样本数。</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">capacity:</span> <span class="string">&lt;int&gt;</span> <span class="string">| default = 10000 ]</span></span><br><span class="line"><span class="string">  # 最大分片数，即并发数。</span></span><br><span class="line"><span class="string">  [ max_shards: &lt;int&gt; | default = 1000 ]</span></span><br><span class="line"><span class="string">  # 最小分片数，即并发数。</span></span><br><span class="line"><span class="string">  [ min_shards: &lt;int&gt; | default = 1 ]</span></span><br><span class="line"><span class="string">  # 每次发送的最大样本数。</span></span><br><span class="line"><span class="string">  [ max_samples_per_send: &lt;int&gt; | default = 100]</span></span><br><span class="line"><span class="string">  # 样本在缓冲区中等待的最长时间。</span></span><br><span class="line"><span class="string">  [ batch_send_deadline: &lt;duration&gt; | default = 5s ]</span></span><br><span class="line"><span class="string">  # 在可恢复错误上重试批处理的最大次数。</span></span><br><span class="line"><span class="string">  [ max_retries: &lt;int&gt; | default = 3 ]</span></span><br><span class="line"><span class="string">  # 初始重试延迟。 每次重试都会加倍。</span></span><br><span class="line"><span class="string">  [ min_backoff: &lt;duration&gt; | default = 30ms ]</span></span><br><span class="line"><span class="string">  # 最大重试延迟。</span></span><br><span class="line"><span class="string">  [ max_backoff: &lt;duration&gt; | default = 100ms ]</span></span><br></pre></td></tr></table></figure>
<p>有一个与此功能<a href="https://prometheus.io/docs/operating/integrations/#remote-endpoints-and-storage" target="_blank" rel="external">集成</a>的列表。</p>
<h3 id="remote-read"><a href="#remote-read" class="headerlink" title="remote_read"></a>remote_read</h3><p>prometheus 可以从远程存储读取时间序列数据</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要发送样本的端点的URL.</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">&lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选的匹配器列表，必须存在于选择器中以查询远程读取端点。</span></span><br><span class="line"><span class="attr">required_matchers:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;labelname&gt;:</span> <span class="string">&lt;labelvalue&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对远程读取端点的请求超时。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">remote_timeout:</span> <span class="string">&lt;duration&gt;</span> <span class="string">| default = 1m ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 本地存储应该有完整的数据。</span></span><br><span class="line"><span class="string">[ read_recent: &lt;boolean&gt; | default = false ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 使用配置的用户名和密码在每个远程写请求上设置`Authorization`标头.password和password_file是互斥的。</span></span><br><span class="line"><span class="string"></span><span class="attr">basic_auth:</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">username:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">password:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">password_file:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用配置的承载令牌在每个远程写请求上设置`Authorization`头。 它与`bearer_toke_filen`互斥。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">bearer_token:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用配置的承载令牌在每个远程写请求上设置`Authorization`头。 它与`bearer_token`互斥。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">bearer_token_file:</span> <span class="string">/path/to/bearer/token/file</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置远程写入请求的TLS设置。</span></span><br><span class="line"><span class="attr">tls_config:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;tls_config&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选的代理URL。</span></span><br><span class="line"><span class="string">[</span> <span class="attr">proxy_url:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br></pre></td></tr></table></figure>
<p>有一个与此功能<a href="https://prometheus.io/docs/operating/integrations/#remote-endpoints-and-storage" target="_blank" rel="external">集成</a>的列表。</p>
<h1 id="其他监控工具"><a href="#其他监控工具" class="headerlink" title="其他监控工具"></a>其他监控工具</h1><p>在前言中，简单介绍了我们选择 Prometheus 的理由，以及使用后给我们带来的好处。</p>
<p>在这里主要和其他监控方案对比，方便大家更好的了解 Prometheus。</p>
<h2 id="Prometheus-vs-Zabbix"><a href="#Prometheus-vs-Zabbix" class="headerlink" title="Prometheus vs Zabbix"></a>Prometheus vs Zabbix</h2><ul>
<li>Zabbix 使用的是 C 和 PHP, Prometheus 使用 Golang, 整体而言 Prometheus 运行速度更快一点。</li>
<li>Zabbix 属于传统主机监控，主要用于物理主机，交换机，网络等监控，Prometheus 不仅适用主机监控，还适用于 Cloud, SaaS, Openstack，Container 监控。</li>
<li>Zabbix 在传统主机监控方面，有更丰富的插件。</li>
<li>Zabbix 可以在 WebGui 中配置很多事情，但是 Prometheus 需要手动修改文件配置。</li>
</ul>
<h2 id="Prometheus-vs-Graphite"><a href="#Prometheus-vs-Graphite" class="headerlink" title="Prometheus vs Graphite"></a>Prometheus vs Graphite</h2><ul>
<li><a href="http://graphite.readthedocs.io/en/latest/overview.html" target="_blank" rel="external">Graphite</a> 功能较少，它专注于两件事，存储时序数据， 可视化数据，其他功能需要安装相关插件，而 Prometheus 属于一站式，提供告警和趋势分析的常见功能，它提供更强的数据存储和查询能力。</li>
<li>在水平扩展方案以及数据存储周期上，Graphite 做的更好。</li>
</ul>
<h2 id="Prometheus-vs-InfluxDB"><a href="#Prometheus-vs-InfluxDB" class="headerlink" title="Prometheus vs InfluxDB"></a>Prometheus vs InfluxDB</h2><ul>
<li><a href="https://www.influxdata.com/" target="_blank" rel="external">InfluxDB</a> 是一个开源的时序数据库，主要用于存储数据，如果想搭建监控告警系统， 需要依赖其他系统。</li>
<li>InfluxDB 在存储水平扩展以及高可用方面做的更好, 毕竟核心是数据库。</li>
</ul>
<h2 id="Prometheus-vs-OpenTSDB"><a href="#Prometheus-vs-OpenTSDB" class="headerlink" title="Prometheus vs OpenTSDB"></a>Prometheus vs OpenTSDB</h2><ul>
<li><a href="http://opentsdb.net/" target="_blank" rel="external">OpenTSDB</a> 是一个分布式时序数据库，它依赖 Hadoop 和 HBase，能存储更长久数据， 如果你系统已经运行了 Hadoop 和 HBase, 它是个不错的选择。</li>
<li>如果想搭建监控告警系统，OpenTSDB 需要依赖其他系统。</li>
</ul>
<h2 id="Prometheus-vs-Nagios"><a href="#Prometheus-vs-Nagios" class="headerlink" title="Prometheus vs Nagios"></a>Prometheus vs Nagios</h2><ul>
<li><a href="https://www.nagios.org/" target="_blank" rel="external">Nagios</a> 数据不支持自定义 Labels, 不支持查询，告警也不支持去噪，分组, 没有数据存储，如果想查询历史状态，需要安装插件。</li>
<li>Nagios 是上世纪 90 年代的监控系统，比较适合小集群或静态系统的监控，显然 Nagios 太古老了，很多特性都没有，相比之下Prometheus 要优秀很多。</li>
</ul>
<h2 id="Prometheus-vs-Sensu"><a href="#Prometheus-vs-Sensu" class="headerlink" title="Prometheus vs Sensu"></a>Prometheus vs Sensu</h2><ul>
<li><a href="https://sensuapp.org/" target="_blank" rel="external">Sensu</a> 广义上讲是 Nagios 的升级版本，它解决了很多 Nagios 的问题，如果你对 Nagios 很熟悉，使用 Sensu 是个不错的选择。</li>
<li>Sensu 依赖 RabbitMQ 和 Redis，数据存储上扩展性更好。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>Prometheus 属于一站式监控告警平台，依赖少，功能齐全。</li>
<li>Prometheus 支持对云或容器的监控，其他系统主要对主机监控。</li>
<li>Prometheus 数据查询语句表现力更强大，内置更强大的统计函数。</li>
<li>Prometheus 在数据存储扩展性以及持久性上没有 InfluxDB，OpenTSDB，Sensu 好。</li>
</ul>
<p>参考：</p>
<p><a href="https://blog.51cto.com/wzlinux/2487300" target="_blank" rel="external">prometheus 监控概述(一)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/269882810" target="_blank" rel="external">prometheus 配置文件</a></p>
<p><a href="https://blog.csdn.net/qq_21816375/article/details/80193426?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.baidujs&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.baidujs" target="_blank" rel="external">prometheus之配置详解</a></p>
<p><a href="https://blog.csdn.net/Coffin_monkey/article/details/90572867?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-8&amp;spm=1001.2101.3001.4242" target="_blank" rel="external">Prometheus学习系列（十三）之配置解析</a></p>
<p><a href="https://blog.51cto.com/wzlinux/2498087" target="_blank" rel="external">prometheus relabel 配置</a></p>
<p><a href="https://blog.csdn.net/qq_34556414/article/details/113544575" target="_blank" rel="external">Prometheus 配置文件中 metric_relabel_configs 配置</a></p>
<p><a href="https://blog.csdn.net/u013616005/article/details/107326169?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.baidujs&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.baidujs" target="_blank" rel="external">prometheus配置看着一篇就够了</a></p>
]]></content>
      
        <categories>
            
            <category> Prometheus </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Pecan 框架使用及源码分析]]></title>
      <url>https://magiceses.github.io/2020/06/10/python-web-pecan%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">别人怎样去看待你的价值并不重要，重要是你自己怎样看待自身的价值。即便你是一块货真价实的金子，多说己长也便是短，自知己短便是长。一个人的真正伟大之处，就在于能认识到自己的渺小。<br></p>

<p><code>Pecan</code>框架的目标是实现一个采用对象分发方式进行<code>URL</code>路由的轻量级<code>Web</code>框架。它非常专注于自己的目标，它的大部分功能都和<code>URL</code>路</p>
<p>由以及请求和响应的处理相关，而不去实现模板、安全以及数据库层，这些东西都可以通过其他的库来实现。关于<code>Pecan</code>的更多信息，可</p>
<p>以 <a href="https://pecan.readthedocs.org/en/latest/index.html" target="_blank" rel="external">查看文档</a></p>
<a id="more"></a>
<h1 id="pecan-工程创建"><a href="#pecan-工程创建" class="headerlink" title="pecan 工程创建"></a>pecan 工程创建</h1><h2 id="pecan源码目录"><a href="#pecan源码目录" class="headerlink" title="pecan源码目录"></a>pecan源码目录</h2><p><img src="/images/python-web-pecan-1.png" alt="在这里插入图片描述"></p>
<h2 id="创建-pecan-工程"><a href="#创建-pecan-工程" class="headerlink" title="创建 pecan 工程"></a>创建 pecan 工程</h2><h3 id="一般工程"><a href="#一般工程" class="headerlink" title="一般工程"></a>一般工程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pecan create <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>创建pecan工程用到了bin下的pecan脚本</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// bin/pecan</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">from</span> pecan.commands <span class="keyword">import</span> CommandRunner</span><br><span class="line">    CommandRunner.handle_command_line()</span><br></pre></td></tr></table></figure>
<p>调用了pecan/commands/base.py下的CommandRunner类中的handle_command_line()方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 具体处理命令</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, args)</span>:</span></span><br><span class="line">    ns = self.parser.parse_args(args) <span class="comment"># 解析参数</span></span><br><span class="line">    self.commands[ns.command_name]().run(ns) <span class="comment"># 执行命令，相当于执行commands下相应模块中的run方法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_command_line</span><span class="params">(cls)</span>:</span></span><br><span class="line">    runner = CommandRunner() <span class="comment"># 实例化该对象时，加载commands文件夹下定义的名命令</span></span><br><span class="line">    runner.run(sys.argv[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pecan/commands/base.py</span></span><br><span class="line"><span class="comment"># 加载command的方法，entry point在setup.py里面注册了</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_commands</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> ep <span class="keyword">in</span> pkg_resources.iter_entry_points(<span class="string">'pecan.command'</span>):</span><br><span class="line">        log.debug(<span class="string">'%s loading plugin %s'</span>, self.__class__.__name__, ep)</span><br><span class="line">        <span class="keyword">if</span> ep.name <span class="keyword">in</span> self.commands:</span><br><span class="line">            warn(</span><br><span class="line">                <span class="string">"Duplicate entry points found on `%s` - ignoring %s"</span> % (</span><br><span class="line">                    ep.name,</span><br><span class="line">                    ep</span><br><span class="line">                ),</span><br><span class="line">                RuntimeWarning</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">        	  <span class="comment"># 该方法是去加载模块中含有run方法的类</span></span><br><span class="line">            cmd = ep.load()</span><br><span class="line">            cmd.run  <span class="comment"># 确保加载的类有run方法</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  <span class="comment"># pragma: nocover</span></span><br><span class="line">            warn(<span class="string">"Unable to load plugin %s: %s"</span> % (ep, e), RuntimeWarning)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        self.add(&#123;ep.name: cmd&#125;) <span class="comment"># 添加到self.commands字典里面，上面的run运行时，从字典中取出类，实例化，然后调用run方法</span></span><br></pre></td></tr></table></figure>
<p>可以看到，pecan创建工程的过程和django类似（其实基本所有的python web框架都是一样的）</p>
<p>下面来看看创建工程具体做了什么工作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  pecan/commands/create.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScaffoldManager</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.scaffolds = &#123;&#125;</span><br><span class="line">        self.load_scaffolds()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_scaffolds</span><span class="params">(self)</span>:</span></span><br><span class="line">    	  <span class="comment"># 加载在setup.py文件中注册了的类</span></span><br><span class="line">        <span class="keyword">for</span> ep <span class="keyword">in</span> pkg_resources.iter_entry_points(<span class="string">'pecan.scaffold'</span>):</span><br><span class="line">            log.debug(<span class="string">'%s loading scaffold %s'</span>, self.__class__.__name__, ep)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                cmd = ep.load()</span><br><span class="line">                cmd.copy_to	<span class="comment"># 确保有copy_to方法</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  <span class="comment"># pragma: nocover</span></span><br><span class="line">                warn(</span><br><span class="line">                    <span class="string">"Unable to load scaffold %s: %s"</span> % (ep, e), RuntimeWarning</span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.add(&#123;ep.name: cmd&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, cmd)</span>:</span></span><br><span class="line">        self.scaffolds.update(cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateCommand</span><span class="params">(BaseCommand)</span>:</span></span><br><span class="line">	  <span class="comment"># 通过实例化该对象，加载pecan/scaffolds下的BaseScaffold和RestAPIScaffold类，加载方法和加载command方法一样</span></span><br><span class="line">    manager = ScaffoldManager()</span><br><span class="line">    arguments = (&#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'project_name'</span>,</span><br><span class="line">        <span class="string">'help'</span>: <span class="string">'the (package) name of the new project'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'template_name'</span>,</span><br><span class="line">        <span class="string">'metavar'</span>: <span class="string">'template_name'</span>,</span><br><span class="line">        <span class="string">'help'</span>: <span class="string">'a registered Pecan template'</span>,</span><br><span class="line">        <span class="string">'nargs'</span>: <span class="string">'?'</span>,</span><br><span class="line">        <span class="string">'default'</span>: DEFAULT_SCAFFOLD, <span class="comment"># 值为base，会调用BaseScaffold的实例</span></span><br><span class="line">        <span class="string">'choices'</span>: manager.scaffolds.keys()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment"># 该方法会首先执行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, args)</span>:</span></span><br><span class="line">        super(CreateCommand, self).run(args)</span><br><span class="line">        <span class="comment">#  self.manager.scaffolds为&#123;'rest-api': &lt;class 'pecan.scaffolds.RestAPIScaffold'&gt;, 'base': &lt;class 'pecan.scaffolds.BaseScaffold'&gt;&#125;</span></span><br><span class="line">        <span class="comment"># 具体由RestAPIScaffold和BaseScaffold去创建工程</span></span><br><span class="line">        self.manager.scaffolds[args.template_name]().copy_to(</span><br><span class="line">            args.project_name	<span class="comment"># 项目名：test</span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：通过上面的代码可以知道，默认创建工程时使用的是BaseScaffold类，创建的是一般的pecan工程，而要创建restful的pecan工程，则需要使用下面的方式创建</p>
</blockquote>
<h3 id="Restful工程"><a href="#Restful工程" class="headerlink" title="Restful工程"></a>Restful工程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pecan create <span class="built_in">test</span> rest-api</span><br></pre></td></tr></table></figure>
<p>BaseScaffold和RestAPIScaffold调用copy_to(project_name)方法去创建工程，主要工作就是根据传入的项目名创建目录，拷贝文件等，pecan/scaffolds模块中放置了相关的模板文件</p>
<p><img src="/images/python-web-pecan-2.png" alt="在这里插入图片描述"></p>
<p>至此，一个pecan工程就创建完毕。</p>
<h2 id="运行-pecan-工程"><a href="#运行-pecan-工程" class="headerlink" title="运行 pecan 工程"></a>运行 pecan 工程</h2><p>运行方式：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pecan serve config.py</span><br></pre></td></tr></table></figure>
<p>和创建工程一样，运行时调用了pecan/commands/create.py模块的方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, args)</span>:</span></span><br><span class="line">    super(ServeCommand, self).run(args)</span><br><span class="line">    app = self.load_app() <span class="comment"># 创建一个app</span></span><br><span class="line">    self.serve(app, app.config) <span class="comment"># 部署app</span></span><br></pre></td></tr></table></figure>
<p>众所周知，要运行一个python的web服务，需要两个条件：</p>
<ul>
<li>application</li>
<li>wsgi server</li>
</ul>
<p>上面的load_app()方法创建了一个application（会调用到core.py里面的load_app()方法）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pecan/core.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_app</span><span class="params">(config, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> .configuration <span class="keyword">import</span> _runtime_conf, set_config</span><br><span class="line">    <span class="comment"># 根据配置文件初始化配置</span></span><br><span class="line">    set_config(config, overwrite=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">for</span> package_name <span class="keyword">in</span> getattr(_runtime_conf.app, <span class="string">'modules'</span>, []):</span><br><span class="line">        module = __import__(package_name, fromlist=[<span class="string">'app'</span>])</span><br><span class="line">        <span class="comment"># 项目工程创建好后，有个test/test/app.py文件，里面的setup_app(config)具体来创建app</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(module, <span class="string">'app'</span>) <span class="keyword">and</span> hasattr(module.app, <span class="string">'setup_app'</span>):</span><br><span class="line">        	  <span class="comment"># 这里开始创建一个app</span></span><br><span class="line">            app = module.app.setup_app(_runtime_conf, **kwargs)</span><br><span class="line">            app.config = _runtime_conf</span><br><span class="line">            <span class="keyword">return</span> app</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(</span><br><span class="line">        <span class="string">'No app.setup_app found in any of the configured app.modules'</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># test/test/app.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_app</span><span class="params">(config)</span>:</span></span><br><span class="line">    model.init_model()	<span class="comment"># 创建app时，初始化model，一般在这实现orm映射</span></span><br><span class="line">    app_conf = dict(config.app)</span><br><span class="line">    <span class="comment"># test/conifg.py文件中有app配置项，定义了app的重要内容</span></span><br><span class="line">    <span class="keyword">return</span> make_app(</span><br><span class="line">        app_conf.pop(<span class="string">'root'</span>),</span><br><span class="line">        logging=getattr(config, <span class="string">'logging'</span>, &#123;&#125;),</span><br><span class="line">        **app_conf</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># pecan/__init__.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_app</span><span class="params">(root, **kw)</span>:</span></span><br><span class="line">  	...</span><br><span class="line">  	<span class="comment"># root是test/config.py中app项里面配置的，作为路由的入口</span></span><br><span class="line">    app = Pecan(root, **kw)</span><br><span class="line">	...</span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure>
<p>app其实就是一个Pecan实例。</p>
<p>对于wsgi server，下面的代码可以看出，pecan使用了python内置的simple_server</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pecan/commands/serve.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serve</span><span class="params">(self, app, conf)</span>:</span></span><br><span class="line">      <span class="keyword">if</span> self.args.reload:</span><br><span class="line">          <span class="keyword">try</span>:</span><br><span class="line">          		<span class="comment"># 使用了watchdog，用于修改文件后自动部署（暂不做讲解）</span></span><br><span class="line">              self.watch_and_spawn(conf)</span><br><span class="line">          <span class="keyword">except</span> ImportError:</span><br><span class="line">              print(<span class="string">'The `--reload` option requires `watchdog` to be '</span></span><br><span class="line">                    <span class="string">'installed.'</span>)</span><br><span class="line">              print(<span class="string">'   $ pip install watchdog'</span>)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">      		<span class="comment"># 这里就是具体部署app的方法</span></span><br><span class="line">          self._serve(app, conf)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_serve</span><span class="params">(self, app, conf)</span>:</span></span><br><span class="line">	<span class="comment"># 引入python内置simple_server </span></span><br><span class="line">   <span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line">   host, port = conf.server.host, int(conf.server.port)</span><br><span class="line">   srv = make_server(</span><br><span class="line">       host,</span><br><span class="line">       port,</span><br><span class="line">       app, <span class="comment"># 创建的app</span></span><br><span class="line">       handler_class=PecanWSGIRequestHandler, <span class="comment"># 处理器</span></span><br><span class="line">   )</span><br><span class="line">   print(<span class="string">'Starting server in PID %s'</span> % os.getpid())</span><br><span class="line">   <span class="keyword">if</span> host == <span class="string">'0.0.0.0'</span>:</span><br><span class="line">       print(</span><br><span class="line">           <span class="string">'serving on 0.0.0.0:%s, view at http://127.0.0.1:%s'</span> %</span><br><span class="line">           (port, port)</span><br><span class="line">       )</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       print(<span class="string">"serving on http://%s:%s"</span> % (host, port))</span><br><span class="line">   <span class="keyword">try</span>:</span><br><span class="line">   		 <span class="comment"># 运行web服务</span></span><br><span class="line">       srv.serve_forever()</span><br><span class="line">   <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">       <span class="comment"># allow CTRL+C to shutdown</span></span><br><span class="line">       <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>至此，一个python web服务就运行起来了。</p>
<h1 id="pecan-源码解析"><a href="#pecan-源码解析" class="headerlink" title="pecan 源码解析"></a>pecan 源码解析</h1><p>新建pecan工程的默认config.py文件（上面讲过，该文件是从scaffolds中的模板copy的）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Server Specific Configurations</span></span><br><span class="line"><span class="comment"># 启动的默认的host和port</span></span><br><span class="line">server = &#123;</span><br><span class="line">    <span class="string">'port'</span>: <span class="string">'8080'</span>,</span><br><span class="line">    <span class="string">'host'</span>: <span class="string">'0.0.0.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pecan Application Configurations</span></span><br><span class="line"><span class="comment"># app的配置</span></span><br><span class="line">app = &#123;</span><br><span class="line">    <span class="string">'root'</span>: <span class="string">'$&#123;package&#125;.controllers.root.RootController'</span>, <span class="comment"># root项很重要，指定开始路由的处理器</span></span><br><span class="line">    <span class="string">'modules'</span>: [<span class="string">'$&#123;package&#125;'</span>],</span><br><span class="line">    <span class="string">'debug'</span>: <span class="keyword">True</span></span><br><span class="line">  	<span class="comment"># 还可以配置 static_root、template_path、errors 等。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># python格式的日志配置</span></span><br><span class="line">logging = &#123;</span><br><span class="line">    <span class="string">'root'</span>: &#123;<span class="string">'level'</span>: <span class="string">'INFO'</span>, <span class="string">'handlers'</span>: [<span class="string">'console'</span>]&#125;,</span><br><span class="line">    <span class="string">'loggers'</span>: &#123;</span><br><span class="line">        <span class="string">'$&#123;package&#125;'</span>: &#123;<span class="string">'level'</span>: <span class="string">'DEBUG'</span>, <span class="string">'handlers'</span>: [<span class="string">'console'</span>], <span class="string">'propagate'</span>: <span class="keyword">False</span>&#125;,</span><br><span class="line">        <span class="string">'pecan'</span>: &#123;<span class="string">'level'</span>: <span class="string">'DEBUG'</span>, <span class="string">'handlers'</span>: [<span class="string">'console'</span>], <span class="string">'propagate'</span>: <span class="keyword">False</span>&#125;,</span><br><span class="line">        <span class="string">'py.warnings'</span>: &#123;<span class="string">'handlers'</span>: [<span class="string">'console'</span>]&#125;,</span><br><span class="line">        <span class="string">'__force_dict__'</span>: <span class="keyword">True</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'handlers'</span>: &#123;</span><br><span class="line">        <span class="string">'console'</span>: &#123;</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.StreamHandler'</span>,</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'color'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'formatters'</span>: &#123;</span><br><span class="line">        <span class="string">'simple'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: (<span class="string">'%(asctime)s %(levelname)-5.5s [%(name)s]'</span></span><br><span class="line">                       <span class="string">'[%(threadName)s] %(message)s'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'color'</span>: &#123;</span><br><span class="line">            <span class="string">'()'</span>: <span class="string">'pecan.log.ColorFormatter'</span>,</span><br><span class="line">            <span class="string">'format'</span>: (<span class="string">'%(asctime)s [%(padded_color_levelname)s] [%(name)s]'</span></span><br><span class="line">                       <span class="string">'[%(threadName)s] %(message)s'</span>),</span><br><span class="line">        <span class="string">'__force_dict__'</span>: <span class="keyword">True</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Custom Configurations must be in Python dictionary format::</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># foo = &#123;'bar':'baz'&#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># All configurations are accessible at::</span></span><br><span class="line"><span class="comment"># pecan.conf</span></span><br></pre></td></tr></table></figure>
<h2 id="路由分析"><a href="#路由分析" class="headerlink" title="路由分析"></a>路由分析</h2><p>app是一个Pecan实例，先来看看初始化Pecan实例时做了哪些工作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># core.py文件</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pecan</span><span class="params">(PecanBase)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kw)</span>:</span></span><br><span class="line">	     <span class="keyword">if</span> kw.get(<span class="string">'use_context_locals'</span>) <span class="keyword">is</span> <span class="keyword">False</span>:</span><br><span class="line">	         self = super(Pecan, cls).__new__(ExplicitPecan, *args, **kw)</span><br><span class="line">	         self.__init__(*args, **kw)</span><br><span class="line">	         <span class="keyword">return</span> self</span><br><span class="line">	     <span class="keyword">return</span> super(Pecan, cls).__new__(cls)</span><br><span class="line">	</span><br><span class="line">	 <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kw)</span>:</span></span><br><span class="line">	     self.init_context_local(kw.get(<span class="string">'context_local_factory'</span>))</span><br><span class="line">	     <span class="comment"># 调用了PecanBase的初始化方法</span></span><br><span class="line">	     super(Pecan, self).__init__(*args, **kw)</span><br><span class="line">	 </span><br><span class="line">	 ......</span><br><span class="line">	 ......</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PecanBase</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root, default_renderer=<span class="string">'mako'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 template_path=<span class="string">'templates'</span>, hooks=lambda: [],</span></span></span><br><span class="line"><span class="function"><span class="params">                 custom_renderers=&#123;&#125;, extra_template_vars=&#123;&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">                 force_canonical=True, guess_content_type_from_ext=True,</span></span></span><br><span class="line"><span class="function"><span class="params">                 context_local_factory=None, request_cls=Request,</span></span></span><br><span class="line"><span class="function"><span class="params">                 response_cls=Response, **kw)</span>:</span></span><br><span class="line">        <span class="comment"># 这里将配置文件中的root配置项导入为一个python对象</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(root, six.string_types):</span><br><span class="line">            root = self.__translate_root__(root)</span><br><span class="line">        self.root = root <span class="comment"># url中的路径，比如：/v1/books</span></span><br><span class="line">        self.request_cls = request_cls <span class="comment"># webob的Request类，所以pecan以来WebOb</span></span><br><span class="line">        self.response_cls = response_cls <span class="comment"># webob的Response类</span></span><br><span class="line">        self.renderers = RendererFactory(custom_renderers, extra_template_vars) <span class="comment"># 渲染器</span></span><br><span class="line">        self.default_renderer = default_renderer</span><br><span class="line">        <span class="comment"># 初始化钩子程序</span></span><br><span class="line">        <span class="keyword">if</span> six.callable(hooks):</span><br><span class="line">            hooks = hooks()</span><br><span class="line">        self.hooks = list(sorted(</span><br><span class="line">            hooks,</span><br><span class="line">            key=operator.attrgetter(<span class="string">'priority'</span>)</span><br><span class="line">        ))</span><br><span class="line">        self.template_path = template_path</span><br><span class="line">        self.force_canonical = force_canonical</span><br><span class="line">        self.guess_content_type_from_ext = guess_content_type_from_ext</span><br></pre></td></tr></table></figure>
<p>在core.py中定义了一个全局变量state，它的生命周期和整个请求的生命周期一致，保存了请求过程中各种参数状态值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state = <span class="keyword">None</span></span><br></pre></td></tr></table></figure>
<p>当一个请求从wsgiserver转发过来，首先处理的是Pecan中的<strong>call</strong>方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># core.py文件</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pecan</span><span class="params">(PecanBase)</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            state.hooks = []</span><br><span class="line">            state.app = self</span><br><span class="line">            state.controller = <span class="keyword">None</span></span><br><span class="line">            state.arguments = <span class="keyword">None</span></span><br><span class="line">            <span class="comment"># 调用了PecanBase的__call__方法</span></span><br><span class="line">            <span class="keyword">return</span> super(Pecan, self).__call__(environ, start_response)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">del</span> state.hooks 			<span class="comment"># 存储钩子程序的list</span></span><br><span class="line">            <span class="keyword">del</span> state.request 		<span class="comment"># 请求对象</span></span><br><span class="line">            <span class="keyword">del</span> state.response 		<span class="comment"># 响应对象</span></span><br><span class="line">            <span class="keyword">del</span> state.controller 	<span class="comment"># 处理器（程序中被expose装饰的方法）</span></span><br><span class="line">            <span class="keyword">del</span> state.arguments 	<span class="comment"># 参数</span></span><br><span class="line">            <span class="keyword">del</span> state.app 				<span class="comment"># Peacn对象</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PecanBase</span><span class="params">(object)</span>:</span></span><br><span class="line">	 <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">	 				<span class="comment"># WebOb的Request和Response</span></span><br><span class="line">	        req = self.request_cls(environ)</span><br><span class="line">	        resp = self.response_cls()</span><br><span class="line">	        </span><br><span class="line">	        state = RoutingState(req, resp, self)</span><br><span class="line">	        environ[<span class="string">'pecan.locals'</span>] = &#123;</span><br><span class="line">	            <span class="string">'request'</span>: req,</span><br><span class="line">	            <span class="string">'response'</span>: resp</span><br><span class="line">	        &#125;</span><br><span class="line">	        controller = <span class="keyword">None</span></span><br><span class="line">	        internal_redirect = <span class="keyword">False</span></span><br><span class="line">	        <span class="keyword">try</span>:</span><br><span class="line">	            req.context = environ.get(<span class="string">'pecan.recursive.context'</span>, &#123;&#125;)</span><br><span class="line">	            req.pecan = dict(content_type=<span class="keyword">None</span>)</span><br><span class="line">							<span class="comment"># 路由方法，对象分发路由机制，传入state，记录整个过程中的状态</span></span><br><span class="line">	            controller, args, kwargs = self.find_controller(state)</span><br><span class="line">	            <span class="comment"># 调用处理方法</span></span><br><span class="line">	            self.invoke_controller(controller, args, kwargs, state)</span><br><span class="line">	        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">	            ......</span><br><span class="line">	            ......</span><br><span class="line">	</span><br><span class="line">	        self._handle_empty_response_body(state)</span><br><span class="line">					<span class="comment"># 返回结果</span></span><br><span class="line">	        <span class="keyword">return</span> state.response(environ, start_response)</span><br></pre></td></tr></table></figure>
<p><strong>主要调用了find_controller和invoke_controller方法。find_controller根据对象分发机制找到url的处理方法，如果没找到，则抛出异常，由后面的except代码块处理，找到了就调用invoke_controller执行该处理方法，将处理结果保存到state中。</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PecanBase</span><span class="params">(object)</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">find_controller</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        req = state.request</span><br><span class="line">        pecan_state = req.pecan</span><br><span class="line">        pecan_state[<span class="string">'routing_path'</span>] = path = req.path_info</span><br><span class="line">        <span class="comment"># 处理钩子程序</span></span><br><span class="line">        self.handle_hooks(self.hooks, <span class="string">'on_route'</span>, state)</span><br><span class="line">        ......</span><br><span class="line">        ......</span><br><span class="line">		    <span class="comment"># 具体路由方法</span></span><br><span class="line">        controller, remainder = self.route(req, self.root, path)</span><br><span class="line">        ......</span><br><span class="line">        ......</span><br><span class="line">        <span class="comment"># 根据路由结果处理参数，如果没有路由到，则该方法会抛出异常</span></span><br><span class="line">        args, varargs, kwargs = self.get_args(</span><br><span class="line">            state,</span><br><span class="line">            params.mixed(),</span><br><span class="line">            remainder,</span><br><span class="line">            cfg[<span class="string">'argspec'</span>],</span><br><span class="line">            im_self</span><br><span class="line">        )</span><br><span class="line">        state.arguments = Arguments(args, varargs, kwargs)</span><br><span class="line">        <span class="comment"># 处理钩子程序</span></span><br><span class="line">        self.handle_hooks(self.determine_hooks(controller), <span class="string">'before'</span>, state)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> controller, args + varargs, kwargs</span><br></pre></td></tr></table></figure>
<p><strong>钩子程序分为4种，路由前（on_route），路由后处理前（before），处理后（after），发生错误（on_error）,钩子程序可在app.py中自定义，需要继承PecanHook类（在hooks.py中定义）</strong></p>
<p>route(req, self.root, path)：</p>
<blockquote>
<p>req：WebOb的Request对象，存储了请求的信息<br>self.root：是第一个处理对象（config.py中定义的root<strong>对象</strong>）<br>path：路径信息，如：/v1/books</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">route</span><span class="params">(self, req, node, path)</span>:</span></span><br><span class="line">    path = path.split(<span class="string">'/'</span>)[<span class="number">1</span>:]</span><br><span class="line">    <span class="comment"># 转化后的路径 path:['v1','boos']</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    	  <span class="comment"># 调用了routing.py文件中的lookup_controller方法</span></span><br><span class="line">        node, remainder = lookup_controller(node, path, req)</span><br><span class="line">        <span class="keyword">return</span> node, remainder</span><br><span class="line">    <span class="keyword">except</span> NonCanonicalPath <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> self.force_canonical <span class="keyword">and</span> \</span><br><span class="line">                <span class="keyword">not</span> _cfg(e.controller).get(<span class="string">'accept_noncanonical'</span>, <span class="keyword">False</span>):</span><br><span class="line">            <span class="keyword">if</span> req.method == <span class="string">'POST'</span>:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(</span><br><span class="line">                    <span class="string">"You have POSTed to a URL '%s' which "</span></span><br><span class="line">                    <span class="string">"requires a slash. Most browsers will not maintain "</span></span><br><span class="line">                    <span class="string">"POST data when redirected. Please update your code "</span></span><br><span class="line">                    <span class="string">"to POST to '%s/' or set force_canonical to False"</span> %</span><br><span class="line">                    (req.pecan[<span class="string">'routing_path'</span>],</span><br><span class="line">                        req.pecan[<span class="string">'routing_path'</span>])</span><br><span class="line">                )</span><br><span class="line">            redirect(code=<span class="number">302</span>, add_slash=<span class="keyword">True</span>, request=req)</span><br><span class="line">        <span class="keyword">return</span> e.controller, e.remainder</span><br><span class="line"></span><br><span class="line"><span class="comment"># routing.py文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lookup_controller</span><span class="params">(obj, remainder, request=None)</span>:</span></span><br><span class="line">	......</span><br><span class="line">	......</span><br><span class="line">	  <span class="comment"># 存储在obj中未找到处理方法时的_default，_lookup</span></span><br><span class="line">    notfound_handlers = []</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            obj, remainder = find_object(obj, remainder, notfound_handlers,</span><br><span class="line">                                         request)</span><br><span class="line">            handle_security(obj)</span><br><span class="line">            <span class="keyword">return</span> obj, remainder</span><br><span class="line">        <span class="keyword">except</span> (exc.HTTPNotFound, exc.HTTPMethodNotAllowed,</span><br><span class="line">                PecanNotFound) <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> isinstance(e, PecanNotFound):</span><br><span class="line">                e = exc.HTTPNotFound()</span><br><span class="line">            <span class="keyword">while</span> notfound_handlers:</span><br><span class="line">                name, obj, remainder = notfound_handlers.pop()</span><br><span class="line">                <span class="keyword">if</span> name == <span class="string">'_default'</span>:</span><br><span class="line">                    <span class="keyword">return</span> obj, remainder</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result = handle_lookup_traversal(obj, remainder)</span><br><span class="line">                    <span class="keyword">if</span> result:</span><br><span class="line">                        <span class="keyword">if</span> (</span><br><span class="line">                            remainder == [<span class="string">''</span>] <span class="keyword">and</span></span><br><span class="line">                            len(obj._pecan[<span class="string">'argspec'</span>].args) &gt; <span class="number">1</span></span><br><span class="line">                        ):</span><br><span class="line">                            <span class="keyword">raise</span> e</span><br><span class="line">                        obj_, remainder_ = result</span><br><span class="line">                        <span class="keyword">return</span> lookup_controller(obj_, remainder_, request)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> e</span><br></pre></td></tr></table></figure>
<p><strong>lookup_controller针对每一个controller对象，在其中查找对应的处理方法，如果没找到，则会继续找_default，如果没定义_default，则找_lookup，然后继续循环调用lookup_controller，直到找到对应的方法，或notfound_handlers 为空抛出异常</strong></p>
<p>obj, remainder = find_object(obj, remainder, notfound_handlers, request)</p>
<blockquote>
<p>obj：当前的controller对象<br>remainder：路由信息，如[‘v1’, ‘books’]<br>notfound_handlers：该controller中没找到时，存储<code>_default</code>或者<code>_lookup</code><br>request：请求信息</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_object</span><span class="params">(obj, remainder, notfound_handlers, request)</span>:</span></span><br><span class="line">    prev_obj = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> obj <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> PecanNotFound</span><br><span class="line">        <span class="comment"># 如果传入的obj直接是一个处理方法（被expsoe装饰），直接返回</span></span><br><span class="line">        <span class="keyword">if</span> iscontroller(obj):</span><br><span class="line">            <span class="keyword">if</span> getattr(obj, <span class="string">'custom_route'</span>, <span class="keyword">None</span>) <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">return</span> obj, remainder</span><br><span class="line">		    <span class="comment"># 处理自定义路由信息</span></span><br><span class="line">        _detect_custom_path_segments(obj)</span><br><span class="line">		</span><br><span class="line">				<span class="comment"># 根据自定义路由名找到处理方法</span></span><br><span class="line">        <span class="keyword">if</span> remainder:</span><br><span class="line">            custom_route = __custom_routes__.get((obj.__class__, remainder[<span class="number">0</span>]))</span><br><span class="line">            <span class="keyword">if</span> custom_route:</span><br><span class="line">                <span class="keyword">return</span> getattr(obj, custom_route), remainder[<span class="number">1</span>:]</span><br><span class="line">        cross_boundary(prev_obj, obj)</span><br><span class="line">        <span class="comment"># 如果根据默认和自定义路由都没找到，则找该controller中的index方法</span></span><br><span class="line">        <span class="comment"># 如果有路由：/v1/books//best（不标准的路径）,那么就只能路由到/v1/books,后面的就没法路由</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            next_obj, rest = remainder[<span class="number">0</span>], remainder[<span class="number">1</span>:]</span><br><span class="line">            <span class="keyword">if</span> next_obj == <span class="string">''</span>:</span><br><span class="line">                index = getattr(obj, <span class="string">'index'</span>, <span class="keyword">None</span>)</span><br><span class="line">                <span class="keyword">if</span> iscontroller(index):</span><br><span class="line">                    <span class="keyword">return</span> index, rest</span><br><span class="line">        <span class="keyword">except</span> IndexError:</span><br><span class="line">            index = getattr(obj, <span class="string">'index'</span>, <span class="keyword">None</span>)</span><br><span class="line">            <span class="keyword">if</span> iscontroller(index):</span><br><span class="line">                <span class="keyword">raise</span> NonCanonicalPath(index, [])</span><br><span class="line">				<span class="comment"># 存储_default方法到notfound_handlers</span></span><br><span class="line">        default = getattr(obj, <span class="string">'_default'</span>, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> iscontroller(default):</span><br><span class="line">            notfound_handlers.append((<span class="string">'_default'</span>, default, remainder))</span><br><span class="line">				<span class="comment"># 则存储_lookup方法到notfound_handlers</span></span><br><span class="line">        lookup = getattr(obj, <span class="string">'_lookup'</span>, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> iscontroller(lookup):</span><br><span class="line">            notfound_handlers.append((<span class="string">'_lookup'</span>, lookup, remainder))</span><br><span class="line">				<span class="comment"># 根据自定义的_route方法来处理路由（pecan允许开发者在controller中自定义_route方法，让开发者完全掌控路由方式）</span></span><br><span class="line">        route = getattr(obj, <span class="string">'_route'</span>, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> iscontroller(route):</span><br><span class="line">            <span class="keyword">if</span> len(getargspec(route).args) == <span class="number">2</span>:</span><br><span class="line">                warnings.warn(</span><br><span class="line">                    (</span><br><span class="line">                        <span class="string">"The function signature for %s.%s._route is changing "</span></span><br><span class="line">                        <span class="string">"in the next version of pecan.\nPlease update to: "</span></span><br><span class="line">                        <span class="string">"`def _route(self, args, request)`."</span> % (</span><br><span class="line">                            obj.__class__.__module__,</span><br><span class="line">                            obj.__class__.__name__</span><br><span class="line">                        )</span><br><span class="line">                    ),</span><br><span class="line">                    DeprecationWarning</span><br><span class="line">                )</span><br><span class="line">                next_obj, next_remainder = route(remainder)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                next_obj, next_remainder = route(remainder, request)</span><br><span class="line">            cross_boundary(route, next_obj)</span><br><span class="line">            <span class="keyword">return</span> next_obj, next_remainder</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> remainder:</span><br><span class="line">            <span class="keyword">raise</span> PecanNotFound</span><br><span class="line"></span><br><span class="line">        prev_remainder = remainder</span><br><span class="line">        prev_obj = obj</span><br><span class="line">        remainder = rest</span><br><span class="line">        <span class="comment"># 根据方法名（或者属性名）（默认的路由方式）找到处理方法</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            obj = getattr(obj, next_obj, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">except</span> UnicodeEncodeError:</span><br><span class="line">            obj = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> obj <span class="keyword">and</span> <span class="keyword">not</span> notfound_handlers <span class="keyword">and</span> hasattr(prev_obj, <span class="string">'index'</span>):</span><br><span class="line">            <span class="keyword">if</span> request.method <span class="keyword">in</span> _cfg(prev_obj.index).get(<span class="string">'generic_handlers'</span>,</span><br><span class="line">                                                          &#123;&#125;):</span><br><span class="line">                <span class="keyword">return</span> prev_obj.index, prev_remainder</span><br></pre></td></tr></table></figure>
<p>find_object 首先会处理自定义的路由信息，然后存储<code>_default</code>和<code>_lookup</code>，最后处理默认路由（个人觉得可以先处理默认路由信息，然后根据是否配置route装饰进行取舍，这样可能处理更高效）</p>
<p>routing.py中的lookup_controller 和 find_object是核心路由方式的实现，从代码中可以看出，最终找到处理方法的方式是根据路径（/v1/books）中每一个segment来查找对应的对象，然后根据当前对象再查找下一个对象，所以pecan的路由机制叫做<strong>对象分发</strong></p>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器定义在decorators.py中，其中最重要的就是expose，它标识了这个被装饰的方法可以被路由找到</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">when_for</span><span class="params">(controller)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">when</span><span class="params">(method, **kw)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(f)</span>:</span></span><br><span class="line">            _cfg(f)[<span class="string">'generic_handler'</span>] = <span class="keyword">True</span></span><br><span class="line">            controller._pecan[<span class="string">'generic_handlers'</span>][method.upper()] = f</span><br><span class="line">            controller._pecan[<span class="string">'allowed_methods'</span>].append(method.upper())</span><br><span class="line">            expose(**kw)(f)</span><br><span class="line">            <span class="keyword">return</span> f</span><br><span class="line">        <span class="keyword">return</span> decorate</span><br><span class="line">    <span class="keyword">return</span> when</span><br><span class="line"></span><br><span class="line"><span class="comment"># template：标识了渲染模板，默认moko，</span></span><br><span class="line"><span class="comment"># generic：默认的方法处理所有类型的请求（GET,POST,PUT,DELETE）,如果为true,则各种类型的请求分开处理</span></span><br><span class="line"><span class="comment"># route：自定义路由</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">expose</span><span class="params">(template=None,</span></span></span><br><span class="line"><span class="function"><span class="params">           generic=False,</span></span></span><br><span class="line"><span class="function"><span class="params">           route=None,</span></span></span><br><span class="line"><span class="function"><span class="params">           **kw)</span>:</span></span><br><span class="line">    content_type = kw.get(<span class="string">'content_type'</span>, <span class="string">'text/html'</span>)</span><br><span class="line">    <span class="keyword">if</span> template == <span class="string">'json'</span>:</span><br><span class="line">        content_type = <span class="string">'application/json'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(f)</span>:</span></span><br><span class="line">        <span class="comment"># flag the method as exposed</span></span><br><span class="line">        f.exposed = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        cfg = _cfg(f)</span><br><span class="line">        cfg[<span class="string">'explicit_content_type'</span>] = <span class="string">'content_type'</span> <span class="keyword">in</span> kw</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> route:</span><br><span class="line">            <span class="comment"># This import is here to avoid a circular import issue</span></span><br><span class="line">            <span class="keyword">from</span> pecan <span class="keyword">import</span> routing</span><br><span class="line">            <span class="keyword">if</span> cfg.get(<span class="string">'generic_handler'</span>):</span><br><span class="line">                <span class="keyword">raise</span> ValueError(</span><br><span class="line">                    <span class="string">'Path segments cannot be overridden for generic '</span></span><br><span class="line">                    <span class="string">'controllers.'</span></span><br><span class="line">                )</span><br><span class="line">            routing.route(route, f)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># set a "pecan" attribute, where we will store details</span></span><br><span class="line">        cfg[<span class="string">'content_type'</span>] = content_type</span><br><span class="line">        cfg.setdefault(<span class="string">'template'</span>, []).append(template)</span><br><span class="line">        cfg.setdefault(<span class="string">'content_types'</span>, &#123;&#125;)[content_type] = template</span><br><span class="line"></span><br><span class="line">        <span class="comment"># handle generic controllers</span></span><br><span class="line">        <span class="keyword">if</span> generic:</span><br><span class="line">            <span class="keyword">if</span> f.__name__ <span class="keyword">in</span> (<span class="string">'_default'</span>, <span class="string">'_lookup'</span>, <span class="string">'_route'</span>):</span><br><span class="line">                <span class="keyword">raise</span> ValueError(</span><br><span class="line">                    <span class="string">'The special method %s cannot be used as a generic '</span></span><br><span class="line">                    <span class="string">'controller'</span> % f.__name__</span><br><span class="line">                )</span><br><span class="line">            cfg[<span class="string">'generic'</span>] = <span class="keyword">True</span></span><br><span class="line">            cfg[<span class="string">'generic_handlers'</span>] = dict(DEFAULT=f)</span><br><span class="line">            cfg[<span class="string">'allowed_methods'</span>] = []</span><br><span class="line">            <span class="comment"># 方法可以被类似@index.when()装饰</span></span><br><span class="line">            f.when = when_for(f)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># store the arguments for this controller method</span></span><br><span class="line">        <span class="comment"># 参数</span></span><br><span class="line">        cfg[<span class="string">'argspec'</span>] = getargspec(f)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line">    <span class="keyword">return</span> decorate</span><br></pre></td></tr></table></figure>
<ol>
<li><p><code>cfg = _cfg(f)</code>代码为方法指定了参数<code>_pecan，dict</code>对象，其中存储了该方法很多重要信息</p>
</li>
<li><p><code>cfg[‘generic_handlers’] = dict(DEFAULT=f)</code>当<code>generic</code>为<code>true</code>时，其中存储了具体的处理方法，<code>{‘generic_handlers’：{‘DEFAULT’:function,‘POST’:function,‘PUT’:function}}</code>，当请求时<code>POST,PUT,DELETE</code>等方式时，就是从其中获取处理方法</p>
</li>
<li><p>f.when = when_for(f)</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 看似是对index_post方法进行装饰，但是主要还是对index方法进行处理</span></span><br><span class="line"><span class="comment"># 这里把index_post方法添加到index方法的_pecan['generic_handlers']中</span></span><br><span class="line"><span class="comment"># 这个写法很有意思，大家可以借鉴</span></span><br><span class="line"><span class="meta">@index.when(method='POST')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_post</span><span class="params">(self)</span>:</span></span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h2 id="根据POST-PUT-DELETE路由"><a href="#根据POST-PUT-DELETE路由" class="headerlink" title="根据POST,PUT,DELETE路由"></a>根据POST,PUT,DELETE路由</h2><p>在<code>routing.py</code>中<code>find_object</code>方法会返回找到的<code>subcontroller</code>,它是有@expose装饰的一个方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_object</span><span class="params">(obj, remainder, notfound_handlers, request)</span>:</span></span><br><span class="line">   ...</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Last-ditch effort: if there's not a matching subcontroller, no</span></span><br><span class="line">        <span class="comment"># `_default`, no `_lookup`, and no `_route`, look to see if there's</span></span><br><span class="line">        <span class="comment"># an `index` that has a generic method defined for the current request</span></span><br><span class="line">        <span class="comment"># method.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> obj <span class="keyword">and</span> <span class="keyword">not</span> notfound_handlers <span class="keyword">and</span> hasattr(prev_obj, <span class="string">'index'</span>):</span><br><span class="line">            <span class="keyword">if</span> request.method <span class="keyword">in</span> _cfg(prev_obj.index).get(<span class="string">'generic_handlers'</span>,</span><br><span class="line">                                                          &#123;&#125;):</span><br><span class="line">                <span class="keyword">return</span> prev_obj.index, prev_remainder</span><br></pre></td></tr></table></figure>
<p>在core.py中根据POST具体找到相应的方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_controller</span><span class="params">(self, state)</span>:</span></span><br><span class="line">   ...</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cfg.get(<span class="string">'generic'</span>):</span><br><span class="line">            im_self = six.get_method_self(controller)</span><br><span class="line">            handlers = cfg[<span class="string">'generic_handlers'</span>]</span><br><span class="line">            <span class="comment"># 根据POST找到处理方法</span></span><br><span class="line">            controller = handlers.get(req.method, handlers[<span class="string">'DEFAULT'</span>])</span><br><span class="line">            handle_security(controller, im_self)</span><br><span class="line">            cfg = _cfg(controller)</span><br></pre></td></tr></table></figure>
<p>所以最终找到处理方法是在core.py中，其实这里我认为处理的不好，还是应该在routing.py中处理</p>
<p>这里有几个写的不好的地方：</p>
<ol>
<li>当请求为/v1//books这种不标准的形式的时候，pecan的路由机制是没法处理的</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    next_obj, rest = remainder[<span class="number">0</span>], remainder[<span class="number">1</span>:]</span><br><span class="line">    <span class="comment"># 可以将这里改成 if next_obj == '' and not rest  解决该问题</span></span><br><span class="line">    <span class="keyword">if</span> next_obj == <span class="string">''</span>:</span><br><span class="line">        index = getattr(obj, <span class="string">'index'</span>, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> iscontroller(index):</span><br><span class="line">            <span class="keyword">return</span> index, rest</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">route</span><span class="params">(self, req, node, path)</span>:</span></span><br><span class="line">	  <span class="comment"># 可以将list中最后的空字符串删除，这个需和第一点配合</span></span><br><span class="line">    path = path.split(<span class="string">'/'</span>)[<span class="number">1</span>:]</span><br></pre></td></tr></table></figure>
<ol>
<li>对于 POST /v1/books/safgrgfwsfrsg （最后的一个segment没有定义，并且没有定义_lookup和_default），这是依然能够找到路由方法，但是会在参数处理的时候报错，这个地方不合理</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_object</span><span class="params">(obj, remainder, notfound_handlers, request)</span>:</span></span><br><span class="line">		...</span><br><span class="line">		...</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            obj = getattr(obj, next_obj, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">except</span> UnicodeEncodeError:</span><br><span class="line">            obj = <span class="keyword">None</span></span><br><span class="line">            </span><br><span class="line">		<span class="comment"># 添加这段代码规避该问题</span></span><br><span class="line">		<span class="comment">###########</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> obj <span class="keyword">and</span> <span class="keyword">not</span> notfound_handlers <span class="keyword">and</span> remainder:</span><br><span class="line">			abort(<span class="number">404</span>)</span><br><span class="line">		<span class="comment">##########</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment"># Last-ditch effort: if there's not a matching subcontroller, no</span></span><br><span class="line">        <span class="comment"># `_default`, no `_lookup`, and no `_route`, look to see if there's</span></span><br><span class="line">        <span class="comment"># an `index` that has a generic method defined for the current request</span></span><br><span class="line">        <span class="comment"># method.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> obj <span class="keyword">and</span> <span class="keyword">not</span> notfound_handlers <span class="keyword">and</span> hasattr(prev_obj, <span class="string">'index'</span>):</span><br><span class="line">            <span class="keyword">if</span> request.method <span class="keyword">in</span> _cfg(prev_obj.index).get(<span class="string">'generic_handlers'</span>,</span><br><span class="line">                                                          &#123;&#125;):</span><br><span class="line">                <span class="keyword">return</span> prev_obj.index, prev_remainder</span><br></pre></td></tr></table></figure>
<p>上面3点对源码的改动可以完成我们自定义的一些需求，并且是pecan的代码结构更加合理。</p>
<h1 id="pecan-控制器和路由系统"><a href="#pecan-控制器和路由系统" class="headerlink" title="pecan 控制器和路由系统"></a>pecan 控制器和路由系统</h1><p>对于 pecan 的路由分发机制还是有必要再分析一下</p>
<p>Pecan路由采用的是对象分发机制，将HTTP请求分发到控制器，然后到控制器里定义的方法。</p>
<p>对象分发机制将请求路径进行切割，根据请求路径从root控制器开始，按次序寻找路径对应的控制器及方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pecan <span class="keyword">import</span> expose</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksController</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @expose()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Welcome to book section."</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @expose()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bestsellers</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"We have 5 books in the top 10."</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CatalogController</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @expose()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Welcome to the catalog."</span></span><br><span class="line"></span><br><span class="line">    books = BooksController()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootController</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @expose()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Welcome to store.example.com!"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @expose()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hours</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Open 24/7 on the web."</span></span><br><span class="line"></span><br><span class="line">    catalog = CatalogController()</span><br></pre></td></tr></table></figure>
<p>对于上述代码，如果此时有这样一个请求：/catalog/books/bestsellers，则pecan首先将这个请求分割成：catalog, books, bestsellers。接下来，pecan将会从root控制器中寻找catalog，找到catalog对象后，pecan会继续在catalog控制器中寻找books，以此类推一直找到bestsellers。如果URL以’/‘结束，那么pecan将会查找最后一个控制器的index方法。</p>
<p>进一步讲，下面的这些请求路径：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">└── /</span><br><span class="line">    ├── /hours</span><br><span class="line">    └── /catalog</span><br><span class="line">         └── /catalog/books</span><br><span class="line">            └── /catalog/books/bestsellers</span><br></pre></td></tr></table></figure>
<p>将会路由给这些控制器方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">└── RootController.index</span><br><span class="line">    ├── RootController.hours</span><br><span class="line">    └── CatalogController.index</span><br><span class="line">         └── BooksController.index</span><br><span class="line">            └── BooksController.bestsellers</span><br></pre></td></tr></table></figure>
<h2 id="路由算法"><a href="#路由算法" class="headerlink" title="路由算法"></a>路由算法</h2><p>有时，标准的对象分发路由方式不足以将某个URL路由到一个控制器上。pecan提供了几种方法去使对象分发方式的路由发生短路，以便用更多的控制来处理URL，以下这些特殊的方法用来实现这个目标：<code>_lookup()，_default()，_route()</code>。在你的控制器上定义这些方法可以让你更加灵活的处理一个URL的全部内容或部分内容。</p>
<h3 id="Controller-增加方法处理路由"><a href="#Controller-增加方法处理路由" class="headerlink" title="Controller 增加方法处理路由"></a>Controller 增加方法处理路由</h3><p>我们需要不同的路由返回不同的内容。这里我们介绍一种Pecan注册路由的方法。RootController加一个方法叫做diff。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> happy_expose</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootController</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @happy_expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @happy_expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_default</span><span class="params">(self, *remainder)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello World from root default'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @happy_expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diff</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'You find different worlds'</span></span><br></pre></td></tr></table></figure>
<p>增加了diff方法，装饰器不要忘了，怎么访问这个不同的路径呢，很简单：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:5000/diff</span><br><span class="line"></span><br><span class="line">页面显示 You find different worlds</span><br></pre></td></tr></table></figure>
<p>我们可以通过添加不同的方法名，来处理不同的路由，返回不同的结果。Pecan会根据路由查看，你这个控制器有没有对应的属性，有的话就交给这个属性方法处理。</p>
<h3 id="Controller-增加属性处理路由"><a href="#Controller-增加属性处理路由" class="headerlink" title="Controller 增加属性处理路由"></a>Controller 增加属性处理路由</h3><p>我们已经知道了一种注册路由的方法了，现在介绍第二种。</p>
<p>更改代码，这次我们原有的文件结构不变，给root.py增加点东西，增加后变成下面这样</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> happy_expose</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookController</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @happy_expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Welcome to the Sea of Books"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootController</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    book = BookController()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @happy_expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @happy_expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_default</span><span class="params">(self, *remainder)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello World from root default'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @happy_expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diff</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'You find different worlds'</span></span><br></pre></td></tr></table></figure>
<p>两点改变：</p>
<ul>
<li>增加BookController这个类的定义</li>
<li>RootController增加一个属性 book = BookController()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">浏览器输入http://127.0.0.1:5000/book/</span><br><span class="line"></span><br><span class="line">页面显示 Welcome to the Sea of Books</span><br><span class="line"></span><br><span class="line">我们如愿看到，“Welcome to the Sea of Books”</span><br></pre></td></tr></table></figure>
<p>这次的原理，其实是个上一个添加路由的方法是一样的，Pecan会根据路由查看，你这个控制器有没有对应的属性，有的话就交给这个属性方法处理。上一个是添加了一个成员方法，这次是一个成员属性而已。</p>
<p>如果我们访问：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:5000/book/sea 会是什么样呢？</span><br><span class="line"></span><br><span class="line">页面显示 Hello World from root default</span><br><span class="line"></span><br><span class="line">咦，怎么进了RootController的_default了呢？！</span><br></pre></td></tr></table></figure>
<p>其实原理是这么回事的：</p>
<p>Pecan会把路由分成[“book”, “sea”]</p>
<ol>
<li><p>从RootController去发现有没有能处理book的Controller。发现RooController有一个book属性值为BookController的对象。</p>
</li>
<li><p>Pecan从BookController的对象去发现有没有能处理sea的Controller。找了一圈发现没有，这就尴尬了处理不了！但是为啥没有报404呢？</p>
</li>
</ol>
<p>因为在第一步的时候，Pecan不仅会去发现有没有能处理book的Controller，同时还会去检查RootController有没有一些应对没找到Controller时处理的方法。这些方法可以是<code>_defalut</code>（这个我们已经用过了），<code>_lookup</code>（这个后面在讲）。发现有<code>_default</code>，会将<code>_default</code>放入一个列表，待用。第二步以后发现，没有能处理的Controller，所以调用了RootController对象的<code>_default</code>的方法，我们就看到了“Hello World from root default”</p>
<p>如果在 BookController 放个 _default 呢？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookController</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @happy_expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Welcome to the Sea of Books"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @happy_expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_default</span><span class="params">(self, *remainder)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is Book default"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">再访问http://127.0.0.1:5000/book/sea 会是什么样呢？</span><br><span class="line"></span><br><span class="line">页面显示 This is Book default</span><br></pre></td></tr></table></figure>
<p>为啥是这个结果呢？</p>
<ol>
<li><p>第一步的时候，会把<code>RooController()._default</code>，放入一个待用队列，源码里叫做<code>notfound_handlers=[RooController()._default]</code></p>
</li>
<li><p>第二步的时候，虽然没有发现能处理sea的控制器，也会去查找一个有没有<code>_default，_look_up</code>。发现有<code>_default</code>，也会放入队列。变成<code>notfound_handlers=[RooController()._default, BookController()._default]</code>。</p>
</li>
</ol>
<p>当最终没有能处理[‘book’, ‘sea’]时，开始<code>notfound_handlers</code>上场。他会倒着拿里面的值，就是<code>notfound_handlers.pop()</code>。所以会<code>BookController()._default</code>处理。</p>
<h3 id="lookup"><a href="#lookup" class="headerlink" title="_lookup()"></a>_lookup()</h3><p><code>_lookup()</code>提供一种方式处理一个URL的部分内容，并返回一个新的控制器用于处理URL的剩余部分。一个<code>_lookup()</code>方法可以提供一个或多个参数，以及URL的分片。同时_lookup()方法应该用可变的位置表示URL的剩余部分，并且在它的返回值里包含未处理的剩余URL部分。在下面的例子中，对象分发路由算法将会把remainder列表传递给该方法返回的控制器。</p>
<p><code>_lookup()</code>除了被用来动态创建控制器以外，当没有其他任何控制器方法能够匹配一个URL且没有定义<code>_default()</code>方法时，<code>_lookup()</code>方法作为最后一个方法被调用。</p>
<p>此方法返回一个新的控制器用于控制url的剩余部分，如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_student_by_primary_key</span><span class="params">(num)</span>:</span></span><br><span class="line">    a = [<span class="string">"xiao_ming"</span>, <span class="string">"xiao_li"</span>]</span><br><span class="line">    num = int(num) <span class="keyword">if</span> type(num) == int <span class="keyword">and</span> len(a) &gt; int(num) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> a[num]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Addr</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @expose()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"addr"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentController</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, student)</span>:</span></span><br><span class="line">        self.student = student</span><br><span class="line"></span><br><span class="line"><span class="meta">    @expose()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.student</span><br><span class="line"></span><br><span class="line">    addr = Addr()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootController</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @expose()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_lookup</span><span class="params">(self, primary_key, *remainder)</span>:</span></span><br><span class="line">        student = get_student_by_primary_key(primary_key)</span><br><span class="line">        <span class="keyword">if</span> student:</span><br><span class="line">            <span class="keyword">return</span> StudentController(student), remainder</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"404"</span></span><br></pre></td></tr></table></figure>
<p>例如”/1/name”路径，将走_lookup()方法，返回 StudentController(student), remainder；</p>
<p>此时，StudentController(student) 是一个新的控制器，而remainder是url的剩余部分，即 name；</p>
<p>StudentController() 控制器将找到def name(self) 进而响应请求。</p>
<p>同理，对于”/100/addr”，也走_lookup()方法，返回 StudentController(student), remainder；</p>
<p>此时，StudentController(student) 是一个新的控制器，而remainder是url的剩余部分，即 addr；</p>
<p>找到addr = Addr()，进而得到响应。</p>
<h3 id="default"><a href="#default" class="headerlink" title="_default()"></a>_default()</h3><p>对于标准的对象路由分发机制，当没有任何控制器可以处理url是，_default将要作为最后一个方法被调度。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">happy_expose</span><span class="params">(f=None, **kw)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> f <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner_expose</span><span class="params">(func)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> happy_expose(func, **kw)</span><br><span class="line">        <span class="keyword">return</span> inner_expose</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">        @wraps(f)</span></span><br><span class="line"><span class="meta">        @expose(**kw)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_expose</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> _expose</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootController</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @expose()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hours</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Open 24/7 on the web."</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @happy_expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_default</span><span class="params">(self, *remainder)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello World from root default'</span></span><br></pre></td></tr></table></figure>
<p>_default方法是最后被调用的。</p>
<h3 id="route-方法"><a href="#route-方法" class="headerlink" title="_route()方法"></a>_route()方法</h3><p><code>_route()</code>方法允许一个控制器完全覆盖pecan的路由机制。pecan它本身也使用<code>_route()</code>方法去实现它的RestController。如果你想在pecan之上定义一套替代的路由机制，那么定义一个包含<code>_route()</code>方法的基控制器将会使你完全掌控请求的路由。</p>
<h2 id="expose-暴露控制器方法"><a href="#expose-暴露控制器方法" class="headerlink" title="expose 暴露控制器方法"></a>expose 暴露控制器方法</h2><p>expose告诉Pecan类中的哪些方法是公开可见的 。如果一个方法没有用修饰expose()，Pecan永远不会将请求路由到它。</p>
<p>pecan默认采用expose进行路由绑定，需要路由控制器类的方法都要经过expose装饰器的装饰，pecan就可以使HTTP请求找到对应的方法。</p>
<p>不同的使用方法会有不同的效果，如下：</p>
<h3 id="expose"><a href="#expose" class="headerlink" title="@expose()"></a>@expose()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pecan <span class="keyword">import</span> expose</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootController</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @expose()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello World’</span></span><br></pre></td></tr></table></figure>
<p>被装饰的方法需要返回一个字符串，表示HTML响应的body。</p>
<h3 id="expose-html-template-name"><a href="#expose-html-template-name" class="headerlink" title="@expose(html_template_name)"></a>@expose(html_template_name)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pecan <span class="keyword">import</span> expose</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootController</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @expose('html_template.mako')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">'msg'</span>: <span class="string">'Hello!’&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html_template.mako --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>$&#123;msg&#125;<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>被装饰的方法返回一个字典，字典的key可以在html模板中使用<code>${key}</code>的方式引用。</p>
<h3 id="expose-route-’some-path’"><a href="#expose-route-’some-path’" class="headerlink" title="@expose(route=’some-path’)"></a>@expose(route=’some-path’)</h3><p>例如有这样一个请求：/some-path，由于python语法限制，pecan并不能将该请求的处理方法声明为some-path。使用@expose(route=’some-path’)，被装饰方法将响应<code>/some-path</code>请求。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootController</span><span class="params">(object)</span>:</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">    @expose(route='some-path')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">some_path</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> dict()</span><br></pre></td></tr></table></figure>
<p>注意：尽量不使用dict()，使用不当，HTTP状态码将是204，及服务器没有返回任何内容错误。</p>
<p>另一种方式：pecan.route()</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootController</span><span class="params">(object)</span>:</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">    @expose()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">some_path</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> dict()</span><br><span class="line"> </span><br><span class="line">pecan.route(<span class="string">'some-path'</span>, RootController.some_path)</span><br></pre></td></tr></table></figure>
<p>延伸：利用route()方法来将请求路由给下一级控制器</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildController</span><span class="params">(object)</span>:</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">    @expose()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">child</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> dict()</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootController</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">pecan.route(RootController, <span class="string">'child-path'</span>, ChildController())</span><br></pre></td></tr></table></figure>
<p>在这个例子中，pecan应用将会给请求/child-path/child/返回HTTP 200响应。</p>
<h3 id="expose-generic-True"><a href="#expose-generic-True" class="headerlink" title="@expose(generic=True)"></a>@expose(generic=True)</h3><p>expose()方法中的generic参数可以根据请求方法对URL进行重载，即一个url路径可以被两个不同的方法处理。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootController</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTP GET /</span></span><br><span class="line"><span class="meta">    @expose(generic=True, template='json')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> dict()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTP POST /</span></span><br><span class="line"><span class="meta">    @index.when(method='POST', template='json')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_POST</span><span class="params">(self, **kw)</span>:</span></span><br><span class="line">        uuid = create_something()</span><br><span class="line">        <span class="keyword">return</span> dict(uuid=uuid)</span><br></pre></td></tr></table></figure>
<p>对于”/“的GET请求，由index()方法处理；对于”/“的POST请求，由index_POST方法处理。</p>
<p><strong>根据请求方法来路由，其实还有一种方式，继承<code>pecan.rest.RestController</code>来实现</strong></p>
<p>但是这里有个坑，就是不能实现<code>index</code>方法，不然会被覆盖，具体用法看下：</p>
<p><img src="/images/python-web-pecan-3.png" alt="With RestController"></p>
<p><img src="/images/python-web-pecan-4.png" alt="default method with RestController"></p>
<p><a href="https://xinzhe.blog.csdn.net/article/details/114086638" target="_blank" rel="external">Pecan学习：官方文档解读</a></p>
<p><a href="https://pecan.readthedocs.io/en/latest/rest.html#rest" target="_blank" rel="external">Writing RESTful Web Services with Generic Controllers</a></p>
<h3 id="expose-叠加用法"><a href="#expose-叠加用法" class="headerlink" title="@expose()叠加用法"></a>@expose()叠加用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootController</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @expose('json')</span></span><br><span class="line"><span class="meta">    @expose('text_template.mako', content_type='text/plain')</span></span><br><span class="line"><span class="meta">    @expose('html_template.mako')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">'msg'</span>: <span class="string">'Hello!'</span>&#125;</span><br></pre></td></tr></table></figure>
<p>叠加使用后一个<code>hello</code>方法可以响应三种格式的请求(application/json, text/plain, text/html)。</p>
<ul>
<li>当客户端请求/hello.json或者http header中包含“Accept: application/json”时，将hello()方法响应的名字空间渲染进json文本，及@expose(‘json’)用法；</li>
<li>当客户端请求/hello.txt或者http header中包含“Accept: text/plain”时，使用text_template.mako模板文件响应，即@expose(‘text_template.mako’, content_type=’text/plain’)用法；</li>
<li>当客户端请求/hello.html时，使用html_template.mako模板文件。如果客户端请求/hello，并且没有显式指明内容格式，则pecan默认使用text/html的内容格式进行响应，假设客户端想要HTML。</li>
</ul>
<h1 id="pecan-使用示例"><a href="#pecan-使用示例" class="headerlink" title="pecan 使用示例"></a>pecan 使用示例</h1><p>配置文件test.ini</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[composite:hello]</span></span><br><span class="line"><span class="attr">use</span> = egg:Paste#urlmap</span><br><span class="line">/ = hello</span><br><span class="line"></span><br><span class="line"><span class="section">[pipeline:hello]</span></span><br><span class="line"><span class="attr">pipeline</span> = main</span><br><span class="line"></span><br><span class="line"><span class="section">[app:main]</span></span><br><span class="line">paste.app_factory = main:app_factory</span><br><span class="line"><span class="attr">root</span> = main.Controller</span><br></pre></td></tr></table></figure>
<p>main.py简单文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wsgiref.simple_server <span class="keyword">as</span> wss</span><br><span class="line"><span class="keyword">from</span> paste <span class="keyword">import</span> deploy</span><br><span class="line"><span class="keyword">from</span> pecan <span class="keyword">import</span> expose, Response</span><br><span class="line"><span class="keyword">import</span> pecan</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @expose()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'Hello, World!'</span>, <span class="number">202</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_wsgi_app</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    abspath = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">    conf_path = os.path.join(abspath, <span class="string">"hello.ini"</span>)</span><br><span class="line">    app = deploy.loadapp(<span class="string">"config:&#123;0&#125;"</span>.format(conf_path), name=<span class="string">"main"</span>)</span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app_factory</span><span class="params">(global_config, **local_conf)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> pecan.make_app(root=local_conf.get(<span class="string">'root'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    server = wss.make_server(<span class="string">''</span>, <span class="number">8000</span>, build_wsgi_app())</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>配置文件中，构建一个叫hello的composite，使用一个叫hello的pipeline。pipeline使用Controller作为控制器。</p>
<p>build_wsgi_app 加载配置文件。</p>
<p>运行server</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py</span><br></pre></td></tr></table></figure>
<p><img src="/images/python-web-pecan-5.png" alt="img"></p>
<p><br><br>参考：</p>
<p><a href="https://blog.csdn.net/choumin/article/details/89405135?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-14.baidujs&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-14.baidujs" target="_blank" rel="external">pecan的路由机制</a></p>
<p><a href="https://blog.csdn.net/qq527631128/article/details/90245555" target="_blank" rel="external">pecan源码阅读</a></p>
<p><a href="https://www.cnblogs.com/aaronthon/p/14832494.html" target="_blank" rel="external">Pecan控制器和路由系统</a></p>
<p><a href="https://blog.csdn.net/weixin_43700106/article/details/107734216" target="_blank" rel="external">python 学习记录：pecan 框架原理分析和示例</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> PythonWeb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Alertmanager 使用原理和源码分析]]></title>
      <url>https://magiceses.github.io/2020/03/31/prometheus-alertmanager-%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%90%86%E5%92%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">真正的坚强，是属于那些夜晚在被窝里哭泣，而白天却若无其事的人。未曾深夜痛哭过的人，不足以谈论人生。<br></p>

<h2 id="基本概述"><a href="#基本概述" class="headerlink" title="基本概述"></a>基本概述</h2><p>我们先从应用的角度来看详细的介绍一下alertmanager以下简称am，以下是官方文档介绍。</p>
<blockquote>
<p>The Alertmanager handles alerts sent by client applications such as the Prometheus server. It takes care of deduplicating, grouping, and routing them to the correct receiver integrations such as email, PagerDuty, or OpsGenie. It also takes care of silencing and inhibition of alerts.</p>
</blockquote>
<p>翻译一下就是，负责处理接受client（例如prometheus）发送的告警消息，包括重复告警的发送、聚合、发给相关人员，并且支持多种方式例如email或者pagerduty这种第三方通知告警平台，同时他还提供了静音以及告警抑制的功能。</p>
<p>这些功能基本涵盖了目前各大公司的告警痛点，<strong>重复告警</strong>（告警发生了但是一直也没人处理）、<strong>告警风暴</strong>（某次版本上线导致的大量服务机器指标异常）、<strong>告警信息重复</strong>（例如机器宕机之后又收到了网络不通的告警）。</p>
<p>这里注意下，prometheus族包括am他们的实现思路都是基于label来做的，后面会从代码层面详细介绍下</p>
<p>实现一个完整的监控体系需要以下几个功能：</p>
<a id="more"></a>
<ul>
<li>数据采集（xxx_export）</li>
<li>数据抓取（prometheus）</li>
<li>数据存储（prometheus/cortex）</li>
<li>规则检测并生成告警（prometheus/cotex.ruler）</li>
<li>告警处理（alertmanager）</li>
<li>告警通知（一般根据自身业务和管理体系实现）</li>
</ul>
<p><strong>Alertmanager实现了告警处理（聚合、抑制、屏蔽、路由）</strong></p>
<p>基本流程如下：</p>
<p><strong>1.</strong> Prometheus Server监控目标主机上暴露的http接口（这里假设接口A），通过上述Promethes配置的’scrape_interval’定义的时间间隔，定期采集目标主机上监控数据。</p>
<p><strong>2.</strong> 当接口A不可用的时候，Server端会持续的尝试从接口中取数据，直到”scrape_timeout”时间后停止尝试。这时候把接口的状态变为“DOWN”。</p>
<p><strong>3</strong>. Prometheus同时根据配置的”evaluation_interval”的时间间隔，定期（默认1min）的对Alert Rule进行评估；当到达评估周期的时候，发现接口A为DOWN，即UP=0为真，激活Alert，进入“PENDING”状态，并记录当前active的时间；</p>
<p><strong>4.</strong> 当下一个alert rule的评估周期到来的时候，发现UP=0继续为真，然后判断警报Active的时间是否已经超出rule里的‘for’ 持续时间，如果未超出，则进入下一个评估周期；如果时间超出，则alert的状态变为“FIRING”；同时调用Alertmanager接口，发送相关报警数据。</p>
<p><strong>5.</strong> AlertManager收到报警数据后，会将警报信息进行分组，然后根据alertmanager配置的“group_wait”时间先进行等待。等wait时间过后再发送报警信息。</p>
<p><strong>6.</strong> 属于同一个Alert Group的警报，在等待的过程中可能进入新的alert，如果之前的报警已经成功发出，那么间隔“group_interval”的时间间隔后再重新发送报警信息。比如配置的是邮件报警，那么同属一个group的报警信息会汇总在一个邮件里进行发送。</p>
<p><strong>7.</strong> 如果Alert Group里的警报一直没发生变化并且已经成功发送，等待‘repeat_interval’时间间隔之后再重复发送相同的报警邮件；如果之前的警报没有成功发送，则相当于触发第6条条件，则需要等待group_interval时间间隔后重复发送。同时最后至于警报信息具体发给谁，满足什么样的条件下指定警报接收人，设置不同报警发送频率，这里有alertmanager的route路由规则进行配置。</p>
<p>告警发送通知流程-1：</p>
<p><img src="/images/prometheus-alertmanager-8.png" alt="https://note.youdao.com/yws/public/resource/08ef03888558443a04d7f3e39c2d975d/xmlnote/WEBRESOURCEe71833b5f301818c2524048ed5ed436d/24641"></p>
<p>告警发送通知流程-2：</p>
<p><img src="/images/prometheus-alertmanager-9.png" alt="https://note.youdao.com/yws/public/resource/08ef03888558443a04d7f3e39c2d975d/xmlnote/WEBRESOURCE643c3bb348a7477a11e20d8740e182dd/24645"></p>
<h2 id="实现架构"><a href="#实现架构" class="headerlink" title="实现架构"></a>实现架构</h2><p><img src="/images/prometheus-alertmanager-10.jpg" alt="img"></p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="alertmanager"><a href="#alertmanager" class="headerlink" title="alertmanager"></a>alertmanager</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="comment"># The smarthost and SMTP sender used for mail notifications.</span></span><br><span class="line"><span class="attr">  smtp_smarthost:</span> <span class="string">'smtp.qq.com:465'</span></span><br><span class="line"><span class="attr">  smtp_from:</span> <span class="string">'447040949@qq.com'</span></span><br><span class="line"><span class="attr">  smtp_auth_username:</span> <span class="string">'447040949@qq.com'</span></span><br><span class="line"><span class="attr">  smtp_auth_password:</span> <span class="string">'nihao206206#'</span></span><br><span class="line">  <span class="comment"># The auth token for Hipchat.</span></span><br><span class="line"><span class="attr">  hipchat_auth_token:</span> <span class="string">'1234556789'</span></span><br><span class="line">  <span class="comment"># Alternative host for Hipchat.</span></span><br><span class="line"><span class="attr">  hipchat_url:</span> <span class="string">'https://hipchat.foobar.org/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The directory from which notification templates are read.</span></span><br><span class="line"><span class="attr">templates:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">'/etc/alertmanager/template/*.tmpl'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The root route on which each incoming alert enters.</span></span><br><span class="line"><span class="attr">route:</span></span><br><span class="line">  <span class="comment"># The labels by which incoming alerts are grouped together. For example,</span></span><br><span class="line">  <span class="comment"># multiple alerts coming in for cluster=A and alertname=LatencyHigh would</span></span><br><span class="line">  <span class="comment"># be batched into a single group.</span></span><br><span class="line"><span class="attr">  group_by:</span> <span class="string">['alertname',</span> <span class="string">'cluster'</span><span class="string">,</span> <span class="string">'service'</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># When a new group of alerts is created by an incoming alert, wait at</span></span><br><span class="line">  <span class="comment"># least 'group_wait' to send the initial notification.</span></span><br><span class="line">  <span class="comment"># This way ensures that you get multiple alerts for the same group that start</span></span><br><span class="line">  <span class="comment"># firing shortly after another are batched together on the first </span></span><br><span class="line">  <span class="comment"># notification.</span></span><br><span class="line"><span class="attr">  group_wait:</span> <span class="number">30</span><span class="string">s</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># When the first notification was sent, wait 'group_interval' to send a batch</span></span><br><span class="line">  <span class="comment"># of new alerts that started firing for that group.</span></span><br><span class="line"><span class="attr">  group_interval:</span> <span class="number">5</span><span class="string">m</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If an alert has successfully been sent, wait 'repeat_interval' to</span></span><br><span class="line">  <span class="comment"># resend them.</span></span><br><span class="line"><span class="attr">  repeat_interval:</span> <span class="number">3</span><span class="string">h</span> </span><br><span class="line"></span><br><span class="line">  <span class="comment"># A default receiver</span></span><br><span class="line"><span class="attr">  receiver:</span> <span class="string">team-X-mails</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># All the above attributes are inherited by all child routes and can </span></span><br><span class="line">  <span class="comment"># overwritten on each.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># The child route trees.</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line">  <span class="comment"># This routes performs a regular expression match on alert labels to</span></span><br><span class="line">  <span class="comment"># catch alerts that are related to a list of services.</span></span><br><span class="line"><span class="attr">  - match_re:</span></span><br><span class="line"><span class="attr">      service:</span> <span class="string">^(foo1|foo2|baz)$</span></span><br><span class="line"><span class="attr">    receiver:</span> <span class="string">team-X-mails</span></span><br><span class="line">    <span class="comment"># The service has a sub-route for critical alerts, any alerts</span></span><br><span class="line">    <span class="comment"># that do not match, i.e. severity != critical, fall-back to the</span></span><br><span class="line">    <span class="comment"># parent node and are sent to 'team-X-mails'</span></span><br><span class="line"><span class="attr">    routes:</span></span><br><span class="line"><span class="attr">    - match:</span></span><br><span class="line"><span class="attr">        severity:</span> <span class="string">critical</span></span><br><span class="line"><span class="attr">      receiver:</span> <span class="string">team-X-pager</span></span><br><span class="line"><span class="attr">  - match:</span></span><br><span class="line"><span class="attr">      service:</span> <span class="string">files</span></span><br><span class="line"><span class="attr">    receiver:</span> <span class="string">team-Y-mails</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    routes:</span></span><br><span class="line"><span class="attr">    - match:</span></span><br><span class="line"><span class="attr">        severity:</span> <span class="string">critical</span></span><br><span class="line"><span class="attr">      receiver:</span> <span class="string">team-Y-pager</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># This route handles all alerts coming from a database service. If there's</span></span><br><span class="line">  <span class="comment"># no team to handle it, it defaults to the DB team.</span></span><br><span class="line"><span class="attr">  - match:</span></span><br><span class="line"><span class="attr">      service:</span> <span class="string">database</span></span><br><span class="line"><span class="attr">    receiver:</span> <span class="string">team-DB-pager</span></span><br><span class="line">    <span class="comment"># Also group alerts by affected database.</span></span><br><span class="line"><span class="attr">    group_by:</span> <span class="string">[alertname,</span> <span class="string">cluster,</span> <span class="string">database]</span></span><br><span class="line"><span class="attr">    routes:</span></span><br><span class="line"><span class="attr">    - match:</span></span><br><span class="line"><span class="attr">        owner:</span> <span class="string">team-X</span></span><br><span class="line"><span class="attr">      receiver:</span> <span class="string">team-X-pager</span></span><br><span class="line"><span class="attr">    - match:</span></span><br><span class="line"><span class="attr">        owner:</span> <span class="string">team-Y</span></span><br><span class="line"><span class="attr">      receiver:</span> <span class="string">team-Y-pager</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Inhibition rules allow to mute a set of alerts given that another alert is</span></span><br><span class="line"><span class="comment"># firing.</span></span><br><span class="line"><span class="comment"># We use this to mute any warning-level notifications if the same alert is </span></span><br><span class="line"><span class="comment"># already critical.</span></span><br><span class="line"><span class="attr">inhibit_rules:</span></span><br><span class="line"><span class="attr">- source_match:</span></span><br><span class="line"><span class="attr">    severity:</span> <span class="string">'critical'</span></span><br><span class="line"><span class="attr">  target_match:</span></span><br><span class="line"><span class="attr">    severity:</span> <span class="string">'warning'</span></span><br><span class="line">  <span class="comment"># Apply inhibition if the alertname is the same.</span></span><br><span class="line"><span class="attr">  equal:</span> <span class="string">['alertname',</span> <span class="string">'cluster'</span><span class="string">,</span> <span class="string">'service'</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">'team-X-mails'</span></span><br><span class="line"><span class="attr">  webhook_configs:</span></span><br><span class="line"><span class="attr">  - url:</span> <span class="string">'http://u2.kugou.net:11770/sendRtxByPost'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">'team-X-pager'</span></span><br><span class="line"><span class="attr">  email_configs:</span></span><br><span class="line"><span class="attr">  - to:</span> <span class="string">'team-X+alerts-critical@example.org'</span></span><br><span class="line"><span class="attr">  pagerduty_configs:</span></span><br><span class="line"><span class="attr">  - service_key:</span> <span class="string">&lt;team-X-key&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">'team-Y-mails'</span></span><br><span class="line"><span class="attr">  email_configs:</span></span><br><span class="line"><span class="attr">  - to:</span> <span class="string">'team-Y+alerts@example.org'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">'team-Y-pager'</span></span><br><span class="line"><span class="attr">  pagerduty_configs:</span></span><br><span class="line"><span class="attr">  - service_key:</span> <span class="string">&lt;team-Y-key&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- name:</span> <span class="string">'team-DB-pager'</span></span><br><span class="line"><span class="attr">  pagerduty_configs:</span></span><br><span class="line"><span class="attr">  - service_key:</span> <span class="string">&lt;team-DB-key&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">- name:</span> <span class="string">'team-X-hipchat'</span></span><br><span class="line"><span class="attr">  hipchat_configs:</span></span><br><span class="line"><span class="attr">  - auth_token:</span> <span class="string">&lt;auth_token&gt;</span></span><br><span class="line"><span class="attr">    room_id:</span> <span class="number">85</span></span><br><span class="line"><span class="attr">    message_format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">    notify:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>参数说明</p>
<ul>
<li><p>global<br>smtp_smarthost、smtp_from、smtp_auth_username、smtp_auth_password用于设置smtp邮件的地址及用户信息<br>hipchat_auth_token与安全性认证有关</p>
</li>
<li><p>templates<br>指定告警信息展示的模版</p>
</li>
<li><p>route<br>group_by：指定所指定的维度对告警进行分组<br>group_wait:指定每组告警发送等待的时间<br>group_interval:指定告警调度的时间间隔<br>repeat_interval:在连续告警触发的情况下，重复发送告警的时间间隔</p>
</li>
<li>receiver<br>指定告警默认的接受者</li>
<li>routes<br>match_re:定义告警接收者的匹配方式<br>service:定义匹配的方式，纬度service值以foo1或foo2或baz开始/结束时表示匹配成功<br>receiver：定义了匹配成功的的情况下的接受者</li>
<li>inhibit_rules<br>定义告警的抑制条件，过滤不必要的告警</li>
<li>receivers<br>定义了具体的接收者，也就是告警具体的方式方式</li>
</ul>
<h3 id="prometheus"><a href="#prometheus" class="headerlink" title="prometheus"></a>prometheus</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line"><span class="attr">  scrape_interval:</span>     <span class="number">15</span><span class="string">s</span> <span class="comment"># By default, scrape targets every 15 seconds.</span></span><br><span class="line"><span class="attr">  evaluation_interval:</span> <span class="number">15</span><span class="string">s</span> <span class="comment"># By default, scrape targets every 15 seconds.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Attach these labels to any time series or alerts when communicating with</span></span><br><span class="line">  <span class="comment"># external systems (federation, remote storage, Alertmanager).</span></span><br><span class="line"><span class="attr">  external_labels:</span></span><br><span class="line"><span class="attr">      monitor:</span> <span class="string">'codelab-monitor'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load and evaluate rules in this file every 'evaluation_interval' seconds.</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="comment"># - "first.rules"</span></span><br><span class="line">  <span class="comment"># - "second.rules"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"alert.rules"</span></span><br><span class="line">  <span class="comment"># - "record.rules"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it's Prometheus itself.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'windows-test'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Override the global default and scrape targets from this job every 5 seconds.</span></span><br><span class="line"><span class="attr">    scrape_interval:</span> <span class="number">1</span><span class="string">s</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># metrics_path defaults to '/metrics'</span></span><br><span class="line">    <span class="comment"># scheme defaults to 'http'.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">['192.168.3.1:9090','192.168.3.120:9090']</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'windows-chenx'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Override the global default and scrape targets from this job every 5 seconds.</span></span><br><span class="line"><span class="attr">    scrape_interval:</span> <span class="number">3</span><span class="string">s</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># metrics_path defaults to '/metrics'</span></span><br><span class="line">    <span class="comment"># scheme defaults to 'http'.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line"><span class="attr">      - targets:</span> <span class="string">['192.168.3.1:9091']</span></span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>global下的scrape_interval<br>用于向pushgateway采集数据的频率，上图所示：每隔15秒向pushgateway采集一次指标数据</li>
<li>global下的evaluation_interval<br>表示规则计算的频率，上图所示：每隔15秒根据所配置的规则集，进行规则计算</li>
<li>global下的external_labels<br>为指标增加额外的维度，可用于区分不同的prometheus,在应用中多个prometheus可以对应一个alertmanager</li>
<li>rule_files<br>指定所配置规则文件，文件中每行可表示一个规则</li>
<li>scrape_configs下的job_name<br>指定任务名称，在指标中会增加该维度，表示该指标所属的job</li>
<li>scrape_configs下的scrape_interval<br>覆盖global下的scrape_interval配置</li>
<li>static_configs下的targets<br>指定指标数据源的地址，多个地址之间用逗号隔开</li>
</ul>
<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><h3 id="告警路由"><a href="#告警路由" class="headerlink" title="告警路由"></a>告警路由</h3><p>路由字段即route的配置他控制了告警的聚合以及发送频率，route字段本身是一个树状的，每一个节点是一个配置，配置包括了接收人、match字段以及相应的告警发送配置例如：首次聚合时间、告警后续发送频率。对于到达的告警会收心进行match，如果有一个节点match并且该节点的continue字段为true，那么会继续递归遍历它的子节点，直到到达最后一个，这样就把匹配到同一个节点的告警经过group_by字段的分类，放置在不同的<strong>簇</strong>里面，这样就完成了告警的聚合功能。</p>
<p>这里有一点需要着重指出的一点是，对于每个簇，有三个字段影响了告警发送的频率，<strong>group_wait、group_interval、repeat_interval</strong>。</p>
<p>group_wait:当告警A第一次到达之后由于之前并没有告警簇，此时会进行创建，创建完之后会等待group_wait时间之后才会进行发送，这是为什么呢？这其实是为了解决告警风暴的问题，例如当服务集群a发生了告警，例如有10条，如果他们在group_wait这段时间内相继到达，那么最终他们就会被合并成一条告警进行发送。而不是收到10次告警信息。</p>
<p>group_interval:控制的是遍历告警簇的时间间隔，am当中当有新的告警到达时（之前没有进行过发生的告警）会进行告警簇的发送或者当检测到上次告警发送时间距离当前时间已经大于<strong>repeat_interval</strong>那么此时会进行发送。</p>
<p>路由配置格式</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#报警接收器</span></span><br><span class="line"><span class="string">[</span> <span class="attr">receiver:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分组</span></span><br><span class="line"><span class="string">[</span> <span class="attr">group_by:</span> <span class="string">'['</span> <span class="string">&lt;labelname&gt;,</span> <span class="string">...</span> <span class="string">']'</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Whether an alert should continue matching subsequent sibling nodes.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">continue:</span> <span class="string">&lt;boolean&gt;</span> <span class="string">| default = false ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># A set of equality matchers an alert has to fulfill to match the node.</span></span><br><span class="line"><span class="string">#根据匹配的警报，指定接收器</span></span><br><span class="line"><span class="string"></span><span class="attr">match:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;labelname&gt;:</span> <span class="string">&lt;labelvalue&gt;,</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A set of regex-matchers an alert has to fulfill to match the node.</span></span><br><span class="line"><span class="attr">match_re:</span></span><br><span class="line"><span class="comment">#根据匹配正则符合的警告，指定接收器</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;labelname&gt;:</span> <span class="string">&lt;regex&gt;,</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># How long to initially wait to send a notification for a group</span></span><br><span class="line"><span class="comment"># of alerts. Allows to wait for an inhibiting alert to arrive or collect</span></span><br><span class="line"><span class="comment"># more initial alerts for the same group. (Usually ~0s to few minutes.)</span></span><br><span class="line"><span class="string">[</span> <span class="attr">group_wait:</span> <span class="string">&lt;duration&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># How long to wait before sending notification about new alerts that are</span></span><br><span class="line"><span class="comment"># in are added to a group of alerts for which an initial notification</span></span><br><span class="line"><span class="comment"># has already been sent. (Usually ~5min or more.)</span></span><br><span class="line"><span class="string">[</span> <span class="attr">group_interval:</span> <span class="string">&lt;duration&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># How long to wait before sending a notification again if it has already</span></span><br><span class="line"><span class="comment"># been sent successfully for an alert. (Usually ~3h or more).</span></span><br><span class="line"><span class="string">[</span> <span class="attr">repeat_interval:</span> <span class="string">&lt;duration&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Zero or more child routes.</span></span><br><span class="line"><span class="attr">routes:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;route&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The root route with all parameters, which are inherited by the child</span></span><br><span class="line"><span class="comment"># routes if they are not overwritten.</span></span><br><span class="line"><span class="attr">route:</span></span><br><span class="line"><span class="attr">  receiver:</span> <span class="string">'default-receiver'</span></span><br><span class="line"><span class="attr">  group_wait:</span> <span class="number">30</span><span class="string">s</span></span><br><span class="line"><span class="attr">  group_interval:</span> <span class="number">5</span><span class="string">m</span></span><br><span class="line"><span class="attr">  repeat_interval:</span> <span class="number">4</span><span class="string">h</span></span><br><span class="line"><span class="attr">  group_by:</span> <span class="string">[cluster,</span> <span class="string">alertname]</span></span><br><span class="line">  <span class="comment"># All alerts that do not match the following child routes</span></span><br><span class="line">  <span class="comment"># will remain at the root node and be dispatched to 'default-receiver'.</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line">  <span class="comment"># All alerts with service=mysql or service=cassandra</span></span><br><span class="line">  <span class="comment"># are dispatched to the database pager.</span></span><br><span class="line"><span class="attr">  - receiver:</span> <span class="string">'database-pager'</span></span><br><span class="line"><span class="attr">    group_wait:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">    match_re:</span></span><br><span class="line"><span class="attr">      service:</span> <span class="string">mysql|cassandra</span></span><br><span class="line">  <span class="comment"># All alerts with the team=frontend label match this sub-route.</span></span><br><span class="line">  <span class="comment"># They are grouped by product and environment rather than cluster</span></span><br><span class="line">  <span class="comment"># and alertname.</span></span><br><span class="line"><span class="attr">  - receiver:</span> <span class="string">'frontend-pager'</span></span><br><span class="line"><span class="attr">    group_by:</span> <span class="string">[product,</span> <span class="string">environment]</span></span><br><span class="line"><span class="attr">    match:</span></span><br><span class="line"><span class="attr">      team:</span> <span class="string">frontend</span></span><br></pre></td></tr></table></figure>
<h3 id="告警聚合"><a href="#告警聚合" class="headerlink" title="告警聚合"></a>告警聚合</h3><p>告警聚合是非常重要的一个功能，好的聚合可以极大的减少告警风暴。</p>
<p>告警聚合在路由之后，每个路由节点可以配置自己的独特的聚合labels，比如按产品、集群、team等聚合。</p>
<p>例如上述示例，只按产品聚合，那么所有属于产品tcs的告警将与该告警一起聚合，所有属于产品tcs的告警都会放到一起，这种比较杂乱；如果按产品和类型聚合，那么属于不同机器的告警将分别聚合。</p>
<h3 id="告警抑制"><a href="#告警抑制" class="headerlink" title="告警抑制"></a>告警抑制</h3><p>告警抑制是指高等级告警发生时，自动抑制低等级的告警发送，同时当高等级告警恢复是，放开对低等级的抑制，常见场景是磁盘满80%警告告警通知，90%发送严重告警通知。</p>
<p>告警抑制的实现也是基于labels，但是是基于全局的，不是特定路由，而且只支持静态label，这个地方的设计其实不太好，有两个问题：</p>
<ol>
<li>全局容易出现不同用户的规则互相影响，为了减少此种行为的发生，我们应该为每个路由设定一个抑制规则，同时必须包含路由的labels</li>
<li>静态label对label规范化增加了不必要的限制，所有数据都必须拥有指定的抑制labels才能使用</li>
</ol>
<h3 id="告警屏蔽"><a href="#告警屏蔽" class="headerlink" title="告警屏蔽"></a>告警屏蔽</h3><p>告警屏蔽和告警抑制有点类似，但不一样，告警屏蔽是直接屏蔽报警，不再发送，不同报警之间无关联（告警抑制是高等级告警抑制低等级告警）。告警屏蔽也是基于labels，当告警中包含的labels满足(match)配置的屏蔽labels，就会发生屏蔽，不再发送告警。</p>
<p>原生的alertmanger屏蔽会直接在内存中屏蔽告警，无法记录到底哪些告警被屏蔽了，而且一旦屏蔽，及时报警恢复也不会发送通知，一旦设定，只能等屏蔽过期或者手工删除。</p>
<p>370对记录告警是个强需求，我们改造了alertmanager，让被屏蔽的告警也能继续发出来，但会加一个特殊的标记，这样我们就可以记录被屏蔽告警的信息，也可以捕获恢复。</p>
<p>抑制配置格式</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Matchers that have to be fulfilled in the alerts to be muted.</span></span><br><span class="line"><span class="comment">##必须在要需要静音的警报中履行的匹配者</span></span><br><span class="line"><span class="attr">target_match:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;labelname&gt;:</span> <span class="string">&lt;labelvalue&gt;,</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="attr">target_match_re:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;labelname&gt;:</span> <span class="string">&lt;regex&gt;,</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Matchers for which one or more alerts have to exist for the</span></span><br><span class="line"><span class="comment"># inhibition to take effect.</span></span><br><span class="line"><span class="comment">#必须存在一个或多个警报以使抑制生效的匹配者。</span></span><br><span class="line"><span class="attr">source_match:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;labelname&gt;:</span> <span class="string">&lt;labelvalue&gt;,</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="attr">source_match_re:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;labelname&gt;:</span> <span class="string">&lt;regex&gt;,</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Labels that must have an equal value in the source and target</span></span><br><span class="line"><span class="comment"># alert for the inhibition to take effect.</span></span><br><span class="line"><span class="comment">#在源和目标警报中必须具有相等值的标签才能使抑制生效</span></span><br><span class="line"><span class="string">[</span> <span class="attr">equal:</span> <span class="string">'['</span> <span class="string">&lt;labelname&gt;,</span> <span class="string">...</span> <span class="string">']'</span> <span class="string">]</span></span><br></pre></td></tr></table></figure>
<h3 id="告警发送"><a href="#告警发送" class="headerlink" title="告警发送"></a>告警发送</h3><p>告警发送是告警系统的最后一个处理点，也是众口难调的一个点，目前支持常见的第三方组件，但都不好用，且无法定制，一般都会基于webhook设计适合公司的发送能力。</p>
<p>通用配置格式</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The unique name of the receiver.</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">&lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configurations for several notification integrations.</span></span><br><span class="line"><span class="attr">email_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;email_config&gt;,</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="attr">pagerduty_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;pagerduty_config&gt;,</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="attr">slack_config:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;slack_config&gt;,</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="attr">opsgenie_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;opsgenie_config&gt;,</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"><span class="attr">webhook_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;webhook_config&gt;,</span> <span class="string">...</span> <span class="string">]</span></span><br></pre></td></tr></table></figure>
<p>邮件接收器email_config</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Whether or not to notify about resolved alerts.</span></span><br><span class="line"><span class="comment">#警报被解决之后是否通知</span></span><br><span class="line"><span class="string">[</span> <span class="attr">send_resolved:</span> <span class="string">&lt;boolean&gt;</span> <span class="string">| default = false ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># The email address to send notifications to.</span></span><br><span class="line"><span class="string"></span><span class="attr">to:</span> <span class="string">&lt;tmpl_string&gt;</span></span><br><span class="line"><span class="comment"># The sender address.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">from:</span> <span class="string">&lt;tmpl_string&gt;</span> <span class="string">| default = global.smtp_from ]</span></span><br><span class="line"><span class="string"># The SMTP host through which emails are sent.</span></span><br><span class="line"><span class="string">[ smarthost: &lt;string&gt; | default = global.smtp_smarthost ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># The HTML body of the email notification.</span></span><br><span class="line"><span class="string">[ html: &lt;tmpl_string&gt; | default = '<span class="template-variable">&#123;&#123; template "email.default.html" . &#125;&#125;</span>' ] </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Further headers email header key/value pairs. Overrides any headers</span></span><br><span class="line"><span class="string"># previously set by the notification implementation.</span></span><br><span class="line"><span class="string">[ headers: &#123; &lt;string&gt;: &lt;tmpl_string&gt;, ... &#125; ]</span></span><br></pre></td></tr></table></figure>
<p>Slcack接收器slack_config</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Whether or not to notify about resolved alerts.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">send_resolved:</span> <span class="string">&lt;boolean&gt;</span> <span class="string">| default = true ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># The Slack webhook URL.</span></span><br><span class="line"><span class="string">[ api_url: &lt;string&gt; | default = global.slack_api_url ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># The channel or user to send notifications to.</span></span><br><span class="line"><span class="string"></span><span class="attr">channel:</span> <span class="string">&lt;tmpl_string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># API request data as defined by the Slack webhook API.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">color:</span> <span class="string">&lt;tmpl_string&gt;</span> <span class="string">| default = '<span class="template-variable">&#123;&#123; if eq .Status "firing" &#125;&#125;</span>danger<span class="template-variable">&#123;&#123; else &#125;&#125;</span>good<span class="template-variable">&#123;&#123; end &#125;&#125;</span>' ]</span></span><br><span class="line"><span class="string">[ username: &lt;tmpl_string&gt; | default = '<span class="template-variable">&#123;&#123; template "slack.default.username" . &#125;&#125;</span>'</span></span><br><span class="line"><span class="string">[ title: &lt;tmpl_string&gt; | default = '<span class="template-variable">&#123;&#123; template "slack.default.title" . &#125;&#125;</span>' ]</span></span><br><span class="line"><span class="string">[ title_link: &lt;tmpl_string&gt; | default = '<span class="template-variable">&#123;&#123; template "slack.default.titlelink" . &#125;&#125;</span>' ]</span></span><br><span class="line"><span class="string">[ pretext: &lt;tmpl_string&gt; | default = '<span class="template-variable">&#123;&#123; template "slack.default.pretext" . &#125;&#125;</span>' ]</span></span><br><span class="line"><span class="string">[ text: &lt;tmpl_string&gt; | default = '<span class="template-variable">&#123;&#123; template "slack.default.text" . &#125;&#125;</span>' ]</span></span><br><span class="line"><span class="string">[ fallback: &lt;tmpl_string&gt; | default = '<span class="template-variable">&#123;&#123; template "slack.default.fallback" . &#125;&#125;</span>' ]</span></span><br></pre></td></tr></table></figure>
<p>Webhook接收器webhook_config</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># Whether or not to notify about resolved alerts.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">send_resolved:</span> <span class="string">&lt;boolean&gt;</span> <span class="string">| default = true ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> # The endpoint to send HTTP POST requests to.</span></span><br><span class="line"><span class="string"></span><span class="attr">url:</span> <span class="string">&lt;string&gt;</span></span><br></pre></td></tr></table></figure>
<p>Alertmanager会使用以下的格式向配置端点发送HTTP POST请求：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"3"</span>,</span><br><span class="line">  <span class="attr">"groupKey"</span>: &lt;number&gt;     // key identifying the group of alerts (e.g. to deduplicate)</span><br><span class="line">  <span class="string">"status"</span>: <span class="string">"&lt;resolved|firing&gt;"</span>,</span><br><span class="line">  <span class="attr">"receiver"</span>: &lt;string&gt;,</span><br><span class="line">  <span class="attr">"groupLabels"</span>: &lt;object&gt;,</span><br><span class="line">  <span class="attr">"commonLabels"</span>: &lt;object&gt;,</span><br><span class="line">  <span class="attr">"commonAnnotations"</span>: &lt;object&gt;,</span><br><span class="line">  "externalURL": &lt;string&gt;,  // backling to the Alertmanager.</span><br><span class="line">  "alerts": [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"labels"</span>: &lt;object&gt;,</span><br><span class="line">      <span class="attr">"annotations"</span>: &lt;object&gt;,</span><br><span class="line">      <span class="attr">"startsAt"</span>: <span class="string">"&lt;rfc3339&gt;"</span>,</span><br><span class="line">      <span class="attr">"endsAt"</span>: <span class="string">"&lt;rfc3339&gt;"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以添加一个钉钉webhook，通过<a href="https://link.jianshu.com/?t=!https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.karFPe&amp;treeId=257&amp;articleId=105735&amp;docType=1" target="_blank" rel="external">钉钉报警</a>,由于POST数据需要有要求，简单实现一个数据转发脚本。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/',methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        post_data = request.get_data()</span><br><span class="line">        alert_data(post_data)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alert_data</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> urllib2 <span class="keyword">import</span> Request,urlopen</span><br><span class="line">    url = <span class="string">'https://oapi.dingtalk.com/robot/send?access_token=xxxx'</span></span><br><span class="line">    send_data = <span class="string">'&#123;"msgtype": "text","text": &#123;"content": %s&#125;&#125;'</span> %(data)</span><br><span class="line">    request = Request(url, send_data)</span><br><span class="line">    request.add_header(<span class="string">'Content-Type'</span>,<span class="string">'application/json'</span>)</span><br><span class="line">    <span class="keyword">return</span> urlopen(request).read()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="报警规则"><a href="#报警规则" class="headerlink" title="报警规则"></a>报警规则</h3><p>报警规则允许你定义基于Prometheus<a href="https://link.jianshu.com/?t=!https://prometheus.io/docs/querying/basics/" target="_blank" rel="external">表达式语言</a>的报警条件，并发送报警通知到外部服务</p>
<p>报警规则通过以下格式定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ALERT &lt;alert name&gt;</span><br><span class="line">  IF &lt;expression&gt;</span><br><span class="line">  [ FOR &lt;duration&gt; ]</span><br><span class="line">  [ LABELS &lt;label set&gt; ]</span><br><span class="line">  [ ANNOTATIONS &lt;label set&gt; ]</span><br></pre></td></tr></table></figure>
<p>可选的FOR语句，使得Prometheus在表达式输出的向量元素（例如高HTTP错误率的实例）之间等待一段时间，将警报计数作为触发此元素。如果元素是active，但是没有firing的，就处于pending状态。</p>
<p>LABELS（标签）语句允许指定一组标签附加警报上。将覆盖现有冲突的任何标签，标签值也可以被模板化。</p>
<p>ANNOTATIONS（注释）它们被用于存储更长的其他信息，例如警报描述或者链接，注释值也可以被模板化。</p>
<p>Templating(模板) 标签和注释值可以使用<a href="https://link.jianshu.com?t=!https://prometheus.io/docs/visualization/consoles/" target="_blank" rel="external">控制台模板</a>进行模板化。$labels变量保存警报实例的标签键/值对，$value保存警报实例的评估值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># To insert a firing element&apos;s label values:</span><br><span class="line">&#123;&#123; $labels.&lt;labelname&gt; &#125;&#125;</span><br><span class="line"># To insert the numeric expression value of the firing element:</span><br><span class="line">&#123;&#123; $value &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>报警规则示例:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Alert for any instance that is unreachable for &gt;5 minutes.</span></span><br><span class="line"><span class="string">ALERT</span> <span class="string">InstanceDown</span></span><br><span class="line">  <span class="string">IF</span> <span class="string">up</span> <span class="string">==</span> <span class="number">0</span></span><br><span class="line">  <span class="string">FOR</span> <span class="number">5</span><span class="string">m</span></span><br><span class="line">  <span class="string">LABELS</span> <span class="string">&#123;</span> <span class="string">severity</span> <span class="string">=</span> <span class="string">"page"</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="string">ANNOTATIONS</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">summary</span> <span class="string">=</span> <span class="string">"Instance <span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> down"</span><span class="string">,</span></span><br><span class="line">    <span class="string">description</span> <span class="string">=</span> <span class="string">"<span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> of job <span class="template-variable">&#123;&#123; $labels.job &#125;&#125;</span> has been down for more than 5 minutes."</span><span class="string">,</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alert for any instance that have a median request latency &gt;1s.</span></span><br><span class="line"><span class="string">ALERT</span> <span class="string">APIHighRequestLatency</span></span><br><span class="line">  <span class="string">IF</span> <span class="string">api_http_request_latencies_second&#123;quantile="0.5"&#125;</span> <span class="string">&gt; 1</span></span><br><span class="line"><span class="string">  FOR 1m</span></span><br><span class="line"><span class="string">  ANNOTATIONS &#123;</span></span><br><span class="line"><span class="string">    summary = "High request latency on <span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span>",</span></span><br><span class="line"><span class="string">    description = "<span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> has a median request latency above 1s (current value: <span class="template-variable">&#123;&#123; $value &#125;&#125;</span>s)",</span></span><br><span class="line"><span class="string">  &#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p>alertmanager/cmd/alertmanager/main.go</p>
<h3 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 程序入口main函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	os.Exit(run())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// run函数，真实的程序主函数。初始化，并开启相应的服务。阻塞监听reload和关闭信号，会进行平滑退出。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 初始化集群，可高可用</span></span><br><span class="line">	<span class="keyword">var</span> peer *cluster.Peer</span><br><span class="line">	<span class="keyword">if</span> *clusterBindAddr != <span class="string">""</span> &#123;</span><br><span class="line">		peer, err = cluster.Create(</span><br><span class="line">			log.With(logger, <span class="string">"component"</span>, <span class="string">"cluster"</span>),</span><br><span class="line">			prometheus.DefaultRegisterer,</span><br><span class="line">			*clusterBindAddr,</span><br><span class="line">			*clusterAdvertiseAddr,</span><br><span class="line">			*peers,</span><br><span class="line">			<span class="literal">true</span>,</span><br><span class="line">			*pushPullInterval,</span><br><span class="line">			*gossipInterval,</span><br><span class="line">			*tcpTimeout,</span><br><span class="line">			*probeTimeout,</span><br><span class="line">			*probeInterval,</span><br><span class="line">		)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			level.Error(logger).Log(<span class="string">"msg"</span>, <span class="string">"unable to initialize gossip mesh"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 设置普罗米修斯集群指标，为已启用</span></span><br><span class="line">		clusterEnabled.Set(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 配置 stop channel 和 等待组，确保优雅退出</span></span><br><span class="line">	stopc := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">	wg.Add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> 配置集群广播日志信息配置，并配置广播？？？</span></span><br><span class="line">	notificationLogOpts := []nflog.Option&#123;</span><br><span class="line">		nflog.WithRetention(*retention),</span><br><span class="line">		nflog.WithSnapshot(filepath.Join(*dataDir, <span class="string">"nflog"</span>)),</span><br><span class="line">		nflog.WithMaintenance(<span class="number">15</span>*time.Minute, stopc, wg.Done),</span><br><span class="line">		nflog.WithMetrics(prometheus.DefaultRegisterer),</span><br><span class="line">		nflog.WithLogger(log.With(logger, <span class="string">"component"</span>, <span class="string">"nflog"</span>)),</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	notificationLog, err := nflog.New(notificationLogOpts...)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		level.Error(logger).Log(<span class="string">"err"</span>, err)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> peer != <span class="literal">nil</span> &#123;</span><br><span class="line">		c := peer.AddState(<span class="string">"nfl"</span>, notificationLog, prometheus.DefaultRegisterer)</span><br><span class="line">		notificationLog.SetBroadcast(c.Broadcast)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	marker := types.NewMarker(prometheus.DefaultRegisterer)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 静默配置，并生成静默对象，如果有配置集群，则设置集群广播。</span></span><br><span class="line">	silenceOpts := silence.Options&#123;</span><br><span class="line">		SnapshotFile: filepath.Join(*dataDir, <span class="string">"silences"</span>),</span><br><span class="line">		Retention:    *retention,</span><br><span class="line">		Logger:       log.With(logger, <span class="string">"component"</span>, <span class="string">"silences"</span>),</span><br><span class="line">		Metrics:      prometheus.DefaultRegisterer,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	silences, err := silence.New(silenceOpts)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		level.Error(logger).Log(<span class="string">"err"</span>, err)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> peer != <span class="literal">nil</span> &#123;</span><br><span class="line">		c := peer.AddState(<span class="string">"sil"</span>, silences, prometheus.DefaultRegisterer)</span><br><span class="line">		silences.SetBroadcast(c.Broadcast)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Start providers before router potentially sends updates.</span></span><br><span class="line">	wg.Add(<span class="number">1</span>)</span><br><span class="line">	<span class="comment">// 维护静默产生的data数据，每十五分钟进行下数据删除。</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		silences.Maintenance(<span class="number">15</span>*time.Minute, filepath.Join(*dataDir, <span class="string">"silences"</span>), stopc)</span><br><span class="line">		wg.Done()</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// defer wg.Wait 确保最后所有的任务都优雅退出之后，才会程序退出。</span></span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="built_in">close</span>(stopc)</span><br><span class="line">		wg.Wait()</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 集群peer的状态监听器已经进行注册成功，现在可以进行加入集群和初始化状态。</span></span><br><span class="line">	<span class="comment">// Peer state listeners have been registered, now we can join and get the initial state.</span></span><br><span class="line">	<span class="keyword">if</span> peer != <span class="literal">nil</span> &#123;</span><br><span class="line">		err = peer.Join(</span><br><span class="line">			*reconnectInterval,</span><br><span class="line">			*peerReconnectTimeout,</span><br><span class="line">		)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			level.Warn(logger).Log(<span class="string">"msg"</span>, <span class="string">"unable to join gossip mesh"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">		ctx, cancel := context.WithTimeout(context.Background(), *settleTimeout)</span><br><span class="line">		<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			cancel()</span><br><span class="line">			<span class="keyword">if</span> err := peer.Leave(<span class="number">10</span> * time.Second); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				level.Warn(logger).Log(<span class="string">"msg"</span>, <span class="string">"unable to leave gossip mesh"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;()</span><br><span class="line">		<span class="keyword">go</span> peer.Settle(ctx, *gossipInterval*<span class="number">10</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建监控对象</span></span><br><span class="line">	alerts, err := mem.NewAlerts(context.Background(), marker, *alertGCInterval, logger)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		level.Error(logger).Log(<span class="string">"err"</span>, err)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> alerts.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> disp *dispatch.Dispatcher</span><br><span class="line">	<span class="keyword">defer</span> disp.Stop()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建分组方法</span></span><br><span class="line">	groupFn := <span class="function"><span class="keyword">func</span><span class="params">(routeFilter <span class="keyword">func</span>(*dispatch.Route)</span> <span class="title">bool</span>, <span class="title">alertFilter</span> <span class="title">func</span><span class="params">(*types.Alert, time.Time)</span> <span class="title">bool</span>) <span class="params">(dispatch.AlertGroups, <span class="keyword">map</span>[model.Fingerprint][]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> disp.Groups(routeFilter, alertFilter)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// alertmanager api结构体，包含所有版本V1,V2的http接口。</span></span><br><span class="line">	api, err := api.New(api.Options&#123;</span><br><span class="line">		Alerts:      alerts,</span><br><span class="line">		Silences:    silences,</span><br><span class="line">		StatusFunc:  marker.Status,</span><br><span class="line">		Peer:        peer,</span><br><span class="line">		Timeout:     *httpTimeout,</span><br><span class="line">		Concurrency: *getConcurrency,</span><br><span class="line">		Logger:      log.With(logger, <span class="string">"component"</span>, <span class="string">"api"</span>),</span><br><span class="line">		Registry:    prometheus.DefaultRegisterer,</span><br><span class="line">		GroupFunc:   groupFn,</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		level.Error(logger).Log(<span class="string">"err"</span>, errors.Wrap(err, <span class="string">"failed to create API"</span>))</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	amURL, err := extURL(logger, os.Hostname, *listenAddress, *externalURL)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		level.Error(logger).Log(<span class="string">"msg"</span>, <span class="string">"failed to determine external URL"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	level.Debug(logger).Log(<span class="string">"externalURL"</span>, amURL.String())</span><br><span class="line"></span><br><span class="line">	waitFunc := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">	<span class="keyword">if</span> peer != <span class="literal">nil</span> &#123;</span><br><span class="line">		waitFunc = clusterWait(peer, *peerTimeout)</span><br><span class="line">	&#125;</span><br><span class="line">	timeoutFunc := <span class="function"><span class="keyword">func</span><span class="params">(d time.Duration)</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> d &lt; notify.MinTimeout &#123;</span><br><span class="line">			d = notify.MinTimeout</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> d + waitFunc()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		inhibitor *inhibit.Inhibitor</span><br><span class="line">		tmpl      *template.Template</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建普罗米修斯相关统计指标，创建配置协调者。</span></span><br><span class="line">	dispMetrics := dispatch.NewDispatcherMetrics(prometheus.DefaultRegisterer)</span><br><span class="line">	pipelineBuilder := notify.NewPipelineBuilder(prometheus.DefaultRegisterer)</span><br><span class="line">	configLogger := log.With(logger, <span class="string">"component"</span>, <span class="string">"configuration"</span>)</span><br><span class="line">	configCoordinator := config.NewCoordinator(</span><br><span class="line">		*configFile,</span><br><span class="line">		prometheus.DefaultRegisterer,</span><br><span class="line">		configLogger,</span><br><span class="line">	)</span><br><span class="line">	configCoordinator.Subscribe(<span class="function"><span class="keyword">func</span><span class="params">(conf *config.Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">		tmpl, err = template.FromGlobs(conf.Templates...)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> errors.Wrap(err, <span class="string">"failed to parse templates"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		tmpl.ExternalURL = amURL</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Build the routing tree and record which receivers are used.</span></span><br><span class="line">		<span class="comment">// ------------------------------------------------------------</span></span><br><span class="line">		<span class="comment">// 建立路由树和记录下被使用的接收人</span></span><br><span class="line">		routes := dispatch.NewRoute(conf.Route, <span class="literal">nil</span>)</span><br><span class="line">		activeReceivers := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">		routes.Walk(<span class="function"><span class="keyword">func</span><span class="params">(r *dispatch.Route)</span></span> &#123;</span><br><span class="line">			activeReceivers[r.RouteOpts.Receiver] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Build the map of receiver to integrations.</span></span><br><span class="line">		receivers := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]notify.Integration, <span class="built_in">len</span>(activeReceivers))</span><br><span class="line">		<span class="keyword">var</span> integrationsNum <span class="keyword">int</span></span><br><span class="line">		<span class="comment">// 循环加载所有配置中的接受消息人</span></span><br><span class="line">		<span class="keyword">for</span> _, rcv := <span class="keyword">range</span> conf.Receivers &#123;</span><br><span class="line">			<span class="comment">// 查看此接受消息人，没有任何route在使用，则进行记录和丢弃，然后开始下一轮。</span></span><br><span class="line">			<span class="keyword">if</span> _, found := activeReceivers[rcv.Name]; !found &#123;</span><br><span class="line">				<span class="comment">// No need to build a receiver if no route is using it.</span></span><br><span class="line">				level.Info(configLogger).Log(<span class="string">"msg"</span>, <span class="string">"skipping creation of receiver not referenced by any route"</span>, <span class="string">"receiver"</span>, rcv.Name)</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 创建接收人的integration，并插入到receiver map中。</span></span><br><span class="line">			integrations, err := buildReceiverIntegrations(rcv, tmpl, logger)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> err</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// rcv.Name is guaranteed to be unique across all receivers.</span></span><br><span class="line">			receivers[rcv.Name] = integrations</span><br><span class="line">			integrationsNum += <span class="built_in">len</span>(integrations)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 停止抑制器和调度器</span></span><br><span class="line">		inhibitor.Stop()</span><br><span class="line">		disp.Stop()</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建静默，抑制器并放到pipeline里面，pipeline包含告警处理的每一个stage。</span></span><br><span class="line">		inhibitor = inhibit.NewInhibitor(alerts, conf.InhibitRules, marker, logger)</span><br><span class="line">		silencer := silence.NewSilencer(silences, marker, logger)</span><br><span class="line">		pipeline := pipelineBuilder.New(</span><br><span class="line">			receivers,</span><br><span class="line">			waitFunc,</span><br><span class="line">			inhibitor,</span><br><span class="line">			silencer,</span><br><span class="line">			notificationLog,</span><br><span class="line">			peer,</span><br><span class="line">		)</span><br><span class="line">		configuredReceivers.Set(<span class="keyword">float64</span>(<span class="built_in">len</span>(activeReceivers)))</span><br><span class="line">		configuredIntegrations.Set(<span class="keyword">float64</span>(integrationsNum))</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 更新api的抑制和静默数据</span></span><br><span class="line">		api.Update(conf, <span class="function"><span class="keyword">func</span><span class="params">(labels model.LabelSet)</span></span> &#123;</span><br><span class="line">			inhibitor.Mutes(labels)</span><br><span class="line">			silencer.Mutes(labels)</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建alertmanager调度器</span></span><br><span class="line">		disp = dispatch.NewDispatcher(alerts, routes, pipeline, marker, timeoutFunc, logger, dispMetrics)</span><br><span class="line">		routes.Walk(<span class="function"><span class="keyword">func</span><span class="params">(r *dispatch.Route)</span></span> &#123;</span><br><span class="line">			<span class="keyword">if</span> r.RouteOpts.RepeatInterval &gt; *retention &#123;</span><br><span class="line">				level.Warn(configLogger).Log(</span><br><span class="line">					<span class="string">"msg"</span>,</span><br><span class="line">					<span class="string">"repeat_interval is greater than the data retention period. It can lead to notifications being repeated more often than expected."</span>,</span><br><span class="line">					<span class="string">"repeat_interval"</span>,</span><br><span class="line">					r.RouteOpts.RepeatInterval,</span><br><span class="line">					<span class="string">"retention"</span>,</span><br><span class="line">					*retention,</span><br><span class="line">					<span class="string">"route"</span>,</span><br><span class="line">					r.Key(),</span><br><span class="line">				)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 独立协成去运行调度器和抑制器</span></span><br><span class="line">		<span class="keyword">go</span> disp.Run()</span><br><span class="line">		<span class="keyword">go</span> inhibitor.Run()</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := configCoordinator.Reload(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Make routePrefix default to externalURL path if empty string.</span></span><br><span class="line">	<span class="keyword">if</span> *routePrefix == <span class="string">""</span> &#123;</span><br><span class="line">		*routePrefix = amURL.Path</span><br><span class="line">	&#125;</span><br><span class="line">	*routePrefix = <span class="string">"/"</span> + strings.Trim(*routePrefix, <span class="string">"/"</span>)</span><br><span class="line">	level.Debug(logger).Log(<span class="string">"routePrefix"</span>, *routePrefix)</span><br><span class="line"></span><br><span class="line">	router := route.New().WithInstrumentation(instrumentHandler)</span><br><span class="line">	<span class="keyword">if</span> *routePrefix != <span class="string">"/"</span> &#123;</span><br><span class="line">		router.Get(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">			http.Redirect(w, r, *routePrefix, http.StatusFound)</span><br><span class="line">		&#125;)</span><br><span class="line">		router = router.WithPrefix(*routePrefix)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	webReload := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">chan</span> error)</span><br><span class="line"></span><br><span class="line">	ui.Register(router, webReload, logger)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 从api中获取Handler mux</span></span><br><span class="line">	mux := api.Register(router, *routePrefix)</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码中大部分都有注释，基本都是一些初始化的操作，看下几个重要的点</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> disp.Run() <span class="comment">// 告警聚合</span></span><br><span class="line"><span class="keyword">go</span> inhibitor.Run() <span class="comment">// 告警抑制</span></span><br><span class="line">mux := api.Register(router, *routePrefix) <span class="comment">// 告警api，包含接收告警和实现告警屏蔽</span></span><br></pre></td></tr></table></figure>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// alertmanager/api/v1/api.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(api *API)</span> <span class="title">Register</span><span class="params">(r *route.Router)</span></span> &#123;</span><br><span class="line">	wrap := <span class="function"><span class="keyword">func</span><span class="params">(f http.HandlerFunc)</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">			setCORS(w)</span><br><span class="line">			f(w, r)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	r.Options(<span class="string">"/*path"</span>, wrap(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;&#125;))</span><br><span class="line"></span><br><span class="line">	r.Get(<span class="string">"/status"</span>, wrap(api.status))</span><br><span class="line">	r.Get(<span class="string">"/receivers"</span>, wrap(api.receivers))</span><br><span class="line"></span><br><span class="line">	r.Get(<span class="string">"/alerts"</span>, wrap(api.listAlerts))</span><br><span class="line">	r.Post(<span class="string">"/alerts"</span>, wrap(api.addAlerts)) <span class="comment">// 接收来自其余服务的告警（prometheus）</span></span><br><span class="line"></span><br><span class="line">	r.Get(<span class="string">"/silences"</span>, wrap(api.listSilences)) </span><br><span class="line">	r.Post(<span class="string">"/silences"</span>, wrap(api.setSilence)) <span class="comment">// 告警屏蔽</span></span><br><span class="line">	r.Get(<span class="string">"/silence/:sid"</span>, wrap(api.getSilence))</span><br><span class="line">	r.Del(<span class="string">"/silence/:sid"</span>, wrap(api.delSilence))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面我们每个模块单独分析，首先这里的api肯定是有服务调用才会运行，所以我们先不管这边，先看下初始化的时候，alertmanager都做了什么事情。</p>
<h3 id="告警聚合初始化"><a href="#告警聚合初始化" class="headerlink" title="告警聚合初始化"></a>告警聚合初始化</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// go disp.Run()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dispatcher)</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 初始化结束通道</span></span><br><span class="line">	d.done = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">	d.mtx.Lock()</span><br><span class="line">	d.aggrGroups = <span class="keyword">map</span>[*Route]<span class="keyword">map</span>[model.Fingerprint]*aggrGroup&#123;&#125;</span><br><span class="line">	d.metrics.aggrGroups.Set(<span class="number">0</span>)</span><br><span class="line">	d.ctx, d.cancel = context.WithCancel(context.Background())</span><br><span class="line">	d.mtx.Unlock()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 运行调度器子运行函数</span></span><br><span class="line">	d.run(d.alerts.Subscribe())</span><br><span class="line">	<span class="built_in">close</span>(d.done)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dispatcher)</span> <span class="title">run</span><span class="params">(it provider.AlertIterator)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 创建清理ticker，其负责每30秒，检查所有的告警分组。</span></span><br><span class="line">	cleanup := time.NewTicker(<span class="number">30</span> * time.Second)</span><br><span class="line">	<span class="keyword">defer</span> cleanup.Stop()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">defer</span> it.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="comment">// 收到告警事件</span></span><br><span class="line">		<span class="keyword">case</span> alert, ok := &lt;-it.Next():</span><br><span class="line">			<span class="comment">// 如果告警的通道被关闭，而且数据已经读取完毕，则返回。</span></span><br><span class="line">			<span class="keyword">if</span> !ok &#123;</span><br><span class="line">				<span class="comment">// Iterator exhausted for some reason.</span></span><br><span class="line">				<span class="comment">// ------------------------------------</span></span><br><span class="line">				<span class="comment">// 记录下alert遍历器的错误</span></span><br><span class="line">				<span class="keyword">if</span> err := it.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">					level.Error(d.logger).Log(<span class="string">"msg"</span>, <span class="string">"Error on alert update"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			level.Debug(d.logger).Log(<span class="string">"msg"</span>, <span class="string">"Received alert"</span>, <span class="string">"alert"</span>, alert)</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Log errors but keep trying.</span></span><br><span class="line">			<span class="comment">// ----------------------------------</span></span><br><span class="line">			<span class="comment">// 检查遍历器的错误，如果有错误则直接跳到下个循环</span></span><br><span class="line">			<span class="keyword">if</span> err := it.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				level.Error(d.logger).Log(<span class="string">"msg"</span>, <span class="string">"Error on alert update"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 根据这个告警的所有label来匹配分组，对匹配上的路由和告警进行处理</span></span><br><span class="line">			now := time.Now()</span><br><span class="line">			<span class="keyword">for</span> _, r := <span class="keyword">range</span> d.route.Match(alert.Labels) &#123;</span><br><span class="line">				d.processAlert(alert, r)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 记录处理这个告警的时间到普罗米修斯指标中</span></span><br><span class="line">			d.metrics.processingDuration.Observe(time.Since(now).Seconds())</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> &lt;-cleanup.C: <span class="comment">// 清理周期</span></span><br><span class="line">			<span class="comment">// 锁住调度器锁</span></span><br><span class="line">			d.mtx.Lock()</span><br><span class="line">			<span class="comment">// 循环分组列表，并查看每个分组下的唯一标识分组</span></span><br><span class="line">			<span class="keyword">for</span> _, groups := <span class="keyword">range</span> d.aggrGroups &#123;</span><br><span class="line">				<span class="keyword">for</span> _, ag := <span class="keyword">range</span> groups &#123;</span><br><span class="line">					<span class="comment">// 如果这个唯一标识分组为空，终止并删除分组。</span></span><br><span class="line">					<span class="comment">// 普罗米修斯计数-1</span></span><br><span class="line">					<span class="keyword">if</span> ag.empty() &#123;</span><br><span class="line">						ag.stop()</span><br><span class="line">						<span class="built_in">delete</span>(groups, ag.fingerprint())</span><br><span class="line">						d.metrics.aggrGroups.Dec()</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			d.mtx.Unlock()</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> &lt;-d.ctx.Done():</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到dispather起了一个run方法，调用Subscribe方法作为参数，在这里<code>case alert, ok := &lt;-it.Next()</code>等待告警事件，先不急分析Subscribe方法，我们再看下告警抑制</p>
<h3 id="告警抑制初始化"><a href="#告警抑制初始化" class="headerlink" title="告警抑制初始化"></a>告警抑制初始化</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// go inhibitor.Run()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ih *Inhibitor)</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		g   run.Group</span><br><span class="line">		ctx context.Context</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建context和cancel方法</span></span><br><span class="line">	ih.mtx.Lock()</span><br><span class="line">	ctx, ih.cancel = context.WithCancel(context.Background())</span><br><span class="line">	ih.mtx.Unlock()</span><br><span class="line">	runCtx, runCancel := context.WithCancel(ctx)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 循环每个抑制规则，然后启动独立go routine去运行垃圾回收</span></span><br><span class="line">	<span class="keyword">for</span> _, rule := <span class="keyword">range</span> ih.rules &#123;</span><br><span class="line">		<span class="keyword">go</span> rule.scache.Run(runCtx, <span class="number">15</span>*time.Minute)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加抑制方法到运行组，运行组并行运行。</span></span><br><span class="line">	<span class="comment">// 在所有的方法退出时才会退出，</span></span><br><span class="line">	<span class="comment">// 有错误时将返回第一个错误，一个return后，会中断其他方法。</span></span><br><span class="line">	g.Add(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">		ih.run(runCtx)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;, <span class="function"><span class="keyword">func</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">		runCancel()</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := g.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		level.Warn(ih.logger).Log(<span class="string">"msg"</span>, <span class="string">"error running inhibitor"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 运行抑制器，会开始订阅告警。然后开始循环，如果订阅的告警遍历器里面有告警，</span></span><br><span class="line"><span class="comment">// 则获得告警，并循环每个抑制规则，如果匹配到</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ih *Inhibitor)</span> <span class="title">run</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 开始订阅告警</span></span><br><span class="line">	it := ih.alerts.Subscribe()</span><br><span class="line">	<span class="keyword">defer</span> it.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="keyword">case</span> a := &lt;-it.Next():</span><br><span class="line">			<span class="comment">// 得到告警，</span></span><br><span class="line">			<span class="keyword">if</span> err := it.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				level.Error(ih.logger).Log(<span class="string">"msg"</span>, <span class="string">"Error iterating alerts"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Update the inhibition rules' cache.</span></span><br><span class="line">			<span class="comment">// -----------------------------------------</span></span><br><span class="line">			<span class="comment">// 循环每个抑制rule，假如当前告警匹配上某个source。</span></span><br><span class="line">			<span class="comment">// 缓存这个告警到这个抑制rule的告警map里，map的key</span></span><br><span class="line">			<span class="comment">// 为label的finger print，value为alert。</span></span><br><span class="line">			<span class="keyword">for</span> _, r := <span class="keyword">range</span> ih.rules &#123;</span><br><span class="line">				<span class="keyword">if</span> r.SourceMatchers.Match(a.Labels) &#123;</span><br><span class="line">					<span class="keyword">if</span> err := r.scache.Set(a); err != <span class="literal">nil</span> &#123;</span><br><span class="line">						level.Error(ih.logger).Log(<span class="string">"msg"</span>, <span class="string">"error on set alert"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到这里也是在<code>case a := &lt;-it.Next()</code>，与聚合逻辑是一致的，都是调用的Subscribe方法</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Alerts 接口负责装载告警对象，并且可以提供告警的遍历器，而且可以设置或可以通过告警</span></span><br><span class="line"><span class="comment">// 指纹获得告警。全部的方法，都是协成安全。</span></span><br><span class="line"><span class="keyword">type</span> Alerts <span class="keyword">interface</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Subscribe returns an iterator over active alerts that have not been</span></span><br><span class="line">	<span class="comment">// resolved and successfully notified about.</span></span><br><span class="line">	<span class="comment">// They are not guaranteed to be in chronological order.</span></span><br><span class="line">	<span class="comment">// --------------------------------------------------------------------</span></span><br><span class="line">	<span class="comment">// Subscribe 方法，返回一个告警遍历器接口。遍历器会返回还没有解决和还没有被成功</span></span><br><span class="line">	<span class="comment">// 通知出来的告警。遍历器所返回的告警，并不能保证是按照时间顺序来进行排序的。</span></span><br><span class="line">	Subscribe() AlertIterator</span><br><span class="line"></span><br><span class="line">	<span class="comment">// GetPending returns an iterator over all alerts that have</span></span><br><span class="line">	<span class="comment">// pending notifications.</span></span><br><span class="line">	<span class="comment">// --------------------------------------------------------------------</span></span><br><span class="line">	<span class="comment">// GetPending 方法，返回一个告警遍历器接口。遍历器会返回在等待通知的告警。</span></span><br><span class="line">	GetPending() AlertIterator</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Get returns the alert for a given fingerprint.</span></span><br><span class="line">	<span class="comment">// --------------------------------------------------------------------</span></span><br><span class="line">	<span class="comment">// Get 方法，通过告警的Label指纹，来获得Alert对象。Alert对象包含的信息，如</span></span><br><span class="line">	<span class="comment">// 过期时间，更新时间，标签，告警开始时间等等。</span></span><br><span class="line">	Get(model.Fingerprint) (*types.Alert, error)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Put adds the given alert to the set.</span></span><br><span class="line">	<span class="comment">// --------------------------------------------------------------------</span></span><br><span class="line">	<span class="comment">// Put 方法，把零到多个告警，放入此告警集合里。</span></span><br><span class="line">	Put(...*types.Alert) error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Subscribe 方法返回一个告警遍历器，里面包含全部活跃的告警（没有被解决或成功通知），</span></span><br><span class="line"><span class="comment">// 这个遍历器并不能保证告警是按照时间顺序排列的。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Alerts)</span> <span class="title">Subscribe</span><span class="params">()</span> <span class="title">provider</span>.<span class="title">AlertIterator</span></span> &#123;</span><br><span class="line">	a.mtx.Lock()</span><br><span class="line">	<span class="keyword">defer</span> a.mtx.Unlock()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		done   = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">		alerts = a.alerts.List()</span><br><span class="line">		ch     = <span class="built_in">make</span>(<span class="keyword">chan</span> *types.Alert, max(<span class="built_in">len</span>(alerts), alertChannelLength))</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, a := <span class="keyword">range</span> alerts &#123;</span><br><span class="line">		ch &lt;- a</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 把新建告警channel，放入监听器存储到map里面。</span></span><br><span class="line">	a.listeners[a.next] = listeningAlerts&#123;alerts: ch, done: done&#125;</span><br><span class="line">	a.next++</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> provider.NewAlertIterator(ch, done, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到这里维护了一份map，<code>a.listeners[a.next] = listeningAlerts{alerts: ch, done: done}</code>，而上面的<code>it.Next()</code>是什么，其实就是<code>ch</code>。</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewAlertIterator 返回一个 AlertIterator 接口对象，底层实现类型是通过 alertIterator 来实现。</span></span><br><span class="line"><span class="comment">// Golang典型的设计思维，实现类接口为私有类，通过实现接口的方式，暴露出公开方法。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewAlertIterator</span><span class="params">(ch &lt;-<span class="keyword">chan</span> *types.Alert, done <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, err error)</span> <span class="title">AlertIterator</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;alertIterator&#123;</span><br><span class="line">		ch:   ch,</span><br><span class="line">		done: done,</span><br><span class="line">		err:  err,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// alertIterator 实现了 AlertIterator 接口。以现在来说，这个实现满足现在所有providers的需求。</span></span><br><span class="line"><span class="comment">// 但是假如有新的需求，可以通过创建一个新的实现类，来实现 AlertIterator 接口，来让代码变得通用。</span></span><br><span class="line"><span class="keyword">type</span> alertIterator <span class="keyword">struct</span> &#123;</span><br><span class="line">	ch   &lt;-<span class="keyword">chan</span> *types.Alert <span class="comment">// ch   元素用来遍历告警的队列。</span></span><br><span class="line">	done <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;       <span class="comment">// done 是用来通知这个遍历器被关闭。</span></span><br><span class="line">	err  error               <span class="comment">// err  用来存储是否有错误，当调用完 Next 方法后，需要拿到 err 判断是否有错误。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Next 方法，获取下一个告警。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ai alertIterator)</span> <span class="title">Next</span><span class="params">()</span> &lt;-<span class="title">chan</span> *<span class="title">types</span>.<span class="title">Alert</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> ai.ch</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Inhibitor和Dispatcher在初始化时会调用Subscribe()，然后一直监听并接收新的alerts</p>
<p>到这里就初始化完成了，因为刚开始没有告警产生，所以两个逻辑都在<code>case</code>中阻塞，下面分析一下api的逻辑</p>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(api *API)</span> <span class="title">addAlerts</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> alerts []*types.Alert</span><br><span class="line">	<span class="keyword">if</span> err := api.receive(r, &amp;alerts); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		api.respondError(w, apiError&#123;</span><br><span class="line">			typ: errorBadData,</span><br><span class="line">			err: err,</span><br><span class="line">		&#125;, <span class="literal">nil</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	api.insertAlerts(w, r, alerts...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(api *API)</span> <span class="title">insertAlerts</span><span class="params">(w http.ResponseWriter, r *http.Request, alerts ...*types.Alert)</span></span> &#123;</span><br><span class="line">	now := time.Now()</span><br><span class="line"></span><br><span class="line">	api.mtx.RLock()</span><br><span class="line">	resolveTimeout := time.Duration(api.config.Global.ResolveTimeout)</span><br><span class="line">	api.mtx.RUnlock()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, alert := <span class="keyword">range</span> alerts &#123;</span><br><span class="line">		alert.UpdatedAt = now</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Ensure StartsAt is set.</span></span><br><span class="line">		<span class="keyword">if</span> alert.StartsAt.IsZero() &#123;</span><br><span class="line">			<span class="keyword">if</span> alert.EndsAt.IsZero() &#123;</span><br><span class="line">				alert.StartsAt = now</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				alert.StartsAt = alert.EndsAt</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// If no end time is defined, set a timeout after which an alert</span></span><br><span class="line">		<span class="comment">// is marked resolved if it is not updated.</span></span><br><span class="line">		<span class="keyword">if</span> alert.EndsAt.IsZero() &#123;</span><br><span class="line">			alert.Timeout = <span class="literal">true</span></span><br><span class="line">			alert.EndsAt = now.Add(resolveTimeout)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> alert.EndsAt.After(time.Now()) &#123;</span><br><span class="line">			api.m.Firing().Inc()</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			api.m.Resolved().Inc()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Make a best effort to insert all alerts that are valid.</span></span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		validAlerts    = <span class="built_in">make</span>([]*types.Alert, <span class="number">0</span>, <span class="built_in">len</span>(alerts))</span><br><span class="line">		validationErrs = &amp;types.MultiError&#123;&#125;</span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">for</span> _, a := <span class="keyword">range</span> alerts &#123;</span><br><span class="line">		removeEmptyLabels(a.Labels)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> err := a.Validate(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			validationErrs.Add(err)</span><br><span class="line">			api.m.Invalid().Inc()</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		validAlerts = <span class="built_in">append</span>(validAlerts, a)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err := api.alerts.Put(validAlerts...); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		api.respondError(w, apiError&#123;</span><br><span class="line">			typ: errorInternal,</span><br><span class="line">			err: err,</span><br><span class="line">		&#125;, <span class="literal">nil</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> validationErrs.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">		api.respondError(w, apiError&#123;</span><br><span class="line">			typ: errorBadData,</span><br><span class="line">			err: validationErrs,</span><br><span class="line">		&#125;, <span class="literal">nil</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	api.respond(w, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到<code>60</code>行的<code>Put</code>方法</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Put 添加一到多个告警到告警集合里。并且通知到所有监听器里。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Alerts)</span> <span class="title">Put</span><span class="params">(alerts ...*types.Alert)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, alert := <span class="keyword">range</span> alerts &#123;</span><br><span class="line">		fp := alert.Fingerprint()</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Check that there's an alert existing within the store before</span></span><br><span class="line">		<span class="comment">// trying to merge.</span></span><br><span class="line">		<span class="comment">// ---------------------------------------------------------------------</span></span><br><span class="line">		<span class="comment">// 检查是否已经有旧的告警了，如果有旧的告警，需要判断是否需要合并。</span></span><br><span class="line">		<span class="keyword">if</span> old, err := a.alerts.Get(fp); err == <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Merge alerts if there is an overlap in activity range.</span></span><br><span class="line">			<span class="comment">// -----------------------------------------------------------------</span></span><br><span class="line">			<span class="comment">// 合并条件：判断是否新旧告警有重叠时间，如果有的话，就进行合并告警。</span></span><br><span class="line">			<span class="comment">//</span></span><br><span class="line">			<span class="comment">// 条件1：新告警的结束时间大于旧的告警的开始时间，并且新告警结束时间在旧告警结束时间之前。</span></span><br><span class="line">			<span class="comment">//        新告警   |----------|</span></span><br><span class="line">			<span class="comment">// 		  旧告警     |-----------|       -&gt; 时间线</span></span><br><span class="line">			<span class="comment">//</span></span><br><span class="line">			<span class="comment">// 条件2：新告警的开始时间大于旧的告警的开始时间，并且新告警开始时间在旧告警结束时间之前。</span></span><br><span class="line">			<span class="comment">//		  新告警        |----------|</span></span><br><span class="line">			<span class="comment">//		  旧告警     |-----------|       -&gt; 时间线</span></span><br><span class="line">			<span class="comment">//</span></span><br><span class="line">			<span class="keyword">if</span> (alert.EndsAt.After(old.StartsAt) &amp;&amp; alert.EndsAt.Before(old.EndsAt)) ||</span><br><span class="line">				(alert.StartsAt.After(old.StartsAt) &amp;&amp; alert.StartsAt.Before(old.EndsAt)) &#123;</span><br><span class="line">				alert = old.Merge(alert)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 设置告警到集合。</span></span><br><span class="line">		<span class="keyword">if</span> err := a.alerts.Set(alert); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			level.Error(a.logger).Log(<span class="string">"msg"</span>, <span class="string">"error on set alert"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 循环塞到每个监听器，去通知到每一个监听者。</span></span><br><span class="line">		a.mtx.Lock()</span><br><span class="line">		<span class="keyword">for</span> _, l := <span class="keyword">range</span> a.listeners &#123;</span><br><span class="line">			<span class="keyword">select</span> &#123;</span><br><span class="line">			<span class="keyword">case</span> l.alerts &lt;- alert:</span><br><span class="line">			<span class="keyword">case</span> &lt;-l.done:</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		a.mtx.Unlock()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到这里就是接收告警，然后将其塞到每个监听器，然后去通知每一个监听者去处理，即Inhibitor和Dispatcher会处理接收到的每个告警</p>
<p>下面看下处理流程</p>
<h3 id="告警聚合处理流程"><a href="#告警聚合处理流程" class="headerlink" title="告警聚合处理流程"></a>告警聚合处理流程</h3><p>根据上面的分析，聚合初始化之后，最终调用的是<code>processAlert</code>方法</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理告警，得到相应分组，并对相应的分组插入这个告警。</span></span><br><span class="line"><span class="comment">// @param alert 告警结构体</span></span><br><span class="line"><span class="comment">// @param route 已经匹配上的分组路由</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dispatcher)</span> <span class="title">processAlert</span><span class="params">(alert *types.Alert, route *Route)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 根据分组路由的信息，获得此分组下的匹配中的labels。</span></span><br><span class="line">	<span class="comment">// 并根据所得labels得到唯一id(指纹 finger print)。</span></span><br><span class="line">	groupLabels := getGroupLabels(alert, route)</span><br><span class="line">	fp := groupLabels.Fingerprint()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 加锁进行hashmap操作</span></span><br><span class="line">	d.mtx.Lock()</span><br><span class="line">	<span class="keyword">defer</span> d.mtx.Unlock()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 通过分组路由获得分组map，如果分组列表hashmap不存在这个分组，</span></span><br><span class="line">	<span class="comment">// 则进行创建。分组map里面key为分组finger print，value为具</span></span><br><span class="line">	<span class="comment">// 体唯一标识的分组。</span></span><br><span class="line">	group, ok := d.aggrGroups[route]</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		group = <span class="keyword">map</span>[model.Fingerprint]*aggrGroup&#123;&#125;</span><br><span class="line">		d.aggrGroups[route] = group</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// If the group does not exist, create it.</span></span><br><span class="line">	<span class="comment">// ----------------------------------------------------</span></span><br><span class="line">	<span class="comment">// 假如当前告警的group labels的指纹在这个告警分组map里找不到，</span></span><br><span class="line">	<span class="comment">// 则进行分组的创建。</span></span><br><span class="line">	ag, ok := group[fp]</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">		ag = newAggrGroup(d.ctx, groupLabels, route, d.timeout, d.logger)</span><br><span class="line">		group[fp] = ag</span><br><span class="line">		<span class="comment">// 普罗米修斯的分组数量指标进行加一</span></span><br><span class="line">		d.metrics.aggrGroups.Inc()</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 开启新的协成，运行此告警指纹的分组</span></span><br><span class="line">		<span class="keyword">go</span> ag.run(<span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, alerts ...*types.Alert)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">			<span class="comment">// 根据当前context的状态，来进行告警的处理。</span></span><br><span class="line">			_, _, err := d.stage.Exec(ctx, d.logger, alerts...)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				lvl := level.Error(d.logger)</span><br><span class="line">				<span class="keyword">if</span> ctx.Err() == context.Canceled &#123;</span><br><span class="line">					<span class="comment">// It is expected for the context to be canceled on</span></span><br><span class="line">					<span class="comment">// configuration reload or shutdown. In this case, the</span></span><br><span class="line">					<span class="comment">// message should only be logged at the debug level.</span></span><br><span class="line">					<span class="comment">// ---------------------------------------------------</span></span><br><span class="line">					<span class="comment">// 假如错误是因为reload或者关闭而导致的，那样日志等级为debug</span></span><br><span class="line">					lvl = level.Debug(d.logger)</span><br><span class="line">				&#125;</span><br><span class="line">				lvl.Log(<span class="string">"msg"</span>, <span class="string">"Notify for alerts failed"</span>, <span class="string">"num_alerts"</span>, <span class="built_in">len</span>(alerts), <span class="string">"err"</span>, err)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> err == <span class="literal">nil</span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 插入alert到这个唯一标识的分组里。</span></span><br><span class="line">	ag.insert(alert)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第35行是进行告警发送的流程，最终执行的是Exec方法</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Stage 在所给予的上下文限制中处理所有告警。</span></span><br><span class="line"><span class="keyword">type</span> Stage <span class="keyword">interface</span> &#123;</span><br><span class="line">	Exec(ctx context.Context, l log.Logger, alerts ...*types.Alert) (context.Context, []*types.Alert, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// createReceiverStage 为一个接口人创建一个扇出的阶段管道。这里循环这个接受方式的</span></span><br><span class="line"><span class="comment">// 每一个接收人，然后为每个接收人创建一个MultiStage，用来装载多个阶段。每个Multistage</span></span><br><span class="line"><span class="comment">// 包含一个等待阶段，去重阶段，重试阶段和设置通知信息阶段。最后把每个MultiStage都添加</span></span><br><span class="line"><span class="comment">// 到扇出阶段，并进行返回。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createReceiverStage</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	name <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">	integrations []Integration,</span></span></span><br><span class="line"><span class="function"><span class="params">	wait <span class="keyword">func</span>()</span> <span class="title">time</span>.<span class="title">Duration</span>,</span></span><br><span class="line"><span class="function">	<span class="title">notificationLog</span> <span class="title">NotificationLog</span>,</span></span><br><span class="line"><span class="function">	<span class="title">metrics</span> *<span class="title">metrics</span>,</span></span><br><span class="line"><span class="function">) <span class="title">Stage</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> fs FanoutStage</span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> integrations &#123;</span><br><span class="line">		recv := &amp;nflogpb.Receiver&#123;</span><br><span class="line">			GroupName:   name,</span><br><span class="line">			Integration: integrations[i].Name(),</span><br><span class="line">			Idx:         <span class="keyword">uint32</span>(integrations[i].Index()),</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">var</span> s MultiStage</span><br><span class="line">		<span class="comment">// 等待阶段</span></span><br><span class="line">		s = <span class="built_in">append</span>(s, NewWaitStage(wait))</span><br><span class="line">		<span class="comment">// 去重阶段</span></span><br><span class="line">		s = <span class="built_in">append</span>(s, NewDedupStage(&amp;integrations[i], notificationLog, recv))</span><br><span class="line">		<span class="comment">// 重试阶段</span></span><br><span class="line">		s = <span class="built_in">append</span>(s, NewRetryStage(integrations[i], name, metrics))</span><br><span class="line">		<span class="comment">// 设置通知信息阶段</span></span><br><span class="line">		s = <span class="built_in">append</span>(s, NewSetNotifiesStage(notificationLog, recv))</span><br><span class="line"></span><br><span class="line">		fs = <span class="built_in">append</span>(fs, s)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> fs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在进行发送的时候依次进行，等待阶段、去重阶段、重试阶段、设置通知信息阶段，即分别是以下方法</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewWaitStage 返回一个新的等待阶段。设置wait方法到阶段之中。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWaitStage</span><span class="params">(wait <span class="keyword">func</span>()</span> <span class="title">time</span>.<span class="title">Duration</span>) *<span class="title">WaitStage</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;WaitStage&#123;</span><br><span class="line">		wait: wait,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exec implements the Stage interface.</span></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Exec 实现了 Stage 接口，等待特定的一段时间，或者ctx.Done。取决于哪个事件先完成。</span></span><br><span class="line"><span class="comment">// 如果ctx.Done 先发生，则返回上下文里的错误。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ws *WaitStage)</span> <span class="title">Exec</span><span class="params">(ctx context.Context, l log.Logger, alerts ...*types.Alert)</span> <span class="params">(context.Context, []*types.Alert, error)</span></span> &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewDedupStage 包裹一个 DedupStage， 这个。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDedupStage</span><span class="params">(rs ResolvedSender, l NotificationLog, recv *nflogpb.Receiver)</span> *<span class="title">DedupStage</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;DedupStage&#123;</span><br><span class="line">		rs:    rs,</span><br><span class="line">		nflog: l,</span><br><span class="line">		recv:  recv,</span><br><span class="line">		now:   utcNow,</span><br><span class="line">		hash:  hashAlert,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exec 实现了 Stage 接口，将进行告警的去重，并获取消息日志，查看是否需要更新日志状态。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *DedupStage)</span> <span class="title">Exec</span><span class="params">(ctx context.Context, l log.Logger, alerts ...*types.Alert)</span> <span class="params">(context.Context, []*types.Alert, error)</span></span> &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...其余的方法可自行查看</span><br></pre></td></tr></table></figure>
<h4 id="WaitStage"><a href="#WaitStage" class="headerlink" title="WaitStage"></a>WaitStage</h4><p>等待间隔用来设置发送告警的等待时间，对于集群操作中，需要根据不同的peer设置不同的超时时间，如果仅仅一个Server本身，等待间隔设置为0；</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clusterWait returns a function that inspects the current peer state and returns</span></span><br><span class="line"><span class="comment">// a duration of one base timeout for each peer with a higher ID than ourselves.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">clusterWait</span><span class="params">(p *cluster.Peer, timeout time.Duration)</span> <span class="title">func</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> time.Duration(p.Position()) * timeout</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>具体的实现上采用一个timer来传递信号，一旦时间到达后才返回对应的alerts，由于是串行执行的，所以消息传递会中止一段时间。</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Exec implements the Stage interface.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ws *WaitStage)</span> <span class="title">Exec</span><span class="params">(ctx context.Context, l log.Logger, alerts ...*types.Alert)</span> <span class="params">(context.Context, []*types.Alert, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(ws.wait()):</span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">        <span class="keyword">return</span> ctx, <span class="literal">nil</span>, ctx.Err()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ctx, alerts, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="DedupStage"><a href="#DedupStage" class="headerlink" title="DedupStage"></a>DedupStage</h4><p>DedupStage用于管理告警的去重，传递的参数中包含了一个NotificationLog,用来保存告警的发送记录。当有多个机器组成集群的时候，NotificationLog会通过协议去进行通信，传递彼此的记录信息，加入集群中的A如果发送了告警，该记录会传递给B机器，并进行merge操作，这样B机器在发送告警的时候如果查询已经发送，则不再进行告警发送。关于NotificationLog的实现nflog可以查看nflog/nflog.go文件。</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DedupStage filters alerts.</span></span><br><span class="line"><span class="comment">// Filtering happens based on a notification log.</span></span><br><span class="line"><span class="keyword">type</span> DedupStage <span class="keyword">struct</span> &#123;</span><br><span class="line">    nflog NotificationLog</span><br><span class="line">    recv  *nflogpb.Receiver</span><br><span class="line">    conf  notifierConfig</span><br><span class="line"></span><br><span class="line">    now  <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Time</span></span></span><br><span class="line"><span class="function">    <span class="title">hash</span> <span class="title">func</span><span class="params">(*types.Alert)</span> <span class="title">uint64</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<p>具体的处理逻辑如下：</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *DedupStage)</span> <span class="title">Exec</span><span class="params">(ctx context.Context, l log.Logger, alerts ...*types.Alert)</span> <span class="params">(context.Context, []*types.Alert, error)</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    entries, err := n.nflog.Query(nflog.QGroupKey(gkey), nflog.QReceiver(n.recv))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != nflog.ErrNotFound &#123;</span><br><span class="line">        <span class="keyword">return</span> ctx, <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> entry *nflogpb.Entry</span><br><span class="line">    <span class="keyword">switch</span> <span class="built_in">len</span>(entries) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        entry = entries[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> ctx, <span class="literal">nil</span>, fmt.Errorf(<span class="string">"unexpected entry result size %d"</span>, <span class="built_in">len</span>(entries))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> n.needsUpdate(entry, firingSet, resolvedSet, repeatInterval) &#123;</span><br><span class="line">        <span class="keyword">return</span> ctx, alerts, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">		<span class="keyword">return</span> ctx, <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中的nflog.Query将根据接收和group key进行查询，一旦查找到，则不再返回对应的alerts. nflog设置了GC用来删除过期的日志记录。防止一直存在log中导致告警无法继续发送.</p>
<h4 id="RetryStage"><a href="#RetryStage" class="headerlink" title="RetryStage"></a>RetryStage</h4><p>RetryStage利用backoff策略来管理告警的重发，对于没有发送成功的告警将不断重试，直到超时时间,numFailedNotifications用来传递发送失败的统计metrics,numNotifications用来发送成功的metrics统计信息。</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-tick.C:</span><br><span class="line">        now := time.Now()</span><br><span class="line">        retry, err := r.integration.Notify(ctx, sent...)</span><br><span class="line">        notificationLatencySeconds.WithLabelValues(r.integration.name).Observe(time.Since(now).Seconds())</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            numFailedNotifications.WithLabelValues(r.integration.name).Inc()</span><br><span class="line">            level.Debug(l).Log(<span class="string">"msg"</span>, <span class="string">"Notify attempt failed"</span>, <span class="string">"attempt"</span>, i, <span class="string">"integration"</span>, r.integration.name, <span class="string">"receiver"</span>, r.groupName, <span class="string">"err"</span>, err)</span><br><span class="line">            <span class="keyword">if</span> !retry &#123;</span><br><span class="line">                <span class="keyword">return</span> ctx, alerts, fmt.Errorf(<span class="string">"cancelling notify retry for %q due to unrecoverable error: %s"</span>, r.integration.name, err)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Save this error to be able to return the last seen error by an</span></span><br><span class="line">            <span class="comment">// integration upon context timeout.</span></span><br><span class="line">            iErr = err</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            numNotifications.WithLabelValues(r.integration.name).Inc()</span><br><span class="line">            <span class="keyword">return</span> ctx, alerts, <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">        <span class="keyword">if</span> iErr != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ctx, <span class="literal">nil</span>, iErr</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ctx, <span class="literal">nil</span>, ctx.Err()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="SetNotifiesStage"><a href="#SetNotifiesStage" class="headerlink" title="SetNotifiesStage"></a>SetNotifiesStage</h4><p>SetNotifiesStage用来设置发送告警的信息到nfLog，该模块仅仅用于被该AM发送的告警的记录（Retry组件传递的alerts和Dedup组件中发送出去的告警信息）。</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Exec implements the Stage interface.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n SetNotifiesStage)</span> <span class="title">Exec</span><span class="params">(ctx context.Context, l log.Logger, alerts ...*types.Alert)</span> <span class="params">(context.Context, []*types.Alert, error)</span></span> &#123;</span><br><span class="line">    gkey, ok := GroupKey(ctx)</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="keyword">return</span> ctx, <span class="literal">nil</span>, fmt.Errorf(<span class="string">"group key missing"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    firing, ok := FiringAlerts(ctx)</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="keyword">return</span> ctx, <span class="literal">nil</span>, fmt.Errorf(<span class="string">"firing alerts missing"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resolved, ok := ResolvedAlerts(ctx)</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="keyword">return</span> ctx, <span class="literal">nil</span>, fmt.Errorf(<span class="string">"resolved alerts missing"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> ctx, alerts, n.nflog.Log(n.recv, gkey, firing, resolved)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="告警抑制处理流程"><a href="#告警抑制处理流程" class="headerlink" title="告警抑制处理流程"></a>告警抑制处理流程</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 运行抑制器，会开始订阅告警。然后开始循环，如果订阅的告警遍历器里面有告警，</span></span><br><span class="line"><span class="comment">// 则获得告警，并循环每个抑制规则，如果匹配到</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ih *Inhibitor)</span> <span class="title">run</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 开始订阅告警</span></span><br><span class="line">	it := ih.alerts.Subscribe()</span><br><span class="line">	<span class="keyword">defer</span> it.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="keyword">case</span> a := &lt;-it.Next():</span><br><span class="line">			<span class="comment">// 得到告警，</span></span><br><span class="line">			<span class="keyword">if</span> err := it.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				level.Error(ih.logger).Log(<span class="string">"msg"</span>, <span class="string">"Error iterating alerts"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Update the inhibition rules' cache.</span></span><br><span class="line">			<span class="comment">// -----------------------------------------</span></span><br><span class="line">			<span class="comment">// 循环每个抑制rule，假如当前告警匹配上某个source。</span></span><br><span class="line">			<span class="comment">// 缓存这个告警到这个抑制rule的告警map里，map的key</span></span><br><span class="line">			<span class="comment">// 为label的finger print，value为alert。</span></span><br><span class="line">			<span class="keyword">for</span> _, r := <span class="keyword">range</span> ih.rules &#123;</span><br><span class="line">				<span class="keyword">if</span> r.SourceMatchers.Match(a.Labels) &#123;</span><br><span class="line">					<span class="keyword">if</span> err := r.scache.Set(a); err != <span class="literal">nil</span> &#123;</span><br><span class="line">						level.Error(ih.logger).Log(<span class="string">"msg"</span>, <span class="string">"error on set alert"</span>, <span class="string">"err"</span>, err)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>链接：</p>
<p><a href="https://www.jianshu.com/p/239b145e2acc" target="_blank" rel="external">Prometheus Alertmanager报警组件</a></p>
<p><a href="https://just4fun.im/2018/05/25/study_alertmanager/" target="_blank" rel="external">https://just4fun.im/2018/05/25/study_alertmanager/</a></p>
<p><a href="https://github.com/annotated-golang/alertmanager-with-comment" target="_blank" rel="external">alertmanager-with-comment</a></p>
<p><a href="https://blog.csdn.net/u014029783/article/details/80663092?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.baidujs&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.baidujs" target="_blank" rel="external">Prometheus AlertManager代码阅读笔记 Notify组件</a></p>
<p><a href="https://blog.csdn.net/jianyuanPC/article/details/52756887?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.baidujs&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.baidujs" target="_blank" rel="external">Prometheus源码分析(二)配置文件说明</a></p>
<p><a href="https://www.modb.pro/db/103988" target="_blank" rel="external">Prometheus系列5 - Alertmanager源码阅读</a></p>
]]></content>
      
        <categories>
            
            <category> Prometheus </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Prometheus </tag>
            
            <tag> Alertmanager </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 进程线程协程(4)--线程池]]></title>
      <url>https://magiceses.github.io/2019/10/13/python-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B-5/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">你勤奋充电努力工作保持身材，对人微笑这些都不是为了取悦他人，而是为了扮靓自己照亮自己的心，告诉自己我是一股独立向上的力量。<br></p>

<p>在Python中还有一个线程池的概念，它也有并发处理能力，在一定程度上能提高系统运行效率；</p>
<p>线程的生命周期可以分为5个状态：创建、就绪、运行、阻塞和终止。自线程创建到终止，线程便不断在运行、创建和销毁这3个状态。一个线程的运行时间可由此可以分为3部分：线程的启动时间、线程体的运行时间和线程的销毁时间。在多线程处理的情景中，如果线程不能被重用，就意味着每次创建都需要经过启动、销毁和运行3个过程。这必然会增加系统相应的时间，降低了效率。看看之前介绍线程的博文的例子中（<a href="http://11026142.blog.51cto.com/11016142/1867519" target="_blank" rel="external"> 点击此处可以阅读</a>），有多少个任务，就创建多少个线程，但是由于Python特有的GIL限制，它并不是真正意义上的多线程，反而会因为频繁的切换任务等开销而降低了性能(<a href="http://11026142.blog.51cto.com/11016142/1864799" target="_blank" rel="external"> 点击此处可以了解Python的GIL</a>)。这种情况下可以使用线程池提高运行效率。</p>
<p>线程池的基本原理如下图，它是通过将事先创建多个能够执行任务的线程放入池中，所需要执行的任务通常要被安排在队列任务中。一般情况下，需要处理的任务比线程数目要多，线程执行完当前任务后，会从队列中取下一个任务，知道所有的任务完成。</p>
<p><img src="/images/python-process-3.png" alt="Python：线程、进程与协程(7)——线程池_Python"></p>
<p>由于线程预先被创建并放入线程池中，同时处理完当前任务之后并不销毁而是被安排处理下一个任务，因此能够避免多次创建线程，从而节省线程创建和销毁的开销，能带来更好的性能和系统稳定性。所以，说白了，Python的线程池也没有利用到多核或者多CPU的优势，只是跟普通的多线程相比，它不用去多次创建线程，节省了线程创建和销毁的时间，从而提高了性能。</p>
<p>Python中 线程池技术适合处理突发性大量请求或者需要大量线程来完成任务、但每个任务实际处理时间较短的场景，它能有效的避免由于系统创建线程过多而导致性能负荷过大、响应过慢等问题。下面介绍几种利用线程池的方法。</p>
<a id="more"></a>
<h2 id="自定义线程池模式"><a href="#自定义线程池模式" class="headerlink" title="自定义线程池模式"></a><strong>自定义线程池模式</strong></h2><p>我们可以利用Queue模块和threading模块来实现线程池。Queue用来创建任务队列，threading用来创建一个线程池子。</p>
<p>看下面例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Queue,threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    定义一个能够处理任务的线程类，属于自定义线程类，自定义线程类就需要定义run()函数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,workqueue,resultqueue,**kwargs)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self,**kwargs)</span><br><span class="line">        self.workqueue = workqueue<span class="comment">#存放任务的队列,任务一般都是函数</span></span><br><span class="line">        self.resultqueue = resultqueue<span class="comment">#存放结果的队列</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment">#从任务队列中取出一个任务，block设置为False表示如果队列空了，就会抛出异常</span></span><br><span class="line">                callable,args,kwargs = self.workqueue.get(block=<span class="keyword">False</span>)</span><br><span class="line">                res = callable(*args,**kwargs)</span><br><span class="line">                self.resultqueue.put(res)<span class="comment">#将任务的结果存放到结果队列中</span></span><br><span class="line">            <span class="keyword">except</span> Queue.Empty:<span class="comment">#抛出空队列异常</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkerManger</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    定义一个线程池的类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,num=<span class="number">10</span>)</span>:</span><span class="comment">#默认这个池子里有10个线程</span></span><br><span class="line">        self.workqueue = Queue.Queue()<span class="comment">#任务队列，</span></span><br><span class="line">        self.resultqueue = Queue.Queue()<span class="comment">#存放任务结果的队列</span></span><br><span class="line">        self.workers = []<span class="comment">#所有的线程都存放在这个列表中</span></span><br><span class="line">        self._recruitthreads(num)<span class="comment">#创建一系列线程的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_recruitthreads</span><span class="params">(self,num)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        创建线程</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(num):</span><br><span class="line">            worker = Worker(self.workqueue,self.resultqueue)</span><br><span class="line">            self.workers.append(worker)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        启动线程池中每个线程</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> work <span class="keyword">in</span> self.workers:</span><br><span class="line">            work.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait_for_complete</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        等待至任务队列中所有任务完成</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">while</span> len(self.workers):</span><br><span class="line">            worker = self.workers.pop()</span><br><span class="line">            worker.join()</span><br><span class="line">            <span class="keyword">if</span> worker.isAlive() <span class="keyword">and</span> <span class="keyword">not</span> self.workqueue.empty():</span><br><span class="line">                self.workers.append(worker)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_job</span><span class="params">(self,callable,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        往任务队列中添加任务</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.workqueue.put((callable,args,kwargs))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_result</span><span class="params">(self,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取结果队列</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.resultqueue.get(*args,**kwargs)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_result</span><span class="params">(self,result)</span>:</span></span><br><span class="line">        self.resultqueue.put(result)</span><br></pre></td></tr></table></figure>
<p>上面定义了一个线程池，它的初始化函数<strong>init</strong>()定义了一些存放相关数据的属性，这在Python的一些内部模块的类的定义中很常见，所有有时候多看看源码其实挺好的，学习大神的编程习惯和编程思想。</p>
<p>另外还要提到一点，Queue模块中的队列，不仅可以存放数据（指字符串，数值，列表，字典等等），还可以存放函数的（也就是任务），上面的代码中，callable是一个函数，当用put()将一个函数添加到队列时，put()接受的参数有函数对象以及该函数的相关参数，而且要是一个整体，所以就有了上面代码中的self.workqueue.put((callable,args,kwargs))。同理，当从这种存放函数的队列中取出数据，它返回的就是一个函数对象包括它的相关参数，有兴趣的可以打印出上面代码中run()里的callable,args,kwargs。</p>
<p>下面就简单的举个小例子吧。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2,datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = urllib2.urlopen(url).getcode()</span><br><span class="line">    <span class="keyword">except</span> urllib2.HTTPError, e:</span><br><span class="line">        res = e.code</span><br><span class="line">    <span class="comment">#print res</span></span><br><span class="line">    res = str(res)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'/home/liulonghua/无标题文档'</span>,<span class="string">'wr'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    urls = [</span><br><span class="line">        <span class="string">'http://www.python.org'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/about/'</span>,</span><br><span class="line">        <span class="string">'http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/doc/'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/download/'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/getit/'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/community/'</span>,</span><br><span class="line">        <span class="string">'https://wiki.python.org/moin/'</span>,</span><br><span class="line">        <span class="string">'http://planet.python.org/'</span>,</span><br><span class="line">        <span class="string">'https://wiki.python.org/moin/LocalUserGroups'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/psf/'</span>,</span><br><span class="line">        <span class="string">'http://docs.python.org/devguide/'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/community/awards/'</span></span><br><span class="line">    ]</span><br><span class="line">    t1 = datetime.datetime.now()</span><br><span class="line">    w = WorkerManger(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        w.add_job(open_url,url)</span><br><span class="line">    w.start()</span><br><span class="line">    w.wait_for_complete()</span><br><span class="line">    t2 = datetime.datetime.now()</span><br><span class="line">    <span class="keyword">print</span> t2 - t1</span><br></pre></td></tr></table></figure>
<p>最后结果如下：</p>
<p><img src="/images/python-process-4.png" alt="Python：线程、进程与协程(7)——线程池_进程池_02"></p>
<p>如果把上面代码改成用多线程而不是用线程池，会是怎样的呢？</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    urls = [</span><br><span class="line">        <span class="string">'http://www.python.org'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/about/'</span>,</span><br><span class="line">        <span class="string">'http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/doc/'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/download/'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/getit/'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/community/'</span>,</span><br><span class="line">        <span class="string">'https://wiki.python.org/moin/'</span>,</span><br><span class="line">        <span class="string">'http://planet.python.org/'</span>,</span><br><span class="line">        <span class="string">'https://wiki.python.org/moin/LocalUserGroups'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/psf/'</span>,</span><br><span class="line">        <span class="string">'http://docs.python.org/devguide/'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/community/awards/'</span></span><br><span class="line">    ]</span><br><span class="line">    t1 = datetime.datetime.now()</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        t = threading.Thread(target=open_url,args=(url,))</span><br><span class="line">        t.start()</span><br><span class="line">        t.join()</span><br><span class="line">    t2 = datetime.datetime.now()</span><br><span class="line">    <span class="keyword">print</span> t2-t1</span><br></pre></td></tr></table></figure>
<p>运行效率的差异还是很大的，有兴趣的可以动手试试。</p>
<h2 id="使用现成的线程池模块"><a href="#使用现成的线程池模块" class="headerlink" title="使用现成的线程池模块"></a><strong>使用现成的线程池模块</strong></h2><p>下载安装也很简单，用pip工具</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install threadpool</span><br></pre></td></tr></table></figure>
<p><strong>注意：这里要提到一点，我就陷入这个坑，还好没有花多长时间就解决了。由于我的电脑里有python2.7.12,python3.5,还有一个PyPy5.4.1，上面的指令竟然将threadpool包安装到了PyPy目录下了，所以在python2.7.12里，我import threadpool，它一直报错，如果你的系统里有多个Python版本，又没有用virtualenvs虚拟环境工具，很容易造成这种混乱，虽然我安装了virtualenvs，但在自己的电脑上很少用，这里的解决方法是：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python -m pip install threadpool</span><br></pre></td></tr></table></figure>
<p><strong>以区分PyPy，同理如果是在PyPy环境下安装第三方包的话，用sudo pypy -m pip install packagename,这个在之前的博文中也有介绍，感兴趣的可以<a href="http://11026142.blog.51cto.com/11016142/1858971" target="_blank" rel="external"> 点此</a></strong></p>
<p>该模块主要的类和方法：</p>
<ol>
<li><p>threadpool.ThreadPool:线程池类，主要是用来分派任务请求和收集运行结果。主要方法有：</p>
<ul>
<li><p><code>__init__</code>(self,number_workers,q_size,resq_size=0,poll_timeout=5):</p>
<p>建立线程池，并启动对应的num_workers的线程；q_size表示任务请求队列的大小，resq_size表示存放运行结果队列的大小。</p>
</li>
<li><p>createWorkers(self,num_workers，poll_timeout=5):</p>
<p>将num_workers数量对应的线程加入线程池</p>
</li>
<li><p>dismissWorkers(self,num_workers,do_join=False):</p>
<p>告诉num_workers数量的工作线程在执行完当前任务后退出</p>
</li>
<li><p>joinAllDismissWorkers(self):</p>
<p>在设置为退出的线程上执行Thread.join</p>
</li>
<li><p>putRequest(self,request,block=True,timeout=None):</p>
<p>加入一个任务请求到工作队列</p>
</li>
<li><p>pool(self,block=False)</p>
<p>处理任务队列中新请求。也就是循环的调用各个线程结果中的回调和错误回调。不过，当请求队列为空时会抛出 NoResultPending 异常，以表示所有的结果都处理完了。这个特点对于依赖线程执行结果继续加入请求队列的方式不太适合。</p>
</li>
<li><p>wait(self)</p>
<p>等待执行结果，直到所有任务完成。当所有执行结果返回后，线程池内部的线程并没有销毁，而是在等待新任务。因此，wait()之后依然可以在此调用pool.putRequest()往其中添加任务。</p>
</li>
</ul>
</li>
<li><p>threadpool.WorkerThread:处理任务的工作线程，主要有run()方法和dismiss()方法。</p>
</li>
<li><p>threadpool.WorkRequest:任务请求类，包含有具体执行方法的工作请求类</p>
<ul>
<li><p><code>__init__</code>(self,callable,args=None,kwds=None,requestID=None,callback=None,exc_callback=None)</p>
<p>创建一个工作请求。</p>
</li>
</ul>
</li>
<li><p>makeRequests(callable_,args_list,callback=None,exc_callback=_handle_thread_exception):</p>
<p>主要函数，用来创建具有相同的执行函数但参数不同的一系列工作请求。</p>
</li>
</ol>
<p>有了上面自定义线程池模式的基础，这个模块不难理解，有兴趣的可以去看看该模块的源码。它的使用步骤一般如下：</p>
<ul>
<li>（1）引入threadpool模块</li>
<li>（2）定义线程函数</li>
<li>（3）创建线程 池threadpool.ThreadPool()</li>
<li>（4）创建需要线程池处理的任务即threadpool.makeRequests()</li>
<li>（5）将创建的多个任务put到线程池中,threadpool.putRequest</li>
<li>（6）等到所有任务处理完毕theadpool.pool()</li>
</ul>
<p>将上面的例子用线程池模块进行修改，代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    urls = [</span><br><span class="line">        <span class="string">'http://www.python.org'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/about/'</span>,</span><br><span class="line">        <span class="string">'http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/doc/'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/download/'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/getit/'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/community/'</span>,</span><br><span class="line">        <span class="string">'https://wiki.python.org/moin/'</span>,</span><br><span class="line">        <span class="string">'http://planet.python.org/'</span>,</span><br><span class="line">        <span class="string">'https://wiki.python.org/moin/LocalUserGroups'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/psf/'</span>,</span><br><span class="line">        <span class="string">'http://docs.python.org/devguide/'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/community/awards/'</span></span><br><span class="line">    ]</span><br><span class="line">    t1 = datetime.datetime.now()</span><br><span class="line">    pool = threadpool.ThreadPool(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    requests = threadpool.makeRequests(open_url,urls)</span><br><span class="line">    [pool.putRequest(req) <span class="keyword">for</span> req <span class="keyword">in</span> requests]</span><br><span class="line">    pool.wait()</span><br><span class="line">    t2 = datetime.datetime.now()</span><br><span class="line">    <span class="keyword">print</span> t2-t1</span><br></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<p><img src="/images/python-process-5.png" alt="Python：线程、进程与协程(7)——线程池_进程池_04"></p>
<h2 id="multiprocessing-dummy-执行多线程任务"><a href="#multiprocessing-dummy-执行多线程任务" class="headerlink" title="multiprocessing.dummy 执行多线程任务"></a><strong>multiprocessing.dummy 执行多线程任务</strong></h2><p>multiprocessing.dummy 模块与 multiprocessing 模块的区别： dummy 模块是多线程，而 multiprocessing 是多进程， api 都是通用的。</p>
<p>Python3里的multiprocessing里也有现成的线程池，如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> ThreadPool</span><br></pre></td></tr></table></figure>
<p>有时候看到有人这么用dummy,from multiprocessing.dummy import Pool as ThreadPool ,把它当作了一个线程池。它的属性和方法可以参考<a href="http://11026142.blog.51cto.com/11016142/1876989" target="_blank" rel="external"> 进程池</a>。将上面的例子可以用这种方法改下代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    urls = [</span><br><span class="line">        <span class="string">'http://www.python.org'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/about/'</span>,</span><br><span class="line">        <span class="string">'http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/doc/'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/download/'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/getit/'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/community/'</span>,</span><br><span class="line">        <span class="string">'https://wiki.python.org/moin/'</span>,</span><br><span class="line">        <span class="string">'http://planet.python.org/'</span>,</span><br><span class="line">        <span class="string">'https://wiki.python.org/moin/LocalUserGroups'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/psf/'</span>,</span><br><span class="line">        <span class="string">'http://docs.python.org/devguide/'</span>,</span><br><span class="line">        <span class="string">'http://www.python.org/community/awards/'</span></span><br><span class="line">    ]</span><br><span class="line">    t1 = datetime.datetime.now()</span><br><span class="line">    pool =ThreadPool(<span class="number">2</span>)</span><br><span class="line">    pool.map(open_url,urls)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    t2 = datetime.datetime.now()</span><br><span class="line">    <span class="keyword">print</span> t2-t1</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/images/python-process-6.png" alt="Python：线程、进程与协程(7)——线程池_线程池_05"></p>
<p>原文： <a href="https://blog.51cto.com/u_11026142/1879245" target="_blank" rel="external">https://blog.51cto.com/u_11026142/1879245</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 进程线程协程(4)--multiprocessing模块(下)]]></title>
      <url>https://magiceses.github.io/2019/10/12/python-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B-4.2/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">就算没有天分，只要你愿意每天花一点时间，做同样一件事情，不知不觉间，你就会走得很远。<br></p>

<p>上篇博文介绍了multiprocessing模块的内存共享，下面讲进程池。有些情况下，所要完成的工作可以上篇博文介绍了multiprocessing模块的内存共享，下面讲进程池。有些情况下，所要完成的工作可以分解并独立地分布到多个工作进程，对于这种简单的情况，可以用Pool类来管理固定数目的工作进程。作业的返回值会收集并作为一个列表返回。Pool可以提供指定数量的进程，供用户调用，当有新的请求提交到pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到规定最大值，那么该请求就会等待，直到池中有进程结束，才会创建新的进程来它。</p>
<p>在网上找到了一篇非常好的分析进程池源码的文章，在这里跟大家分享下，篇幅比较长，希望大家能够有耐心的看完它，仔细体会。</p>
<p>进程池使用multiprocessing.pool，pool的构造如下：</p>
<a id="more"></a>
<p><strong>multiprocessing.Pool([processes[, initializer[, initargs[, maxtasksperchild]]]])</strong></p>
<ul>
<li>processes表示pool中进程的数目，默认地为当前CPU的核数可以通过multiprocessing.cpu_count()方法参考你机器上cpu数量；</li>
<li>initializer表示工作进程start时调用的初始化函数；</li>
<li>initargs表示initializer函数的参数，如果initializer不为None，在每个工作进程start之前会调用；</li>
<li>maxtasksperchild表示每个工作进程在退出/被其他新的进程替代前，需要完成的工作任务数，默认为None，表示工作进程存活时间与pool相同，即不会自动退出/被替换。</li>
</ul>
<p>主要方法：</p>
<ul>
<li>apply(func[, args[, kwds]]) ：apply用于传递不定参数，同python中的apply函数一致（不过内置的apply函数从2.3以后就不建议使用了），主进程会阻塞于函数，主进程的执行流程同单进程一致；</li>
<li>apply_async(func[, args[, kwds[, callback]]]) ：与apply用法一致，但它是非阻塞的且支持结果返回后进行回调；</li>
</ul>
<p>主进程循环运行过程中不等待apply_async的返回结果，在主进程结束后，即使子进程还未返回整个程序也会退出。虽然apply_async是非阻塞的，但其返回结果的get方法却是阻塞的，如使用result.get()会阻塞主进程。</p>
<p>如果我们对返回结果不感兴趣， 那么可以在主进程中使用pool.close与pool.join来防止主进程退出。注意join方法一定要在close或terminate之后调用。</p>
<ul>
<li>map(func, iterable[, chunksize]) ：map方法与在功能上等价与内置的map()，只不过单个任务会并行运行。它会使进程阻塞直到结果返回。但需注意的是其第二个参数虽然描述的为iterable, 但在实际使用中发现只有在整个队列全部就绪后，程序才会运行子进程；</li>
<li>map_async(func, iterable[, chunksize[, callback]]) ：与map用法一致，但是它是非阻塞的。其有关事项见apply_async；</li>
<li>imap(func, iterable[, chunksize]) ：与map不同的是， imap的返回结果为iter，需要在主进程中主动使用next来驱动子进程的调用。即使子进程没有返回结果，主进程对于gen_list(l)的 iter还是会继续进行， 另外根据python2.6文档的描述，对于大数据量的iterable而言，将chunksize设置大一些比默认的1要好；</li>
<li>imap_unordered(func, iterable[, chunksize]) ：同imap一致，只不过其并不保证返回结果与迭代传入的顺序一致；</li>
<li>close() ：关闭pool，使其不再接受新的任务；</li>
<li>terminate() ：结束工作进程，不再处理未处理的任务；</li>
<li>join() ：主进程阻塞等待子进程的退出， join方法要在close或terminate之后使用。</li>
</ul>
<p>它的源码在multiprocessing包pool.py里，Pool对象的初始化函数如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pool</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Class which supports an async version of the `apply()` builtin</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    Process = Process</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, processes=None, initializer=None, initargs=<span class="params">()</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 maxtasksperchild=None)</span>:</span></span><br><span class="line">        self._setup_queues()</span><br><span class="line">        self._taskqueue = Queue.Queue()</span><br><span class="line">        self._cache = &#123;&#125;</span><br><span class="line">        self._state = RUN</span><br><span class="line">        self._maxtasksperchild = maxtasksperchild</span><br><span class="line">        self._initializer = initializer</span><br><span class="line">        self._initargs = initargs</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> processes <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                processes = cpu_count()</span><br><span class="line">            <span class="keyword">except</span> NotImplementedError:</span><br><span class="line">                processes = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> processes &lt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Number of processes must be at least 1"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> initializer <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> <span class="keyword">not</span> hasattr(initializer, <span class="string">'__call__'</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'initializer must be a callable'</span>)</span><br><span class="line"></span><br><span class="line">        self._processes = processes</span><br><span class="line">        self._pool = []</span><br><span class="line">        self._repopulate_pool()</span><br><span class="line"></span><br><span class="line">        self._worker_handler = threading.Thread(</span><br><span class="line">            target=Pool._handle_workers,</span><br><span class="line">            args=(self, )</span><br><span class="line">            )</span><br><span class="line">        self._worker_handler.daemon = <span class="keyword">True</span></span><br><span class="line">        self._worker_handler._state = RUN</span><br><span class="line">        self._worker_handler.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self._task_handler = threading.Thread(</span><br><span class="line">            target=Pool._handle_tasks,</span><br><span class="line">            args=(self._taskqueue, self._quick_put, self._outqueue,</span><br><span class="line">                  self._pool, self._cache)</span><br><span class="line">            )</span><br><span class="line">        self._task_handler.daemon = <span class="keyword">True</span></span><br><span class="line">        self._task_handler._state = RUN</span><br><span class="line">        self._task_handler.start()</span><br><span class="line"></span><br><span class="line">        self._result_handler = threading.Thread(</span><br><span class="line">            target=Pool._handle_results,</span><br><span class="line">            args=(self._outqueue, self._quick_get, self._cache)</span><br><span class="line">            )</span><br><span class="line">        self._result_handler.daemon = <span class="keyword">True</span></span><br><span class="line">        self._result_handler._state = RUN</span><br><span class="line">        self._result_handler.start()</span><br><span class="line"></span><br><span class="line">        self._terminate = Finalize(</span><br><span class="line">            self, self._terminate_pool,</span><br><span class="line">            args=(self._taskqueue, self._inqueue, self._outqueue, self._pool,</span><br><span class="line">                  self._worker_handler, self._task_handler,</span><br><span class="line">                  self._result_handler, self._cache),</span><br><span class="line">            exitpriority=<span class="number">15</span></span><br><span class="line">            )</span><br></pre></td></tr></table></figure>
<p>主要数据结构有：</p>
<ul>
<li>self._inqueue  接收任务队列（SimpleQueue），用于主进程将任务发送给worker进程;</li>
<li>self._outqueue  发送结果队列（SimpleQueue），用于worker进程将结果发送给主进程;</li>
<li>self._taskqueue  同步的任务队列，保存线程池分配给主进程的任务;</li>
<li>self._cache = {}  任务缓存;</li>
<li>self._processes  worker进程个数;</li>
<li>self._pool = []  woker进程队列。</li>
</ul>
<p>进程池工作时，任务的接收、分配。结果的返回，均由进程池内部的各个线程合作完成，来看看进程池内部由那些线程：</p>
<p><code>_work_handler</code>线程，负责保证进程池中的worker进程在有退出的情况下，创建出新的worker进程，并添加到进程队列（pools）中，保持进程池中的worker进程数始终为processes个。</p>
<p>_<code>worker_handler</code>线程回调函数为Pool.<code>_handler_workers</code>方法，在进程池state==RUN时，循环调用<code>_maintain_pool</code>方法，监控是否有进程退出，并创建新的进程，append到进程池pools中，保持进程池中的worker进程数始终为processes个。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">self._worker_handler = threading.Thread(</span><br><span class="line">            target=Pool._handle_workers,</span><br><span class="line">            args=(self, )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pool._handle_workers方法在_worker_handler线程状态为运行时(status==RUN)，循环调用_maintain_pool方法：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_maintain_pool</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self._join_exited_workers():</span><br><span class="line">        self._repopulate_pool()</span><br><span class="line"></span><br><span class="line"><span class="comment"># _join_exited_workers()监控pools队列中的进程是否有结束的，有则等待其结束，并从pools中删除，当有进程结束时，调用_repopulate_pool()，创建新的进程：</span></span><br><span class="line">w = self.Process(target=worker,</span><br><span class="line">            　　  args=(self._inqueue, self._outqueue,</span><br><span class="line">                    　 self._initializer, self._initargs,      　　　　　　　　　　 </span><br><span class="line">                       self._maxtasksperchild)</span><br><span class="line">                 )</span><br><span class="line">self._pool.append(w)</span><br><span class="line"></span><br><span class="line"><span class="comment"># w是新创建的进程，它是用来处理实际任务的进程，worker是它的回调函数：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(inqueue, outqueue, initializer=None, initargs=<span class="params">()</span>, maxtasks=None)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> maxtasks <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> (type(maxtasks) == int <span class="keyword">and</span> maxtasks &gt; <span class="number">0</span>)</span><br><span class="line">    put = outqueue.put</span><br><span class="line">    get = inqueue.get</span><br><span class="line">    <span class="keyword">if</span> hasattr(inqueue, <span class="string">'_writer'</span>):</span><br><span class="line">        inqueue._writer.close()</span><br><span class="line">        outqueue._reader.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> initializer <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        initializer(*initargs)</span><br><span class="line"></span><br><span class="line">    completed = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> maxtasks <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> (maxtasks <span class="keyword">and</span> completed &lt; maxtasks):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            task = get()</span><br><span class="line">        <span class="keyword">except</span> (EOFError, IOError):</span><br><span class="line">            debug(<span class="string">'worker got EOFError or IOError -- exiting'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> task <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            debug(<span class="string">'worker got sentinel -- exiting'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        job, i, func, args, kwds = task</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = (<span class="keyword">True</span>, func(*args, **kwds))</span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            result = (<span class="keyword">False</span>, e)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            put((job, i, result))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            wrapped = MaybeEncodingError(e, result[<span class="number">1</span>])</span><br><span class="line">            debug(<span class="string">"Possible encoding error while sending result: %s"</span> % (</span><br><span class="line">                wrapped))</span><br><span class="line">            put((job, i, (<span class="keyword">False</span>, wrapped)))</span><br><span class="line">        completed += <span class="number">1</span></span><br><span class="line">    debug(<span class="string">'worker exiting after %d tasks'</span> % completed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有worker进程都使用worker回调函数对任务进行统一的处理，从源码中可以看出：</span></span><br><span class="line"><span class="comment"># 它的功能是从接入任务队列中（inqueue）读取出task任务，然后根据任务的函数、参数进行调用（result = (True, func(*args, **kwds)，</span></span><br><span class="line"><span class="comment"># 再将结果放入结果队列中（outqueue)，如果有最大处理上限的限制maxtasks，那么当进程处理到任务数上限时退出。</span></span><br></pre></td></tr></table></figure>
<p><code>_task_handler</code>线程，负责从进程池中的task_queue中，将任务取出，放入接收任务队列（Pipe）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">self._task_handler = threading.Thread(</span><br><span class="line">            target=Pool._handle_tasks,</span><br><span class="line">            args=(self._taskqueue, self._quick_put, self._outqueue, self._pool)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Pool._handle_tasks方法不断从task_queue中获取任务，并放入接受任务队列（in_queue)，以此触发worker进程进行任务处理。当从task_queue读取到None元素时，表示进程池将要被终止（terminate)，不再处理之后的任务请求，同时向接受任务队列和结果任务队列put None元素，通知其他线程结束。</p>
<p>_handle_results线程，负责将处理完的任务结果，从outqueue（Pipe）中读取出来，放在任务缓存cache中，</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">self._result_handler = threading.Thread(</span><br><span class="line">        target=Pool._handle_results,</span><br><span class="line">        args=(self._outqueue, self._quick_get, self._cache)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><code>_terminate</code>，这里的<code>_terminate</code>并不是一个线程，而是一个Finalize对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">self._terminate = Finalize(</span><br><span class="line">            self, self._terminate_pool,</span><br><span class="line">            args=(self._taskqueue, self._inqueue, self._outqueue, self._pool,</span><br><span class="line">                  self._worker_handler, self._task_handler,</span><br><span class="line">                  self._result_handler, self._cache),</span><br><span class="line">            exitpriority=<span class="number">15</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># Finalize类的构造函数与线程构造函数类似，_terminate_pool是它的回调函数，args回调函数的参数。</span></span><br><span class="line"><span class="comment"># _terminate_pool函数负责终止进程池的工作：终止上述的三个线程，终止进程池中的worker进程，清除队列中的数据。</span></span><br><span class="line"><span class="comment"># _terminate是个对象而非线程，那么它如何像线程调用start()方法一样，来执行回调函数_terminate_pool呢？查看Pool源码，发现进程池的终止函数：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">terminate</span><span class="params">(self)</span>:</span></span><br><span class="line">    debug(<span class="string">'terminating pool'</span>)</span><br><span class="line">    self._state = TERMINATE</span><br><span class="line">    self._worker_handler._state = TERMINATE</span><br><span class="line">    self._terminate()</span><br><span class="line"><span class="comment"># 函数中最后将_terminate对象当做一个方法来执行，而_terminate本身是一个Finalize对象，我们看一下Finalize类的定义，发现它实现了__call__方法：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, wr=None)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">del</span> _finalizer_registry[self._key]</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        sub_debug(<span class="string">'finalizer no longer registered'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> self._pid != os.getpid():</span><br><span class="line">            res = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res = self._callback(*self._args, **self._kwargs)</span><br><span class="line">        self._weakref = self._callback = self._args = \</span><br><span class="line">                        self._kwargs = self._key = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"><span class="comment"># 而方法中 self._callback(*self._args, **self._kwargs) 这条语句，就执行了_terminate_pool函数，进而将进程池终止。</span></span><br></pre></td></tr></table></figure>
<p>下面接着看下客户端如何对向进程池分配任务，并获取结果的。</p>
<p>我们知道，当进程池中任务队列非空时，才会触发worker进程去工作，那么如何向进程池中的任务队列中添加任务呢，进程池类有两组关键方法来创建任务，分别是apply/apply_async和map/map_async，实际上进程池类的apply和map方法与python内建的两个同名方法类似，apply_async和map_async分别为它们的非阻塞版本。</p>
<p>首先来看apply_async方法，源码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_async</span><span class="params">(self, func, args=<span class="params">()</span>, kwds=&#123;&#125;, callback=None)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> self._state == RUN</span><br><span class="line">    result = ApplyResult(self._cache, callback)</span><br><span class="line">    self._taskqueue.put(([(result._job, <span class="keyword">None</span>, func, args, kwds)], <span class="keyword">None</span>))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="comment"># func表示执行此任务的方法</span></span><br><span class="line"><span class="comment"># args、kwds分别表func的位置参数和关键字参数</span></span><br><span class="line"><span class="comment"># callback表示一个单参数的方法，当有结果返回时，callback方法会被调用，参数即为任务执行后的结果</span></span><br></pre></td></tr></table></figure>
<p>每调用一次apply_result方法，实际上就向<code>_taskqueue</code>中添加了一条任务，注意这里采用了非阻塞（异步）的调用方式，即apply_async方法中新建的任务只是被添加到任务队列中，还并未执行，不需要等待，直接返回创建的ApplyResult对象，注意在创建ApplyResult对象时，将它放入进程池的缓存<code>_cache</code>中。</p>
<p>任务队列中有了新创建的任务，那么根据上节分析的处理流程，进程池的<code>_task_handler</code>线程，将任务从taskqueue中获取出来，放入<code>_inqueue</code>中，触发worker进程根据args和kwds调用func，运行结束后，将结果放入<code>_outqueue</code>，再由进程池中的<code>_handle_results</code>线程，将运行结果从<code>_outqueue</code>中取出，并找到<code>_cache</code>缓存中的ApplyResult对象，<code>_set</code>其运行结果，等待调用端获取。</p>
<p>apply_async方法既然是异步的，那么它如何知道任务结束，并获取结果呢？这里需要了解ApplyResult类中的两个主要方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, timeout=None)</span>:</span></span><br><span class="line">    self.wait(timeout)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self._ready:</span><br><span class="line">        <span class="keyword">raise</span> TimeoutError</span><br><span class="line">    <span class="keyword">if</span> self._success:</span><br><span class="line">        <span class="keyword">return</span> self._value</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> self._value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_set</span><span class="params">(self, i, obj)</span>:</span></span><br><span class="line">    self._success, self._value = obj</span><br><span class="line">    <span class="keyword">if</span> self._callback <span class="keyword">and</span> self._success:</span><br><span class="line">        self._callback(self._value)</span><br><span class="line">    self._cond.acquire()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self._ready = <span class="keyword">True</span></span><br><span class="line">        self._cond.notify()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        self._cond.release()</span><br><span class="line">    <span class="keyword">del</span> self._cache[self._job]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从这两个方法名可以看出，get方法是提供给客户端获取worker进程运行结果的，而运行的结果是通过_handle_result线程调用_set方法，存放在ApplyResult对象中。</span></span><br><span class="line"><span class="comment"># _set方法将运行结果保存在ApplyResult._value中，唤醒阻塞在条件变量上的get方法。客户端通过调用get方法，返回运行结果。</span></span><br></pre></td></tr></table></figure>
<p>apply方法是以阻塞的方式运行获取进程结果，它的实现很简单，同样是调用apply_async，只不过不返回ApplyResult，而是直接返回worker进程运行的结果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply</span><span class="params">(self, func, args=<span class="params">()</span>, kwds=&#123;&#125;)</span>:</span>     </span><br><span class="line">   <span class="keyword">assert</span> self._state == RUN       </span><br><span class="line">   <span class="keyword">return</span> self.apply_async(func, args, kwds).get()</span><br></pre></td></tr></table></figure>
<p>以上的apply/apply_async方法，每次只能向进程池分配一个任务，那如果想一次分配多个任务到进程池中，可以使用map/map_async方法。首先来看下map_async方法是如何定义的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">map_async</span><span class="params">(self, func, iterable, chunksize=None, callback=None)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> self._state == RUN</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(iterable, <span class="string">'__len__'</span>):</span><br><span class="line">        iterable = list(iterable)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> chunksize <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        chunksize, extra = divmod(len(iterable), len(self._pool) * <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> extra:</span><br><span class="line">            chunksize += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> len(iterable) == <span class="number">0</span>:</span><br><span class="line">            chunksize = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    task_batches = Pool._get_tasks(func, iterable, chunksize)</span><br><span class="line">    result = MapResult(self._cache, chunksize, len(iterable), callback)</span><br><span class="line">    self._taskqueue.put((((result._job, i, mapstar, (x,), &#123;&#125;)</span><br><span class="line">                              <span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(task_batches)), <span class="keyword">None</span>))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># func表示执行此任务的方法</span></span><br><span class="line"><span class="comment"># iterable表示任务参数序列</span></span><br><span class="line"><span class="comment"># chunksize表示将iterable序列按每组chunksize的大小进行分割，每个分割后的序列提交给进程池中的一个任务进行处理</span></span><br><span class="line"><span class="comment"># callback表示一个单参数的方法，当有结果返回时，callback方法会被调用，参数即为任务执行后的结果</span></span><br></pre></td></tr></table></figure>
<p>从源码可以看出，map_async要比apply_async复杂，首先它会根据chunksize对任务参数序列进行分组，chunksize表示每组中的任务个数，当默认chunksize=None时，根据任务参数序列和进程池中进程数计算分组数：chunk, extra = divmod(len(iterable), len(self._pool) * 4)。假设进程池中进程数为len(self._pool)=4，任务参数序列iterable=range(123)，那么chunk=7, extra=11，向下执行，得出chunksize=8，表示将任务参数序列分为8组。任务实际分组：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">task_batches = Pool._get_tasks(func, iterable, chunksize)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_tasks</span><span class="params">(func, it, size)</span>:</span></span><br><span class="line">    it = iter(it)</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        x = tuple(itertools.islice(it, size))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> x:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">yield</span> (func, x)</span><br><span class="line"></span><br><span class="line">这里使用<span class="keyword">yield</span>将_get_tasks方法编译成生成器。实际上对于range(<span class="number">123</span>)这样的序列，按照chunksize=<span class="number">8</span>进行分组后，一共<span class="number">16</span>组每组的元素如下：</span><br><span class="line">(func, (<span class="number">0</span>,   <span class="number">1</span>,   <span class="number">2</span>,   <span class="number">3</span>,   <span class="number">4</span>,   <span class="number">5</span>,   <span class="number">6</span>,   <span class="number">7</span>))</span><br><span class="line">(func, (<span class="number">8</span>,   <span class="number">9</span>,   <span class="number">10</span>,  <span class="number">11</span>,  <span class="number">12</span>,  <span class="number">13</span>,  <span class="number">14</span>,  <span class="number">15</span>))</span><br><span class="line">(func, (<span class="number">16</span>,  <span class="number">17</span>,  <span class="number">18</span>,  <span class="number">19</span>,  <span class="number">20</span>,  <span class="number">21</span>,  <span class="number">22</span>,  <span class="number">23</span>))</span><br><span class="line">...</span><br><span class="line">(func, (<span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>))</span><br><span class="line">(func, (<span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>))</span><br></pre></td></tr></table></figure>
<p>分组之后，这里定义了一个MapResult对象：result = MapResult(self._cache, chunksize, len(iterable), callback)它继承自AppyResult类，同样提供get和_set方法接口。将分组后的任务放入任务队列中，然后就返回刚刚创建的result对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">self._taskqueue.put((((result._job, i, mapstar, (x,), &#123;&#125;)</span><br><span class="line">                              <span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(task_batches)), <span class="keyword">None</span>))</span><br><span class="line">以任务参数序列=range(<span class="number">123</span>)为例，实际上这里向任务队列中put了一个<span class="number">16</span>组元组元素的集合，元组依次为：</span><br><span class="line">(result._job, <span class="number">0</span>, mapstar, ((func, (<span class="number">0</span>,   <span class="number">1</span>,   <span class="number">2</span>,   <span class="number">3</span>,   <span class="number">4</span>,   <span class="number">5</span>,   <span class="number">6</span>,   <span class="number">7</span>)),), &#123;&#125;, <span class="keyword">None</span>)</span><br><span class="line">(result._job, <span class="number">1</span>, mapstar, ((func, (<span class="number">8</span>,   <span class="number">9</span>,   <span class="number">10</span>,  <span class="number">11</span>,  <span class="number">12</span>,  <span class="number">13</span>,  <span class="number">14</span>,  <span class="number">15</span>)),), &#123;&#125;, <span class="keyword">None</span>)</span><br><span class="line">……</span><br><span class="line">(result._job, <span class="number">15</span>, mapstar, ((func, (<span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>）),), &#123;&#125;, <span class="keyword">None</span>)</span><br><span class="line">注意每一个元组中的 i，它表示当前元组在整个任务元组集合中的位置，通过它，_handle_result线程才能将worker进程运行的结果，以正确的顺序填入到MapResult对象中。</span><br></pre></td></tr></table></figure>
<p>注意这里只调用了一次put方法，将16组元组作为一个整体序列放入任务队列，那么这个任务是否<code>_task_handler</code>线程是否也会像apply_async方法一样，将整个任务序列传递给<code>_inqueue</code>，这样就会导致进程池中的只有一个worker进程获取到任务序列，而并非起到多进程的处理方式。我们来看下<code>_task_handler</code>线程是怎样处理的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_handle_tasks</span><span class="params">(taskqueue, put, outqueue, pool, cache)</span>:</span></span><br><span class="line">    thread = threading.current_thread()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> taskseq, set_length <span class="keyword">in</span> iter(taskqueue.get, <span class="keyword">None</span>):</span><br><span class="line">        i = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> i, task <span class="keyword">in</span> enumerate(taskseq):</span><br><span class="line">            <span class="keyword">if</span> thread._state:</span><br><span class="line">                debug(<span class="string">'task handler found thread._state != RUN'</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                put(task)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                job, ind = task[:<span class="number">2</span>]</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    cache[job]._set(ind, (<span class="keyword">False</span>, e))</span><br><span class="line">                <span class="keyword">except</span> KeyError:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> set_length:</span><br><span class="line">                debug(<span class="string">'doing set_length()'</span>)</span><br><span class="line">                set_length(i+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        debug(<span class="string">'task handler got sentinel'</span>)</span><br></pre></td></tr></table></figure>
<p>注意到语句 for i, task in enumerate(taskseq)，原来<code>_task_handler</code>线程在通过taskqueue获取到任务序列后，并不是直接放入<code>_inqueue</code>中的，而是将序列中任务按照之前分好的组，依次放入<code>_inqueue</code>中的，而循环中的task即上述的每个任务元组：(result._job, 0, mapstar, ((func, (0,  1,  2,  3,  4,  5,  6,  7)),), {}, None)。接着触发worker进程。worker进程获取出每组任务，进行任务的处理：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">job, i, func, args, kwds = task </span><br><span class="line"><span class="keyword">try</span>: 　　</span><br><span class="line">    result = (<span class="keyword">True</span>, func(*args, **kwds))</span><br><span class="line"><span class="keyword">except</span> Exception, e:</span><br><span class="line">    result = (<span class="keyword">False</span>, e)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    put((job, i, result))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    wrapped = MaybeEncodingError(e, result[<span class="number">1</span>])</span><br><span class="line">    debug(<span class="string">"Possible encoding error while sending result: %s"</span> % (</span><br><span class="line">        wrapped))</span><br><span class="line">    put((job, i, (<span class="keyword">False</span>, wrapped)))</span><br><span class="line"></span><br><span class="line">根据之前放入_inqueue的顺序对应关系：</span><br><span class="line">(result._job, <span class="number">0</span>, mapstar, ((func, (<span class="number">0</span>,   <span class="number">1</span>,   <span class="number">2</span>,   <span class="number">3</span>,   <span class="number">4</span>,   <span class="number">5</span>,   <span class="number">6</span>,   <span class="number">7</span>)),), &#123;&#125;, <span class="keyword">None</span>)</span><br><span class="line">job, i, func, args, kwds = task</span><br><span class="line">可以看出，元组中 mapstar 表示这里的回调函数func，((func, (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)),)和&#123;&#125;分别表示args和kwds参数。</span><br><span class="line">执行result = (<span class="keyword">True</span>, func(*args, **kwds))</span><br><span class="line">再来看下mapstar是如何定义的：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapstar</span><span class="params">(args)</span>:</span> </span><br><span class="line"><span class="keyword">return</span> map(*args)</span><br><span class="line">这里mapstar表示回调函数func，它的定义只有一个参数，而在worker进程执行回调时，使用的是func(*args, **kwds)语句，这里多一个参数能够正确执行吗？答案时肯定的，在调用mapstar时，如果kwds为空字典，那么传入第二个参数不会影响函数的调用，而一个无参函数func_with_none_params，在调用时使用func_with_none_params(*(), **&#123;&#125;)也是没有问题的，python会自动忽视传入的两个空参数。</span><br><span class="line">看到这里，我们明白了，实际上对任务参数分组后，每一组的任务是通过内建的map方法来进行调用的。</span><br><span class="line">运行之后调用put(job, i, result)将结果放入_outqueue中，_handle_result线程会从_outqueue中将结果取出，并找到_cache缓存中的MapResult对象，_set其运行结果</span><br></pre></td></tr></table></figure>
<p>现在来我们来总结下，进程池的map_async方法是如何运行的，我们将range(123)这个任务序列，将它传入map_async方法，假设不指定chunksize，并且cpu为四核，那么方法内部会分为16个组（0~14组每组8个元素，最后一组3个元素）。将分组后的任务放入任务队列，一共16组，那么每个进程需要运行4次来处理，每次通过内建的map方法，顺序将组中8个任务执行，再将结果放入<code>_outqueue</code>，找到<code>_cache</code>缓存中的MapResult对象，<code>_set</code>其运行结果，等待客户端获取。使用map_async方法会调用多个worker进程处理任务，每个worler进程运行结束，会将结果传入<code>_outqueue</code>，再有<code>_handle_result</code>线程将结果写入MapResult对象，那如何保证结果序列的顺序与调用map_async时传入的任务参数序列一致呢，我们来看看MapResult的构造函数和<code>_set</code>方法的实现。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cache, chunksize, length, callback)</span>:</span></span><br><span class="line">    ApplyResult.__init__(self, cache, callback)</span><br><span class="line">    self._success = <span class="keyword">True</span></span><br><span class="line">    self._value = [<span class="keyword">None</span>] * length</span><br><span class="line">    self._chunksize = chunksize</span><br><span class="line">    <span class="keyword">if</span> chunksize &lt;= <span class="number">0</span>:</span><br><span class="line">        self._number_left = <span class="number">0</span></span><br><span class="line">        self._ready = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">del</span> cache[self._job]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self._number_left = length//chunksize + bool(length % chunksize)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_set</span><span class="params">(self, i, success_result)</span>:</span></span><br><span class="line">    success, result = success_result</span><br><span class="line">    <span class="keyword">if</span> success:</span><br><span class="line">        self._value[i*self._chunksize:(i+<span class="number">1</span>)*self._chunksize] = result</span><br><span class="line">        self._number_left -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self._number_left == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> self._callback:</span><br><span class="line">                self._callback(self._value)</span><br><span class="line">            <span class="keyword">del</span> self._cache[self._job]</span><br><span class="line">            self._cond.acquire()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self._ready = <span class="keyword">True</span></span><br><span class="line">                self._cond.notify()</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                self._cond.release()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self._success = <span class="keyword">False</span></span><br><span class="line">        self._value = result</span><br><span class="line">        <span class="keyword">del</span> self._cache[self._job]</span><br><span class="line">        self._cond.acquire()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._ready = <span class="keyword">True</span></span><br><span class="line">            self._cond.notify()</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self._cond.release()</span><br></pre></td></tr></table></figure>
<p>MapResult类中，<code>_value</code>保存map_async的运行结果，初始化时为一个元素为None的list，list的长度与任务参数序列的长度相同，<code>_chunksize</code>表示将任务分组后，每组有多少个任务，<code>_number_left</code>表示整个任务序列被分为多少个组。<code>_handle_result</code>线程会通过<code>_set</code>方法将worker进程的运行结果保存到<code>_value</code>中，那么如何将worker进程运行的结果填入到<code>_value</code>中正确的位置呢，还记得在map_async在向task_queue填入任务时，每组中的 i吗，i表示的就是当前任务组的组号，<code>_set</code>方法会根据当前任务的组号即参数 i，并且递减<code>_number_left</code>，当<code>_number_left</code>递减为0时，表示任务参数序列中的所有任务都已被woker进程处理，<code>_value</code>全部被计算出，唤醒阻塞在get方法上的条件变量，是客户端可以获取运行结果。</p>
<p>map函数为map_async的阻塞版本，它在map_async的基础上，调用get方法，直接阻塞到结果全部返回：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">map</span><span class="params">(self, func, iterable, chunksize=None)</span>:</span>  </span><br><span class="line">  <span class="keyword">assert</span> self._state == RUN    </span><br><span class="line">  <span class="keyword">return</span> self.map_async(func, iterable, chunksize).get()</span><br></pre></td></tr></table></figure>
<p>我们知道，进程池内部由多个线程互相协作，向客户端提供可靠的服务，那么这些线程之间是怎样做到数据共享与同步的呢？在客户端使用apply/map函数向进程池分配任务时，使用<code>self._taskqueue</code>来存放任务元素，<code>_taskqueue</code>定义为Queue.Queue()，这是一个python标准库中的线程安全的同步队列，它保证通知时刻只有一个线程向队列添加或从队列获取元素。这样，主线程向进程池中分配任务（taskqueue.put），进程池中<code>_handle_tasks</code>线程读取<code>_taskqueue</code>队列中的元素，两个线程同时操作taskqueue，互不影响。进程池中有N个worker进程在等待任务下发，那么进程池中的<code>_handle_tasks</code>线程读取出任务后，又如何保证一个任务不被多个worker进程获取到呢？我们来看下<code>_handle_tasks</code>线程将任务读取出来之后如何交给worker进程的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> taskseq, set_length <span class="keyword">in</span> iter(taskqueue.get, <span class="keyword">None</span>):</span><br><span class="line">    i = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i, task <span class="keyword">in</span> enumerate(taskseq):</span><br><span class="line">        <span class="keyword">if</span> thread._state:</span><br><span class="line">            debug(<span class="string">'task handler found thread._state != RUN'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            put(task)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            job, ind = task[:<span class="number">2</span>]</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                cache[job]._set(ind, (<span class="keyword">False</span>, e))</span><br><span class="line">            <span class="keyword">except</span> KeyError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> set_length:</span><br><span class="line">            debug(<span class="string">'doing set_length()'</span>)</span><br><span class="line">            set_length(i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    debug(<span class="string">'task handler got sentinel'</span>)</span><br><span class="line">在从taskqueue中get到任务之后，对任务中的每个task，调用了put函数，这个put函数实际上是将task放入了管道，而主进程与worker进程的交互，正是通过管道来完成的。</span><br><span class="line">再来看看worker进程的定义：</span><br><span class="line">w = self.Process(target=worker,</span><br><span class="line">                 args=(self._inqueue, self._outqueue,</span><br><span class="line">                         self._initializer,</span><br><span class="line">                   self._initargs, self._maxtasksperchild)</span><br><span class="line">            )</span><br><span class="line">其中self._inqueue和self._outqueue为SimpleQueue()对象，实际是带锁的管道，上述_handle_task线程调用的put函数，即为SimpleQueue对象的方法。我们看到，这里worker进程定义均相同，所以进程池中的worker进程共享self._inqueue和self._outqueue对象，那么当一个task元素被put到共享的_inqueue管道中时，如何确保只有一个worker获取到呢，答案同样是加锁，在SimpleQueue()类的定义中，put以及get方法都带有锁，进行同步，唯一不同的是，这里的锁是用于进程间同步的。这样就保证了多个worker之间能够确保任务的同步。与分配任务类似，在worker进程运行完之后，会将结果put会_outqueue，_outqueue同样是SimpleQueue类对象，可以在多个进程之间进行互斥。</span><br></pre></td></tr></table></figure>
<p>在worker进程运行结束之后，会将执行结果通过管道传回，进程池中有<code>_handle_result</code>线程来负责接收result，取出之后，通过调用<code>_set</code>方法将结果写回ApplyResult/MapResult对象，客户端可以通过get方法取出结果，这里通过使用条件变量进行同步，当<code>_set</code>函数执行之后，通过条件变量唤醒阻塞在get函数的主进程。</p>
<p>进程池终止工作通过调用Pool.terminate()来实现，这里的实现很巧妙，用了一个可调用对象，将终止Pool时的需要执行的回调函数先注册好，等到需要终止时，直接调用对象即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">self._terminate = Finalize(</span><br><span class="line">            　　　　self, self._terminate_pool,</span><br><span class="line">            　　　　args=(self._taskqueue, self._inqueue, self._outqueue, self._pool,</span><br><span class="line">                   self._worker_handler, self._task_handler,</span><br><span class="line">                   self._result_handler, self._cache),</span><br><span class="line">            　　　　exitpriority=<span class="number">15</span></span><br><span class="line">            )</span><br><span class="line">在Finalize类的实现了__call__方法，在运行self._terminate()时，就会调用构造self._terminate时传入的self._terminate_pool对象。</span><br></pre></td></tr></table></figure>
<p>使用map/map_async函数向进程池中批量分配任务时，使用了生成器表达式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">self._taskqueue.put((((result._job, i, mapstar, (x,), &#123;&#125;) <span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(task_batches)), <span class="keyword">None</span>))</span><br><span class="line">生成器表达式很简单，只需把列表解析的的[]换成()即可，上述表达的列表解析表示为：</span><br><span class="line">[(result._job, i, mapstar, (x,), &#123;&#125;) <span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(task_batches)]</span><br><span class="line">这里使用生成器表达式的好处是，它相当于列表解析的扩展，是对内存有好的，因为它只是生成了一个生成器，当我们需要使用该生成器对应的逻辑目标数据时，它才会通过既定逻辑去生成该数据，所以不会大量占用内存。</span><br></pre></td></tr></table></figure>
<p>在Pool中，_worker_handler线程负责监控、创建新的工作进程，在监控工作进程退出时，同时将退出的进程从进程池中删除掉。这类似于，一边遍历一边删除列表。我们来看下下面代码的实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</span><br><span class="line">        l.remove(i)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p>我们看到l没有将所有的3和4都删除掉，这是因为remove改变了l的大小。再看下面的实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(len(l)):</span><br><span class="line">    <span class="keyword">if</span> l[i] <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">4</span>]:</span><br><span class="line">        <span class="keyword">del</span> l[i]</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#37&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">if</span> l[i] <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">4</span>]:</span><br><span class="line">IndexError: list index out of range</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>同样因为del l[i]时，l的大小改变，继续访问下去导致访问越界。而标准库中的进程池给出了遍历删除的一个正确示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(len(self._pool))):</span><br><span class="line">    worker = self._pool[i]   </span><br><span class="line">    <span class="keyword">if</span> worker.exitcode <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        worker.join()</span><br><span class="line">        cleaned = <span class="keyword">True</span>       </span><br><span class="line">        <span class="keyword">del</span> self._pool[i]</span><br></pre></td></tr></table></figure>
<p>使用reversed，从后向前删除list中的元素，这样会保证所有符合删除条件的元素被删除掉：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(len(l))):</span><br><span class="line">    <span class="keyword">if</span> l[i] <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</span><br><span class="line">        <span class="keyword">del</span> l[i]</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>原文：<a href="https://blog.51cto.com/u_11026142/1876989" target="_blank" rel="external">https://blog.51cto.com/u_11026142/1876989</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 进程线程协程(4)--multiprocessing模块(中)]]></title>
      <url>https://magiceses.github.io/2019/10/11/python-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B-4.1/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">生活的精彩，不只是轰轰烈烈，有的人你看了一辈子却忽视了一辈子，有的人你只看了一眼却影响了你的一生，有的人热情的为你而快乐却被你冷落，有的人让你拥有短暂的快乐却得到你思绪的连锁，有的人一个无心的表情却成了永恒的思念，这就是人生。<br></p>

<p>上篇博文介绍了Python的multiprocessing模块创建进程Process 类,进程间通信,进程间的同步三个部分，下面接着介绍学习进程共享。</p>
<h2 id="内存共享"><a href="#内存共享" class="headerlink" title="内存共享"></a>内存共享</h2><p>在多进程情况下，由于每个进程有自己独立的内存空间，怎样能实现内存共享呢？multiprocessing模块提供了Value, Array，这两个是函数，详细定义在sharedctypes.py里,有兴趣的可以去看看（等了解了ctypes模块后回头再分享下我的理解，今天就先放放）</p>
<a id="more"></a>
<h3 id="Value"><a href="#Value" class="headerlink" title="Value"></a><strong>Value</strong></h3><p>Value的初始化非常简单，直接类似Value(‘d’, 0.0)即可，具体构造方法如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiprocessing.Value(typecode_or_type, *args[,lock])。</span><br></pre></td></tr></table></figure>
<p>返回从共享内存中分配的一个ctypes 对象,其中typecode_or_type定义了返回的类型。它要么是一个ctypes类型，要么是一个代表ctypes类型的code;</p>
<p>ctypes是Python的一个外部函数库，它提供了和C语言兼任的数据类型，可以调用DLLs或者共享库的函数，能被用作在python中包裹这些库;</p>
<p>*args是传递给ctypes的构造参数。</p>
<p>对于共享<strong>整数</strong>或者<strong>单个字符</strong>，初始化比较简单，参照下图映射关系：</p>
<p><img src="/images/python-process-1.png" alt="image-20211001130628878"></p>
<p>比如整数1，可用Value(‘h’,1)</p>
<p>如果共享的是<strong>字符串</strong>，则在上表是找不到映射关系的，就是没有对应的Type code可用。所以我们需要使用原始的ctype类型，对应关系如下：</p>
<p><img src="/images/python-process-2.png" alt="image-20211001130557103"></p>
<p>比如上面的Value(‘h’,1)也可以用Value(c_short,1)，字符串的话，可以用Value(c_char_p,”hello”)，很好理解的。</p>
<p>它返回的是个对象，所以，它也有一些属性和方法，而返回的对象是基于<strong>SynchronizedBase</strong>类，该类的定义如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynchronizedBase</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, obj, lock=None)</span>:</span></span><br><span class="line">        self._obj = obj</span><br><span class="line">        self._lock = lock <span class="keyword">or</span> RLock()</span><br><span class="line">        self.acquire = self._lock.acquire</span><br><span class="line">        self.release = self._lock.release</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        assert_spawning(self)</span><br><span class="line">        <span class="keyword">return</span> synchronized, (self._obj, self._lock)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_obj</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._obj</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_lock</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._lock</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;%s wrapper for %s&gt;'</span> % (type(self).__name__, self._obj)</span><br></pre></td></tr></table></figure>
<p>所以它的属性和方法有：</p>
<ul>
<li>value：获取值;</li>
<li>get_lock()：获取锁对象;</li>
<li>acquire/release：参考RLock对象的acquire方法，release方法，是一样的，一个是获取锁，一个是释放锁。很好理解的。</li>
</ul>
<p>下面举个例子来体会一下这些方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Value,Process</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        val.value += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">v = Value(<span class="string">'i'</span>,<span class="number">0</span>)</span><br><span class="line">p_list = [Process(target=fun,args=(v,)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> p_list:</span><br><span class="line">    p.start()</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> p_list:</span><br><span class="line">    p.join()</span><br><span class="line"><span class="keyword">print</span> v.value</span><br></pre></td></tr></table></figure>
<p>上述代码是多个进程修改v值，我们期待它输出的是100，但是实际上并输出的并不是100，Value的构造函数默认的lock是True，它会创建一个锁对象用于同步访问控制，这就容易造成一个错误的意识，认为Value在多进程中是安全的，但实际上并不是，要想真正的控制同步访问，需要实现获取这个锁。所以需要修改fun()函数。如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">with</span> v.get_lock():</span><br><span class="line">            val.value += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>或者如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">if</span> v.acquire():</span><br><span class="line">            val.value += <span class="number">1</span></span><br><span class="line">        v.release()</span><br></pre></td></tr></table></figure>
<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a><strong>Array</strong></h3><p>有了上面的基础，这个就比较好理解了，它返回从共享内存分配的ctypes数组，原型如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiprocessing.Array(typecode_or_type, size_or_initializer, *,lock=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<p>ypecode_or_type确定返回数组的元素的类型：它是一个ctypes类型或一个字符类型代码类型的<strong>数组</strong>模块使用的类型。</p>
<p>size_or_initializer：如果它是一个整数，那么它确定数组的长度，并且数组将被初始化为零。否则，size_or_initializer是用于初始化数组的序列，其长度决定数组的长度。</p>
<p>如果关键字参数中有lock的话，lock为True，则会创建一个新的锁对象，以同步对该值的访问。如果lock是Lock或RLock对象，那么它将用于同步对该值的访问。如果lock是False，那么对返回的对象的访问不会被锁自动保护，因此它不一定是“进程安全的”。</p>
<p>它返回值的属性和方法同Value差不多，有兴趣的可以自己写代码试试，在此不举例子。</p>
<h2 id="服务器进程"><a href="#服务器进程" class="headerlink" title="服务器进程"></a>服务器进程</h2><p>通过Manager()返回的一个manager对象控制一个服务器进程，它保持住Python对象并允许其它进程使用代理操作它们。同时它用起来很方便，而且支持本地和远程内存共享。</p>
<p>Manager()返回的manager支持的类型有list, dict, Namespace, Lock, RLock, Semaphore, BoundedSemaphore, Condition, Event, Queue, Value和Array。</p>
<p>该部分的实现在managers.py文件里，Manager()的定义很简单，如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Manager</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Returns a manager associated with a running server process</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The managers methods such as `Lock()`, `Condition()` and `Queue()`</span></span><br><span class="line"><span class="string">    can be used to create shared objects.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> SyncManager</span><br><span class="line">    m = SyncManager()</span><br><span class="line">    m.start()</span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>
<p>它返回一个已经启动的SyncManager对象，管理器进程将在垃圾收集或其父进程退出时立即关闭。SyncManager继承自BaseManager。BaseManager的定义也在managers.py文件里，有兴趣的可以看看，初始化如下：BaseManager([address[, authkey]])</p>
<p>address：是管理器进程侦听新连接的地址。 如果地址是无，则选择任意一个;</p>
<p>authkey：是将用于检查到服务器进程的传入连接的有效性的认证密钥。 如果authkey是None，那么使用当前进程current_process()的authkey； 否则使用的authkey，它必须是字符串;</p>
<p>一旦创建BaseManager对象，应调用start()或get_server()。serve_forever()以确保管理器对象引用已启动的管理器进程。</p>
<p>BaseManager对象的方法和属性有：</p>
<p><strong>start([initializer [，initargs]])</strong>：启动子过程以启动管理器。 如果初始化程序不是None，那么子程序在启动时会调用initializer(*initargs);</p>
<p><strong>get_server()：</strong> 返回一个Server对象，它表示在Manager控制下的实际服务器。 Server对象支持serve_forever()方法，Server对象也定义在managers.py文件里，该类的作用用因为解释就是“Server class which runs in a process controlled by a manager object”，有兴趣的可以去看看，了解下;</p>
<p><strong>connect()：</strong>将本地管理器对象连接到远程管理器进程;</p>
<p><strong>shutdown()：</strong>停止管理器在使用的进程。这仅在用start（）已启动服务器进程时可用，可以被多次调用;</p>
<p><strong>register(typeid [，callable [，proxytype [，exposed [，method_to_typeid [，create_method]]]]])：</strong>可以用于向管理器类注册类型或可调用的类方法。</p>
<ul>
<li>typeid是用于标识特定类型的共享对象的“类型标识符”。这必须是字符串;</li>
<li>callable是用于为该类型标识符创建可调用的对象。如果将使用from_address（）类方法创建管理器实例，或者如果create_method参数为False，那么这可以保留为None;</li>
<li>proxytype是BaseProxy的子类，BaseProxy使用typeid来创建共享对象的代理。如果为None，那么会自动创建一个代理类;</li>
<li>exposed用于指定一个序列的方法名称，该名称可以允许使用typeid的代理对象BaseProxy的<code>_callmethod()</code>方法来访问,(如果exposed为None，则使用<code>proxytype._exposed_</code>，如果存在）。在没有指定公开列表的情况下，将可以访问共享对象的所有“公共方法”。（这里的“公共方法”是指具有<code>__call __()</code>方法并且名称不以“_”开头的任何属性。）</li>
<li>method_to_typeid是一个映射，用于指定返回代理的那些公开方法的返回类型。它将方法名映射到typeid字符串。 （如果method_to_typeid为None，则使用proxytype._method_to<em>typeid</em>，如果存在）。如果方法的名称不是此映射的键，或者映射为None，则方法返回的对象将按值复制;</li>
<li>create_method确定是否应该使用名称typeid创建一个方法，该方法可以用于告诉服务器进程创建一个新的共享对象并为其返回一个代理。默认情况下为True;</li>
<li><strong>address：</strong>管理器使用的地址</li>
<li><strong>join(timeout=None)：</strong>阻塞</li>
</ul>
<p>现在可以来看看，SyncManager类的定义了，其实很简单。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncManager</span><span class="params">(BaseManager)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Subclass of `BaseManager` which supports a number of shared object types.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The types registered are those intended for the synchronization</span></span><br><span class="line"><span class="string">    of threads, plus `dict`, `list` and `Namespace`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The `multiprocessing.Manager()` function creates started instances of</span></span><br><span class="line"><span class="string">    this class.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">SyncManager.register(<span class="string">'Queue'</span>, Queue.Queue)</span><br><span class="line">SyncManager.register(<span class="string">'JoinableQueue'</span>, Queue.Queue)</span><br><span class="line">SyncManager.register(<span class="string">'Event'</span>, threading.Event, EventProxy)</span><br><span class="line">SyncManager.register(<span class="string">'Lock'</span>, threading.Lock, AcquirerProxy)</span><br><span class="line">SyncManager.register(<span class="string">'RLock'</span>, threading.RLock, AcquirerProxy)</span><br><span class="line">SyncManager.register(<span class="string">'Semaphore'</span>, threading.Semaphore, AcquirerProxy)</span><br><span class="line">SyncManager.register(<span class="string">'BoundedSemaphore'</span>, threading.BoundedSemaphore,</span><br><span class="line">                     AcquirerProxy)</span><br><span class="line">SyncManager.register(<span class="string">'Condition'</span>, threading.Condition, ConditionProxy)</span><br><span class="line">SyncManager.register(<span class="string">'Pool'</span>, Pool, PoolProxy)</span><br><span class="line">SyncManager.register(<span class="string">'list'</span>, list, ListProxy)</span><br><span class="line">SyncManager.register(<span class="string">'dict'</span>, dict, DictProxy)</span><br><span class="line">SyncManager.register(<span class="string">'Value'</span>, Value, ValueProxy)</span><br><span class="line">SyncManager.register(<span class="string">'Array'</span>, Array, ArrayProxy)</span><br><span class="line">SyncManager.register(<span class="string">'Namespace'</span>, Namespace, NamespaceProxy)</span><br><span class="line"></span><br><span class="line"><span class="comment"># types returned by methods of PoolProxy</span></span><br><span class="line">SyncManager.register(<span class="string">'Iterator'</span>, proxytype=IteratorProxy, create_method=<span class="keyword">False</span>)</span><br><span class="line">SyncManager.register(<span class="string">'AsyncResult'</span>, create_method=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure>
<p>上面的Queue()、Event()等等都是该类的方法，比如Event()，它是创建一个共享的threading.Event对象并返回一个代理。当然除了上面这些外，其实我们也可以用register()向管理器注册新的类型，如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MathsClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyManager</span><span class="params">(BaseManager)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">MyManager.register(<span class="string">'Maths'</span>, MathsClass)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    manager = MyManager()</span><br><span class="line">    manager.start()</span><br><span class="line">    maths = manager.Maths()</span><br><span class="line">    <span class="keyword">print</span> maths.add(<span class="number">4</span>, <span class="number">3</span>)         <span class="comment"># prints 7</span></span><br><span class="line">    <span class="keyword">print</span> maths.mul(<span class="number">7</span>, <span class="number">8</span>)         <span class="comment"># prints 56</span></span><br></pre></td></tr></table></figure>
<p>下面看个简单的例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(ns)</span>:</span></span><br><span class="line">    ns.x.append(<span class="number">1</span>)</span><br><span class="line">    ns.y.append(<span class="string">'x'</span>)</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    manager = multiprocessing.Manager()</span><br><span class="line">    ns = manager.Namespace()</span><br><span class="line">    ns.x = []</span><br><span class="line">    ns.y = []</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"before"</span>,ns</span><br><span class="line">    p = multiprocessing.Process(target=fun,args=(ns))</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"after"</span>,ns</span><br></pre></td></tr></table></figure>
<p>本程序的目的是想得到x=[1],y=[‘x’],但是没有得到，这是为什么呢？这是因为manager对象仅能传播一个可变对象本身所做的修改，如果一个manager.list()对象，管理列表本身的任何更改会传播到所有其他进程，但是如果容器对象内部还包括可修改对象，则内部可修改对象的任何更改都不会传播到其他进程。上面例子中，ns是一个容器，它本身的改变会传播到所有进程，但是它的内部对象x,y是可变对象，它们的改变不会传播到其他进程，所有没有得到我们所要的结果。可以作如下修改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(ns,x,y)</span>:</span></span><br><span class="line">    x.append(<span class="number">1</span>)</span><br><span class="line">    y.append(<span class="string">'x'</span>)</span><br><span class="line">    ns.x = x</span><br><span class="line">    ns.y = y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    manager = multiprocessing.Manager()</span><br><span class="line">    ns = manager.Namespace()</span><br><span class="line">    ns.x = []</span><br><span class="line">    ns.y = []</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"before"</span>,ns</span><br><span class="line">    p = multiprocessing.Process(target=fun,args=(ns,ns.x,ns.y,))</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"after"</span>,ns</span><br></pre></td></tr></table></figure>
<p>这个例子比较简单，以后碰到好的例子，再跟大家分享。另外Python官方手册上有很多帮助大家理解这些概念的例子，有兴趣的可以去看看，今天就写到这儿了，不正之处欢迎批评指正！下篇博文介绍进程池和线程池。</p>
<p>原文：<a href="https://blog.51cto.com/u_11026142/1874807" target="_blank" rel="external">https://blog.51cto.com/u_11026142/1874807</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 进程线程协程(0)--简单使用]]></title>
      <url>https://magiceses.github.io/2019/10/08/python-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B-0/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">生活从未变得容易，只不过是我们变得更加坚强，你若不想做，总会找到借口，你若想做，总会找到方法，输不起的人，往往也赢不了人，当你勇敢跨出第一步的时候你就已经赢了，犹豫一千次都不如实践一次，所有的努力和付出一定会有收获。<br></p>

<p>什么是线程？<br>为什么要使用多线程？<br>GIL 全局解释器<br><a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock,Thread</span><br><span class="line"><span class="keyword">import</span> time,os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">                                      python多线程详解</span></span><br><span class="line"><span class="string">      什么是线程？</span></span><br><span class="line"><span class="string">      线程也叫轻量级进程，是操作系统能够进行运算调度的最小单位，它被包涵在进程之中，是进程中的实际运作单位。</span></span><br><span class="line"><span class="string">      线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其他线程共享进程所</span></span><br><span class="line"><span class="string">      拥有的全部资源。一个线程可以创建和撤销另一个线程，同一个进程中的多个线程之间可以并发执行</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    为什么要使用多线程？</span></span><br><span class="line"><span class="string">    线程在程序中是独立的、并发的执行流。与分隔的进程相比，进程中线程之间的隔离程度要小，它们共享内存、文件句柄</span></span><br><span class="line"><span class="string">    和其他进程应有的状态。</span></span><br><span class="line"><span class="string">    因为线程的划分尺度小于进程，使得多线程程序的并发性高。进程在执行过程之中拥有独立的内存单元，而多个线程共享</span></span><br><span class="line"><span class="string">    内存，从而极大的提升了程序的运行效率。</span></span><br><span class="line"><span class="string">    线程比进程具有更高的性能，这是由于同一个进程中的线程都有共性，多个线程共享一个进程的虚拟空间。线程的共享环境</span></span><br><span class="line"><span class="string">    包括进程代码段、进程的共有数据等，利用这些共享的数据，线程之间很容易实现通信。</span></span><br><span class="line"><span class="string">    操作系统在创建进程时，必须为改进程分配独立的内存空间，并分配大量的相关资源，但创建线程则简单得多。因此，使用多线程</span></span><br><span class="line"><span class="string">    来实现并发比使用多进程的性能高得要多。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    总结起来，使用多线程编程具有如下几个优点：</span></span><br><span class="line"><span class="string">    进程之间不能共享内存，但线程之间共享内存非常容易。</span></span><br><span class="line"><span class="string">    操作系统在创建进程时，需要为该进程重新分配系统资源，但创建线程的代价则小得多。因此使用多线程来实现多任务并发执行比使用多进程的效率高</span></span><br><span class="line"><span class="string">    python语言内置了多线程功能支持，而不是单纯地作为底层操作系统的调度方式，从而简化了python的多线程编程。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    普通创建方式</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># def run(n):</span></span><br><span class="line"><span class="comment">#     print('task',n)</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#     print('2s')</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#     print('1s')</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#     print('0s')</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__ == '__main__':</span></span><br><span class="line"><span class="comment">#     t1 = threading.Thread(target=run,args=('t1',))     # target是要执行的函数名（不是函数），args是函数对应的参数，以元组的形式存在</span></span><br><span class="line"><span class="comment">#     t2 = threading.Thread(target=run,args=('t2',))</span></span><br><span class="line"><span class="comment">#     t1.start()</span></span><br><span class="line"><span class="comment">#     t2.start()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    自定义线程：继承threading.Thread来定义线程类，其本质是重构Thread类中的run方法</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># class MyThread(threading.Thread):</span></span><br><span class="line"><span class="comment">#     def __init__(self,n):</span></span><br><span class="line"><span class="comment">#         super(MyThread,self).__init__()   #重构run函数必须写</span></span><br><span class="line"><span class="comment">#         self.n = n</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def run(self):</span></span><br><span class="line"><span class="comment">#         print('task',self.n)</span></span><br><span class="line"><span class="comment">#         time.sleep(1)</span></span><br><span class="line"><span class="comment">#         print('2s')</span></span><br><span class="line"><span class="comment">#         time.sleep(1)</span></span><br><span class="line"><span class="comment">#         print('1s')</span></span><br><span class="line"><span class="comment">#         time.sleep(1)</span></span><br><span class="line"><span class="comment">#         print('0s')</span></span><br><span class="line"><span class="comment">#         time.sleep(1)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__ == '__main__':</span></span><br><span class="line"><span class="comment">#     t1 = MyThread('t1')</span></span><br><span class="line"><span class="comment">#     t2 = MyThread('t2')</span></span><br><span class="line"><span class="comment">#     t1.start()</span></span><br><span class="line"><span class="comment">#     t2.start()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    守护线程</span></span><br><span class="line"><span class="string">    下面这个例子，这里使用setDaemon(True)把所有的子线程都变成了主线程的守护线程，</span></span><br><span class="line"><span class="string">    因此当主线程结束后，子线程也会随之结束，所以当主线程结束后，整个程序就退出了。</span></span><br><span class="line"><span class="string">    所谓’线程守护’，就是主线程不管该线程的执行情况，只要是其他子线程结束且主线程执行完毕，主线程都会关闭。也就是说:主线程不等待该守护线程的执行完再去关闭。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># def run(n):</span></span><br><span class="line"><span class="comment">#     print('task',n)</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#     print('3s')</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#     print('2s')</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#     print('1s')</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__ == '__main__':</span></span><br><span class="line"><span class="comment">#     t=threading.Thread(target=run,args=('t1',))</span></span><br><span class="line"><span class="comment">#     t.setDaemon(True)</span></span><br><span class="line"><span class="comment">#     t.start()</span></span><br><span class="line"><span class="comment">#     print('end')</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    通过执行结果可以看出，设置守护线程之后，当主线程结束时，子线程也将立即结束，不再执行</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    主线程等待子线程结束</span></span><br><span class="line"><span class="string">    为了让守护线程执行结束之后，主线程再结束，我们可以使用join方法，让主线程等待子线程执行</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># def run(n):</span></span><br><span class="line"><span class="comment">#     print('task',n)</span></span><br><span class="line"><span class="comment">#     time.sleep(2)</span></span><br><span class="line"><span class="comment">#     print('5s')</span></span><br><span class="line"><span class="comment">#     time.sleep(2)</span></span><br><span class="line"><span class="comment">#     print('3s')</span></span><br><span class="line"><span class="comment">#     time.sleep(2)</span></span><br><span class="line"><span class="comment">#     print('1s')</span></span><br><span class="line"><span class="comment"># if __name__ == '__main__':</span></span><br><span class="line"><span class="comment">#     t=threading.Thread(target=run,args=('t1',))</span></span><br><span class="line"><span class="comment">#     t.setDaemon(True)    #把子线程设置为守护线程，必须在start()之前设置</span></span><br><span class="line"><span class="comment">#     t.start()</span></span><br><span class="line"><span class="comment">#     t.join()     #设置主线程等待子线程结束</span></span><br><span class="line"><span class="comment">#     print('end')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    多线程共享全局变量</span></span><br><span class="line"><span class="string">    线程时进程的执行单元，进程时系统分配资源的最小执行单位，所以在同一个进程中的多线程是共享资源的</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># g_num = 100</span></span><br><span class="line"><span class="comment"># def work1():</span></span><br><span class="line"><span class="comment">#     global  g_num</span></span><br><span class="line"><span class="comment">#     for i in range(3):</span></span><br><span class="line"><span class="comment">#         g_num+=1</span></span><br><span class="line"><span class="comment">#     print('in work1 g_num is : %d' % g_num)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def work2():</span></span><br><span class="line"><span class="comment">#     global g_num</span></span><br><span class="line"><span class="comment">#     print('in work2 g_num is : %d' % g_num)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__ == '__main__':</span></span><br><span class="line"><span class="comment">#     t1 = threading.Thread(target=work1)</span></span><br><span class="line"><span class="comment">#     t1.start()</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#     t2=threading.Thread(target=work2)</span></span><br><span class="line"><span class="comment">#     t2.start()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">        由于线程之间是进行随机调度，并且每个线程可能只执行n条执行之后，当多个线程同时修改同一条数据时可能会出现脏数据，</span></span><br><span class="line"><span class="string">    所以出现了线程锁，即同一时刻允许一个线程执行操作。线程锁用于锁定资源，可以定义多个锁，像下面的代码，当需要独占</span></span><br><span class="line"><span class="string">    某一个资源时，任何一个锁都可以锁定这个资源，就好比你用不同的锁都可以把这个相同的门锁住一样。</span></span><br><span class="line"><span class="string">        由于线程之间是进行随机调度的，如果有多个线程同时操作一个对象，如果没有很好地保护该对象，会造成程序结果的不可预期，</span></span><br><span class="line"><span class="string">    我们因此也称为“线程不安全”。</span></span><br><span class="line"><span class="string">        为了防止上面情况的发生，就出现了互斥锁（Lock）</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># def work():</span></span><br><span class="line"><span class="comment">#     global n</span></span><br><span class="line"><span class="comment">#     lock.acquire()</span></span><br><span class="line"><span class="comment">#     temp = n</span></span><br><span class="line"><span class="comment">#     time.sleep(0.1)</span></span><br><span class="line"><span class="comment">#     n = temp-1</span></span><br><span class="line"><span class="comment">#     lock.release()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__ == '__main__':</span></span><br><span class="line"><span class="comment">#     lock = Lock()</span></span><br><span class="line"><span class="comment">#     n = 100</span></span><br><span class="line"><span class="comment">#     l = []</span></span><br><span class="line"><span class="comment">#     for i in range(100):</span></span><br><span class="line"><span class="comment">#         p = Thread(target=work)</span></span><br><span class="line"><span class="comment">#         l.append(p)</span></span><br><span class="line"><span class="comment">#         p.start()</span></span><br><span class="line"><span class="comment">#     for p in l:</span></span><br><span class="line"><span class="comment">#         p.join()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    递归锁：RLcok类的用法和Lock类一模一样，但它支持嵌套，在多个锁没有释放的时候一般会使用RLock类</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># def func(lock):</span></span><br><span class="line"><span class="comment">#     global gl_num</span></span><br><span class="line"><span class="comment">#     lock.acquire()</span></span><br><span class="line"><span class="comment">#     gl_num += 1</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#     print(gl_num)</span></span><br><span class="line"><span class="comment">#     lock.release()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__ == '__main__':</span></span><br><span class="line"><span class="comment">#     gl_num = 0</span></span><br><span class="line"><span class="comment">#     lock = threading.RLock()</span></span><br><span class="line"><span class="comment">#     for i in range(10):</span></span><br><span class="line"><span class="comment">#         t = threading.Thread(target=func,args=(lock,))</span></span><br><span class="line"><span class="comment">#         t.start()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    信号量（BoundedSemaphore类）</span></span><br><span class="line"><span class="string">    互斥锁同时只允许一个线程更改数据，而Semaphore是同时允许一定数量的线程更改数据，比如厕所有3个坑，</span></span><br><span class="line"><span class="string">    那最多只允许3个人上厕所，后面的人只能等里面有人出来了才能再进去</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># def run(n,semaphore):</span></span><br><span class="line"><span class="comment">#     semaphore.acquire()   #加锁</span></span><br><span class="line"><span class="comment">#     time.sleep(3)</span></span><br><span class="line"><span class="comment">#     print('run the thread:%s\n' % n)</span></span><br><span class="line"><span class="comment">#     semaphore.release()    #释放</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__== '__main__':</span></span><br><span class="line"><span class="comment">#     num=0</span></span><br><span class="line"><span class="comment">#     semaphore = threading.BoundedSemaphore(5)   #最多允许5个线程同时运行</span></span><br><span class="line"><span class="comment">#     for i in range(22):</span></span><br><span class="line"><span class="comment">#         t = threading.Thread(target=run,args=('t-%s' % i,semaphore))</span></span><br><span class="line"><span class="comment">#         t.start()</span></span><br><span class="line"><span class="comment">#     while threading.active_count() !=1:</span></span><br><span class="line"><span class="comment">#         pass</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         print('----------all threads done-----------')</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    python线程的事件用于主线程控制其他线程的执行，事件是一个简单的线程同步对象，其主要提供以下的几个方法：</span></span><br><span class="line"><span class="string">        clear将flag设置为 False</span></span><br><span class="line"><span class="string">        set将flag设置为 True</span></span><br><span class="line"><span class="string">        is_set判断是否设置了flag</span></span><br><span class="line"><span class="string">        wait会一直监听flag，如果没有检测到flag就一直处于阻塞状态</span></span><br><span class="line"><span class="string">    事件处理的机制：全局定义了一个Flag，当Flag的值为False，那么event.wait()就会阻塞，当flag值为True，</span></span><br><span class="line"><span class="string">    那么event.wait()便不再阻塞</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">event = threading.Event()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lighter</span><span class="params">()</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    event.set()         <span class="comment">#初始者为绿灯</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="number">5</span> &lt; count &lt;=<span class="number">10</span>:</span><br><span class="line">            event.clear()  <span class="comment">#红灯，清除标志位</span></span><br><span class="line">            print(<span class="string">"\33[41;lmred light is on...\033[0m]"</span>)</span><br><span class="line">        <span class="keyword">elif</span> count &gt; <span class="number">10</span>:</span><br><span class="line">            event.set()    <span class="comment">#绿灯，设置标志位</span></span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'\33[42;lmgreen light is on...\033[0m'</span>)</span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">car</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> event.is_set():     <span class="comment">#判断是否设置了标志位</span></span><br><span class="line">            print(<span class="string">'[%s] running.....'</span>%name)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[%s] sees red light,waiting...'</span>%name)</span><br><span class="line">            event.wait()</span><br><span class="line">            print(<span class="string">'[%s] green light is on,start going...'</span>%name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># startTime = time.time()</span></span><br><span class="line">light = threading.Thread(target=lighter,)</span><br><span class="line">light.start()</span><br><span class="line"></span><br><span class="line">car = threading.Thread(target=car,args=(<span class="string">'MINT'</span>,))</span><br><span class="line">car.start()</span><br><span class="line">endTime = time.time()</span><br><span class="line"><span class="comment"># print('用时：',endTime-startTime)</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">                           GIL  全局解释器</span></span><br><span class="line"><span class="string">        在非python环境中，单核情况下，同时只能有一个任务执行。多核时可以支持多个线程同时执行。但是在python中，无论有多少个核</span></span><br><span class="line"><span class="string">        同时只能执行一个线程。究其原因，这就是由于GIL的存在导致的。</span></span><br><span class="line"><span class="string">        GIL的全程是全局解释器，来源是python设计之初的考虑，为了数据安全所做的决定。某个线程想要执行，必须先拿到GIL，我们可以</span></span><br><span class="line"><span class="string">        把GIL看做是“通行证”，并且在一个python进程之中，GIL只有一个。拿不到线程的通行证，并且在一个python进程中，GIL只有一个，</span></span><br><span class="line"><span class="string">        拿不到通行证的线程，就不允许进入CPU执行。GIL只在cpython中才有，因为cpython调用的是c语言的原生线程，所以他不能直接操</span></span><br><span class="line"><span class="string">        作cpu，而只能利用GIL保证同一时间只能有一个线程拿到数据。而在pypy和jpython中是没有GIL的</span></span><br><span class="line"><span class="string">        python在使用多线程的时候，调用的是c语言的原生过程。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">                            python针对不同类型的代码执行效率也是不同的</span></span><br><span class="line"><span class="string">        1、CPU密集型代码（各种循环处理、计算等），在这种情况下，由于计算工作多，ticks技术很快就会达到阀值，然后出发GIL的</span></span><br><span class="line"><span class="string">        释放与再竞争（多个线程来回切换当然是需要消耗资源的），所以python下的多线程对CPU密集型代码并不友好。</span></span><br><span class="line"><span class="string">        2、IO密集型代码（文件处理、网络爬虫等设计文件读写操作），多线程能够有效提升效率（单线程下有IO操作会进行IO等待，</span></span><br><span class="line"><span class="string">        造成不必要的时间浪费，而开启多线程能在线程A等待时，自动切换到线程B，可以不浪费CPU的资源，从而能提升程序的执行</span></span><br><span class="line"><span class="string">        效率）。所以python的多线程对IO密集型代码比较友好。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    主要要看任务的类型，我们把任务分为I/O密集型和计算密集型，而多线程在切换中又分为I/O切换和时间切换。如果任务属于是I/O密集型，</span></span><br><span class="line"><span class="string">    若不采用多线程，我们在进行I/O操作时，势必要等待前面一个I/O任务完成后面的I/O任务才能进行，在这个等待的过程中，CPU处于等待</span></span><br><span class="line"><span class="string">    状态，这时如果采用多线程的话，刚好可以切换到进行另一个I/O任务。这样就刚好可以充分利用CPU避免CPU处于闲置状态，提高效率。但是</span></span><br><span class="line"><span class="string">    如果多线程任务都是计算型，CPU会一直在进行工作，直到一定的时间后采取多线程时间切换的方式进行切换线程，此时CPU一直处于工作状态，</span></span><br><span class="line"><span class="string">    此种情况下并不能提高性能，相反在切换多线程任务时，可能还会造成时间和资源的浪费，导致效能下降。这就是造成上面两种多线程结果不能的解释。</span></span><br><span class="line"><span class="string">结论:I/O密集型任务，建议采取多线程，还可以采用多进程+协程的方式(例如:爬虫多采用多线程处理爬取的数据)；对于计算密集型任务，python此时就不适用了。</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="https://blog.51cto.com/u_11026142/category1.html" target="_blank" rel="external">python 相关知识总结</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 进程线程协程(1)--概念]]></title>
      <url>https://magiceses.github.io/2019/10/08/python-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B-1/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">年龄就像是验金石。人们到了一定的年龄之后，一类人变得越发有趣，一类人变得越发无聊。前者开始创造生活，后者开始被生活创造。不幸的是，大多数人偷懒，愿意把后半生的命运交给前半生的惯性。幸运的是，一小部分人开始有能力刹住边性，去重新定位方向。<br></p>

<p>最近的业余时间主要放在了学习Python线程、进程和协程里，第一次用python的多线程和多进程是在两个月前，当时只是简单的看了几篇博文然后就跟着用，没有仔细去研究，第一次用的感觉它们其实挺简单的，最近这段时间通过看书， 看Python 中文官方文档等等相关资料，发现并没有想想中的那么简单，很多知识点需要仔细去理解，Python线程、进程和协程应该是Python的高级用法。Python的高级用法有很多，看看Python 中文官方文档就知道了，当然有时间看看这些模块是怎么实现的对自己的提高是很有帮助的。选择了编程这个行业，就是要不断的学习、思考、归纳总结经验，路漫漫其修远兮，吾将上下而求索，希望能与各位共勉。接下来要花好几篇博文的篇幅来讲讲我学习线程、进程和协程的经验，有讲得不好的地方，希望大家批评指正。这篇博文主要讲讲与之有关的概念。</p>
<a id="more"></a>
<h2 id="线程与多线程"><a href="#线程与多线程" class="headerlink" title="线程与多线程"></a>线程与多线程</h2><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ul>
<li>线程，有时被称为轻量级进程(Lightweight Process，LWP），是程序执行流的最小单元；</li>
<li>一个标准的线程由线程ID，当前指令指针(PC），寄存器集合和堆栈组成。有了这些它能够记录自己运行到了什么地方，可以称为线程的上下文；</li>
<li>线程的运行可能被抢占(中断)或暂时的被挂起(也叫睡眠)让其它的线程运行，这叫做让步；</li>
<li>线程也有就绪、阻塞和运行三种基本状态。就绪状态是指线程具备运行的所有条件，逻辑上可以运行，在等待处理机；运行状态是指线程占有处理机正在运行；阻塞状态是指线程在等待一个事件（如某个信号量），逻辑上不可执行</li>
<li>线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不独立拥有系统资源，但它可与同属一个进程的其它线程共享该进程所拥有的全部资源。</li>
</ul>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul>
<li><p>每一个应用程序都至少有一个进程和一个线程。线程是程序中一个单一的顺序控制流程。在单个程序中同时运行多个线程完成不同的被划分成一块一块的工作，称为多线程；</p>
</li>
<li><p>很好理解，开发软件就是每个人或者每个小组负责一个模块，当所有人（组）相关的模块都编写完后，就开始合并代码，然后就测试，修复bug</p>
<p>除非代码依赖第方资源，否则在单处理器的机器上使用多线程，不会加速代码的执行速度，甚至会增加一些线程管理的开销；</p>
<p>实际上，在单处理器的系统中，每个线程会被安排成每次只运行一小会，然后就把CPU让出来，让其它的线程去运行。比如线程切换等等，这些都是要花费资源和时间的，所以在单CPU机器上使用多线程有时候不但感觉不到执行速度变快，反而变慢了；</p>
</li>
<li><p>多线程会从多处理器或者多核的机器上获益，它会在每个处理器上并行执行每个线程，从而提高执行速度；</p>
</li>
<li><p>线程之间可以共享运行结果。但是这样做有一定的危险，比如两个线程更新同一个数据，但是这两个线程运行的结果不一样，这叫做竞态条件，这个会造成竞争危害，会发生不可预测的结果。所以利用锁机制可以保护数据。</p>
</li>
</ul>
<h3 id="Python中的多线程"><a href="#Python中的多线程" class="headerlink" title="Python中的多线程"></a>Python中的多线程</h3><p>python的多线程并没有想象中的那么理想，是因为有一个叫GIL的东西在限制。那什么是GIL呢？GIL中文名叫全局解释器锁，是python虚拟机上用作<strong>互斥线程</strong>的一种机制，<strong>它的作用就是要保证在任何情况下虚拟机上只有一个线程被运行，而其它线程都处在等待GIL锁被释放的状态</strong>。所以它是个“伪多线程”，它的情况就跟上面说的在单处理器机器上运行多线程一样，不会加速代码的执行速度，甚至会增加一些线程管理的开销。</p>
<p>python虚拟机上多线程是按如下方式执行的：</p>
<ul>
<li>a、设置 GIL</li>
<li>b、切换到一个线程去运行；</li>
<li>c、运行指定数量的字节码指令或者线程主动让出控制(可以调用 time.sleep(0))；</li>
<li>d、把线程设置为睡眠状态；</li>
<li>e、解锁 GIL；</li>
<li>f、再次重复以上所有步骤</li>
</ul>
<p>在调用外部代码(如 C/C++扩展函数)的时候，GIL将会被锁定，直到这个函数结束为止(由于在这期间没有Python的字节码被运行，所以不会做线程切换)。比如带有I/O操作(会调用内建的操作系统C代码，I/O操作就是输入输出操作，要想详细了解它可以参考其它资料)的线程，GIL会在这个I/O操作被调用之前就被释放。</p>
<p>对于纯计算的程序，没有I/O操作，解释器会根据sys.ssetcheckinterval()的设置来自动进行线程间的切换，默认情况下是每隔100个时钟就会释放GIL锁从而轮换到其它线程执行。</p>
<p>那为什么Python中还要在多线程中引入GIL呢？是为了<strong>保证对虚拟机内部共享资源访问的互斥性</strong>。python对象的对象管理与引用计数器密切相关，当计数器的值为0，该对象会被垃圾回收器回收(不了解这块知识的可以在网上查找相关资料或者看《Python源码解析》这本书)，当撤销对一个对象的引用时，python解释器会对该对象以及其计数器管理进行以下两步操作：</p>
<ul>
<li>a、使引用计数器减1</li>
<li>b、判断计数器的值是否为0，如果为0，则销毁该对象</li>
</ul>
<p>假设现在有A、B两个线程同时引用同一个对象obj，这时obj对象的引用计数器的值就为2,如果现在A线程打算撤销对obj的引用，当执行完第一步”使引用计数器值减1“的时候，由于存在多线程调度机制，A恰好在这个关键点被挂起了，而进入了B线程执行的状态，如果这个时候B线程也是要撤销对obj的引用，并且完成了上面的a,b两个步骤，这时obj的引用计数器就是0了，obj对象就被销毁了，内存被释放出来了，麻烦就可能出现了，当A线程再次被唤醒时，它肯定会接着执行上面的b步骤，结果发现已经面目全非了，那么其操作结果完全未知。所以引入了GIL，<strong>保证对虚拟机内部共享资源访问的互斥性。</strong></p>
<p>GIL的引入使多线程不能在多核系统中发挥优势，但也带来了一些好处，就是大大简化了Python线程中共享资源的管理。不过Python提供了其它方式绕过了GIL的局限性来充分利用多核的计算能力，比如多进程multiprocessing模块、C语言扩展方式、ctypes库等等。</p>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>进程（有时被称为重量级进程）是程序的一次执行。每个进程都有自己的地址空间、内存、数据栈以及其它记录其运行轨迹的辅助数据。操作系统管理在其上运行的所有进程，并为这些进程公平地分配时间。进程也可以通过fork和spawn操作来完成其它的任务，不过各个进程有自己的内存空间、数据栈等，所以只能使用进程间通讯（IPC），而不能直接共享信息。</p>
<h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><ul>
<li>协程是一种用户级的轻量级线程，不同于线程的地方在于协程不是操作系统进行切换，而是由程序员编码进行切换的，也就是说切换是由程序员控制的，这样就没有了线程所谓的安全问题；</li>
<li>协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈。</li>
</ul>
<p>python里面怎么使用协程？答案是使用gevent模块。使用协程，可以不受线程开销的限制。所以最推荐的方法，是多进程+协程（可以看作是每个进程里都是单线程，而这个单线程是协程化的）多进程+协程下，避开了CPU切换的开销，又能把多个CPU充分利用起来。</p>
<p>原文： <a href="https://blog.51cto.com/u_11026142/1864799" target="_blank" rel="external">Python：线程、进程与协程</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 进程线程协程(2)--threading模块]]></title>
      <url>https://magiceses.github.io/2019/10/08/python-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B-2/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">工作遇到挫折，便退缩，说难；生活遇到困难，便抱怨，说苦；总是怨天尤人，羡慕别人的成就，悲观于自己的路。其实工作不如意，慢慢来，因为经验需要累积；生活不开心，别悲观，总有悲欢离合。别人今天的成功，是他的过去所成就。我们今天可能不如意，但这不如意可以磨砺我们，我们年轻，我们还有未来。<br></p>

<p>简介</p>
<p>上一篇博文介绍了Python中线程、进程与协程的基本概念，通过这几天的学习总结，下面来讲讲Python的threading模块。首先来看看threading模块有哪些方法和类吧。</p>
<a id="more"></a>
<h3 id="Install-the-gulp-command"><a href="#Install-the-gulp-command" class="headerlink" title="Install the gulp command"></a>Install the gulp command</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global gulp-cli</span><br></pre></td></tr></table></figure>
<h3 id="Install-gulp-in-your-devDependencies"><a href="#Install-gulp-in-your-devDependencies" class="headerlink" title="Install gulp in your devDependencies"></a>Install gulp in your devDependencies</h3><p>Run this command in your project directory<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp</span><br></pre></td></tr></table></figure></p>
<h2 id="Create-a-gulpfile"><a href="#Create-a-gulpfile" class="headerlink" title="Create a gulpfile"></a>Create a gulpfile</h2><p>Create a file called gulpfile.js in your project root with these contents:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// place code for your default tash here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="Test-it-out"><a href="#Test-it-out" class="headerlink" title="Test it out"></a>Test it out</h2><p>Run the gulp command in your projct directory:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure></p>
<h1 id="gulp-API"><a href="#gulp-API" class="headerlink" title="gulp API"></a>gulp API</h1><p>gulp 的核心 API 有四个：gulp.task() 、 gulp.src() 、 gulp.dest() 、 gulp.watch() 。<br><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md" target="_blank" rel="external">gulp API</a><br><a href="http://www.gulpjs.com.cn/docs/api/" target="_blank" rel="external">gulp API 中文</a></p>
<p>下面详细介绍一下：</p>
<h2 id="gulp-src"><a href="#gulp-src" class="headerlink" title="gulp.src()"></a>gulp.src()</h2><p>gulp.src() 可以读取你需要操作的文件，相比于 Grunt 主要以文件为媒介来运行它的工作流，gulp 使用的是 Nodejs 中的 <a href="https://nodejs.org/api/stream.html" target="_blank" rel="external">stream</a> 流，首先获取到需要的 stream ，然后可以通过 stream 的 pipe() 方法把流导入到你想要的地方，比如 gulp 的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写入到文件中。所以 gulp 是以 stream 为媒介的，它不需要频繁的生成临时文件，这也是 gulp 的速度比 Grunt 快的一个原因。再回到正题上来，gulp.src() 方法正是用来获取流的，但要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流（Vinyl files），这个虚拟文件对象中存储着原始文件的路径、文件名、内容等信息，这个我们暂时不用去深入理解，你只需简单的理解可以用这个方法来读取你需要操作的文件就行了。其语法为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.src(globs [, options])</span><br></pre></td></tr></table></figure></p>
<p>gulp 用到的 glob 的匹配规则以及一些文件匹配技巧。<br>gulp 内部使用了 node-glob 模块来实现其文件匹配功能。我们可以使用下面这些特殊的字符来匹配我们想要的文件：</p>
<ul>
<li><code>*</code> 匹配文件路径中的 0 个或多个字符，但不会匹配路径分配符，除非路径分隔符出现在末尾</li>
<li>** 匹配路径中的 0 个或多个目录及其子目录，需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。</li>
<li>? 匹配文件路径中的一个字符（不会匹配路径分隔符）</li>
<li>[…] 匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为 ^ 或 ! 时，则表示不匹配方括号中出现的其他字符中的任意一个，类似 js 正则表达式中的用法。</li>
<li>!(pattern|pattern|pattern) 匹配任何与括号中给定的任一模式都不匹配的</li>
<li>?(pattern|pattern|pattern) 匹配括号中给定的任一模式 0 次或 1 次，类似于 js 正则中的(pattern|pattern|pattern)?</li>
<li>+(pattern|pattern|pattern) 匹配括号中给定的任一模式至少 1 次，类似于正则中的(pattern|pattern|pattern)+</li>
<li><code>*(pattern|pattern|pattern)</code> 匹配括号中的给定的任一模式 0 次或多次，类似于 js 正则中的 <code>(pattern|pattern|pattern)*</code></li>
<li>@(pattern|pattern|pattern) 匹配括号中给定的任一模式 1 次，类似于 js 正则中的(pattern|pattern|pattern)</li>
</ul>
<p>下面以一系列例子来加深理解</p>
<ul>
<li><code>*</code> 能匹配 a.js 、 x.y 、 abc 、 abc/ ，但不能匹配 a/b.js</li>
<li><code>*.*</code> 能匹配 a.js 、 style.css 、 a.b 、 x.y</li>
<li><code>*/*/*.js</code> 能匹配 a/b/c.js 、 x/y/z.js ，不能匹配 a/b.js 、a/b/c/d.js</li>
<li>** 能匹配 abc 、 a/b.js 、 a/b/c.js 、 x/y/z 、x/y/z/a.b ，能用来匹配所有的目录和文件</li>
<li><em>*/</em>.js 能匹配 foo.js 、 a/foo.js 、 a/b/foo.js 、 a/b/c/foo.js</li>
<li>a/**/z 能匹配 a/z 、 a/b/z 、 a/b/c/z 、 a/d/g/h/r/z</li>
<li><code>a/**b/z</code> 能匹配 a/b/z 、 a/fb/z ，但不能匹配 a/x/gb/z ，因为只有单 ** 单独出现才能匹配多级目录</li>
<li>?.js 能匹配 a.js 、 b.js 、 c.js</li>
<li>a?? 能匹配 a.b 、 abc ，但不能匹配 ab/ ，因为它不会匹配路径分隔符</li>
<li>[xyz].js 只能匹配 x.js 、 y.js 、 z.js ，不会匹配 xy.js 、 xyz.js 等，整个中括号只代表一个字符</li>
<li>[^xyz].js 能匹配 a.js 、 b.js 、 c.js 等，不能匹配 x.js 、 y.js 、 z.js</li>
</ul>
<p>当有多种匹配模式时可以使用数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用数组的方式来匹配多种文件</span></span><br><span class="line">gulp.src([<span class="string">'js/*.js'</span>,<span class="string">'css/*.css'</span>,<span class="string">'*.html'</span>])</span><br></pre></td></tr></table></figure></p>
<p>使用数组的方式还有一个好处就是可以很方便的使用排除模式，在数组中的单个匹配模式前加上 ! 即是排除模式，它会在匹配的结果中排除这个匹配，要注意一点的是不能在数组中的第一个元素中使用排除模式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gulp.src([*.js,<span class="string">'!b*.js'</span>])  <span class="comment">//匹配所有 js 文件，但排除掉以 b 开头的 js 文件</span></span><br><span class="line">gulp.src([<span class="string">'!b*.js'</span>,*.js])  <span class="comment">//不会排除任何文件，因为排除模式不能出现在数组的第一个元素中</span></span><br></pre></td></tr></table></figure></p>
<p>此外，还可以使用展开模式。展开模式以花括号作为定界符，根据它里面的内容，会展开为多个模式，最后匹配的结果为所有展开的模式想加起来得到的结果。展开的例子如下：</p>
<ul>
<li>a{b,c}d 会展开为 abd 、 acd</li>
<li>a{b,}c 会展开为 abc 、 ac</li>
<li>a{0..3}d 会展开为 a0d 、 a1d 、 a2d 、 a3d </li>
<li>a{b,c{d,e}f}g 会展开为 abg 、 acdfg 、 acefg</li>
<li>a{b,c}d{e,f}g 会展开为 abdeg 、 acdeg 、 abdfg 、 abdeg</li>
</ul>
<h2 id="gulp-dest"><a href="#gulp-dest" class="headerlink" title="gulp.dest()"></a>gulp.dest()</h2><p>gulp.dest() 方法是用来写文件的，其语法为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.dest(path[, options])</span><br></pre></td></tr></table></figure></p>
<p><strong>path</strong> 为写入文件的路径<br>我们给 gulp.dest() 传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，所以生成的文件名是由导入到它的文件流决定的，即使我们给它传入一个带有文件名的路径参数，然后它也会把这个文件名当作是目录名，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line">gulp.src(<span class="string">"script/jquery.js"</span>).pipe(gulp.dest(<span class="string">"dist/foo.js"</span>));</span><br><span class="line"><span class="comment">// 最终生成的文件路径为 dist/foo.js/jquery.js ，而不是 dist/foo.js</span></span><br></pre></td></tr></table></figure></p>
<p>要想改变文件名，可以使用插件 gulp-rename<br>下面说说生成的文件路径与我们给 gulp.dest() 方法传入的路径参数之间的关系。<br>gulp.dest(path) 生成的文件路径是我们传入的 path 参数后面再加上 gulp.src() 中有通配符开始出现的那部分路径。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="comment">//有通配符开始出现的那部分路径为 **/*.js</span></span><br><span class="line">gulp.src(<span class="string">"script/**/*.js"</span>).pipe(gulp.dest(<span class="string">"dist"</span>));</span><br><span class="line"><span class="comment">//最后生成的文件路径为 dist/**/*.js</span></span><br><span class="line"><span class="comment">//如果 **/*.js 匹配到的文件为 jquery/jquery.js ，则生成的文件路径为 dist/jquery/jquery.js</span></span><br></pre></td></tr></table></figure></p>
<p>再举更多一点的例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gulp.src(<span class="string">"script/avalon/avalon.js"</span>).pipe(gulp.dest(<span class="string">"dist"</span>));</span><br><span class="line"><span class="comment">//没有通配符出现的情况，最后生成的文件路径为 dist/avalon.js</span></span><br><span class="line"></span><br><span class="line">gulp.src(<span class="string">"script/**/underscore.js"</span>).pipe(gulp.dest(<span class="string">"dist"</span>));</span><br><span class="line"><span class="comment">//有通配符开始出现的那部分路径为 **/underscore.js</span></span><br><span class="line"><span class="comment">//假设匹配到的文件为script/util/underscore.js</span></span><br><span class="line"><span class="comment">//则最后生成的文件路径为dist/util/underscore.js</span></span><br><span class="line"></span><br><span class="line">gulp.src(<span class="string">"script/*"</span>).pipe(gulp.dest(<span class="string">"dist"</span>));</span><br><span class="line"><span class="comment">//有通配符出现的那部分路径为*</span></span><br><span class="line"><span class="comment">//假设匹配到的文件为script/zepto.js</span></span><br><span class="line"><span class="comment">//则最后生成的文件路径为dist/zepto.js</span></span><br></pre></td></tr></table></figure></p>
<p>通过指定 gulp.src() 方法配置参数中的 base 属性，我们可以灵活的来改变 gulp.dest() 生成的文件路径。<br>当我们没有在 gulp.src() 方法配置参数中的 base 属性，base 的默认值为通配符开始出现之前那部分路径，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.src(<span class="string">"app/src/**/*.css"</span>) <span class="comment">//此时base的值为 app/src</span></span><br></pre></td></tr></table></figure></p>
<p>上面我们说的 gulp.dest() 所生成的文件路径的规则，其实也可以理解成，用我们给 gulp.dest() 传入的路径替换掉 gulp.src() 中的 base 路径，最终得到生成文件的路径。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.src(<span class="string">"app/src/**/*.css"</span>).pipe(gulp.dest(<span class="string">"dist"</span>));</span><br><span class="line"><span class="comment">//此时base的值为app/src，也就是说它的base路径为app/src</span></span><br><span class="line"><span class="comment">//设该模式匹配到了文件app/src/css/normal.css</span></span><br><span class="line"><span class="comment">//用dist替换掉base路径，最终得到dist/css/normal.css</span></span><br></pre></td></tr></table></figure></p>
<p>所以改变 base 路径后，gulp.dest() 生成的文件路径也会改变<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gulp.src(<span class="string">"script/lib/*.js"</span>).pipe(gulp.dest(<span class="string">"build"</span>));</span><br><span class="line"><span class="comment">//没有配置base参数，此时默认的base路径为script/lib</span></span><br><span class="line"><span class="comment">//假设匹配到的文件为script/lib/jquery.js</span></span><br><span class="line"><span class="comment">//生成的文件路径为build/jquery.js</span></span><br><span class="line"></span><br><span class="line">gulp.src(<span class="string">"script/lib/*.js"</span>, &#123;<span class="attr">base</span>: <span class="string">"script"</span>&#125;).pipe(gulp.dest(<span class="string">"build"</span>));</span><br><span class="line"><span class="comment">//配置了base参数，此时base路径为script</span></span><br><span class="line"><span class="comment">//假设匹配到的文件为script/lib/jquery.js</span></span><br><span class="line"><span class="comment">//此时生成的文件路径为build/lib/jquery.js</span></span><br></pre></td></tr></table></figure></p>
<p>用 gulp.dest() 把文件流写入文件后，文件流仍然可以继续使用。</p>
<h2 id="gulp-task"><a href="#gulp-task" class="headerlink" title="gulp.task()"></a>gulp.task()</h2><p>gulp.task 方法用来定义任务，内部使用的是 Orchestrator ，其语法为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(name[, deps], fn)</span><br></pre></td></tr></table></figure></p>
<p><strong>name</strong> 为任务名，如果你需要在命令行中运行你的某些任务，那么，请不要在名字中使用空格。<br><strong>deps</strong> 是当前定义的任务需要依赖的其他任务，为一个数组。当前定义的任务会在所有依赖的任务执行完毕后才开始执行。如果没有依赖，则可省略这个参数。<br><strong>fn</strong> 为任务函数，我们把任务要执行的代码都要写在里面。该参数也是可选的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">"mytask"</span>, [<span class="string">"array"</span>, <span class="string">"of"</span>, <span class="string">"task"</span>, <span class="string">"names"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//定义一个有依赖的任务</span></span><br><span class="line">  <span class="comment">// Do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>关于 gulp.task() ，我们需要知道执行多个任务时怎么来控制任务执行的顺序。<br>gulp 中执行多个任务，可以通过任务依赖来实现。例如我想要执行 one ，two ，three 这三个任务，那我们就可以定义一个空的任务，然后把那三个任务当做这个空的任务的依赖就行了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只要执行default任务，就相当于把one,two,three这三个任务执行了</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>]);</span><br></pre></td></tr></table></figure></p>
<p>如果任务相互之间没有依赖，任务会按你书写的顺序来执行，如果有依赖的话则会先执行依赖的任务。<br>但是如果某个任务所依赖的任务是异步的，就要注意了，gulp 并不会等待那个所依赖的异步任务完成，而是会接着执行后续的任务。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'one'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// one是一个异步执行的任务</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"one is done"</span>);</span><br><span class="line">  &#125;,<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//two任务虽然依赖于one任务，但并不会等到one任务中的异步操作完成后再执行</span></span><br><span class="line">gulp.task(<span class="string">"two"</span>, [<span class="string">"one"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"two is done"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/gulp-1.png" alt=""><br>上面的例子中我们执行 two 任务时，会先执行 one 任务，但不会去等待 one 任务中的异步操作完成后再执行 two 任务，而是紧接着执行 two 任务。因为 one 任务耗时 3 秒，所以 two 任务会在 one 任务中的异步操作完成之前就执行了。</p>
<p>那如果我们想等待异步任务中的异步操作完成后再执行后续的任务，该怎么做呢？<br>有三种方法可以实现：</p>
<p>第一：在异步操作完成后执行一个回调函数来通知 gulp 这个异步任务已经完成，这个回调函数就是任务函数的第一个参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">"one"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//cb为任务函数提供的回调，用来通知任务已经完成</span></span><br><span class="line">  <span class="comment">//one是一个异步执行的任务</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"one is done"</span>);</span><br><span class="line">    cb(); <span class="comment">//执行回调，表示这个异步任务已经完成</span></span><br><span class="line">  &#125;,<span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这时two任务会在one任务中的异步操作完成后再执行</span></span><br><span class="line">gulp.task(<span class="string">"two"</span>, [<span class="string">"one"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"two is done"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>第二：定义任务时返回一个流对象。适用于任务就是操作 gulp.src 获取到的流的情况。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">"one"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> stream = gulp.src(<span class="string">"client/**/*.js"</span>)</span><br><span class="line">      .pipe(dosomething()) <span class="comment">//dosomething()中有某些异步操作</span></span><br><span class="line">      .pipe(gulp.dest(<span class="string">"build"</span>));</span><br><span class="line">  <span class="keyword">return</span> stream;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是two任务会在one任务中的异步操作完成后再执行</span></span><br><span class="line">gulp.task(<span class="string">"two"</span>, [<span class="string">"one"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"two is done"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>第三：返回一个 promise 对象，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Q = <span class="built_in">require</span>(<span class="string">'q'</span>); <span class="comment">//一个著名的异步处理的库 https://github.com/kriskowal/q</span></span><br><span class="line">gulp.task(<span class="string">"one"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> deferred = Q.defer();</span><br><span class="line">  <span class="comment">//做一些异步操作</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    deferred.resolve();</span><br><span class="line">  &#125;,<span class="number">5000</span>);</span><br><span class="line">  <span class="keyword">return</span> deferred.promise;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"two"</span>, [<span class="string">"one"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"two is done"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>关于 gulp.task() ，主要的就是要清除当依赖异步任务时要如何处理。</p>
<h2 id="gulp-watch"><a href="#gulp-watch" class="headerlink" title="gulp.watch()"></a>gulp.watch()</h2><p>gulp.watch() 用来监视文件的变化，当文件发生变化后，我们可以利用它来执行相应的任务，例如文件压缩等。其语法为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.watch(glob[, opts], tasks);</span><br></pre></td></tr></table></figure></p>
<p><strong>glob</strong> 为要监视的文件匹配模式，规则和用法与 gulp.src() 方法中的 glob 相同。<br><strong>opts</strong> 为一个可选的配置对象，通常不需要用到。<br><strong>tasks</strong> 为文件变化后要执行的任务，为一个数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">"uglify"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">"reload"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;);</span><br><span class="line">gulp.watch(<span class="string">"js/**/*.js"</span>, [<span class="string">"uglify"</span>,<span class="string">"reload"</span>]);</span><br></pre></td></tr></table></figure></p>
<p>gulp.watch(glob [,opts, cb])<br><strong>glob</strong> 和 <strong>opts</strong> 参数与第一种用法相同<br><strong>cb</strong> 参数为一个函数。每当监视的文件发生变化时，就会调用这个函数，并且会给它传入一个对象，该对象包含了文件变化的一些信息，type 属性为变化的类型，可以是 added 、changed 、deleted ，path 属性为发生变化的文件的路径<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.watch(<span class="string">"js/**/*.js"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event.type); <span class="comment">//变化类型added为新增，deleted为删除，changed为改变</span></span><br><span class="line">  <span class="built_in">console</span>.log(event.path); <span class="comment">//变化的文件的路径</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h1 id="gulp-的插件"><a href="#gulp-的插件" class="headerlink" title="gulp 的插件"></a>gulp 的插件</h1><p>gulp 本身虽然不能完成很多任务，但它有大量插件可用，我们可以在 <a href="http://gulpjs.com/plugins/" target="_blank" rel="external">插件页面</a> 或者在 npm 搜索 gulpplugin 。<br>列一些很棒的 plugin ：</p>
<ul>
<li><a href="https://www.npmjs.com/package/gulp-jshint/" target="_blank" rel="external">JSHint</a> ： js代码检查分析工具</li>
<li><a href="https://www.npmjs.com/package/gulp-coffee/" target="_blank" rel="external">gulp-coffee</a> ： 编译CoffeeScript</li>
<li><a href="https://www.npmjs.com/package/gulp-mocha" target="_blank" rel="external">gulp-mocha</a> ： 执行Mocha测试</li>
<li><a href="https://www.npmjs.com/package/gulp-bump" target="_blank" rel="external">gulp-bump</a> ： 更新版本号</li>
<li><a href="https://www.npmjs.com/package/gulp-sass" target="_blank" rel="external">gulp-sass</a> ： sass 编译</li>
<li><a href="http://www.browsersync.cn/docs/gulp/" target="_blank" rel="external">browser-sync</a> ： 浏览器自动刷新</li>
<li><a href="https://www.npmjs.com/package/gulp-uglify" target="_blank" rel="external">gulp-uglify</a> ： 代码压缩</li>
<li><a href="https://www.npmjs.com/package/gulp-concat" target="_blank" rel="external">gulp-concat</a> ： 合并</li>
<li><a href="https://www.npmjs.com/package/gulp-eslint" target="_blank" rel="external">gulp-eslint</a> ： 支持 ES6 JSX</li>
</ul>
<h1 id="gulp-命令行参数"><a href="#gulp-命令行参数" class="headerlink" title="gulp 命令行参数"></a>gulp 命令行参数</h1><ul>
<li><code>-v</code> 或 <code>--version</code> 会显示全局和项目本地所安装的 gulp 版本号</li>
<li><code>--require &lt;module path&gt;</code> 将会在执行之前 require 一个模块。这对于一些语言编译器或者需要其他应用的情况来说很有用。你可以使用多个 <code>--require</code></li>
<li><code>--gulpfile &lt;gulpfile path&gt;</code> 手动指定一个 gulpfile 的路径，这在你有很多个 gulpfile 的时候很有用。这也会将 CWD 设置到该 gulpfile 所在目录</li>
<li><code>--cwd &lt;dir path&gt;</code> 手动指定 CWD 。定义 gulpfile 查找的位置，此外，所有的相应的依赖（require）会从这里开始计算相对路径</li>
<li><code>-T</code> 或 <code>--tasks</code> 会显示所指定 gulpfile 的 task 依赖树</li>
<li><code>--tasks-simple</code> 会以纯文本的方式显示所载入的 gulpfile 中的 task 列表</li>
<li><code>--color</code> 强制 gulp 和 gulp 插件显示颜色，即便没有颜色支持</li>
<li><code>--no-color</code> 强制不显示颜色，即便检测到有颜色支持</li>
<li><code>--silent</code> 禁止所有的 gulp 日志</li>
</ul>
<p>命令行会在 process.env.INIT_CW 中记录它是从哪里被运行的。</p>
<h1 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h1><p>1、gulp 写进项目 package.json 文件的依赖有什么作用<br>方便别人查看你项目中有些什么依赖，而且在项目目录下执行 npm install 命令会安装项目 package.json 中的所有依赖模块，这样就能简化项目的安装程序了，不用一个一个模块去安装啊。</p>
<p>2、gulp 中着重了解 gulp.task() 如何处理依赖任务是耗时操作或者异步操作的情况。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 进程线程协程(3)--Queue模块及源码分析]]></title>
      <url>https://magiceses.github.io/2019/10/08/python-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B-3/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">就算孤独，也不能一个人哭泣，无论走在哪，都要高傲地挺立；就算是挫败，也不能窝囊地依靠，无论在何时，都要倔强地站起。前面的路过于平坦，惬意久了难以找到方向；唯有脚下布满了荆棘，前方或许才是生机。<br></p>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Queue模块是提供队列操作的模块，队列是线程间最常用的交换数据的形式。该模块提供了三种队列：</p>
<ul>
<li>Queue.Queue(maxsize):先进先出，maxsize是队列的大小，其值为非正数时为无线循环队列</li>
<li>Queue.LifoQueue(maxsize)：后进先出，相当于栈</li>
<li>Queue.PriorityQueue(maxsize):优先级队列。</li>
</ul>
<p>其中LifoQueue，PriorityQueue是Queue的子类。三者拥有以下共同的方法：<br><a id="more"></a></p>
<ul>
<li><code>qsize()</code>:返回近似的队列大小。为什么要加“近似”二字呢？因为当该值大于0的时候并不保证并发执行的时候get()方法不被阻塞，同样，对于put()方法有效。</li>
<li><code>empty()</code>:返回布尔值，队列为空时，返回True，反之返回False。</li>
<li><code>full()</code>：当设定了队列大小的时候，如果队列满了，则返回True，否则返回False。</li>
<li><code>put(item[,block[,timeout]])</code>:向队列里添加元素item,block设置为False的时候，如果队列满了则抛出Full异常。如果block设置为True，timeout设置为None时，则会一种等到有空位的时候再添加进队列；否则会根据timeout设定的超时值抛出Full异常。</li>
<li><code>put_nowwait(item)</code>:等价与put(item,False)。block设置为False的时候，如果队列为空，则抛出Empty异常。如果block设置为True，timeout设置为None时，则会一种等到有空位的时候再添加进队列；否则会根据timeout设定的超时值抛出Empty异常。</li>
<li><code>get([block[,timeout]])</code>:从队列中删除元素并返回该元素的值，如果timeout是一个正数，它会阻塞最多超时秒数，并且如果在该时间内没有可用的项目，则引发Empty异常。</li>
<li><code>get_nowwait()</code>：等价于get(False)</li>
<li><code>task_done()</code>：发送信号表明入列任务已完成，经常在消费者线程中用到。</li>
<li><code>join()</code>:阻塞直至队列所有元素处理完毕，然后再处理其它操作。</li>
</ul>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>Queue模块用起来很简单很简单，但我觉得有必要把该模块的相关源代码贴出来分析下，会学到不少东西，看看大神们写的代码多么美观，多么结构化模块化，再想想自己写的代码，都是泪呀，来学习学习。为了缩减篇幅，源码的注释部分被删减掉。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time <span class="keyword">as</span> _time</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> threading <span class="keyword">as</span> _threading</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> dummy_threading <span class="keyword">as</span> _threading</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">'Empty'</span>, <span class="string">'Full'</span>, <span class="string">'Queue'</span>, <span class="string">'PriorityQueue'</span>, <span class="string">'LifoQueue'</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Empty</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="string">"Exception raised by Queue.get(block=0)/get_nowait()."</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Full</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="string">"Exception raised by Queue.put(block=0)/put_nowait()."</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, maxsize=<span class="number">0</span>)</span>:</span></span><br><span class="line">        self.maxsize = maxsize</span><br><span class="line">        self._init(maxsize)</span><br><span class="line">        self.mutex = _threading.Lock()</span><br><span class="line">        self.not_empty = _threading.Condition(self.mutex)</span><br><span class="line">        self.not_full = _threading.Condition(self.mutex)</span><br><span class="line">        self.all_tasks_done = _threading.Condition(self.mutex)</span><br><span class="line">        self.unfinished_tasks = </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_nowait</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.get(<span class="keyword">False</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init</span><span class="params">(self, maxsize)</span>:</span></span><br><span class="line">        self.queue = deque()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_qsize</span><span class="params">(self, len=len)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.queue)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_put</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        self.queue.append(item)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.queue.popleft()</span><br></pre></td></tr></table></figure>
<p>通过后面的几个函数分析知道，Queue对象是在collections模块的queue基础上(关于collections模块参考<a href="http://11026142.blog.51cto.com/11016142/1851791" target="_blank" rel="external"> Python：使用Counter进行计数统计及collections模块</a>)，加上threading模块互斥锁和条件变量封装的。</p>
<p>deque是一个双端队列，很适用于队列和栈。上面的Queue对象就是一个先进先出的队列，所以首先<code>_init()</code>函数定义了一个双端队列，然后它的定义了<code>_put()和_get()</code>函数，它们分别是从双端队列右边添加元素、左边删除元素，这就构成了一个先进先出队列，同理很容易想到LifoQueue（后进先出队列）的实现了，保证队列右边添加右边删除就可以。可以贴出源代码看看。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LifoQueue</span><span class="params">(Queue)</span>:</span></span><br><span class="line">    <span class="string">'''Variant of Queue that retrieves most recently added entries first.'''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init</span><span class="params">(self, maxsize)</span>:</span></span><br><span class="line">        self.queue = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_qsize</span><span class="params">(self, len=len)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.queue)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_put</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        self.queue.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.queue.pop()</span><br></pre></td></tr></table></figure>
<p>虽然它的”queue”没有用queue()，用列表也是一样的，因为列表append()和pop()操作是在最右边添加元素和删除最右边元素。</p>
<p>再来看看PriorityQueue，他是个优先级队列，这里用到了heapq模块的heappush()和heappop()两个函数。heapq模块对堆这种数据结构进行了模块化，可以建立这种数据结构，同时heapq模块也提供了相应的方法来对堆做操作。其中_init()函数里self.queue=[]可以看作是建立了一个空堆。heappush() 往堆中插入一条新的值 ，heappop() 从堆中弹出<strong>最小值</strong> ，这就可以实现优先级（关于heapq模块这里这是简单的介绍）。源代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span><span class="params">(Queue)</span>:</span></span><br><span class="line">    <span class="string">'''Variant of Queue that retrieves open entries in priority order (lowest first).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Entries are typically tuples of the form:  (priority number, data).</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init</span><span class="params">(self, maxsize)</span>:</span></span><br><span class="line">        self.queue = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_qsize</span><span class="params">(self, len=len)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.queue)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_put</span><span class="params">(self, item, heappush=heapq.heappush)</span>:</span></span><br><span class="line">        heappush(self.queue, item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get</span><span class="params">(self, heappop=heapq.heappop)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> heappop(self.queue)</span><br></pre></td></tr></table></figure>
<p>基本的数据结构分析完了，接着分析其它的部分。</p>
<ul>
<li>mutex 是个threading.Lock()对象，是互斥锁；not_empty、 not_full 、all_tasks_done这三个都是threading.Condition()对象，条件变量，而且维护的是同一把锁对象mutex(关于threading模块中Lock对象和Condition对象可参考上篇博文<a href="http://11026142.blog.51cto.com/11016142/1867519" target="_blank" rel="external"> Python：线程、进程与协程(2)——threading模块</a>)。</li>
<li>其中：</li>
<li>self.mutex互斥锁：任何获取队列的状态(empty(),qsize()等)，或者修改队列的内容的操作(get,put等)都必须持有该互斥锁。acquire()获取锁，release()释放锁。同时该互斥锁被三个条件变量共同维护。</li>
<li>self.not_empty条件变量：线程添加数据到队列中后，会调用self.not_empty.notify()通知其它线程，然后唤醒一个移除元素的线程。</li>
<li>self.not_full条件变量：当一个元素被移除出队列时，会唤醒一个添加元素的线程。</li>
<li>self.all_tasks_done条件变量 ：在未完成任务的数量被删除至0时，通知所有任务完成</li>
<li>self.unfinished_tasks  ： 定义未完成任务数量</li>
</ul>
<p>再来看看<strong>主要方法</strong>：</p>
<h3 id="put"><a href="#put" class="headerlink" title="put()"></a>put()</h3><p>源代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, item, block=True, timeout=None)</span>:</span></span><br><span class="line">        self.not_full.acquire()                  <span class="comment">#not_full获得锁</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> self.maxsize &gt; <span class="number">0</span>:                 <span class="comment">#如果队列长度有限制</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> block:                    <span class="comment">#如果没阻塞</span></span><br><span class="line">                    <span class="keyword">if</span> self._qsize() == self.maxsize:   <span class="comment">#如果队列满了抛异常</span></span><br><span class="line">                        <span class="keyword">raise</span> Full</span><br><span class="line">                <span class="keyword">elif</span> timeout <span class="keyword">is</span> <span class="keyword">None</span>:           <span class="comment">#有阻塞且超时为空，等待</span></span><br><span class="line">                    <span class="keyword">while</span> self._qsize() == self.maxsize:</span><br><span class="line">                        self.not_full.wait()</span><br><span class="line">                <span class="keyword">elif</span> timeout &lt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">"'timeout' must be a non-negative number"</span>)</span><br><span class="line">                <span class="keyword">else</span>:        <span class="comment">#如果有阻塞，且超时非负时，结束时间=当前时间+超时时间</span></span><br><span class="line">                    endtime = _time() + timeout</span><br><span class="line">                    <span class="keyword">while</span> self._qsize() == self.maxsize:</span><br><span class="line">                        remaining = endtime - _time()</span><br><span class="line">                        <span class="keyword">if</span> remaining &lt;= <span class="number">0.0</span>:       <span class="comment">#到时后，抛异常</span></span><br><span class="line">                            <span class="keyword">raise</span> Full</span><br><span class="line">                            <span class="comment">#如果没到时，队列是满的就会一直被挂起，直到有“位置”腾出</span></span><br><span class="line">                        self.not_full.wait(remaining)</span><br><span class="line">            self._put(item)                    <span class="comment">#调用_put方法，添加元素</span></span><br><span class="line">            self.unfinished_tasks += <span class="number">1</span>         <span class="comment">#未完成任务+1</span></span><br><span class="line">            self.not_empty.notify()             <span class="comment">#通知非空，唤醒非空挂起的任务</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.not_full.release()            <span class="comment">#not_full释放锁</span></span><br></pre></td></tr></table></figure>
<p>默认情况下block为True，timeout为None。如果队列满则会等待，未满则会调用_put方法将进程加入deque中(后面介绍),并且未完成任务加1还会通知队列非空。</p>
<p>如果设置block参数为Flase，队列满时则会抛异常。如果设置了超时那么在时间到之前进行阻塞，时间一到抛异常。这个方法使用not_full对象进行操作。</p>
<h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><p>源码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, block=True, timeout=None)</span>:</span></span><br><span class="line">        </span><br><span class="line">        self.not_empty.acquire()                <span class="comment">#not_empty获得锁</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> block:                       <span class="comment">#不阻塞时</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self._qsize():           <span class="comment">#队列为空时抛异常</span></span><br><span class="line">                    <span class="keyword">raise</span> Empty</span><br><span class="line">            <span class="keyword">elif</span> timeout <span class="keyword">is</span> <span class="keyword">None</span>:               <span class="comment">#不限时时，队列为空则会等待</span></span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">not</span> self._qsize():</span><br><span class="line">                    self.not_empty.wait()</span><br><span class="line">            <span class="keyword">elif</span> timeout &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">"'timeout' must be a non-negative number"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                endtime = _time() + timeout</span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">not</span> self._qsize():</span><br><span class="line">                    remaining = endtime - _time()</span><br><span class="line">                    <span class="keyword">if</span> remaining &lt;= <span class="number">0.0</span>:</span><br><span class="line">                        <span class="keyword">raise</span> Empty</span><br><span class="line">                    self.not_empty.wait(remaining)</span><br><span class="line">            item = self._get()                  <span class="comment">#调用_get方法，移除并获得项目</span></span><br><span class="line">            self.not_full.notify()              <span class="comment">#通知非满</span></span><br><span class="line">            <span class="keyword">return</span> item                        <span class="comment">#返回项目</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.not_empty.release()            <span class="comment">#释放锁</span></span><br></pre></td></tr></table></figure>
<p>逻辑跟put()函数一样，参数默认情况下队列空了则会等待，否则将会调用_get方法(往下看)移除并获得一个项，最后返回这个项。这个方法使用not_empty对象进行操作。</p>
<p>不过我觉得put()与get()两个函数结合起来理解比较好。not_full与not_empty代表的是两种不同操作类型的线程，not_full可以理解成is-not-full，即队列是否满了，默认是没有满，没有满时not_full这个条件变量才能获取锁，并做一些条件判断，只有符合条件才能向队列里加元素，添加成功后就会通知not_empty条件变量队列里不是空的，“我”刚刚添加进了一个元素，满足可以执行删除动作的基本条件了（队列不是空的,想想如果是空的执行删除动作就没有意义了），同时唤醒一些被挂起的执行移除动作的线程，让这些线程重新判断条件，如果条件准许就会执行删除动作，然后又通知not_full条件变量，告诉“它”队列不是满的，因为“我”刚才删除了一个元素（想想如果队列满了添加元素就添加不进呀，就没意义了），满足了添加元素的基本条件（队列不是满的），同时唤醒一些被挂起的执行添加动作的线程，这些线程又会进行条件判断，符合条件就会添加元素，否则继续挂起，依次类推，同时这样也保证了线程的安全。正与前面所说，当一个元素被移除出队列时，会唤醒一个添加元素的线程；当添加一个元素时会唤醒一个删除元素的线程。</p>
<h3 id="task-done"><a href="#task-done" class="headerlink" title="task_done()"></a>task_done()</h3><p>源码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_done</span><span class="params">(self)</span>:</span></span><br><span class="line">   </span><br><span class="line">        self.all_tasks_done.acquire()       <span class="comment">#获得锁</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            unfinished = self.unfinished_tasks - <span class="number">1</span>  <span class="comment">#判断队列中一个线程的任务是否全部完成</span></span><br><span class="line">            <span class="keyword">if</span> unfinished &lt;= <span class="number">0</span>:                     <span class="comment">#是则进行通知，或在过量调用时报异常</span></span><br><span class="line">                <span class="keyword">if</span> unfinished &lt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">'task_done() called too many times'</span>)</span><br><span class="line">                self.all_tasks_done.notify_all()</span><br><span class="line">            self.unfinished_tasks = unfinished      <span class="comment">#否则未完成任务数量-1</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.all_tasks_done.release()           <span class="comment">#最后释放锁</span></span><br></pre></td></tr></table></figure>
<p>这个方法判断队列中一个线程的任务是否全部完成，首先会通过all_tasks_done对象获得锁，如果是则进行通知，最后释放锁。</p>
<h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><p>源码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">join</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">    self.all_tasks_done.acquire()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> self.unfinished_tasks:        <span class="comment">#如果有未完成的任务，将调用wait()方法等待</span></span><br><span class="line">            self.all_tasks_done.wait()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        self.all_tasks_done.release()</span><br></pre></td></tr></table></figure>
<p>阻塞方法，当队列中有未完成进程时，调用join方法来阻塞，直到他们都完成。</p>
<p>其它的方法都比较简单，也比较好理解，有兴趣可以去看看Queue.py里的源码，要注意的是任何获取队列的状态(empty(),qsize()等)，或者修改队列的内容的操作(get,put等)都必须持有互斥锁mutex。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><p>实现一个线程不断生成一个随机数到一个队列中</p>
<p>实现一个线程从上面的队列里面不断的取出奇数</p>
<p>实现另外一个线程从上面的队列里面不断取出偶数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random,threading,time</span><br><span class="line"><span class="keyword">from</span> Queue <span class="keyword">import</span> Queue</span><br><span class="line">is_product = <span class="keyword">True</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="string">"""生产数据"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, t_name, queue)</span>:</span></span><br><span class="line">       threading.Thread.__init__(self,name=t_name)</span><br><span class="line">       self.data=queue</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.data.full():</span><br><span class="line">                <span class="keyword">global</span> is_product</span><br><span class="line">                is_product = <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> self.data.qsize() &lt;= <span class="number">7</span>:<span class="comment">#队列长度小于等于7时添加元素</span></span><br><span class="line">                    is_product = <span class="keyword">True</span></span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>): <span class="comment">#每次向队列里添加两个元素</span></span><br><span class="line"></span><br><span class="line">                        randomnum=random.randint(<span class="number">1</span>,<span class="number">99</span>)</span><br><span class="line">                        <span class="keyword">print</span> <span class="string">"%s: %s is producing %d to the queue!"</span> % (time.ctime(), self.getName(), randomnum)</span><br><span class="line">                        self.data.put(randomnum，<span class="keyword">False</span>) <span class="comment">#将数据依次存入队列</span></span><br><span class="line">                        time.sleep(<span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">print</span> <span class="string">"deque length is %s"</span>%self.data.qsize()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> is_product:</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">                            randomnum = random.randint(<span class="number">1</span>, <span class="number">99</span>)</span><br><span class="line">                            <span class="keyword">print</span> <span class="string">"%s: %s is producing %d to the queue!"</span> % (time.ctime(), self.getName(), randomnum)</span><br><span class="line">                            self.data.put(randomnum,<span class="keyword">False</span>)  <span class="comment"># 将数据依次存入队列</span></span><br><span class="line">                            time.sleep(<span class="number">1</span>)</span><br><span class="line">                            <span class="keyword">print</span> <span class="string">"deque length is %s"</span> % self.data.qsize()</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"%s: %s finished!"</span> %(time.ctime(), self.getName())</span><br><span class="line"></span><br><span class="line"><span class="comment">#Consumer thread</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer_even</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,t_name,queue)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self,name=t_name)</span><br><span class="line">        self.data=queue</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> self.data.qsize() &gt; <span class="number">7</span>:<span class="comment">#队列长度大于7时开始取元素</span></span><br><span class="line">                val_even = self.data.get(<span class="keyword">False</span>)</span><br><span class="line">                <span class="keyword">if</span> val_even%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"%s: %s is consuming. %d in the queue is consumed!"</span> % (time.ctime(),self.getName(),val_even)</span><br><span class="line">                    time.sleep(<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.data.put(val_even)</span><br><span class="line">                    time.sleep(<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"deque length is %s"</span> % self.data.qsize()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer_odd</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,t_name,queue)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self, name=t_name)</span><br><span class="line">        self.data=queue</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> self.data.qsize() &gt; <span class="number">7</span>:</span><br><span class="line">                val_odd = self.data.get(<span class="keyword">False</span>)</span><br><span class="line">                <span class="keyword">if</span> val_odd%<span class="number">2</span>!=<span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"%s: %s is consuming. %d in the queue is consumed!"</span> % (time.ctime(), self.getName(), val_odd)</span><br><span class="line">                    time.sleep(<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.data.put(val_odd)</span><br><span class="line">                    time.sleep(<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"deque length is %s"</span> % self.data.qsize()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Main thread</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    queue = Queue(<span class="number">20</span>)</span><br><span class="line">    producer = Producer(<span class="string">'Pro.'</span>, queue)</span><br><span class="line">    consumer_even = Consumer_even(<span class="string">'Con_even.'</span>, queue)</span><br><span class="line">    consumer_odd = Consumer_odd(<span class="string">'Con_odd.'</span>,queue)</span><br><span class="line">    producer.start()</span><br><span class="line">    consumer_even.start()</span><br><span class="line">    consumer_odd.start()</span><br><span class="line">    producer.join()</span><br><span class="line">    consumer_even.join()</span><br><span class="line">    consumer_odd.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>这个例子跟上篇博文<a href="http://11026142.blog.51cto.com/11016142/1867519" target="_blank" rel="external"> Python：线程、进程与协程(2)——threading模块</a>中介绍Condition的例子很像，就是构造了一个长度为20的队列，当队列1元素个数小于8时就忘队列中添加元素，当队列满后，就不再添加，当队列元素大于7个时，才会取元素，否则不取元素。有兴趣的可以动手试试，仔细体会下。</p>
<h3 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h3><p>线程池</p>
<p>在使用多线程处理任务时也不是线程越多越好，由于在切换线程的时候，需要切换上下文环境，依然会造成cpu的大量开销。为解决这个问题，线程池的概念被提出来了。预先创建好一个较为优化的数量的线程，让过来的任务立刻能够使用，就形成了线程池。在python中，没有内置的较好的线程池模块，需要自己实现或使用第三方模块。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">StopEvent = object() <span class="comment"># 创建空对象</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span><span class="params">(object)</span>:</span></span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, max_num, max_task_num = None)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> max_task_num:</span><br><span class="line">   self.q = queue.Queue(max_task_num)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">   self.q = queue.Queue()</span><br><span class="line">  self.max_num = max_num</span><br><span class="line">  self.cancel = <span class="keyword">False</span></span><br><span class="line">  self.terminal = <span class="keyword">False</span></span><br><span class="line">  self.generate_list = []</span><br><span class="line">  self.free_list = []</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, func, args, callback=None)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  线程池执行一个任务</span></span><br><span class="line"><span class="string">  :param func: 任务函数</span></span><br><span class="line"><span class="string">  :param args: 任务函数所需参数</span></span><br><span class="line"><span class="string">  :param callback: 任务执行失败或成功后执行的回调函数，回调函数有两个参数1、任务函数执行状态；2、任务函数返回值（默认为None，即：不执行回调函数）</span></span><br><span class="line"><span class="string">  :return: 如果线程池已经终止，则返回True否则None</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="keyword">if</span> self.cancel:</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">if</span> len(self.free_list) == <span class="number">0</span> <span class="keyword">and</span> len(self.generate_list) &lt; self.max_num:</span><br><span class="line">   self.generate_thread()</span><br><span class="line">  w = (func, args, callback,)</span><br><span class="line">  self.q.put(w)</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">generate_thread</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  创建一个线程</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  t = threading.Thread(target=self.call)</span><br><span class="line">  t.start()</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  循环去获取任务函数并执行任务函数</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  current_thread = threading.currentThread</span><br><span class="line">  self.generate_list.append(current_thread)</span><br><span class="line"> </span><br><span class="line">  event = self.q.get()</span><br><span class="line">  <span class="keyword">while</span> event != StopEvent:</span><br><span class="line"> </span><br><span class="line">   func, arguments, callback = event</span><br><span class="line">   <span class="keyword">try</span>:</span><br><span class="line">    result = func(*arguments)</span><br><span class="line">    success = <span class="keyword">True</span></span><br><span class="line">   <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    success = <span class="keyword">False</span></span><br><span class="line">    result = <span class="keyword">None</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span> callback <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">     callback(success, result)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">     <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">with</span> self.worker_state(self.free_list, current_thread):</span><br><span class="line">    <span class="keyword">if</span> self.terminal:</span><br><span class="line">     event = StopEvent</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">     event = self.q.get()</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line"> </span><br><span class="line">   self.generate_list.remove(current_thread)</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  执行完所有的任务后，所有线程停止</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  self.cancel = <span class="keyword">True</span></span><br><span class="line">  full_size = len(self.generate_list)</span><br><span class="line">  <span class="keyword">while</span> full_size:</span><br><span class="line">   self.q.put(StopEvent)</span><br><span class="line">   full_size -= <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">terminate</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  无论是否还有任务，终止线程</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  self.terminal = <span class="keyword">True</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">while</span> self.generate_list:</span><br><span class="line">   self.q.put(StopEvent)</span><br><span class="line"> </span><br><span class="line">  self.q.empty()</span><br><span class="line"> </span><br><span class="line"><span class="meta"> @contextlib.contextmanager</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">worker_state</span><span class="params">(self, state_list, worker_thread)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  用于记录线程中正在等待的线程数</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  state_list.append(worker_thread)</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">   <span class="keyword">yield</span></span><br><span class="line">  <span class="keyword">finally</span>:</span><br><span class="line">   state_list.remove(worker_thread)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># How to use</span></span><br><span class="line">pool = ThreadPool(<span class="number">5</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(status, result)</span>:</span></span><br><span class="line"> <span class="comment"># status, execute action status</span></span><br><span class="line"> <span class="comment"># result, execute action return value</span></span><br><span class="line"> <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(i)</span>:</span></span><br><span class="line"> print(i)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line"> ret = pool.run(action, (i,), callback)</span><br><span class="line"> </span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">print(len(pool.generate_list), len(pool.free_list))</span><br><span class="line">print(len(pool.generate_list), len(pool.free_list))</span><br><span class="line"><span class="comment"># pool.close()</span></span><br><span class="line"><span class="comment"># pool.terminate()</span></span><br></pre></td></tr></table></figure>
<p><br><br>原文： <a href="https://blog.51cto.com/u_11026142/1867877" target="_blank" rel="external">https://blog.51cto.com/u_11026142/1867877</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WSGI uWSGI uwsgi你搞清楚了吗]]></title>
      <url>https://magiceses.github.io/2019/05/01/python-web-wsgi%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">生命只有走出来的精彩，沒有等待出来的辉煌；埋怨，只是一种懦弱的表现；努力，才是人生的态度！实力代表尊严！<br></p>

<p>相信大家在学习web开发的过程中一定会遇到 cgi、 wsgi 之类的名词，然后看着他们十分相似的解释估计还没开始写代码就晕了，这都什么鬼？<br>下面我们就来认识一下<br><a id="more"></a></p>
<p><strong>CGI</strong>(Common Gateway Inteface): 字面意思就是通用网关接口，我觉得之所以看字面意思跟没看一样是因为这个称呼本身很学术，所以对于通俗的理解就存在一定困难，这里我觉得直接把 Gateway 当作 server 理解就好。</p>
<blockquote>
<p>它是外部应用程序与Web服务器之间的接口标准</p>
</blockquote>
<p>意思就是它用来规定一个程序该如何与web服务器程序之间通信从而可以让这个程序跑在web服务器上。当然，CGI 只是一个很基本的协议，在现代常见的服务器结构中基本已经没有了它的身影，更多的则是它的扩展和更新。</p>
<p><strong>FastCGI</strong>: CGI的一个扩展， 提升了性能，废除了 CGI fork-and-execute （来一个请求 fork 一个新进程处理，处理完再把进程 kill 掉）的工作方式，转而使用一种长生存期的方法，减少了进程消耗，提升了性能。</p>
<blockquote>
<p>这里 FastCGI 就应用于前端 server（nginx）与后端 server（uWSGI）的通信中，制定规范等等，让前后端服务器可以顺利理解双方都在说什么（当然 uWSGI 本身并不用 FastCGI, 它有另外的协议）</p>
</blockquote>
<p><strong>WSGI：</strong>全称是Web Server Gateway Interface，WSGI不是服务器，python模块，框架，API或者任何软件，只是一种规范，描述web server如何与web application通信的规范。server和application的规范在<a href="https://www.python.org/dev/peps/pep-3333/" target="_blank" rel="external">PEP 3333</a>中有具体描述。要实现WSGI协议，必须同时实现web server和web application，当前运行在WSGI协议之上的web框架有Bottle, Flask, Django。</p>
<p><strong>uwsgi：</strong>与WSGI一样是一种通信协议，是uWSGI服务器的独占协议，用于定义传输信息的类型(type of information)，每一个uwsgi packet前4byte为传输信息类型的描述，与WSGI协议是两种东西，据说该协议是fcgi协议的10倍快。</p>
<p><strong>uWSGI：</strong>是一个web服务器，实现了WSGI协议、uwsgi协议、http协议等。</p>
<p><img src="/images/python-web-wsgi-1.JEPG" alt="img"></p>
<p>对于 CGI ，我认为在 CGI 制定的时候也许没有考虑到现代的架构，所以他只是一个通用的规范，而后来的 WSGI 也好 Fastcgi 也好等等这些都是在 CGI 的基础上扩展并应用于现代Web Server 不同地方的通信规范， 所以我在图中将 CGI 标注在整个流程之上。</p>
<p>做为一个 Python Web 开发者，相信以上流程我们最关注的莫过于 WSGI 这里所做的事，了解熟悉这里的规范不仅可以让我们更快速的开发 Web 应用同时我们也可以自己实现一个后端 Server 。</p>
<h2 id="WSGI-初识"><a href="#WSGI-初识" class="headerlink" title="WSGI 初识"></a>WSGI 初识</h2><p>OK，回头题目，我们先来想一下，当我们部署完一个应用程序，浏览网页时具体的过程是怎样的呢？</p>
<ol>
<li>首先我们得有一个 Web 服务器来处理 HTTP 协议的内容；</li>
<li>Web 服务器获得客户端的请求，交给应用程序，应用程序可以是各种语言编写的（Java, PHP, Python, Ruby等）；</li>
<li>应用程序处理完，返回给 Web 服务器；</li>
<li>这时 Web 服务器再返回给客户端。</li>
</ol>
<p>那么，要采用这种方案，Web服务器和应用程序之间就要知道如何进行交互。为了定义Web服务器和应用程序之间的交互过程，就形成了很多不同的规范。最早出现的是 CGI，后来又出现了改进 CGI 性能的FasgCGI，Java 专用的 Servlet 规范，Python 专用的 WSGI 规范等等。提出这些规范的目的就是为了定义统一的标准，提升程序的可移植性。在WSGI规范的最开始的<a href="https://www.python.org/dev/peps/pep-3333/" target="_blank" rel="external">PEP 3333</a>中一开始就描述了为什么需要WSGI规范。</p>
<p>所以我们再看下上面的定义，<strong>WSGI就是一个python专用的规范，定义了Web服务器如何与Python应用程序进行交互，使得使用Python写的Web应用程序可以和Web服务器对接起来</strong>。这里的Python应用程序，就是你写的django，Flask等代码。但是为什么我们调试的时候，可以直接起django或者flask框架进行调试呢，因为在这两个框架里面都封装了好了简单的web服务器，但是也只是建议用于平时调试使用，性能较差，在生产环境还是不要用了，那么我们生产环境用什么呢？uWSGI就登场啦。</p>
<h2 id="uWSGI、uwsgi初识"><a href="#uWSGI、uwsgi初识" class="headerlink" title="uWSGI、uwsgi初识"></a>uWSGI、uwsgi初识</h2><p>uWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换。该协议据说性能非常高，而且内存占用率低，为mod_wsgi的一半左右，我没有实测过。</p>
<blockquote>
<p>注意，这里出现了uwsgi，uwsgi同WSGI一样是一种通信协议，该协议是一个uWSGI服务器自有的协议，它用于定义传输信息的类型（type of information），每一个uwsgi packet前4byte为传输信息类型描述，它与WSGI相比是两样东西，据说该协议是fcgi协议的10倍快。</p>
</blockquote>
<p>除了uWSGI之外，Gunicorn也是实现了WSGI server协议的服务器，这个服务器后面有时间再讲。</p>
<blockquote>
<p>Python标准库提供独立WSGI服务器称为<code>wsgiref</code>。</p>
</blockquote>
<p>uWSGI 作用：</p>
<ul>
<li>uWSGI旨在为部署分布式集群的网络应用开发一套完整的解决方案</li>
<li>主要面向web及其标准服务。由于其<code>可扩展性</code>，能够被无限制的扩展用来支持更<code>多平台</code>和<code>多语言</code></li>
<li>实现了<code>WSGI协议</code>、<code>uwsgi协议</code>等</li>
<li><code>uWSGI服务器</code>自己实现了<code>基于uwsgi协议的server部分</code>，我们只需要在uwsgi的配置文件中<code>指定application的地址</code>，uWSGI就能直接和<code>应用框架中的WSGI application</code>通信。</li>
<li><strong>uWSGI的主要特点是：</strong></li>
</ul>
<blockquote>
<ul>
<li>超快的<code>性能</code></li>
<li><code>低内存</code>占用</li>
<li><code>多app</code>管理</li>
<li>详尽的<code>日志功能</code>（可以用来分析app的性能和瓶颈）</li>
<li><code>高度可定制</code>（内存大小限制，服务一定次数后重启等）</li>
</ul>
</blockquote>
<p>看到这里，问题又来了，既然 uWSGI 已经是服务器了，为啥有时还需要 Nginx 呢？而且，对于 Nginx 来说，是无法与直接跟flask等application做通信的，需要借用wsgi server。所以这里就引出了两种结构：</p>
<h3 id="两级结构"><a href="#两级结构" class="headerlink" title="两级结构"></a>两级结构</h3><p>在这种结构里，uWSGI作为服务器，它用到了HTTP协议以及wsgi协议，flask应用作为application，实现了wsgi协议。当有客户端发来请求，uWSGI接受请求，调用flask app得到相应，之后相应给客户端。<br>上面我们说过，Flask等web框架会自己附带一个wsgi服务器(这就是flask应用可以直接启动的原因)，但是这只是在开发阶段用到的，在生产环境是不够用的，所以用到了uwsgi这个性能高的wsgi服务器。</p>
<p>以下是他们的结构图：</p>
<p><img src="/images/python-web-wsgi-2.png" alt="image-20210710114512232"></p>
<h3 id="三级结构"><a href="#三级结构" class="headerlink" title="三级结构"></a>三级结构</h3><p>这种结构里，uWSGI作为中间件，它用到了uwsgi协议(与nginx通信)，wsgi协议(调用Flask app)。当有客户端发来请求，nginx先做处理(静态资源是nginx的强项)，无法处理的请求交给(uWSGI)，最后也是nginx回复给客户端。</p>
<p>以下是他们的结构图：</p>
<p><img src="/images/python-web-wsgi-3.png" alt="img"></p>
<p>多了一层反向代理有什么好处？</p>
<ul>
<li>提高web server性能(uWSGI处理静态资源不如nginx；nginx会在收到一个完整的http请求后再转发给wWSGI)</li>
<li>nginx可以做负载均衡(前提是有多个服务器)，保护了实际的web服务器(客户端是和nginx交互而不是uWSGI)</li>
</ul>
<p>记得以前uwsgi没名气的时候，我们都在使用apache + mode_wsgi模式，apache也无法直接跟tornado通信，是借用mod_wsgi把torando做成了unix socket服务，说白了也是启动了一个服务，靠apache来转发。</p>
<p>所以 nginx、apache 在这里只是启动了proxy的作用。</p>
<h2 id="WSGI的优点、缺点是什么？"><a href="#WSGI的优点、缺点是什么？" class="headerlink" title="WSGI的优点、缺点是什么？"></a>WSGI的优点、缺点是什么？</h2><p><strong>优点</strong>：多样的部署选择和组件之间的高度解耦</p>
<p>由于上面提到的高度解耦特性，理论上，任何一个符合WSGI规范的App都可以部署在任何一个实现了WSGI规范的Server上，这给Python Web应用的部署带来了极大的灵活性。</p>
<p>Flask自带了一个基于Werkzeug的调试用服务器。根据Flask的文档，在生产环境不应该使用内建的调试服务器，而应该采取以下方式之一进行部署：</p>
<ul>
<li>GUNICORN</li>
<li>uWSGI</li>
</ul>
<p><strong>缺点</strong>：忙吹一波，无</p>
<h1 id="WSGI-实现"><a href="#WSGI-实现" class="headerlink" title="WSGI 实现"></a>WSGI 实现</h1><p>上面说了，WSGI 主要是两层，服务器（server） 和 应用程序（application），网上查资料，有的人也说是三层，多了层中间键（middleware），但其实并不准确，因为middleware对服务器程序和应用是透明的，也就是说，服务器程序以为它就是应用程序，而应用程序以为它就是服务器。这就告诉我们，middleware需要把自己伪装成一个服务器，接受应用程序，调用它，同时middleware还需要把自己伪装成一个应用程序，传给服务器程序，所以本质上应该还是两层。</p>
<p>其实无论是服务器程序，middleware 还是应用程序，都在服务端，为客户端提供服务，之所以把他们抽象成不同层，就是为了控制复杂度，使得每一次都不太复杂，各司其职。</p>
<ul>
<li>服务器方：从底层解析http请求，然后调用应用程序，给应用程序提供(环境信息-environ)和(回调函数-start_respnse)， 这个回调函数是用来将应用程序设置的http header和status等信息传递给服务器方.</li>
<li>应用程序：用来生成返回的header,body和status,以便返回给服务器方。</li>
<li>中间键：有些功能可能介于服务器程序和应用程序之间，例如，服务器拿到了客户端请求的URL, 不同的URL需要交由不同的函数处理，这个功能叫做 URL Routing，这个功能就可以放在二者中间实现，这个中间层就是 middleware。</li>
</ul>
<p>WSGI把来自socket的数据包解析为http格式，然后进而变化为environ变量，这environ变量里面有wsgi本身的信息(比如 host， post，进程模式等)，还有client的header及body信息。start_respnse是一个回调函数，必须要附带两个参数，一个是status(http状态)，response_headers(响应的header头信息)。</p>
<p>像flask、django、tornado都会暴露WSGI协议入口，我们只需要自己实现WSGI协议，wsgi server然后给flask传递environ，及start_response, 等到application返回值之后，我再socket send返回客户端。</p>
<h2 id="application"><a href="#application" class="headerlink" title="application"></a>application</h2><h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><p>一个基本的wsgi应用，需要实现以下三个功能：</p>
<ol>
<li><p>必须是一个可调用的对象</p>
<p>在Python中:</p>
<ul>
<li>可以是函数</li>
<li>可以是一个实例，它的类实现了<code>__call__</code>方法</li>
<li>可以是一个类，这时候，用这个类生成实例的过程就相当于调用这个类</li>
</ul>
</li>
<li><p>接收两个必选参数environ、start_response，以及一个可选参数exc_info。参数名不是固定的，这就意味着你必须使用位置参数而非关键字参数(这应该是用来约束wsgi服务器的)</p>
<ul>
<li><p>environ存放CGI规定的变量一及别的变量。</p>
</li>
<li><p>start_response 是一个可调用对象，通过类似start_response(‘200 OK’,[(‘Content-Type’,’text/html’))来发送http的相应头部。</p>
</li>
<li><p>exc_info 只有start_response()被错误处理程序调用时，这个参数才会提供，并且是有应用对象提供。</p>
</li>
</ul>
<p>示例：</p>
<ul>
<li><p>如果这个对象是函数的话，它看起来要是这个样子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># callable function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果这个对象是一个类的话，它看起来是这个样子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># callable class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果这个对象是一个类的实例，那么，这个类看起来是这个样子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># callable object</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationObj</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>可调用对象要返回一个值，这个值是可迭代的。</p>
<p>这样的话，前面的三个例子就变成：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">HELLO_WORLD = <span class="string">b"Hello world!\n"</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># callable function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [HELLO_WORLD]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># callable class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> HELLO_WORLD</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># callable object</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationObj</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [HELLO_WORLD]</span><br></pre></td></tr></table></figure>
<p>你可能会说，不是啊，我们平时写的web程序不是这样啊。 比如如果使用web.py框架的话，一个典型的应用可能是这样的:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hello</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GET</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello, world!'</span></span><br></pre></td></tr></table></figure>
<p>这是由于框架已经把WSGI中规定的一些东西封装起来了，我们平时用框架时，看不到这些东西，只需要直接实现我们的逻辑，再返回一个值就好了。其它的东西框架帮我们做好了。这也是框架的价值所在，把常用的东西封装起来，让使用者只需要关注最重要的东西。</p>
<p>当然，WSGI关于应用程序的规定不只这些，但是现在，我们只需要知道这些就足够了。下面，再介绍服务器程序。</p>
</li>
</ol>
<h3 id="environ参数"><a href="#environ参数" class="headerlink" title="environ参数"></a>environ参数</h3><p>在第二点我们提到了 environ参数，单独介绍下</p>
<p>environ参数是一个Python的字典，里面存放了所有和客户端相关的信息，这样application对象就能知道客户端请求的资源是什么，请求中带了什么数据等。environ字典包含了一些CGI规范要求的数据，以及WSGI规范新增的数据，还可能包含一些操作系统的环境变量以及Web服务器相关的环境变量。我们来看一些environ中常用的成员：</p>
<ol>
<li><p>首先是CGI规范中要求的变量：</p>
<ul>
<li><p><strong>REQUEST_METHOD</strong>： 请求方法，是个字符串，’GET’, ‘POST’等</p>
</li>
<li><p><strong>SCRIPT_NAME</strong>： HTTP请求的path中的用于查找到application对象的部分，比如Web服务器可以根据path的一部分来决定请求由哪个virtual host处理</p>
</li>
<li><p><strong>PATH_INFO</strong>： HTTP请求的path中剩余的部分，也就是application要处理的部分</p>
</li>
<li><p><strong>QUERY_STRING</strong>： HTTP请求中的查询字符串，URL中<strong>?</strong>后面的内容</p>
</li>
<li><p><strong>CONTENT_TYPE</strong>： HTTP headers中的content-type内容</p>
</li>
<li><p><strong>CONTENT_LENGTH</strong>： HTTP headers中的content-length内容</p>
</li>
<li><p><strong>SERVER_NAME</strong>和<strong>SERVER_PORT</strong>： 服务器名和端口，这两个值和前面的SCRIPT_NAME, PATH_INFO拼起来可以得到完整的URL路径</p>
</li>
<li><p><strong>SERVER_PROTOCOL</strong>： HTTP协议版本，HTTP/1.0或者HTTP/1.1</p>
</li>
<li><p><strong>HTTP_</strong>： 和HTTP请求中的headers对应。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">REQUEST_METHOD = &apos;GET&apos;</span><br><span class="line">SCRIPT_NAME = &apos;&apos;</span><br><span class="line">PATH_INFO = &apos;/xyz&apos;</span><br><span class="line">QUERY_STRING = &apos;abc&apos;</span><br><span class="line">CONTENT_TYPE = &apos;text/plain&apos;</span><br><span class="line">CONTENT_LENGTH = &apos;&apos;</span><br><span class="line">SERVER_NAME = &apos;minix-ubuntu-desktop&apos;</span><br><span class="line">SERVER_PORT = &apos;8000&apos;</span><br><span class="line">SERVER_PROTOCOL = &apos;HTTP/1.1&apos;</span><br><span class="line"> </span><br><span class="line">HTTP_ACCEPT = &apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&apos;</span><br><span class="line">HTTP_ACCEPT_ENCODING = &apos;gzip,deflate,sdch&apos;</span><br><span class="line">HTTP_ACCEPT_LANGUAGE = &apos;en-US,en;q=0.8,zh;q=0.6,zh-CN;q=0.4,zh-TW;q=0.2&apos;</span><br><span class="line">HTTP_CONNECTION = &apos;keep-alive&apos;</span><br><span class="line">HTTP_HOST = &apos;localhost:8000&apos;</span><br><span class="line">HTTP_USER_AGENT = &apos;Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36&apos;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>WSGI规范中还要求environ包含下列成员：</p>
<ul>
<li><p><strong>wsgi.version</strong>：表示WSGI版本，一个元组(1, 0)，表示版本1.0</p>
</li>
<li><p><strong>wsgi.url_scheme</strong>：http或者https</p>
</li>
<li><p><strong>wsgi.input</strong>：一个类文件的输入流，application可以通过这个获取HTTP request body</p>
</li>
<li><p><strong>wsgi.errors</strong>：一个输出流，当应用程序出错时，可以将错误信息写入这里</p>
</li>
<li><p><strong>wsgi.multithread</strong>：当application对象可能被多个线程同时调用时，这个值需要为True</p>
</li>
<li><p><strong>wsgi.multiprocess</strong>：当application对象可能被多个进程同时调用时，这个值需要为True</p>
</li>
<li><p><strong>wsgi.run_once</strong>：当server期望application对象在进程的生命周期内只被调用一次时，该值为True</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wsgi.errors = &lt;open file &apos;&lt;stderr&gt;&apos;, mode &apos;w&apos; at 0xb735f0d0&gt;</span><br><span class="line">wsgi.file_wrapper = &lt;class wsgiref.util.FileWrapper at 0xb70525fc&gt;</span><br><span class="line">wsgi.input = &lt;socket._fileobject object at 0xb7050e6c&gt;</span><br><span class="line">wsgi.multiprocess = False</span><br><span class="line">wsgi.multithread = True</span><br><span class="line">wsgi.run_once = False</span><br><span class="line">wsgi.url_scheme = &apos;http&apos;</span><br><span class="line">wsgi.version = (1, 0)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<p>上面列出的这些内容已经包括了客户端请求的所有数据，足够application对象处理客户端请求了。</p>
<h3 id="start-resposne参数"><a href="#start-resposne参数" class="headerlink" title="start_resposne参数"></a>start_resposne参数</h3><p>start_response是一个可调用对象，接收两个必选参数和一个可选参数：</p>
<ul>
<li><strong>status</strong>: 一个字符串，表示HTTP响应状态字符串</li>
<li><strong>response_headers</strong>: 一个列表，包含有如下形式的元组：(header_name, header_value)，用来表示HTTP响应的headers</li>
<li><strong>exc_info</strong>（可选）: 用于出错时，server需要返回给浏览器的信息</li>
</ul>
<p>当application对象根据environ参数的内容执行完业务逻辑后，就需要返回结果给server端。我们知道HTTP的响应需要包含status，headers和body，所以在application对象将body作为返回值return之前，需要先调用<code>start_response()</code>，将status和headers的内容返回给server，这同时也是告诉server，application对象要开始返回body了。</p>
<h3 id="application对象的返回值"><a href="#application对象的返回值" class="headerlink" title="application对象的返回值"></a>application对象的返回值</h3><p>application对象的返回值用于为HTTP响应提供body，如果没有body，那么可以返回None。如果有body的化，那么需要返回一个可迭代的对象。server端通过遍历这个可迭代对象可以获得body的全部内容。</p>
<h3 id="application-demo"><a href="#application-demo" class="headerlink" title="application demo"></a>application demo</h3><p>PEP-3333中有一个application的实现demo，我把它再简化之后如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_app</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">      status = <span class="string">'200 OK'</span></span><br><span class="line">      response_headers = [(<span class="string">'Content-type'</span>, <span class="string">'text/plain'</span>)]</span><br><span class="line">      start_response(status, response_headers)</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'hello, world'</span>]</span><br></pre></td></tr></table></figure>
<p>可以将这段代码和前面的说明对照起来理解。</p>
<p>再来几个不同使用方式的示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hello.py</span></span><br><span class="line"><span class="comment"># 函数式 WSGI服务器调用的对象是app</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app</span><span class="params">(environ,start_response)</span>:</span> <span class="comment"># 提供两个必须变量</span></span><br><span class="line">    start_response(<span class="string">'200 OK'</span>,[(<span class="string">'Content-Type'</span>,<span class="string">'text/html'</span>)]) <span class="comment"># 调用start_response发送头部</span></span><br><span class="line">    body = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> environ.items():</span><br><span class="line">        body += <span class="string">'&lt;p&gt;'</span>+(str(i)+<span class="string">':::::'</span>+str(j)+<span class="string">'&lt;br&gt;&lt;p&gt;'</span>)</span><br><span class="line">    <span class="keyword">return</span> [body.encode(<span class="string">'utf-8'</span>)] <span class="comment"># 返回byte的元组表示response body</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现__call__方法的类的实例变量 WSGI服务器调用的对象是app1()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">app1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ,start_response)</span>:</span></span><br><span class="line">        start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html;charset=utf-8'</span>)])</span><br><span class="line">        body = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i, j <span class="keyword">in</span> environ.items():</span><br><span class="line">            body += <span class="string">'&lt;p&gt;'</span> + (str(i) + <span class="string">':::::'</span> + str(j) + <span class="string">'&lt;br&gt;&lt;p&gt;'</span>)</span><br><span class="line">        <span class="keyword">return</span> [body.encode(<span class="string">'utf-8'</span>)]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 迭代法 WSGI服务器调用的对象是app2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">app2</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,environ,start_response)</span>:</span></span><br><span class="line">        self.environ = environ</span><br><span class="line">        self.start_response = start_response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html;charset=utf-8'</span>)])</span><br><span class="line">        body = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i, j <span class="keyword">in</span> self.environ.items():</span><br><span class="line">            body += <span class="string">'&lt;p&gt;'</span> + (str(i) + <span class="string">':::::'</span> + str(j) + <span class="string">'&lt;br&gt;&lt;p&gt;'</span>)</span><br><span class="line">        <span class="keyword">yield</span> body.encode(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure>
<p>这三种写法不同，但效果是一致的。</p>
<p>看起来很简单，那么怎么调用呢？这两个参数又是怎么提供呢？答案在下边。</p>
<h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><p>服务器程序会在每次客户端的请求传来时，调用我们写好的应用程序，并将处理好的结果返回给客户端。</p>
<p>一个简单的服务器程序大概是这样子的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(application)</span>:</span></span><br><span class="line">    environ = &#123;&#125;</span><br><span class="line"> </span><br><span class="line">		<span class="comment"># start_response是HTTP响应的开始，它的形式为：</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(status, response_headers, exc_info=None)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">    result = application(environ, start_response)</span><br><span class="line"> </span><br><span class="line">		<span class="comment"># 返回一个可调用对象，这个可调用对象形式为：</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(data)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> result:</span><br><span class="line">        write(data)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>status</strong>： 表示 HTTP 状态码，例如 “200 OK”, “404 Not Found”，它们在 <a href="http://www.faqs.org/rfcs/rfc2616.html" target="_blank" rel="external">RFC 2616</a>中定义，status禁止包含控制字符。</p>
<p><strong>response_headers</strong>： 是一个列表，列表项是一个二元组： (header_name, heaer_value) ， 每个 header_name 都必须是 <a href="http://www.faqs.org/rfcs/rfc2616.html" target="_blank" rel="external">RFC 2616</a> 4.2 节中定义的HTTP 头部名。header_value 禁止包含控制字符。</p>
<p><strong>exc_info</strong>：</p>
<ol>
<li><p>这是一个可选参数，它必须和Python的 sys.exc_info()返回的数据有相同类型。当处理请求的过程遇到错误时，这个参数会被设置，同时调用 start_response。如果提供了exc_info，但是HTTP headers 还没有输出，那么 start_response需要将当前存储的 HTTP response headers替换成一个新值。但是，如果提供了exc_info，同时 HTTP headers已经输出了，那么 start_response 必须 raise 一个 error。禁止应用程序处理 start_response raise出的 exceptions，应该交给服务器程序处理。</p>
</li>
<li><p>当且仅当提供 exc_info参数时，start_response才可以被调用多于一次。换句话说，要是没提供这个参数，start_response在当前应用程序中调用后，禁止再调用。</p>
</li>
<li><p>为了避免循环引用，start_response实现时需要保证 exc_info在函数调用后不再包含引用。 也就是说start_response用完 exc_info后，需要保证执行一句</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;    exc_info = <span class="keyword">None</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<pre><code>&gt;
&gt;    这可以通过 try/finally实现。
</code></pre><p>这里可以看出服务器程序是如何与应用程序配合完成用户请求的。</p>
<p>WSGI规定了应用程序需要是一个可调用对象，有两个参数，返回一个可迭代对象。在 服务器 程序中，针对这几个规定，做了以下几件事：</p>
<ul>
<li>把应用程序需要的两个参数设置好</li>
<li>调用应用程序</li>
<li>迭代访问应用程序的返回结果，并将其传回客户端</li>
</ul>
<p>Python自己实现了一个WSGI服务器，名为wsgiref，怎么使用呢？见代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ser.py 同hello.py同一层</span></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"><span class="keyword">from</span> hello <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个服务器，第三个参数是处理函数</span></span><br><span class="line"><span class="comment"># 监听端口及绑定的ip以及请求到来时使用的app</span></span><br><span class="line">httpd = make_server(<span class="string">'0.0.0.0'</span>,<span class="number">8000</span>,app)</span><br><span class="line">print(<span class="string">'Serving HTTP on port 8000...'</span>)</span><br><span class="line"><span class="comment"># 开始不断监听HTTP请求</span></span><br><span class="line">httpd.serve_forever()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行后，打开浏览器，键入http://127.0.0.1:8000，就能看到我们app的效果了。</span></span><br></pre></td></tr></table></figure>
<p>你可以从中发现，应用程序需要的两个参数，一个是一个dict对象，一个是函数。它们到底有什么用呢？这都不是我们现在应该关心的，现在只需要知道，服务器程序大概做了什么事情就好了，后面，我们会深入讨论这些细节。</p>
<h2 id="middleware"><a href="#middleware" class="headerlink" title="middleware"></a>middleware</h2><p><strong>WSGI Middleware</strong>（中间件）也是WSGI规范的一部分。上面我们已经说明了WSGI的两个角色：server和application。那么middleware是一种运行在server和application中间的应用（一般都是Python应用）。middleware同时具备server和application角色，对于server来说，它是一个application；对于application来说，它是一个server。middleware并不修改server端和application端的规范，只是同时实现了这两个角色的功能而已。</p>
<p>我们可以通过下图来说明middleware是如何工作的：</p>
<p><img src="/images/python-web-wsgi-4.png" alt="img"></p>
<p>上图中最上面的三个彩色框表示角色，中间的白色框表示操作，操作的发生顺序按照1 ~ 5进行了排序，我们直接对着上图来说明middleware是如何工作的：</p>
<ol>
<li>Server收到客户端的HTTP请求后，生成了<code>environ_s</code>，并且已经定义了<code>start_response_s</code>。</li>
<li>Server调用Middleware的application对象，传递的参数是<code>environ_s</code>和<code>start_response_s</code>。</li>
<li>Middleware会根据<code>environ</code>执行业务逻辑，生成<code>environ_m</code>，并且已经定义了<code>start_response_m</code>。</li>
<li>Middleware决定调用Application的application对象，传递参数是<code>environ_m</code>和<code>start_response_m</code>。Application的application对象处理完成后，会调用<code>start_response_m</code>并且返回结果给Middleware，存放在<code>result_m</code>中。</li>
<li>Middleware处理<code>result_m</code>，然后生成<code>result_s</code>，接着调用<code>start_response_s</code>，并返回结果<code>result_s</code>给Server端。Server端获取到result_s后就可以发送结果给客户端了。</li>
</ol>
<p>从上面的流程可以看出middleware应用的几个特点：</p>
<ol>
<li>Server认为middleware是一个application。</li>
<li>Application认为middleware是一个server。</li>
<li>Middleware可以有多层。</li>
</ol>
<p>因为Middleware能过处理所有经过的request和response，所以要做什么都可以，没有限制。比如可以检查request是否有非法内容，检查response是否有非法内容，为request加上特定的HTTP header等，这些都是可以的。</p>
<p>下面，我们看看middleware大概是什么样子的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL Routing middleware</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">urlrouting</span><span class="params">(url_app_mapping)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">midware_app</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">        url = environ[<span class="string">'PATH_INFO'</span>]</span><br><span class="line">        app = url_app_mapping[url]</span><br><span class="line"> </span><br><span class="line">        result = app(environ, start_response)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> midware_app</span><br></pre></td></tr></table></figure>
<p>函数 <code>midware_app</code>就是一个简单的middleware：对服务器而言，它是一个应用程序，是一个可调用对象， 有两个参数，返回一个可调用对象。对应用程序而言，它是一个服务器，为应用程序提供了参数，并且调用了应用程序。</p>
<p>另外，这里的<code>urlrouting</code>函数，相当于一个函数生成器，你给它不同的 url-app 映射关系，它会生成相应的具有 url routing功能的 middleware。</p>
<h2 id="WSGI的实现和部署"><a href="#WSGI的实现和部署" class="headerlink" title="WSGI的实现和部署"></a>WSGI的实现和部署</h2><p>要使用WSGI，需要分别实现server角色和application角色。</p>
<p>Application端的实现一般是由Python的各种框架来实现的，比如Django, web.py等，一般开发者不需要关心WSGI的实现，框架会会提供接口让开发者获取HTTP请求的内容以及发送HTTP响应。</p>
<p>Server端的实现会比较复杂一点，这个主要是因为软件架构的原因。一般常用的Web服务器，如Apache和nginx，都不会内置WSGI的支持，而是通过扩展来完成。比如Apache服务器，会通过扩展模块mod_wsgi来支持WSGI。Apache和mod_wsgi之间通过程序内部接口传递信息，mod_wsgi会实现WSGI的server端、进程管理以及对application的调用。Nginx上一般是用proxy的方式，用nginx的协议将请求封装好，发送给应用服务器，比如uWSGI，应用服务器会实现WSGI的服务端、进程管理以及对application的调用。</p>
<p>如果你仅仅想简单了解一下WSGI是什么，相信到这里，你差不多明白了</p>
<p>如果想要了解更多的内容，可以看下 <a href="http://www.python.org/dev/peps/pep-3333/" target="_blank" rel="external">PEP3333</a> 。</p>
<h3 id="server-实现"><a href="#server-实现" class="headerlink" title="server 实现"></a>server 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIServer</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    address_family = socket.AF_INET</span><br><span class="line">    socket_type = socket.SOCK_STREAM</span><br><span class="line">    request_queue_size = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server_address)</span>:</span></span><br><span class="line">        <span class="comment"># 创建一个可用的socket</span></span><br><span class="line">        self.listen_socket = listen_socket = socket.socket(</span><br><span class="line">            self.address_family,</span><br><span class="line">            self.socket_type</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#socket的工作模式</span></span><br><span class="line">        listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># Bind</span></span><br><span class="line">        listen_socket.bind(server_address) <span class="comment">#绑定地址</span></span><br><span class="line">        <span class="comment"># Activate</span></span><br><span class="line">        listen_socket.listen(self.request_queue_size)  <span class="comment">#监听文件描述符</span></span><br><span class="line">        <span class="comment"># Get server host name and port</span></span><br><span class="line">        host, port = self.listen_socket.getsockname()[:<span class="number">2</span>]</span><br><span class="line">        self.server_name = socket.getfqdn(host)</span><br><span class="line">        self.server_port = port</span><br><span class="line">        self.headers_set = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_app</span><span class="params">(self, application)</span>:</span></span><br><span class="line">        self.application = application</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve_forever</span><span class="params">(self)</span>:</span>   <span class="comment">#启动WSGI server服务，不停的监听并获取socket数据。</span></span><br><span class="line">        listen_socket = self.listen_socket</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                self.client_connection, client_address = listen_socket.accept()</span><br><span class="line">            self.handle_one_request()   <span class="comment">#处理新连接</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_one_request</span><span class="params">(self)</span>:</span>   <span class="comment">#主要处理函数</span></span><br><span class="line">        self.request_data = request_data = self.client_connection.recv(<span class="number">1024</span>)</span><br><span class="line">        print(<span class="string">''</span>.join(</span><br><span class="line">            <span class="string">'&lt; &#123;line&#125;\n'</span>.format(line=line)</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> request_data.splitlines()</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line">        self.parse_request(request_data)</span><br><span class="line">        env = self.get_environ()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#给flask\tornado传递两个参数，environ，start_response</span></span><br><span class="line">        result = self.application(env, self.start_response)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Construct a response and send it back to the client</span></span><br><span class="line">        self.finish_response(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_request</span><span class="params">(self, text)</span>:</span>    <span class="comment">#处理socket的http协议</span></span><br><span class="line">        request_line = text.splitlines()[<span class="number">0</span>]</span><br><span class="line">        request_line = request_line.rstrip(<span class="string">'\r\n'</span>)</span><br><span class="line">        <span class="comment"># Break down the request line into components</span></span><br><span class="line">        (self.request_method,  <span class="comment"># GET</span></span><br><span class="line">         self.path,            <span class="comment"># /hello</span></span><br><span class="line">         self.request_version  <span class="comment"># HTTP/1.1</span></span><br><span class="line">         ) = request_line.split()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_environ</span><span class="params">(self)</span>:</span>   <span class="comment">#获取environ数据</span></span><br><span class="line">        env = &#123;&#125;</span><br><span class="line">        env[<span class="string">'wsgi.version'</span>]      = (<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        env[<span class="string">'wsgi.url_scheme'</span>]   = <span class="string">'http'</span></span><br><span class="line">        env[<span class="string">'wsgi.input'</span>]        = StringIO.StringIO(self.request_data)</span><br><span class="line">        env[<span class="string">'wsgi.errors'</span>]       = sys.stderr</span><br><span class="line">        env[<span class="string">'wsgi.multithread'</span>]  = <span class="keyword">False</span></span><br><span class="line">        env[<span class="string">'wsgi.multiprocess'</span>] = <span class="keyword">False</span></span><br><span class="line">        env[<span class="string">'wsgi.run_once'</span>]     = <span class="keyword">False</span></span><br><span class="line">        env[<span class="string">'REQUEST_METHOD'</span>]    = self.request_method    <span class="comment"># GET</span></span><br><span class="line">        env[<span class="string">'PATH_INFO'</span>]         = self.path              <span class="comment"># /hello</span></span><br><span class="line">        env[<span class="string">'SERVER_NAME'</span>]       = self.server_name       <span class="comment"># localhost</span></span><br><span class="line">        env[<span class="string">'SERVER_PORT'</span>]       = str(self.server_port)  <span class="comment"># 8888</span></span><br><span class="line">        <span class="keyword">return</span> env</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(self, status, response_headers, exc_info=None)</span>:</span>   <span class="comment">#创建回调函数.</span></span><br><span class="line">        server_headers = [</span><br><span class="line">            (<span class="string">'Date'</span>, <span class="string">'Tue, 31 Mar 2015 12:54:48 GMT'</span>),</span><br><span class="line">            (<span class="string">'Server'</span>, <span class="string">'WSGIServer 0.3'</span>),</span><br><span class="line">        ]</span><br><span class="line">        self.headers_set = [status, response_headers + server_headers]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finish_response</span><span class="params">(self, result)</span>:</span>  <span class="comment">#把application返回给WSGI的数据返回给客户端。</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            status, response_headers = self.headers_set</span><br><span class="line">            response = <span class="string">'HTTP/1.1 &#123;status&#125;\r\n'</span>.format(status=status)</span><br><span class="line">            <span class="keyword">for</span> header <span class="keyword">in</span> response_headers:</span><br><span class="line">                response += <span class="string">'&#123;0&#125;: &#123;1&#125;\r\n'</span>.format(*header)</span><br><span class="line">            response += <span class="string">'\r\n'</span></span><br><span class="line">            <span class="keyword">for</span> data <span class="keyword">in</span> result:</span><br><span class="line">                response += data</span><br><span class="line">            <span class="comment"># Print formatted response data a la 'curl -v'</span></span><br><span class="line">            print(<span class="string">''</span>.join(</span><br><span class="line">                <span class="string">'&gt; &#123;line&#125;\n'</span>.format(line=line)</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> response.splitlines()</span><br><span class="line">            ))</span><br><span class="line">            self.client_connection.sendall(response)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.client_connection.close()</span><br><span class="line"></span><br><span class="line">SERVER_ADDRESS = (HOST, PORT) = <span class="string">''</span>, <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_server</span><span class="params">(server_address, application)</span>:</span></span><br><span class="line">    server = WSGIServer(server_address)</span><br><span class="line">    server.set_app(application)</span><br><span class="line">    <span class="keyword">return</span> server</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        sys.exit(<span class="string">'Provide a WSGI application object as module:callable'</span>)</span><br><span class="line">    app_path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    module, application = app_path.split(<span class="string">':'</span>)</span><br><span class="line">    module = __import__(module)   <span class="comment">#动态加载模块</span></span><br><span class="line">    application = getattr(module, application)  <span class="comment">#使用自省的模式加载application的WSGI协议入口。</span></span><br><span class="line">    httpd = make_server(SERVER_ADDRESS, application)</span><br><span class="line">    print(<span class="string">'WSGIServer: Serving HTTP on port &#123;port&#125; ...\n'</span>.format(port=PORT))</span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure>
<h3 id="app-实现"><a href="#app-实现" class="headerlink" title="app 实现"></a>app 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Response</span><br><span class="line">flask_app = Flask(<span class="string">'flaskapp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@flask_app.route('/search')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> Response(</span><br><span class="line">        ’xiaorui.cc Golang vs python !\n<span class="string">',</span></span><br><span class="line"><span class="string">        mimetype='</span>text/plain<span class="string">'</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">app = flask_app.wsgi_app</span></span><br></pre></td></tr></table></figure>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python webserver2.py flaskapp:app</span><br></pre></td></tr></table></figure>
<h1 id="Gunicorn与uWSGI"><a href="#Gunicorn与uWSGI" class="headerlink" title="Gunicorn与uWSGI"></a>Gunicorn与uWSGI</h1><h2 id="perfork"><a href="#perfork" class="headerlink" title="perfork"></a>perfork</h2><p>perfork是一种服务端编程模型, Nginx, Gunicorn, uWSGI都是这种模型的实现, 简单的说perfok就是master进程启动注册一堆信号处理函数, 创建listen socket fd, fork出<strong>多个worker子进程</strong>, 子进程执行accept循环处理请求(这里简化模型, 当然也可以用select, epoll多路复用), master进程只负责监控worker进程状态, 通过pipeline通信来控制worker进程.</p>
<p>perfork模型使用master进程来监控worker进程状态, 避免了我们使用supervisor来监控进程, 还支持多种信号来控制worker的数量, 使得CPU能充分得到利用, 多个worker进程监听同一端口, 可以配置reuse_port参数在worker进程间负载均衡.</p>
<p><strong>Gunicorn与uWSGI都是基于perfork模型的WSGI服务器。</strong></p>
<h2 id="Gunicorn"><a href="#Gunicorn" class="headerlink" title="Gunicorn"></a>Gunicorn</h2><p>Gunicorn是使用Python实现的WSGI服务器, 直接提供了http服务, 并且在woker上提供了多种选择, gevent, eventlet这些都支持, 在多worker最大化里用CPU的同时, 还可以使用协程来提供并发支撑, 对于网络IO密集的服务比较有利.</p>
<p>同时Gunicorn也很容易就改造成一个TCP的服务, 比如<a href="https://github.com/zhu327/doge/tree/master/doge/gunicorn" target="_blank" rel="external">doge</a>重写worker类, 在针对长连接的服务时, 最好开启reuse_port, 避免worker进程负载不均。</p>
<h2 id="uWSGI"><a href="#uWSGI" class="headerlink" title="uWSGI"></a>uWSGI</h2><p>不同于Gunicorn, uWSGI是使用C写的, 它的socket fd创建, worker进程的启动都是使用C语言系统接口来实现的, 在worker进程处理循环中, 解析了http请求后, 使用python的C接口生成environ对象, 再把这个对象作为参数塞到暴露出来的WSGI application函数中调用. 而这一切都是在C程序中进行, 只是在处理请求的时候交给python虚拟机调用application. 完全使用C语言实现的好处是性能会好一些.</p>
<p>除了支持http协议, uWSGI还实现了uwsgi协议, 一般我们会在uWSGI服务器前面使用Nginx作为负载均衡, 如果使用http协议, 请求在转发到uWSGI前已经在Nginx这里解析了一遍, 转发到uWSGI又会重新解析一遍. uWSGI为了追求性能, 设计了uwsgi协议, 在Nginx解析完以后直接把解析好的结果通过uwsgi协议转发到uWSGI服务器, uWSGI拿到请求按格式生成environ对象, 不需要重复解析请求. 如果用Nginx配合uWSGI, 最好使用uwsgi协议来转发请求.</p>
<p>除了是一个WSGI服务器, uWSGI还是一个开发框架, 它提供了缓存, 队列, rpc等等功能, 在github找找就会发现有人用它的缓存写了一个Django cache backend, 用它的队列实现异步任务这些东西, 但是用了这些东西技术栈也就跟uWSGI绑定在一起, 所以一般也只是把uWSGI当作WSGI服务器来用。</p>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>使用多个进程监听同一端口就绕不开惊群这个话题, fork子进程, 子进程共享listen socket fd, 多个子进程同时accept阻塞, 在请求到达时内核会唤醒所有accept的进程, 然而只有一个进程能accept成功, 其它进程accept失败再次阻塞, 影响系统性能, 这就是惊群. Linux 2.6内核更新以后多个进程accept只有一个进程会被唤醒, 但是如果使用epoll还是会产生惊群现象.</p>
<p>Nginx为了解决epoll惊群问题, 使用进程间互斥锁, 只有拿到锁的进程才能把listen fd加入到epoll中, 在accept完成后再释放锁.</p>
<p>但是在高并发情况下, 获取锁的开销也会影响性能, 一般会建议把锁配置关掉. 直到Nginx 1.9.1更新支持了socket的<code>SO_REUSEPORT</code>选项, 惊群问题才算解决, listen socket fd不再是在master进程中创建, 而是每个worker进程创建一个通过<code>SO_REUSEPORT</code> 选项来复用端口, 内核会自行选择一个fd来唤醒, 并且有负载均衡算法.</p>
<p>Gunicorn与uWSGI都支持reuse_port选项, 在使用时可以通过压测来评估一下reuse_port是否能提升性能.</p>
<p>一般我们会在Gunicorn/uWSGI前面再加一层Nginx, 这样做的原因有一下几点：</p>
<ol>
<li>做负载均衡</li>
<li>静态文件服务器</li>
<li>更安全</li>
<li>扛并发</li>
</ol>
<p><br><br>参考：</p>
<p><a href="https://blog.csdn.net/baidu_35085676/article/details/80184874" target="_blank" rel="external">浅析WSGI</a></p>
<p><a href="https://segmentfault.com/a/1190000003069785" target="_blank" rel="external">WSGI简介</a></p>
<p><a href="https://blog.csdn.net/on_1y/article/details/18803563" target="_blank" rel="external">WSGI 详解</a></p>
<p><a href="https://www.jianshu.com/p/c66d3adeaaed" target="_blank" rel="external">什么是wsgi？</a></p>
<p><a href="https://www.cnblogs.com/xuegqcto/p/10411943.html" target="_blank" rel="external">Gunicorn与uWSGI</a></p>
<p><a href="https://www.jianshu.com/p/08985c50fa22" target="_blank" rel="external">wsgi、uwsgi、uWSGI、nginx、apache</a></p>
<p><a href="https://www.cnblogs.com/wongbingming/p/11002978.html" target="_blank" rel="external">花了两个星期，我终于把 WSGI 整明白了</a></p>
<p><a href="https://baijiahao.baidu.com/s?id=1590941335729952485&amp;wfr=spider&amp;for=pc" target="_blank" rel="external">cgi、wsgi、uwsgi 与 uWSGI都是啥？</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/27600327" target="_blank" rel="external">WSGI规范(PEP 3333) 中文文档</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> PythonWeb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oslo系列之oslo.cache]]></title>
      <url>https://magiceses.github.io/2018/10/05/openstack-oslo.packages-oslo.cache/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">人生需要做到。生活要：热情，乐观。爱情要：专一，用情。友情要：真诚，守信。亲情要：孝敬，疼爱。每一天一点，人生就进步一点。<br></p>

<p>在OpenStack中除了使用数据库对云平台所产生的数据进行持久化外，还需要对一些常用的数据或状态进行缓存。而oslo.cache便通过dogpile.cache库实现了一个缓存机制为OpenStack其他组件提供缓存。目前，oslo.cache支持多种缓存机制，包括Memcache、etcd 3.x、MongoDB、dictionary等。本文将详细介绍oslo.cache提供的缓存机制与常用的使用方法。</p>
<h2 id="dogpile-cache库"><a href="#dogpile-cache库" class="headerlink" title="dogpile.cache库"></a>dogpile.cache库</h2><p>dogpile.cache是一个缓存API，它为各种类型的缓存后端提供了一个通用的接口；另外，它还提供了API钩子，可以将这些不同的缓存后端与dogpile库提供的锁机制结合使用。由于本文重点介绍oslo.cache，所以不对dogpile.cache库做深入展开，有兴趣的同学可以参考dogpile.cache文档。本文只对dogpile.cache中提供的通用接口进行介绍。</p>
<a id="more"></a>
<p>首先，dogpile.cache封装了CacheValue类用来保存一个缓存数据，该类中包含两个属性：payload属性，载荷，即缓存保存的数据；metadata属性，即dogpile.cache的元数据。所有通过dogpile.cache库进行缓存的数据都会被封装成CacheValue类的实例化对象。</p>
<p>CacheBackend类是dogpile.cache为不同缓存后端提供的一个通用的缓存接口，该接口为不同类型的缓存后端，如Memcache等提供了统一的接口，程序员在使用时只需要为该类添加实现即可实现读写缓存等操作。该接口主要提供了一下几个属性和方法：</p>
<ul>
<li>key_mangler属性：表示一个key的压缩函数，可能是空，也可能声明为一个普通的实例方法；</li>
<li>set(key, value)：缓存一个值，key表示这个值的关键字，value代表一个具体的CacheValue对象；</li>
<li>set_multi(mapping)：缓存多个值，mapping是一个字典类型的值；</li>
<li>get(key)：从缓存中获取一个值，返回一个CacheValue对象，如果指定的key找不到对应的值，则返回一个NoValue类型的对象，表示空；</li>
<li>get_multi(keys)：从缓存中获取多个值；</li>
<li>get_mutex(key)：为给定的键返回一个可选的互斥锁对象，该对象需要提供两个方法：加锁acquire()和释放锁release()；</li>
<li>delete(key)：从缓存中删除一个值；</li>
<li>delete_multi(keys)：从缓存中删除多个值。</li>
</ul>
<h2 id="oslo-cache支持的后端缓存机制"><a href="#oslo-cache支持的后端缓存机制" class="headerlink" title="oslo.cache支持的后端缓存机制"></a>oslo.cache支持的后端缓存机制</h2><p>目前，oslo.cache实现了四种后端缓存机制的支持，包括Memcache、etcd 3.x、MongoDB、dictionary等。这些实现都保存在oslo_cache/backend目录下，</p>
<ul>
<li>oslo.cache.backend.memcache_pool：该模块提供了Memcache缓存池支持，首先实现了Memcache缓存连接池ConnectionPool，然后实现了PooledMemcachedBackend类对Memcache缓存连接池进行读写等操作；</li>
<li>oslo_cache.backend.etcd3gw：该模块提供了etcd 3.x版本的缓存操作，实现了Etcd3gwCacheBackend类；</li>
<li>oslo_cache.backend.mongo：该模块通过MongoCacheBackend类实现了使用MongoDB进行缓存的操作；</li>
<li>oslo_cache.backed.dictionary：该模块DictCacheBackend类实现了通过字典进行缓存的操作机制。</li>
</ul>
<p>上述这些实现缓存的类，包括PooledMemcachedBackend、Etcd3gwCacheBackend、MongoCacheBackend、DictCacheBackend，都是dogpile.cache中CacheBackend类的实现。其通过具体的后端缓存机制实现了对缓存的增删查等操作。</p>
<p>oslo.cache除了支持自身实现的四种缓存机制外，还支持dogpile.cache库本身实现的各类缓存机制，包括Redis、dbm、memory、pylibmc等。</p>
<h2 id="oslo-cache缓存机制的实现"><a href="#oslo-cache缓存机制的实现" class="headerlink" title="oslo.cache缓存机制的实现"></a>oslo.cache缓存机制的实现</h2><p>oslo.cache缓存机制的核心实现都定义在oslo_cache.core模块中，而缓存机制的实现主要依赖于以下几个方法：</p>
<ul>
<li>create_region(function=function_key_generator)：创建缓存区，该方法主要调用了dogpile.cache模块的make_region(function_key_generator=function)方法创建了一个CacheRegion对象。该对象通过配置文件找到对应的后端缓存实现机制创建缓存区，该对象通过具体的后端缓存机制实现了缓存数据的增删改操作。该方法调用了oslo.cache自己定义的key键生成方法；</li>
<li>configure_cache_region(conf, region)：该方法通过配置文件中缓存的相关配置以及CacheRegion对象提供的配置方法配置缓存区；</li>
<li>get_memoization_decorator(conf, region, group, expiration_group=None)：这是一个根据CacheRegion对象中cache_on_arguments()装饰器定义的oslo.cache的一个装饰器，其会根据group或expiration_group确定是否允许缓存以及缓存的时间。而CacheRegion对象中的cache_on_arguments()方法则提供了对一个或多个值的缓存、获取等操作方法。</li>
</ul>
<h2 id="oslo-cache的使用"><a href="#oslo-cache的使用" class="headerlink" title="oslo.cache的使用"></a>oslo.cache的使用</h2><p>oslo.cache的使用方式也非常简单，首先在使用oslo.cache时需要在对应OpenStack服务中添加相关的配置信息。这些配置信息包括是否允许使用缓存enabled、后端缓存机制backend以及缓存的保存时间cache_time等。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[cache]</span><br><span class="line">enabled = true</span><br><span class="line">backend = dogpile.cache.memory</span><br><span class="line"> </span><br><span class="line">[feature-name]</span><br><span class="line">caching = <span class="keyword">True</span></span><br><span class="line">cache_time = <span class="number">7200</span></span><br></pre></td></tr></table></figure>
<p>接下来，你可以直接使用oslo.cache中封装的方法进行缓存操作。首先根据配置文件创建一个CacheRegion对象，然后使用oslo.cache中的get_memoization_decorator装饰器进行缓存操作。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> oslo_cache <span class="keyword">import</span> core <span class="keyword">as</span> cache</span><br><span class="line"><span class="keyword">from</span> oslo_config <span class="keyword">import</span> cfg</span><br><span class="line"> </span><br><span class="line">CONF = cfg.CONF</span><br><span class="line"> </span><br><span class="line">caching = cfg.BoolOpt(<span class="string">'caching'</span>, default=<span class="keyword">True</span>)</span><br><span class="line">cache_time = cfg.IntOpt(<span class="string">'cache_time'</span>, default=<span class="number">3600</span>)</span><br><span class="line">CONF.register_opts([caching, cache_time], <span class="string">"feature-name"</span>)</span><br><span class="line"> </span><br><span class="line">cache.configure(CONF)</span><br><span class="line">example_cache_region = cache.create_region()</span><br><span class="line">MEMOIZE = cache.get_memoization_decorator(</span><br><span class="line">    CONF, example_cache_region, <span class="string">"feature-name"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Load config file here</span></span><br><span class="line"> </span><br><span class="line">cache.configure_cache_region(CONF, example_cache_region)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@MEMOIZE</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> x</span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>
<p>当然，你也可以对oslo.cache的功能进行扩展，使其符合项目的自身需求。在此，以nova组件为例介绍对oslo.cache的扩展方法。nova在nova.cache_utils模块中实现了对oslo.cache的扩展。首先，nova实现了两种创建CacheRegion对象的方式：_get_default_cache_region(expiration_time)方法使用默认的后端缓存实现，而_get_custom_cache_region(expiration_time=WEEK, backend=None, url=None)方法可以自己指定后端缓存的实现。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_default_cache_region</span><span class="params">(expiration_time)</span>:</span></span><br><span class="line">    region = cache.create_region()</span><br><span class="line">    <span class="keyword">if</span> expiration_time != <span class="number">0</span>:</span><br><span class="line">        CONF.cache.expiration_time = expiration_time</span><br><span class="line">    cache.configure_cache_region(CONF, region)</span><br><span class="line">    <span class="keyword">return</span> region</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_custom_cache_region</span><span class="params">(expiration_time=WEEK,</span></span></span><br><span class="line"><span class="function"><span class="params">                             backend=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                             url=None)</span>:</span></span><br><span class="line">    <span class="string">"""Create instance of oslo_cache client.</span></span><br><span class="line"><span class="string">    For backends you can pass specific parameters by kwargs.</span></span><br><span class="line"><span class="string">    For 'dogpile.cache.memcached' backend 'url' parameter must be specified.</span></span><br><span class="line"><span class="string">    :param backend: backend name</span></span><br><span class="line"><span class="string">    :param expiration_time: interval in seconds to indicate maximum</span></span><br><span class="line"><span class="string">        time-to-live value for each key</span></span><br><span class="line"><span class="string">    :param url: memcached url(s)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"> </span><br><span class="line">    region = cache.create_region()</span><br><span class="line">    region_params = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> expiration_time != <span class="number">0</span>:</span><br><span class="line">        region_params[<span class="string">'expiration_time'</span>] = expiration_time</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> backend == <span class="string">'oslo_cache.dict'</span>:</span><br><span class="line">        region_params[<span class="string">'arguments'</span>] = &#123;<span class="string">'expiration_time'</span>: expiration_time&#125;</span><br><span class="line">    <span class="keyword">elif</span> backend == <span class="string">'dogpile.cache.memcached'</span>:</span><br><span class="line">        region_params[<span class="string">'arguments'</span>] = &#123;<span class="string">'url'</span>: url&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_(<span class="string">'old style configuration can use '</span></span><br><span class="line">                             <span class="string">'only dictionary or memcached backends'</span>))</span><br><span class="line"> </span><br><span class="line">    region.configure(backend, **region_params)</span><br><span class="line">    <span class="keyword">return</span> region</span><br></pre></td></tr></table></figure>
<p>接着，nova组件实现了一个CacheClient类，封装了对数据的缓存操作。该类包含一个region属性保存CacheRegion对象，而对数据的缓存、获取、删除等操作具体是通过CacheRegion对象来实现的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheClient</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Replicates a tiny subset of memcached client interface."""</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, region)</span>:</span></span><br><span class="line">        self.region = region</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        value = self.region.get(key)</span><br><span class="line">        <span class="keyword">if</span> value == cache.NO_VALUE:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_or_create</span><span class="params">(self, key, creator)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.region.get_or_create(key, creator)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.region.set(key, value)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.region.get_or_create(key, <span class="keyword">lambda</span>: value)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.region.delete(key)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_multi</span><span class="params">(self, keys)</span>:</span></span><br><span class="line">        values = self.region.get_multi(keys)</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">None</span> <span class="keyword">if</span> value <span class="keyword">is</span> cache.NO_VALUE <span class="keyword">else</span> value <span class="keyword">for</span> value <span class="keyword">in</span></span><br><span class="line">                values]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_multi</span><span class="params">(self, keys)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.region.delete_multi(keys)</span><br></pre></td></tr></table></figure>
<p>最后，nova组件在cache_utils中实现了两个创建CacheClient对象的方法，这两个方法可以在使用中快速创建所需要的CacheClient对象。get_memcached_client()方法创建了一个后端缓存为Memcache的CacheClient对象，get_client()方法则创建了一个后端缓存为dictionary的CacheClient对象。其中，都会使用_warn_if_null_backend()方法检查后端缓存backend是否为空。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_warn_if_null_backend</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> CONF.cache.backend == <span class="string">'dogpile.cache.null'</span>:</span><br><span class="line">        LOG.warning(<span class="string">"Cache enabled with backend dogpile.cache.null."</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_memcached_client</span><span class="params">(expiration_time=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">"""Used ONLY when memcached is explicitly needed."""</span></span><br><span class="line">    <span class="comment"># If the operator has [cache]/enabled flag on then we let oslo_cache</span></span><br><span class="line">    <span class="comment"># configure the region from the configuration settings</span></span><br><span class="line">    <span class="keyword">if</span> CONF.cache.enabled <span class="keyword">and</span> CONF.cache.memcache_servers:</span><br><span class="line">        _warn_if_null_backend()</span><br><span class="line">        <span class="keyword">return</span> CacheClient(</span><br><span class="line">                _get_default_cache_region(expiration_time=expiration_time))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_client</span><span class="params">(expiration_time=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">"""Used to get a caching client."""</span></span><br><span class="line">    <span class="comment"># If the operator has [cache]/enabled flag on then we let oslo_cache</span></span><br><span class="line">    <span class="comment"># configure the region from configuration settings.</span></span><br><span class="line">    <span class="keyword">if</span> CONF.cache.enabled:</span><br><span class="line">        _warn_if_null_backend()</span><br><span class="line">        <span class="keyword">return</span> CacheClient(</span><br><span class="line">                _get_default_cache_region(expiration_time=expiration_time))</span><br><span class="line">    <span class="comment"># If [cache]/enabled flag is off, we use the dictionary backend</span></span><br><span class="line">    <span class="keyword">return</span> CacheClient(</span><br><span class="line">            _get_custom_cache_region(expiration_time=expiration_time,</span><br><span class="line">                                     backend=<span class="string">'oslo_cache.dict'</span>))</span><br></pre></td></tr></table></figure>
<p>在使用时，首先需要调用上述方法创建CacheClient对象，然后通过该对象进行具体的缓存操作。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nova <span class="keyword">import</span> cache_utils</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">memoize</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">memoizer</span><span class="params">(context, reqid)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> _CACHE</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> _CACHE:</span><br><span class="line">            _CACHE = cache_utils.get_client(expiration_time=_CACHE_TIME)</span><br><span class="line">        key = <span class="string">"%s:%s"</span> % (func.__name__, reqid)</span><br><span class="line">        key = str(key)</span><br><span class="line">        value = _CACHE.get(key)</span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            value = func(context, reqid)</span><br><span class="line">            _CACHE.set(key, value)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">return</span> memoizer</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@memoize</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">id_to_glance_id</span><span class="params">(context, image_id)</span>:</span></span><br><span class="line">    <span class="string">"""Convert an internal (db) id to a glance id."""</span></span><br><span class="line">    <span class="keyword">return</span> objects.S3ImageMapping.get_by_id(context, image_id).uuid</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@memoize</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">glance_id_to_id</span><span class="params">(context, glance_id)</span>:</span></span><br><span class="line">    <span class="string">"""Convert a glance id to an internal (db) id."""</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> glance_id:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> objects.S3ImageMapping.get_by_uuid(context, glance_id).id</span><br><span class="line">    <span class="keyword">except</span> exception.NotFound:</span><br><span class="line">        s3imap = objects.S3ImageMapping(context, uuid=glance_id)</span><br><span class="line">        s3imap.create()</span><br><span class="line">        <span class="keyword">return</span> s3imap.id</span><br></pre></td></tr></table></figure>
<p>在上述示例中，nova首先创建了一个memoize装饰器，在该装饰器中首先调用get_client()获取了一个CacheClient对象，然后调用该对象的get()方法获取指定key的值，如果查不到则将该值保存到缓存中，如id_to_glance_id(context, image_id)方法中image_id的值和glance_id_to_id(context, glance_id)中的glance_id的值等。</p>
<p>原文链接：<a href="https://blog.csdn.net/Bill_Xiang_/article/details/78701612" target="_blank" rel="external">https://blog.csdn.net/Bill_Xiang_/article/details/78701612</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Oslo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oslo系列之oslo.context]]></title>
      <url>https://magiceses.github.io/2018/10/05/openstack-oslo.packages-oslo.context/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">在茫茫沙漠，唯有前时进的脚步才是希望的象征。<br></p>

<p>在OpenStack中，oslo.context为所有OpenStack组件提供了一个保存请求上下文信息的基类，该类主要有两个作用：一、用来存储一个Web请求的安全信息；二、用来为oslo.log提供上下文详情。本章将详细分析oslo.context组件。</p>
<h2 id="RequestContext基类"><a href="#RequestContext基类" class="headerlink" title="RequestContext基类"></a>RequestContext基类</h2><p>在oslo.context组件中，主要定义了RequestContext基类，该类的每个实例化对象都保存了一个Web请求上下文信息。该类中保存的字段信息有：请求的Token信息，用户信息，项目信息，服务信息等；在实例化时，该类会为每个对象生成一个request_id在项目中唯一标识该对象。该类还提供了一系列方法以便其他OpenStack项目调用。其中，比较重要的方法主要有以下几个：</p>
<a id="more"></a>
<ul>
<li>global_id()：返回一个全局id，如果我们想使用一个全局的request_id时可以调用该方法。</li>
<li>from_dict(values, **kwargs)：使用给定的字典创建上下文对象。</li>
<li>from_environ(environ, **kwargs)：使用环境变量创建上下文对象。</li>
<li>to_dict()：返回一个包含上下文属性的字典。</li>
<li>to_policy_values()：为oslo.policy组件提供上下文信息。</li>
<li>update_store()：在当前线程中保存该上下文对象。</li>
<li>get_logging_values()：为oslo.log组件生成日志信息提供上下文信息。</li>
</ul>
<h2 id="oslo-context的使用"><a href="#oslo-context的使用" class="headerlink" title="oslo.context的使用"></a>oslo.context的使用</h2><p>一般地，OpenStack项目在使用oslo.context时会实现一个继承RequestContext的子类，并在子类中封装项目自身所需的其他上下文属性和方法。如OpenStack nova组件使用oslo.context时便实现了一个nova项目的RequestContext类，nova在继承了oslo.context.RequestContext类之外，还添加了db_connection、mq_connection、timestamp等属性，也添加了get_auth_plugin()、elevated()、can()等方法。</p>
<p>另外，nova还提供了一系列方便的操作上下文的方法，如获取上下文对象的方法get_context()、get_admin_context()，判断用户角色的方法is_user_context()等可以更加方便在Nova项目中使用上下文信息。对于oslo.context的具体使用方法比较简单，在OpenStack各项目中都有不同的应用，在此便不再赘述了。</p>
<p>原文链接：<a href="https://blog.csdn.net/Bill_Xiang_/article/details/78458677" target="_blank" rel="external">https://blog.csdn.net/Bill_Xiang_/article/details/78458677</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Oslo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oslo系列之oslo.concurrency]]></title>
      <url>https://magiceses.github.io/2018/10/05/openstack-oslo.packages-oslo.concurrency/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">你所选择的朋友，决定你的命运。<br></p>

<p>oslo.concurrency是一个为OpenStack其他项目提供用于管理线程的工具库，这样，OpenStack其他项目可以直接调用oslo.concurrency库利用其锁机制安全的运行多线程和多进程应用，也可以运行外部进程。本文总结了oslo.concurrency中常用的工具类或方法及其对应的使用方法。</p>
<h2 id="lockutils"><a href="#lockutils" class="headerlink" title="lockutils"></a>lockutils</h2><p>lockutils模块封装了oslo库的锁机制，其中，定义了读写锁、信号量以及同步装饰器方法等。本节分别介绍这些类和方法的实现与使用。</p>
<a id="more"></a>
<h3 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h3><p>lockutils中的锁机制实质上是直接使用了fasteners的实现，所以本节直接介绍fasteners库中的读写锁和共享内存，即ReaderWriteerLock和InterProcessLock类。</p>
<h4 id="ReaderWriterLock类"><a href="#ReaderWriterLock类" class="headerlink" title="ReaderWriterLock类"></a>ReaderWriterLock类</h4><p>ReaderWriterLock类实现了一个读写锁，读写锁实际是一种特殊的自旋锁，它把对共享资源的访问者划分成读者和写者，读者只对共享资源进行读访问，写者则需要对共享资源进行写操作。fasteners通过ReadWriterLock类实现了读锁和写锁，其在该类中定义了READER和WRITER标识分别表示申请的锁是读锁还是写锁。使用该类可以获得多个读锁，但只能存在一个写锁。在目前的版本中，该类不能实现从读写升级到写锁，且写锁在加锁时不能获取读锁；而以后可能会对这些问题进行优化。该类的主要方法如下：</p>
<ul>
<li>read_lock()：为当前线程申请一个读锁，其只有在没有为其他线程分配写锁时才能获取成功；如果另一个线程以及获取了写锁，调用该方法会返回RuntimeError异常。</li>
<li>write_lock()：为当前线程申请一个写锁，其只有在没有为其他线程分配读锁或写锁时才能获取成功；一旦申请写锁成功，将会阻塞申请读锁的线程。</li>
<li>is_reader()：判断当前线程是否申请了读锁。</li>
<li>is_writer()：判断当前线程是否申请了写锁，或已申请但尚未获得写锁。</li>
<li>owner()：判断当前线程是否申请了锁；如果获得了锁是读锁还是写锁。</li>
</ul>
<p>ReaderWriterLock类中包含_writer属性表示占有写锁的线程，_readers属性表示占有读锁的线程集合，_pending_writers属性表示正在等待分配写锁的线程的队列，_current_thread属性表示当前线程，_cond属性表示threading.Condition对象。上述的这些方法就是通过操作这几个属性实现读写锁的。</p>
<h4 id="InterProcessLock类"><a href="#InterProcessLock类" class="headerlink" title="InterProcessLock类"></a>InterProcessLock类</h4><p>InterProcessLock类是一个在POSIX系统上工作的进程间锁机制的实现类。该类会通过当前操作系统确定其内部的实现机制，通过该类可以实现多进程应用中共享内存、进程间通信与同步以及加锁等操作。其主要实现了tryLock()方法实现加锁，unlock()方法实现解锁，对于其具体实现，由于操作系统的不同其实现方法也不同，本人能力有限不再进行深入解析，有兴趣的同学可以自行研究。</p>
<h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>lockutils中也实现了信号量，准确来说是一个信号量垃圾收集的容器。这个集合在内部使用一个字典，这样当一个信号量不再被任何线程使用时，它将被垃圾收集器自动从这个容器中移除。其提供了一个get(name)方法，可以通过名称获取一个信号量。在具体使用时，可以直接lockutils中的internal_lock(name, semaphores=None)获取这个信号量容器。</p>
<h3 id="同步装饰器"><a href="#同步装饰器" class="headerlink" title="同步装饰器"></a>同步装饰器</h3><p>lockutils中定义了两个同步装饰器方法synchronized(name, lock_file_prefix=None, external=False, lock_path=None, semaphores=None, delay=0.01)和synchronized_with_prefix(lock_file_prefix)。前者直接使用@synchronized(name)对装饰的方法加同步锁；而后者可以通过重新定义使用@synchronized(name)对装饰的方法加一个带有前缀的同步锁。</p>
<h3 id="外部锁"><a href="#外部锁" class="headerlink" title="外部锁"></a>外部锁</h3><p>lockutils中也定义了两个方法分别用来获取和删除外部锁：external_lock(name, lock_file_prefix=None, lock_path=None)和remove_external_lock_file(name, lock_file_prefix=None, lock_path=None, semaphores=None)。其需要指定锁文件的前缀、锁文件路径以及锁的名称，通过这些属性，lockutils可以通过<code>_get_lock_path</code>(name, lock_file_prefix, lock_path=None)方法获取锁的位置，并根据锁文件创建和删除一个外部锁。</p>
<h2 id="processutils"><a href="#processutils" class="headerlink" title="processutils"></a>processutils</h2><p>processutils模块定义了一系列系统级的工具类和辅助函数。本小节将介绍processutils库的相关类或方法。</p>
<h3 id="进程或线程异常类"><a href="#进程或线程异常类" class="headerlink" title="进程或线程异常类"></a>进程或线程异常类</h3><p>processutils模块中定义了多个进程或线程异常类，如参数不合法异常InvalidArgumentError、不知名参数异常UnknownArgumentError、进程执行异常ProcessExecutionError、日志记录异常LogErrors等。</p>
<h3 id="资源限制类"><a href="#资源限制类" class="headerlink" title="资源限制类"></a>资源限制类</h3><p>ProcessLimits类封装了一个进程对资源的限制，这些限制主要包括以下几个方面：</p>
<ul>
<li>address_space：进程地址空间限制；</li>
<li>core_file_size：core文件大小限制；</li>
<li>cpu_time：CPU执行当前进程时间限制；</li>
<li>data_size：数据大小限制；</li>
<li>file_size：文件大小限制；</li>
<li>memory_locked：加锁的内存大小限制；</li>
<li>number_files：打开的文件最大数量限制；</li>
<li>number_processes：进程的最大数量限制；</li>
<li>resident_set_size：最大驻留集（RSS）大小限制；</li>
<li>stack_size：栈大小限制。</li>
</ul>
<h3 id="进程执行方法"><a href="#进程执行方法" class="headerlink" title="进程执行方法"></a>进程执行方法</h3><p>processutils模块中定义了执行进程的方法等，主要方法包括以下几个：</p>
<ul>
<li>execute()方法：该方法通过启动一个子进程提取并执行一个命令。主要参数有：待执行的命令cmd；设置当前目录的cwd；发送到打开的进程process_input；为进程设置环境变量的env_variables；代表退出进程的int、bool或list值check_exit_code，默认为0，只有产生异常才会设置为其他值；重试延迟时间delay_on_retry，如果设置为True，表示马上进行重试操作；cmd重试次数attempts；run_as_root，该值如果设置为True，则为cmd命令加上root_helper指定的前缀；为命令指定的前缀root_helper；shell表示是否使用shell执行这个命令；执行命令记录日志的等级loglevel；监听错误日志log_errors，是一个LogErrors对象；binary，该值如果为True，则返回Unicode编码的stdout后stderr；prlimit表示一个ProcessLimits对象，用于限制执行该cmd的命令的资源用量；</li>
<li>trycmd()方法：execute()的一个装饰器，使用这个装饰器可以更加容易的处理错误和异常。返回一个包含命令输出strdout或stderr字符串的元组。如果err不为空，则表示执行命令出现异常或错误；</li>
<li>ssh_execute()：通过ssh执行命令；</li>
<li>get_worker_count()：获取默认的worker数量，返回CPU的数量；如果无法确定则返回1。</li>
</ul>
<h2 id="watchdog"><a href="#watchdog" class="headerlink" title="watchdog"></a>watchdog</h2><p>watchdog模块实现了一个看门狗程序，定义了一个watch()方法。如果操作执行时间超过阈值，则记录日志；此时可能发生了死锁或是一个耗时操作。其包含四个参数：</p>
<ul>
<li>logger：一个记录日志的对象；</li>
<li>action：描述将执行的操作；</li>
<li>level：表示记录日志的等级，默认为debug；</li>
<li>after：发送消息之前的持续时间，默认为5s。</li>
</ul>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>上文介绍了oslo.concurrency的各个模块的实现，接下来将详细介绍如何使用这些模块更好的管理OpenStack项目的线程或进程</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> oslo_concurrency <span class="keyword">import</span> lockutils</span><br><span class="line"> </span><br><span class="line"><span class="meta">@synchronized('mylock')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"> </span><br><span class="line"><span class="meta">@synchronized('mylock')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>为一个方法添加@syschronized装饰器，可以保证统一时刻只有一个线程执行这个方法；但是，同时可以有两个方法共享这个锁，此时统一时刻要么只能执行foo方法，要么只能执行bar方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">in</span> nova/utils.py)</span><br><span class="line"><span class="keyword">from</span> oslo_concurrency <span class="keyword">import</span> lockutils</span><br><span class="line"> </span><br><span class="line">synchronized = lockutils.synchronized_with_prefix(<span class="string">'nova-'</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">(<span class="keyword">in</span> nova/foo.py)</span><br><span class="line"><span class="keyword">from</span> nova <span class="keyword">import</span> utils</span><br><span class="line"> </span><br><span class="line"><span class="meta">@utils.synchronized('mylock')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>如果需要设置一个带有前缀的同步锁，可以使用如上的方式进行设置</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FORMAT = <span class="string">'%(asctime)-15s %(message)s'</span></span><br><span class="line">logging.basicConfig(format=FORMAT)</span><br><span class="line">LOG = logging.getLogger(<span class="string">'mylogger'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> watchdog.watch(LOG, <span class="string">"subprocess call"</span>, logging.ERROR):</span><br><span class="line">    subprocess.call(<span class="string">"sleep 10"</span>, shell=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"done"</span></span><br></pre></td></tr></table></figure>
<p>如果设置一个看门狗，则可以使用with语法调用watchdog.watch()方法。</p>
<p>原文：<a href="https://blog.csdn.net/Bill_Xiang_/article/details/78392616" target="_blank" rel="external">https://blog.csdn.net/Bill_Xiang_/article/details/78392616</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Oslo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oslo系列之oslo.config]]></title>
      <url>https://magiceses.github.io/2018/10/05/openstack-oslo.packages-oslo.config/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">生命太过短暂，今日放弃了明天不必须能得到。<br></p>

<p>随着OpenStack项目的不断发展与完善，OpenStack社区将所有组件中的具有共性的组件剥离出来，并统一放在oslo组件下。oslo中的组件不仅可以在OpenStack项目中使用，也可以单独作为第三方工具包供其他项目使用。oslo.config项目是oslo组件中用于OpenStack配置文件的一个项目。本文首先以Nova项目为例，介绍了oslo.config的用法；然后，根据源码详细分析了其实现原理。</p>
<h1 id="oslo-config用法"><a href="#oslo-config用法" class="headerlink" title="oslo.config用法"></a>oslo.config用法</h1><h2 id="定义配置项"><a href="#定义配置项" class="headerlink" title="定义配置项"></a>定义配置项</h2><p>本小节以nova组件为例介绍oslo.config组件的用法。首先，要使用oslo.config需要导入该模块，一般地，直接导入oslo.config中的cfg即可。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> oslo_config <span class="keyword">import</span> cfg</span><br></pre></td></tr></table></figure>
<p>导入cfg后，需要新建一个表示配置组的OptGroup类，如在Nova中添加api相关配置时可以添加一个api_group类。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">api_group = cfg.OptGroup(<span class="string">'api'</span>,</span><br><span class="line">    title=<span class="string">'API options'</span>,</span><br><span class="line">    help=<span class="string">"""</span></span><br><span class="line"><span class="string">Options under this group are used to define Nova API.</span></span><br><span class="line"><span class="string">"""</span>)</span><br></pre></td></tr></table></figure>
<p>api_group表示了一组关于api的配置项，其中，api表示该配置组的名称；title描述了该配置组的标题；help则详细描述了该配置组的作用。</p>
<p>创建了配置组类之后，则需要创建所有的配置项，如在Nova中添加关于api权限相关的配置参数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">auth_opts = [</span><br><span class="line">    cfg.StrOpt(<span class="string">"auth_strategy"</span>,</span><br><span class="line">        default=<span class="string">"keystone"</span>,</span><br><span class="line">        choices=(<span class="string">"keystone"</span>, <span class="string">"noauth2"</span>),</span><br><span class="line">        deprecated_group=<span class="string">"DEFAULT"</span>,</span><br><span class="line">        help=<span class="string">"""</span></span><br><span class="line"><span class="string">This determines the strategy to use for authentication: keystone or noauth2.</span></span><br><span class="line"><span class="string">'noauth2' is designed for testing only, as it does no actual credential</span></span><br><span class="line"><span class="string">checking. 'noauth2' provides administrative credentials only if 'admin' is</span></span><br><span class="line"><span class="string">specified as the username.</span></span><br><span class="line"><span class="string">"""</span>),</span><br><span class="line">    cfg.BoolOpt(<span class="string">"use_forwarded_for"</span>,</span><br><span class="line">        default=<span class="keyword">False</span>,</span><br><span class="line">        deprecated_group=<span class="string">"DEFAULT"</span>,</span><br><span class="line">        help=<span class="string">"""</span></span><br><span class="line"><span class="string">When True, the 'X-Forwarded-For' header is treated as the canonical remote</span></span><br><span class="line"><span class="string">address. When False (the default), the 'remote_address' header is used.</span></span><br><span class="line"><span class="string">You should only enable this if you have an HTML sanitizing proxy.</span></span><br><span class="line"><span class="string">"""</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>auth_opts配置了一组与api权限等相关的配置项，其中有String和Bool类型的配置项，通过分别创建StrOpt对象和BoolOpt对象设置参数的类型。</p>
<p>创建配置项之后，则需要将所有配置项都注册到配置组中，如在Nova中将auth_opts等配置项注册到api_group配置组中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">API_OPTS = (auth_opts +</span><br><span class="line">            metadata_opts +</span><br><span class="line">            file_opts +</span><br><span class="line">            osapi_opts +</span><br><span class="line">            allow_instance_snapshots_opts +</span><br><span class="line">            osapi_hide_opts +</span><br><span class="line">            fping_path_opts +</span><br><span class="line">            os_network_opts +</span><br><span class="line">            enable_inst_pw_opts)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_opts</span><span class="params">(conf)</span>:</span></span><br><span class="line">    conf.register_group(api_group)</span><br><span class="line">    conf.register_opts(API_OPTS, group=api_group)</span><br><span class="line">    conf.register_opts(deprecated_opts)</span><br></pre></td></tr></table></figure>
<p>其中，调用register_opts(API_OPTS, group=api_group)表示将与api相关的配置项注册到api_group配置组中；register_group(api_group)表示将api_group配置组与具体的配置文件相关联；而register_opts(deprecated_opts)则将一些不再支持的配置项单独配置。</p>
<h2 id="读取配置文件并使用配置参数"><a href="#读取配置文件并使用配置参数" class="headerlink" title="读取配置文件并使用配置参数"></a>读取配置文件并使用配置参数</h2><p>一般，OpenStack组件在启动服务时便加载了配置文件，读取了各配置项；因此如果想要修改的配置信息被应用到服务中需要重启服务。如Nova启动nova-api服务时，会调用nova/cmd/api.py中的main()函数，在main()函数中，首先便会进行读取文件的操作。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.parse_args(sys.argv)</span><br></pre></td></tr></table></figure>
<p>而parse_args()函数通过sys.argv中指定的配置项和配置文件中的配置项，读取api相关的配置参数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_args</span><span class="params">(argv, default_config_files=None, configure_db=True,</span></span></span><br><span class="line"><span class="function"><span class="params">               init_rpc=True)</span>:</span></span><br><span class="line">    log.register_options(CONF)</span><br><span class="line">    <span class="comment"># We use the oslo.log default log levels which includes suds=INFO</span></span><br><span class="line">    <span class="comment"># and add only the extra levels that Nova needs</span></span><br><span class="line">    <span class="keyword">if</span> CONF.glance.debug:</span><br><span class="line">        extra_default_log_levels = [<span class="string">'glanceclient=DEBUG'</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        extra_default_log_levels = [<span class="string">'glanceclient=WARN'</span>]</span><br><span class="line">    log.set_defaults(default_log_levels=log.get_default_log_levels() +</span><br><span class="line">                     extra_default_log_levels)</span><br><span class="line">    rpc.set_defaults(control_exchange=<span class="string">'nova'</span>)</span><br><span class="line">    <span class="keyword">if</span> profiler:</span><br><span class="line">        profiler.set_defaults(CONF)</span><br><span class="line">    config.set_middleware_defaults()</span><br><span class="line"> </span><br><span class="line">    CONF(argv[<span class="number">1</span>:],</span><br><span class="line">         project=<span class="string">'nova'</span>,</span><br><span class="line">         version=version.version_string(),</span><br><span class="line">         default_config_files=default_config_files)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> init_rpc:</span><br><span class="line">        rpc.init(CONF)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> configure_db:</span><br><span class="line">        sqlalchemy_api.configure(CONF)</span><br></pre></td></tr></table></figure>
<p>nova通过导入nova.conf模块，此时会调用nova.conf的<strong>init</strong>.py文件中的各个register_opt()函数注册所有配置项。然后，调用了Config中的CongifOpts类的<strong>call</strong>()方法通过命令行参数和配置文件将配置项缓存到配置对象CONF中。之后，只需要在需要用到配置参数的文件中导入CONF对象即可使用其中的配置项。如在Nova中可以使用CONF.api.enable_instance_password读取配置文件中是否允许配置实例密码的配置项。</p>
<h1 id="oslo-config实现原理"><a href="#oslo-config实现原理" class="headerlink" title="oslo.config实现原理"></a>oslo.config实现原理</h1><p>本节结合oslo.config的用法详细介绍oslo.config的实现原理。oslo.config项目相对比较简单，其中主要设计到oslo_config目录下的cfg.py和types.py等文件。其中，cfg.py定义了配置类的数据结构和方法等；types.py则封装了OpenStack中各配置项的类型。</p>
<p>要使用oslo.config最重要的便是ConfigOpts类，所以本文首先介绍ConfigOpts类。ConfigOpts类是一个用来提供注册配置组和配置项的配置项管理类，其中包含几个重要的属性，_opts表示所有的配置项，_cli_opts表示所有的命令行配置项，_groups表示所有的配置组，_namespace表示各服务的命名空间；OpenStack服务启动后所有的配置参数都会通过这四个参数保存到内存中。</p>
<p>上面提到启动服务时，会调用ConfigOpts类的<strong>call</strong>()方法将服务的所有配置项缓存到内存中，其定义如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,</span></span></span><br><span class="line"><span class="function"><span class="params">             args=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             project=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             prog=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             version=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             usage=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             default_config_files=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             default_config_dirs=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             validate_default_values=False,</span></span></span><br><span class="line"><span class="function"><span class="params">             description=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             epilog=None)</span>:</span></span><br><span class="line">    <span class="string">"""Parse command line arguments and config files.</span></span><br><span class="line"><span class="string">    Calling a ConfigOpts object causes the supplied command line arguments</span></span><br><span class="line"><span class="string">    and config files to be parsed, causing opt values to be made available</span></span><br><span class="line"><span class="string">    as attributes of the object.</span></span><br><span class="line"><span class="string">    The object may be called multiple times, each time causing the previous</span></span><br><span class="line"><span class="string">    set of values to be overwritten.</span></span><br><span class="line"><span class="string">    Automatically registers the --config-file option with either a supplied</span></span><br><span class="line"><span class="string">    list of default config files, or a list from find_config_files().</span></span><br><span class="line"><span class="string">    If the --config-dir option is set, any *.conf files from this</span></span><br><span class="line"><span class="string">    directory are pulled in, after all the file(s) specified by the</span></span><br><span class="line"><span class="string">    --config-file option.</span></span><br><span class="line"><span class="string">    :param args: command line arguments (defaults to sys.argv[1:])</span></span><br><span class="line"><span class="string">    :param project: the toplevel project name, used to locate config files</span></span><br><span class="line"><span class="string">    :param prog: the name of the program (defaults to sys.argv[0]</span></span><br><span class="line"><span class="string">        basename, without extension .py)</span></span><br><span class="line"><span class="string">    :param version: the program version (for --version)</span></span><br><span class="line"><span class="string">    :param usage: a usage string (%prog will be expanded)</span></span><br><span class="line"><span class="string">    :param description: A description of what the program does</span></span><br><span class="line"><span class="string">    :param epilog: Text following the argument descriptions</span></span><br><span class="line"><span class="string">    :param default_config_files: config files to use by default</span></span><br><span class="line"><span class="string">    :param default_config_dirs: config dirs to use by default</span></span><br><span class="line"><span class="string">    :param validate_default_values: whether to validate the default values</span></span><br><span class="line"><span class="string">    :raises: SystemExit, ConfigFilesNotFoundError, ConfigFileParseError,</span></span><br><span class="line"><span class="string">             ConfigFilesPermissionDeniedError,</span></span><br><span class="line"><span class="string">             RequiredOptError, DuplicateOptError</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self.clear()</span><br><span class="line"> </span><br><span class="line">    self._validate_default_values = validate_default_values</span><br><span class="line"> </span><br><span class="line">    prog, default_config_files, default_config_dirs = self._pre_setup(</span><br><span class="line">        project, prog, version, usage, description, epilog,</span><br><span class="line">        default_config_files, default_config_dirs)</span><br><span class="line"> </span><br><span class="line">    self._setup(project, prog, version, usage, default_config_files,</span><br><span class="line">                default_config_dirs)</span><br><span class="line"> </span><br><span class="line">    self._namespace = self._parse_cli_opts(args <span class="keyword">if</span> args <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span></span><br><span class="line">                                           <span class="keyword">else</span> sys.argv[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">if</span> self._namespace._files_not_found:</span><br><span class="line">        <span class="keyword">raise</span> ConfigFilesNotFoundError(self._namespace._files_not_found)</span><br><span class="line">    <span class="keyword">if</span> self._namespace._files_permission_denied:</span><br><span class="line">        <span class="keyword">raise</span> ConfigFilesPermissionDeniedError(</span><br><span class="line">            self._namespace._files_permission_denied)</span><br><span class="line"> </span><br><span class="line">    self._check_required_opts()</span><br></pre></td></tr></table></figure>
<p>在该方法中，首先将所有配置项清空，然后根据项目名称和版本等信息获取配置文件路径，然后根据命令行参数和配置文件读取服务所有配置信息，并进行合法性校验。</p>
<p>除此之外，ConfigOpts类还定义了register_opt()方法，register_cli_opt()方法和register_group()方法等分别实现注册配置文件或命令行参数的配置项和注册配置组的操作。另外，也提供了unregister_opt()等方法卸载配置项，添加了clear()方法清空ConfigOpts对象中的配置信息。</p>
<p>在ConfigOpts类定义的属性和方法中，用到了两个重要的类：Opt类和OptGroup类。其中，Opt类定义了一个配置项的模板，主要属性包括配置项名称name，配置项类型type，关联的ConfigOpts对象dest，默认值default和帮助信息help等。为了更好的封装配置项，oslo.config针对具体的配置参数类型为Opt继承了一系列子类，包括StrOpt、BoolOpt、IntOpt、FloatOpt、ListOpt、DictOpt、IPOpt、PortOpt、HostnameOpt、HostAddressOpt、URIOpt、MultiOpt、MultiStrOpt、SubCommandOpt、_ConfigFileOpt、_ConfigDirOpt等。OptGroup类则定义了一个配置组的模板，其主要属性包括配置组名称name，配置组描述title，配置组帮助信息help等。ConfigOpts类利用Opt和OptGroup辅助完成配置项的注册和读取等。</p>
<p>在读取配置文件时，oslo.config还定义了ConfigParser类将配置文件中的所有配置项封装为Json数据包便于处理。</p>
<p>最后，oslo.config将所有配置项的数据类型使用ConfigType类进行了封装，定义了各数据类型的类型名称、格式、最大值、最小值、最大长度等；这些数据类型主要包括String、MultiString、Boolean、Number、Integer、Float、Port、List、Range、Dict、IPAddress、Hostname、HostAddress、URI等。在使用时，可以调用<strong>call</strong>()方法校验读取的参数是否符合类型要求，也可以调用_formatter()方法对配置参数进行格式化操作。</p>
<p>原文链接：<a href="https://blog.csdn.net/Bill_Xiang_/article/details/78392616" target="_blank" rel="external">https://blog.csdn.net/Bill_Xiang_/article/details/78392616</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Oslo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oslo系列之oslo.db]]></title>
      <url>https://magiceses.github.io/2018/10/05/openstack-oslo.packages-oslo.db/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">士搏出惊涛骇流而不沉沦，懦夫在风平浪静也会溺水。<br></p>

<p>oslo.db库为OpenStack其他组件提供了针对不同后端数据库的数据库连接，并提供了各种数据库操作的辅助工具类和方法。OpenStack各组件使用SQLAlchemy框架实现对数据库的连接、查询等操作，因此oslo.db并不是一个完整的ORM库，也没有封装执行SQL语句；其只是对SQLAlchemy进行了封装，其与SQLAlchemy结合使用使得在OpenStack各组件中实现数据库连接、查询等操作变得更加简单。因此，本文不对SQLAlchemy的使用进行详细介绍，如果需要了解SQLAlchemy的使用，可以参考python对Mysql操作和使用ORM框架（SQLAlchemy）和SQLAlchemy技术文档。本文将结合oslo.db的使用详细分析其实现方式。</p>
<h2 id="Session-Handling"><a href="#Session-Handling" class="headerlink" title="Session Handling"></a>Session Handling</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>Session handling指的是使用oslo_db.sqlalchemy.enginefacade模块管理数据库连接、会话和事务处理等，该模块一般以装饰器形式使用，也可以使用with语句进行调用。</p>
<a id="more"></a>
<p>Session handling可以为一个函数提供装饰器，也可以作为一个上下文管理器传递一个Session或Connection对象。这两种方式都需要用到一个上下文对象。这个对象可以是任何一个类实例。下面这个例子便是使用上下文管理器形式的Session handling的使用方式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> oslo_db.sqlalchemy <span class="keyword">import</span> enginefacade</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"User-defined context class."</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_reader_api_function</span><span class="params">(context)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> enginefacade.reader.using(context) <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">return</span> session.query(SomeClass).all()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_writer_api_function</span><span class="params">(context, x, y)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> enginefacade.writer.using(context) <span class="keyword">as</span> session:</span><br><span class="line">        session.add(SomeClass(x, y))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_some_database_calls</span><span class="params">()</span>:</span></span><br><span class="line">    context = MyContext()</span><br><span class="line"> </span><br><span class="line">    results = some_reader_api_function(context)</span><br><span class="line">    some_writer_api_function(context, <span class="number">5</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>在这个例子中，首先定义了一个MyContext作为上下文管理器，然后分别在some_reader_api_function(context)和some_writer_api_function(context, x, y)来进行一些数据库操作。在some_reader_api_function(context)中，通过enginefacade.reader使用定义的上下文管理器生成一个数据库连接Session对象，然后使用Session对象的query()方法进行查询偶作；而在some_writer_api_function(context, x, y)中，则通过enginefacade.writer使用定义的上下文管理器生成一个数据库连接Session对象，然后使用这个Session对象的add()方法进行插入操作。其中，使用了enginefacade模块中的reader和writer两个重要的变量，这两个变量分别表示一个reader和writer函数的全局调用入口，关于reader和writer会在之后进行详细分析。除了这种方式之外，还可以使用装饰器模式使用enginefacade模块中的装饰器方法，使用方法如下所示：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> oslo_db.sqlalchemy <span class="keyword">import</span> enginefacade</span><br><span class="line"> </span><br><span class="line"><span class="meta">@enginefacade.transaction_context_provider</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"User-defined context class."</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@enginefacade.reader</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_reader_api_function</span><span class="params">(context)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> context.session.query(SomeClass).all()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@enginefacade.writer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_writer_api_function</span><span class="params">(context, x, y)</span>:</span></span><br><span class="line">    context.session.add(SomeClass(x, y))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_some_database_calls</span><span class="params">()</span>:</span></span><br><span class="line">    context = MyContext()</span><br><span class="line"> </span><br><span class="line">    results = some_reader_api_function(context)</span><br><span class="line">    some_writer_api_function(context, <span class="number">5</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>首先，在定义MyContext类时，使用了@enginefacade.transaction_context_provider装饰器为其设置Session等属性，该装饰器可用于设置Session、Connection、Transaction等属性。在使用时，则可以直接使用@enginefacade.writer和@enginefacade.reader从MyContext对象中获取对应的session，并用其进行数据库操作。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@enginefacade.reader.connection</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_refresh_from_db</span><span class="params">(context, cache)</span>:</span></span><br><span class="line">    sel = sa.select([table.c.id, table.c.name])</span><br><span class="line">    res = context.connection.execute(sel).fetchall()</span><br><span class="line">    cache.id_cache = &#123;r[<span class="number">1</span>]: r[<span class="number">0</span>] <span class="keyword">for</span> r <span class="keyword">in</span> res&#125;</span><br><span class="line">    cache.str_cache = &#123;r[<span class="number">0</span>]: r[<span class="number">1</span>] <span class="keyword">for</span> r <span class="keyword">in</span> res&#125;</span><br></pre></td></tr></table></figure>
<p>当不需要一个具体的数据库Session对象时，可以直接使用@enginefacade.reader.connection获取一个临时的数据库连接进行数据库相关操作。使用方式是使用@engingefacade.reader.connection装饰器，为上下文对象context添加一个数据库连接对象connection，直接使用该对象进行数据库操作即可。</p>
<p>需要注意的是，无论是context.session还是context.connection，都需要在一个writer或reader声明的对象中。否则，使用时将抛出异常。</p>
<p>当然，装饰器也可以用在一个类或对象的方法中，使用方式如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseAccessLayer</span><span class="params">(object)</span>:</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line"><span class="meta">    @enginefacade.reader</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">some_reader_api_function</span><span class="params">(cls, context)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> context.session.query(SomeClass).all()</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @enginefacade.writer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">some_writer_api_function</span><span class="params">(self, context, x, y)</span>:</span></span><br><span class="line">        context.session.add(SomeClass(x, y))</span><br></pre></td></tr></table></figure>
<p>此时，需要注意的是，enginefacade的装饰器必须在classmethod装饰器之前使用，否则会抛出TypeError异常。</p>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>在1.1节中详细介绍了Session Handling，即enginefacade的几种使用场景和使用方法，本节将据此分析enginefacade中的几个重要的类和方法，以及其实现原理。</p>
<h4 id="TransactionFactory类"><a href="#TransactionFactory类" class="headerlink" title="_TransactionFactory类"></a>_TransactionFactory类</h4><p><code>_TransactionFactory</code>类是<code>_TransactionContext</code>对象的一个工厂类，<code>_TransactionContext</code>对象可以使用该类生成一个数据库Session或一个数据库连接Connection对象；而<code>_TransactionFactory</code>对象会通过读取配置文件中数据库的配置信息创建相应的Session和Connection对象以进行数据库的相关操作。</p>
<h4 id="TransactionContext类"><a href="#TransactionContext类" class="headerlink" title="_TransactionContext类"></a>_TransactionContext类</h4><p><code>_TransactionContext</code>类的每一个实例化对象都代表了单个数据库事务，其中，定义了factory和global_factory两个<code>_TransactionFactory</code>对象属性，factory用来为每一个<code>_TransactionContext</code>对象创建数据库连接或Session，而global_factory会被一个全局的<code>_context_manager</code>在创建一个新的<code>_TransactionContext</code>对象时使用。在<code>_TransactionContext</code>类中还定义了session、connection、transaction来分别表示一个数据库session、连接、事务对象，用于进行具体的数据库操作。最后，<code>_TransactionContext</code>类还定义了一个mode属性来表示数据库操作的状态。在oslo_db的enginefacade中定义了3种数据库操作状态：</p>
<h4 id="TransactionContextManager类"><a href="#TransactionContextManager类" class="headerlink" title="_TransactionContextManager类"></a>_TransactionContextManager类</h4><p><code>_TransactionContextManager</code>类为数据库事务处理提供了上下文管理器context-management和装饰器。<code>_TransactionContextManager</code>对象将<code>_TransactionFactory</code>对象和用户定义的<code>_TransactionContext</code>上下文对象集成到一起，以完成对数据库的事务处理等操作。1.1节中提到的writer和reader都是一个全局的<code>_TransactionContextManager</code>对象<code>_context_manager</code>的两个不同的方法，分别用来产生一个用于写操作或读操作的<code>_TransactionContextManager</code>对象。</p>
<h2 id="ModelBase"><a href="#ModelBase" class="headerlink" title="ModelBase"></a>ModelBase</h2><p>ModelBase是oslo.db为OpenStack各个组件封装的Model的基类。通常，在将一个数据库表抽象为一个类时，定义的类会继承ModelBase类。如Nova中为抽象所有数据库表而定义的基类：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> oslo_db.sqlalchemy <span class="keyword">import</span> models</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NovaBase</span><span class="params">(models.TimestampMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">               models.ModelBase)</span>:</span></span><br><span class="line">    metadata = <span class="keyword">None</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__copy__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Implement a safe copy.copy().</span></span><br><span class="line"><span class="string">        SQLAlchemy-mapped objects travel with an object</span></span><br><span class="line"><span class="string">        called an InstanceState, which is pegged to that object</span></span><br><span class="line"><span class="string">        specifically and tracks everything about that object.  It's</span></span><br><span class="line"><span class="string">        critical within all attribute operations, including gets</span></span><br><span class="line"><span class="string">        and deferred loading.   This object definitely cannot be</span></span><br><span class="line"><span class="string">        shared among two instances, and must be handled.</span></span><br><span class="line"><span class="string">        The copy routine here makes use of session.merge() which</span></span><br><span class="line"><span class="string">        already essentially implements a "copy" style of operation,</span></span><br><span class="line"><span class="string">        which produces a new instance with a new InstanceState and copies</span></span><br><span class="line"><span class="string">        all the data along mapped attributes without using any SQL.</span></span><br><span class="line"><span class="string">        The mode we are using here has the caveat that the given object</span></span><br><span class="line"><span class="string">        must be "clean", e.g. that it has no database-loaded state</span></span><br><span class="line"><span class="string">        that has been updated and not flushed.   This is a good thing,</span></span><br><span class="line"><span class="string">        as creating a copy of an object including non-flushed, pending</span></span><br><span class="line"><span class="string">        database state is probably not a good idea; neither represents</span></span><br><span class="line"><span class="string">        what the actual row looks like, and only one should be flushed.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        session = orm.Session()</span><br><span class="line"> </span><br><span class="line">        copy = session.merge(self, load=<span class="keyword">False</span>)</span><br><span class="line">        session.expunge(copy)</span><br><span class="line">        <span class="keyword">return</span> copy</span><br></pre></td></tr></table></figure>
<p>NovaBase类便继承了oslo.db中的ModelBase和TimestampMixin类。ModelBase的使用就是这么简单。接下来，将通过ModelBase的实现分析该类的主要作用。与ModelBase相关的类与方法都定义在oslo_db.sqlalchemy.models模块下，该模块中主要定义了一下几个类：</p>
<ul>
<li>ModelBase类：该类作为所有数据库表抽象的基类，提供了save、get、update、keys、items等常用的数据库操作方法，程序员在为数据库表定义数据结构时，都需要继承该类，然后使用或覆写这些方法完成对一个数据库表的所有CURD操作。</li>
<li>ModelIterator类：该类主要用于对数据库表中数据进行迭代查询的操作。</li>
<li>TimestampMixin类：由于OpenStack多数数据库表中都定义了创建时间和更新时间字段，因此该类专门用来获取记录的创建时间和更新时间，如果为空则可以自动设置为当前时间。</li>
<li>SoftDeleteMixin类：OpenStack多数数据库表都为定义了删除记录标志和删除记录时间，该类则是专门用来获取记录的删除记录标志和删除时间。</li>
</ul>
<p>由此可以看出，oslo_db.sqlalchemy.models模块为OpenStack其他组件进行数据库操作和定义创建一个一组模板类，可以在具体实现数据库操作时很好的封装数据库表的数据结构。</p>
<h2 id="DB-API-backup-support"><a href="#DB-API-backup-support" class="headerlink" title="DB API backup support"></a>DB API backup support</h2><p>OpenStack项目众多，为了使OpenStack项目可以使用统一的数据库后端API支持，oslo.db为OpenStack其他项目提供了统一的数据库后端操作API支持。oslo.db定义了DBAPI类统一管理OpenStack其他组件数据库后端操作的API，该类在初始化是需要指定backend_name和backend_mapping属性，在使用时，首先调用该类的类方法from_config()方法创建DBAPI对象，接着调用_load_backend()方法，通过oslo.utils中定义的导入模块的方法将对应数据库操作的API导入，然后就可以调用相应的API进行数据库操作了。具体使用方法如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> oslo_config <span class="keyword">import</span> cfg</span><br><span class="line"><span class="keyword">from</span> oslo_db <span class="keyword">import</span> api <span class="keyword">as</span> db_api</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">_BACKEND_MAPPING = &#123;<span class="string">'sqlalchemy'</span>: <span class="string">'project.db.sqlalchemy.api'</span>&#125;</span><br><span class="line"> </span><br><span class="line">IMPL = db_api.DBAPI.from_config(cfg.CONF, backend_mapping=_BACKEND_MAPPING)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_engine</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> IMPL.get_engine()</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_session</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> IMPL.get_session()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># DB-API method</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_something</span><span class="params">(somethind_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> IMPL.do_something(somethind_id)</span><br></pre></td></tr></table></figure>
<p>oslo.db除了定义DBAPI统一管理数据库后端API，还定义了多个装饰器辅助进行数据库操作，如@wrap_db_retry可以捕获数据库操作过程中抛出的异常，然后重连数据库等。其使用方法如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@oslo_db_api.wrap_db_retry(max_retries=5, retry_on_deadlock=True)</span></span><br><span class="line"><span class="meta">@pick_context_manager_writer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">service_update</span><span class="params">(context, service_id, values)</span>:</span></span><br><span class="line">    service_ref = service_get(context, service_id)</span><br><span class="line">    <span class="comment"># Only servicegroup.drivers.db.DbDriver._report_state() updates</span></span><br><span class="line">    <span class="comment"># 'report_count', so if that value changes then store the timestamp</span></span><br><span class="line">    <span class="comment"># as the last time we got a state report.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'report_count'</span> <span class="keyword">in</span> values:</span><br><span class="line">        <span class="keyword">if</span> values[<span class="string">'report_count'</span>] &gt; service_ref.report_count:</span><br><span class="line">            service_ref.last_seen_up = timeutils.utcnow()</span><br><span class="line">    service_ref.update(values)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> service_ref</span><br></pre></td></tr></table></figure>
<p>上述示例中表示如果更新service_group表操作抛出异常则重试该操作，最大重试次数为5次，设置retry_on_deadlock为True，表示如果操作中发生死锁也会进行重试操作。</p>
<h2 id="DB-migration-extensions"><a href="#DB-migration-extensions" class="headerlink" title="DB migration extensions"></a>DB migration extensions</h2><p>oslo.db中还定义了与数据库相关的扩展操作，这些操作主要定义在oslo_db.sqlalchemy.migration模块中。其中，主要定义了db_version_control(engine, abs_path, version=None)方法进行版本控制，定义了db_sync(engine, abs_path, version=None, init_version=0, sanity_check=True)方法进行数据库的数据同步。</p>
<p>原文链接：<a href="https://blog.csdn.net/Bill_Xiang_/article/details/78592389" target="_blank" rel="external">https://blog.csdn.net/Bill_Xiang_/article/details/78592389</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Oslo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oslo系列之oslo.i18n-上]]></title>
      <url>https://magiceses.github.io/2018/10/05/openstack-oslo.packages-oslo.i18n-%E4%B8%8A/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">千万人的失败，都有是失败在做事不彻底，往往做到离成功只差一步就终止不做了。<br></p>

<p>一般地，一个大型的项目，特别是一个跨国平台，都需要进行国际化支持。OpenStack作为一个开源的云平台方案，同样需要支持国际化。因此，OpenStack社区开发了oslo.i18n组件支持OpenStack项目的国际化。本文便简单的介绍了OpenStack支持国际化的实现与使用。</p>
<h2 id="oslo-i18n的实现"><a href="#oslo-i18n的实现" class="headerlink" title="oslo.i18n的实现"></a>oslo.i18n的实现</h2><p>OpenStack项目支持国际化的实现非常简单，在oslo.i18n中主要使用TranslatorFactory类实现国际化支持。该类中提供了primary()方法进行国际化翻译，而该类则实际调用了_make_translation_func(domain)实现具体的操作。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_make_translation_func</span><span class="params">(self, domain=None)</span>:</span></span><br><span class="line">    <span class="string">"""Return a translation function ready for use with messages.</span></span><br><span class="line"><span class="string">    The returned function takes a single value, the unicode string</span></span><br><span class="line"><span class="string">    to be translated.  The return type varies depending on whether</span></span><br><span class="line"><span class="string">    lazy translation is being done. When lazy translation is</span></span><br><span class="line"><span class="string">    enabled, :class:`Message` objects are returned instead of</span></span><br><span class="line"><span class="string">    regular :class:`unicode` strings.</span></span><br><span class="line"><span class="string">    The domain argument can be specified to override the default</span></span><br><span class="line"><span class="string">    from the factory, but the localedir from the factory is always</span></span><br><span class="line"><span class="string">    used because we assume the log-level translation catalogs are</span></span><br><span class="line"><span class="string">    installed in the same directory as the main application</span></span><br><span class="line"><span class="string">    catalog.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> domain <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        domain = self.domain</span><br><span class="line">    t = gettext.translation(domain,</span><br><span class="line">                            localedir=self.localedir,</span><br><span class="line">                            fallback=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># Use the appropriate method of the translation object based</span></span><br><span class="line">    <span class="comment"># on the python version.</span></span><br><span class="line">    m = t.gettext <span class="keyword">if</span> six.PY3 <span class="keyword">else</span> t.ugettext</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(msg)</span>:</span></span><br><span class="line">        <span class="string">"""oslo_i18n.gettextutils translation function."""</span></span><br><span class="line">        <span class="keyword">if</span> _lazy.USE_LAZY:</span><br><span class="line">            <span class="keyword">return</span> _message.Message(msg, domain=domain)</span><br><span class="line">        <span class="keyword">return</span> m(msg)</span><br><span class="line">    <span class="keyword">return</span> f</span><br></pre></td></tr></table></figure>
<p>在该方法中定义了两种实现国际化的方式：第一种方式是直接使用gettext模块生成一个翻译函数，输出国际化结果；而另一种方式可以理解为一种懒加载模式，如果你直接在代码中<code>导入_</code>，而不是通过gettextutils.install()方式导入，这种懒加载模式将会很有用。该模式返回一个oslo.i18n自己定义的Message对象缓存待翻译的unicode编码的信息，在实例化时通过调用Message类的静态方法_translate_msgid(msgid, domain)获取对应的国际化信息。</p>
<h2 id="oslo-i18n的使用"><a href="#oslo-i18n的使用" class="headerlink" title="oslo.i18n的使用"></a>oslo.i18n的使用</h2><p>国际化支持在OpenStack各项目中使用频繁，oslo.i18n为了使用更加的方便，<code>定义了_</code>表示一个TranslatorFactory对象的primary()方法，因此在使用国际化之前，首先需要<code>导入_</code>；另外，在为日志支持国际化时也特意定义了<code>_LI、_LW、_LE、_LC等不同级别的国际化支持方法。</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> oslo_i18n</span><br><span class="line"> </span><br><span class="line">DOMAIN = <span class="string">'nova'</span></span><br><span class="line"> </span><br><span class="line">_translators = oslo_i18n.TranslatorFactory(domain=DOMAIN)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># The primary translation function using the well-known name "_"</span></span><br><span class="line">_ = _translators.primary</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Translators for log levels.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The abbreviated names are meant to reflect the usual use of a short</span></span><br><span class="line"><span class="comment"># name like '_'. The "L" is for "log" and the other letter comes from</span></span><br><span class="line"><span class="comment"># the level.</span></span><br><span class="line">_LI = _translators.log_info</span><br><span class="line">_LW = _translators.log_warning</span><br><span class="line">_LE = _translators.log_error</span><br><span class="line">_LC = _translators.log_critical</span><br></pre></td></tr></table></figure>
<p>在使用时只需要导入这些方法的别名即可使用这些方法直接实现信息国际化的支持。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nova.i18n <span class="keyword">import</span> _, _LE</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_log_exception</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># kwargs doesn't match a variable in the message</span></span><br><span class="line">    <span class="comment"># log the issue and the kwargs</span></span><br><span class="line">    LOG.exception(_LE(<span class="string">'Exception in string format operation'</span>))</span><br><span class="line">    <span class="keyword">for</span> name, value <span class="keyword">in</span> self.kwargs.items():</span><br><span class="line">        LOG.error(<span class="string">"%s: %s"</span> % (name, value))  <span class="comment"># noqa</span></span><br></pre></td></tr></table></figure>
<p>如上面的一段代码中，Nova组件使用_LE方法对一条异常信息进行了国际化打印的支持。</p>
<p>原文链接：<a href="https://blog.csdn.net/Bill_Xiang_/article/details/78570404" target="_blank" rel="external">https://blog.csdn.net/Bill_Xiang_/article/details/78570404</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Oslo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oslo系列之oslo.i18n-下]]></title>
      <url>https://magiceses.github.io/2018/10/05/openstack-oslo.packages-oslo.i18n-%E4%B8%8B/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">没有人能替你承受痛苦，也没有人能抢走你的坚强。<br></p>

<p>上一篇我们介绍了这个包的使用方式和在openstack中应用，这篇文章分析一下原理和源码</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>i18n是用来进行国际化翻译的。经过调查，现在主要有两种翻译方式。</p>
<a id="more"></a>
<ul>
<li><p>直接通过<code>gettext</code>方法，显示调用</p>
<p>实例: horizon的国际化:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scope.operationlogi18n = &#123;</span><br><span class="line">  <span class="string">'Create Instance'</span>: gettext(<span class="string">'Create Instance'</span>),</span><br><span class="line">  <span class="string">'Shutdown Instance'</span>: gettext(<span class="string">'Shutdown Instance'</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析:<br>直接调用gettext方法，获取翻译结果</p>
</li>
<li><p>通过<code>_</code>方法使用懒汉加载模式</p>
<p><code>_</code>方法实际是:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  oslo_i18n</span><br><span class="line"><span class="comment"># ref: https://docs.openstack.org/oslo.i18n/ocata/usage.html</span></span><br><span class="line">DOMAIN = <span class="string">"myproject"</span></span><br><span class="line">_translators = oslo_i18n.TranslatorFactory(domain=DOMAIN)</span><br><span class="line">_ = _translators.primary</span><br></pre></td></tr></table></figure>
<p>这种方式具体参见后续源码分析。</p>
</li>
</ul>
<p>i18n的懒加载模式</p>
<blockquote>
<p>Lazy Translation¶<br>Lazy translation delays converting a message string to the translated form as long as possible, including possibly never if the message is not logged or delivered to the user in some other way. It also supports logging translated messages in multiple languages, by configuring separate log handlers.</p>
<p>Lazy translation is implemented by returning a special object from the translation function, instead of a unicode string. That special message object supports some, but not all, string manipulation APIs. For example, concatenation with addition is not supported, but interpolation of variables is supported. Depending on how translated strings are used in an application, these restrictions may mean that lazy translation cannot be used, and so it is not enabled by default.</p>
<p>To enable lazy translation, call enable_lazy().</p>
<p>import oslo_i18n</p>
<p>oslo_i18n.enable_lazy()</p>
</blockquote>
<p>以aodh为例，在aodh/service.py中有 <code>oslo_i18n.enable_lazy()</code> 这么一行代码，直接来看源码</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>自己实现一个简单的<code>i18n.py</code>文件：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  oslo_i18n</span><br><span class="line"></span><br><span class="line"><span class="comment"># ref: https://docs.openstack.org/oslo.i18n/ocata/usage.html</span></span><br><span class="line"></span><br><span class="line">DOMAIN = <span class="string">"myproject"</span></span><br><span class="line"></span><br><span class="line">_translators = oslo_i18n.TranslatorFactory(domain=DOMAIN)</span><br><span class="line"></span><br><span class="line">_ = _translators.primary</span><br><span class="line"></span><br><span class="line">_LI = _translators.log_info</span><br><span class="line">_LW = _translators.log_warning</span><br><span class="line">_LE = _translators.log_eror</span><br><span class="line">_LC = _translators.log_critical</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_available_languages</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> oslo_i18n.get_available_languages(DOMAIN)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">translate</span><span class="params">(value, user_locale)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> oslo_i18n.translate(value, user_locale)</span><br></pre></td></tr></table></figure>
<p>分析:<br>1）上述先设置了<em>方法<br>2） 假设有需要使用国际化翻译的地方，可以使用如下形式进行国际化<br>引用`</em>，_LI`等</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> i18n <span class="keyword">import</span> _, _LI</span><br><span class="line">  LOG.info(LI(<span class="string">'enter app_factory'</span>))</span><br></pre></td></tr></table></figure>
<p>或者这种用法，推荐用_而不是_LI</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = _(<span class="string">'enter app_factory'</span>)</span><br><span class="line">LOG.info(result)</span><br></pre></td></tr></table></figure>
<p>3） <code>_方法</code>内部调用了_make_translation_func方法，内容如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_make_translation_func</span><span class="params">(self, domain=None)</span>:</span></span><br><span class="line">    <span class="string">"""Return a translation function ready for use with messages.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The returned function takes a single value, the unicode string</span></span><br><span class="line"><span class="string">    to be translated.  The return type varies depending on whether</span></span><br><span class="line"><span class="string">    lazy translation is being done. When lazy translation is</span></span><br><span class="line"><span class="string">    enabled, :class:`Message` objects are returned instead of</span></span><br><span class="line"><span class="string">    regular :class:`unicode` strings.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The domain argument can be specified to override the default</span></span><br><span class="line"><span class="string">    from the factory, but the localedir from the factory is always</span></span><br><span class="line"><span class="string">    used because we assume the log-level translation catalogs are</span></span><br><span class="line"><span class="string">    installed in the same directory as the main application</span></span><br><span class="line"><span class="string">    catalog.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> domain <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        domain = self.domain</span><br><span class="line">    t = gettext.translation(domain,</span><br><span class="line">                            localedir=self.localedir,</span><br><span class="line">                            fallback=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># Use the appropriate method of the translation object based</span></span><br><span class="line">    <span class="comment"># on the python version.</span></span><br><span class="line">    m = t.gettext <span class="keyword">if</span> six.PY3 <span class="keyword">else</span> t.ugettext</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(msg)</span>:</span></span><br><span class="line">        <span class="string">"""oslo_i18n.gettextutils translation function."""</span></span><br><span class="line">        <span class="keyword">if</span> _lazy.USE_LAZY:</span><br><span class="line">            <span class="keyword">return</span> _message.Message(msg, domain=domain)</span><br><span class="line">        <span class="keyword">return</span> m(msg)</span><br><span class="line">    <span class="keyword">return</span> f</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span><span class="params">(six.text_type)</span>:</span></span><br><span class="line">    <span class="string">"""A Message object is a unicode object that can be translated.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Translation of Message is done explicitly using the translate() method.</span></span><br><span class="line"><span class="string">    For all non-translation intents and purposes, a Message is simply unicode,</span></span><br><span class="line"><span class="string">    and can be treated as such.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, msgid, msgtext=None, params=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                domain=<span class="string">'oslo'</span>, has_contextual_form=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                has_plural_form=False, *args)</span>:</span></span><br><span class="line">        <span class="string">"""Create a new Message object.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        In order for translation to work gettext requires a message ID, this</span></span><br><span class="line"><span class="string">        msgid will be used as the base unicode text. It is also possible</span></span><br><span class="line"><span class="string">        for the msgid and the base unicode text to be different by passing</span></span><br><span class="line"><span class="string">        the msgtext parameter.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># If the base msgtext is not given, we use the default translation</span></span><br><span class="line">        <span class="comment"># of the msgid (which is in English) just in case the system locale is</span></span><br><span class="line">        <span class="comment"># not English, so that the base text will be in that locale by default.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> msgtext:</span><br><span class="line">            msgtext = Message._translate_msgid(msgid, domain)</span><br><span class="line">        <span class="comment"># We want to initialize the parent unicode with the actual object that</span></span><br><span class="line">        <span class="comment"># would have been plain unicode if 'Message' was not enabled.</span></span><br><span class="line">        msg = super(Message, cls).__new__(cls, msgtext)</span><br><span class="line">        msg.msgid = msgid</span><br><span class="line">        msg.domain = domain</span><br><span class="line">        msg.params = params</span><br><span class="line">        msg.has_contextual_form = has_contextual_form</span><br><span class="line">        msg.has_plural_form = has_plural_form</span><br><span class="line">        <span class="keyword">return</span> msg</span><br><span class="line">      </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_translate_msgid</span><span class="params">(msgid, domain, desired_locale=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                         has_contextual_form=False, has_plural_form=False)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> desired_locale:</span><br><span class="line">            system_locale = locale.getdefaultlocale() <span class="comment"># ('zh_CN', 'UTF-8')</span></span><br><span class="line">            <span class="comment"># If the system locale is not available to the runtime use English</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> system_locale <span class="keyword">or</span> <span class="keyword">not</span> system_locale[<span class="number">0</span>]:</span><br><span class="line">                desired_locale = <span class="string">'en_US'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                desired_locale = system_locale[<span class="number">0</span>] <span class="comment"># zh_CN</span></span><br><span class="line"></span><br><span class="line">        locale_dir = os.environ.get(</span><br><span class="line">            _locale.get_locale_dir_variable_name(domain) <span class="comment"># return domain.upper().replace('.', '_').replace('-', '_') + '_LOCALEDIR'，即AODH_LOCALEDIR</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># &lt;gettext.GNUTranslations instance at 0x7f8ad9e3e200&gt;</span></span><br><span class="line">        lang = gettext.translation(domain,</span><br><span class="line">                                   localedir=locale_dir,</span><br><span class="line">                                   languages=[desired_locale],</span><br><span class="line">                                   fallback=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> has_contextual_form <span class="keyword">and</span> <span class="keyword">not</span> has_plural_form:</span><br><span class="line">            <span class="comment"># This is the most common case, so check it first.</span></span><br><span class="line">            translator = lang.gettext <span class="keyword">if</span> six.PY3 <span class="keyword">else</span> lang.ugettext</span><br><span class="line">            translated_message = translator(msgid) <span class="comment"># u'\u8fdb\u5165app\u5de5\u5382'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> has_contextual_form <span class="keyword">and</span> has_plural_form:</span><br><span class="line">            <span class="comment"># Reserved for contextual and plural translation function,</span></span><br><span class="line">            <span class="comment"># which is not yet implemented.</span></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Unimplemented."</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> has_contextual_form:</span><br><span class="line">            (msgctx, msgtxt) = msgid</span><br><span class="line">            translator = lang.gettext <span class="keyword">if</span> six.PY3 <span class="keyword">else</span> lang.ugettext</span><br><span class="line"></span><br><span class="line">            msg_with_ctx = <span class="string">"%s%s%s"</span> % (msgctx, CONTEXT_SEPARATOR, msgtxt)</span><br><span class="line">            translated_message = translator(msg_with_ctx)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> CONTEXT_SEPARATOR <span class="keyword">in</span> translated_message:</span><br><span class="line">                <span class="comment"># Translation not found, use the original text</span></span><br><span class="line">                translated_message = msgtxt</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> has_plural_form:</span><br><span class="line">            (msgsingle, msgplural, msgcount) = msgid</span><br><span class="line">            translator = lang.ngettext <span class="keyword">if</span> six.PY3 <span class="keyword">else</span> lang.ungettext</span><br><span class="line">            translated_message = translator(msgsingle, msgplural, msgcount)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> translated_message</span><br></pre></td></tr></table></figure>
<p>上面分析了aodh已经开启了懒加载模式，所以这里实例化了一个Message类，调用 <code>_translate_msgid</code> 方法</p>
<p>经过调试发现，所谓的oslo_i18n的懒加载模式实际是获取localedir,获取当前环境变量中的语言，然后找到对应的翻译方法，对msgid进行翻译，获取对应的msgstr，因而能翻译出对应的语言。使用不使用懒加载模式，按照道理应该不影响。</p>
<p>来看下获取环境变量的过程， <code>getdefaultlocale</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdefaultlocale</span><span class="params">(envvars=<span class="params">(<span class="string">'LC_ALL'</span>, <span class="string">'LC_CTYPE'</span>, <span class="string">'LANG'</span>, <span class="string">'LANGUAGE'</span>)</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># check if it's supported by the _locale module</span></span><br><span class="line">        <span class="keyword">import</span> _locale</span><br><span class="line">        code, encoding = _locale._getdefaultlocale()</span><br><span class="line">    <span class="keyword">except</span> (ImportError, AttributeError):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># make sure the code/encoding values are valid</span></span><br><span class="line">        <span class="keyword">if</span> sys.platform == <span class="string">"win32"</span> <span class="keyword">and</span> code <span class="keyword">and</span> code[:<span class="number">2</span>] == <span class="string">"0x"</span>:</span><br><span class="line">            <span class="comment"># map windows language identifier to language name</span></span><br><span class="line">            code = windows_locale.get(int(code, <span class="number">0</span>))</span><br><span class="line">        <span class="comment"># ...add other platform-specific processing here, if</span></span><br><span class="line">        <span class="comment"># necessary...</span></span><br><span class="line">        <span class="keyword">return</span> code, encoding</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fall back on POSIX behaviour</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    lookup = os.environ.get</span><br><span class="line">    <span class="keyword">for</span> variable <span class="keyword">in</span> envvars:</span><br><span class="line">        localename = lookup(variable,<span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> localename:</span><br><span class="line">            <span class="keyword">if</span> variable == <span class="string">'LANGUAGE'</span>:</span><br><span class="line">                localename = localename.split(<span class="string">':'</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        localename = <span class="string">'C'</span></span><br><span class="line">    <span class="keyword">return</span> _parse_localename(localename)</span><br></pre></td></tr></table></figure>
<p>这里整体的逻辑是在寻找语言编码的时候默认是按照这个顺序:(‘LC_ALL’, ‘LC_CTYPE’, ‘LANG’, ‘LANGUAGE’)去查找对应环境变量，一旦找到环境变量，就对该环境变量解析，</p>
<p>然后调用下面的方法:<code>_parse_localename</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_parse_localename</span><span class="params">(localename)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">""" Parses the locale code for localename and returns the</span></span><br><span class="line"><span class="string">        result as tuple (language code, encoding).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The localename is normalized and passed through the locale</span></span><br><span class="line"><span class="string">        alias engine. A ValueError is raised in case the locale name</span></span><br><span class="line"><span class="string">        cannot be parsed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The language code corresponds to RFC 1766.  code and encoding</span></span><br><span class="line"><span class="string">        can be None in case the values cannot be determined or are</span></span><br><span class="line"><span class="string">        unknown to this implementation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    code = normalize(localename)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'@'</span> <span class="keyword">in</span> code:</span><br><span class="line">        <span class="comment"># Deal with locale modifiers</span></span><br><span class="line">        code, modifier = code.split(<span class="string">'@'</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> modifier == <span class="string">'euro'</span> <span class="keyword">and</span> <span class="string">'.'</span> <span class="keyword">not</span> <span class="keyword">in</span> code:</span><br><span class="line">            <span class="comment"># Assume Latin-9 for @euro locales. This is bogus,</span></span><br><span class="line">            <span class="comment"># since some systems may use other encodings for these</span></span><br><span class="line">            <span class="comment"># locales. Also, we ignore other modifiers.</span></span><br><span class="line">            <span class="keyword">return</span> code, <span class="string">'iso-8859-15'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'.'</span> <span class="keyword">in</span> code:</span><br><span class="line">        <span class="keyword">return</span> tuple(code.split(<span class="string">'.'</span>)[:<span class="number">2</span>]) <span class="comment"># 按点号分割得到: ('zh_CN', 'UTF-8')</span></span><br><span class="line">    <span class="keyword">elif</span> code == <span class="string">'C'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span>, <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">raise</span> ValueError, <span class="string">'unknown locale: %s'</span> % localename</span><br></pre></td></tr></table></figure>
<p>按点号分割得到: (‘zh_CN’, ‘UTF-8’)</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>i18n的懒加载翻译模式中通过使用<code>oslo_i18n.TranslatorFactory(domain=DOMAIN).primary</code>方法进行翻译，里面调用<code>=_make_translation_func</code>方法返回<code>i18n</code>自己定义<code>Message</code>对象，该对象包含了待翻译的信息，最后调用<code>_translate_msgid</code>获取<code>msgid</code>对应的国际化翻译内容<code>msgstr</code>。其中需要设置两样东西:一个是项目本身的<code>localedir</code>目录，为的是找到对应的<code>mo,po</code>等文件信息；一个是设置语言环境变量，优先级从高到低如下: <code>&#39;LC_ALL&#39;, &#39;LC_CTYPE&#39;, &#39;LANG&#39;, &#39;LANGUAGE&#39;</code>。设置<code>LC_ALL</code>即可不用设置其他环境变量。另外注意: 设置不同语言环境变量，需要重启组件的服务才可以生效。</p>
<h2 id="番外：-po和-mo文件"><a href="#番外：-po和-mo文件" class="headerlink" title="番外：.po和.mo文件"></a>番外：.po和.mo文件</h2><p>介绍：PO 是 Portable Object (可移植对象)的缩写形式；MO 是 Machine Object (机器对象) 的缩写形式。PO 文件是面向翻译人员的、提取于源代码的一种资源文件。当软件升级的时候，通过使用 gettext 软件包处理 PO 文件，可以在一定程度上使翻译成果得以继承，减轻翻译人员的负担。MO 文件是面向计算机的、由 PO 文件通过 gettext 软件包编译而成的二进制文件。程序通过读取 MO 文件使自身的界面转换成用户使用的语言。</p>
<p>po文件和mo文件通过msgfmt工具和pygettext转化。</p>
<ol>
<li>创建po文件:在Python安装目录下的 ./Tools/i18n/ 中找到pygettext.py运行之,生成翻译文件模版messages.pot。内容如下：</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SOME DESCRIPTIVE TITLE.</span></span><br><span class="line"><span class="comment"># Copyright (C) YEAR ORGANIZATION</span></span><br><span class="line"><span class="comment"># FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">msgid <span class="string">""</span></span><br><span class="line">msgstr <span class="string">""</span></span><br><span class="line"><span class="string">"Project-Id-Version: PACKAGE VERSION\n"</span></span><br><span class="line"><span class="string">"POT-Creation-Date: 2018-03-13 11:01+0800\n"</span></span><br><span class="line"><span class="string">"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"</span></span><br><span class="line"><span class="string">"Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\n"</span></span><br><span class="line"><span class="string">"Language-Team: LANGUAGE &lt;LL@li.org&gt;\n"</span></span><br><span class="line"><span class="string">"MIME-Version: 1.0\n"</span></span><br><span class="line"><span class="string">"Content-Type: text/plain; charset=cp936\n"</span></span><br><span class="line"><span class="string">"Content-Transfer-Encoding: 8bit\n"</span></span><br><span class="line"><span class="string">"Generated-By: pygettext.py 1.5\n"</span></span><br></pre></td></tr></table></figure>
<p>将charset改为charset=UTF-8，其余的可以不用改动。其中的msgid为键值，对应你程序里写的文本，如：_(“New File”)，而msgstr为翻译后的值。添加翻译语句：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SOME DESCRIPTIVE TITLE.</span></span><br><span class="line"><span class="comment"># Copyright (C) YEAR ORGANIZATION</span></span><br><span class="line"><span class="comment"># FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">msgid <span class="string">""</span></span><br><span class="line">msgstr <span class="string">""</span></span><br><span class="line"><span class="string">"Project-Id-Version: PACKAGE VERSION\n"</span></span><br><span class="line"><span class="string">"POT-Creation-Date: 2018-03-13 11:01+0800\n"</span></span><br><span class="line"><span class="string">"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"</span></span><br><span class="line"><span class="string">"Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\n"</span></span><br><span class="line"><span class="string">"Language-Team: LANGUAGE &lt;LL@li.org&gt;\n"</span></span><br><span class="line"><span class="string">"MIME-Version: 1.0\n"</span></span><br><span class="line"><span class="string">"Content-Type: text/plain; charset=UTF-8\n"</span></span><br><span class="line"><span class="string">"Content-Transfer-Encoding: 8bit\n"</span></span><br><span class="line"><span class="string">"Generated-By: pygettext.py 1.5\n"</span></span><br><span class="line">msgid <span class="string">" Hello world!"</span></span><br><span class="line">msgstr <span class="string">"世界你好!"</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">msgid <span class="string">" Python is a good Language."</span></span><br><span class="line">msgstr <span class="string">"Python 是门好语言."</span></span><br></pre></td></tr></table></figure>
<p>保存该文件，并重命名为messages.po</p>
<ol>
<li>创建mo文件：在Python安装目录下的 ./Tools/i18n/ 中找到msgfmt.py，在Python模式下，注意messages.po存在的路径：</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python msgfmt.py messages.po</span><br></pre></td></tr></table></figure>
<p>也可以使用msgfmt命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msgfmt /aodh/aodh/locale/zh_CN/LC_MESSAGES/messages.mo -o aodh/aodh/locale/zh_CN/LC_MESSAGES/messages.mo</span><br></pre></td></tr></table></figure>
<p>将生成一个messages.mo文件。</p>
<ol>
<li>建立翻译文件路径：在src目录下创建/locale/zh_CN/LC_MESSAGES/，将messages.po和messages.mo文件拷贝其中。</li>
</ol>
<p>即：./src/locale/zh_CN/LC_MESSAGES/messages.po</p>
<p>./src/locale/zh_CN/LC_MESSAGES/messages.mo</p>
<ol>
<li>建立demo.py，Python通过gettext模块支持国际化(i18n),可以实现程序的多语言界面的支持,如下引入gettext模块：</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> gettext</span><br><span class="line">gettext.install(<span class="string">'messages'</span>, <span class="string">'./locale'</span>, codeset=<span class="keyword">False</span>)</span><br><span class="line">gettext.translation(<span class="string">'messages'</span>, <span class="string">'./locale'</span>, languages=[<span class="string">'zh_CN'</span>]).install(<span class="keyword">True</span>)</span><br><span class="line">print(_(<span class="string">"Hello world!"</span>))</span><br><span class="line">print(_(<span class="string">"Python is a good Language."</span>))</span><br></pre></td></tr></table></figure>
<p>一切工作准备就绪，运行demo.py，查看是否输出中文：世界你好! Python是门好语言.</p>
<p>另外可以借助工具生成.po和.mo文件，比如Poedit、Zenata等。以下介绍Poedit：</p>
<h3 id="Poedit"><a href="#Poedit" class="headerlink" title="Poedit"></a>Poedit</h3><p>下载并安装Poedit，打开Poedit，上方工具栏File，新建，在弹出的弹框填入名称messages，确定后按ctrl+s，就创建了messages.po模板文件。将要翻译的语言写入，如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright (C) 2018 THE PACKAGE'S COPYRIGHT HOLDER</span></span><br><span class="line"><span class="comment"># This file is distributed under the same license as the PACKAGE package.</span></span><br><span class="line"><span class="comment"># Automatically generated, 2018.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">msgid <span class="string">""</span></span><br><span class="line">msgstr <span class="string">""</span></span><br><span class="line"><span class="string">"Project-Id-Version: \n"</span></span><br><span class="line"><span class="string">"Report-Msgid-Bugs-To: \n"</span></span><br><span class="line"><span class="string">"POT-Creation-Date: 2018-02-26 12:20+0800\n"</span></span><br><span class="line"><span class="string">"PO-Revision-Date: 2018-02-26 15:58+0800\n"</span></span><br><span class="line"><span class="string">"Last-Translator: Automatically generated\n"</span></span><br><span class="line"><span class="string">"Language-Team: none\n"</span></span><br><span class="line"><span class="string">"Language: zh_CN\n"</span></span><br><span class="line"><span class="string">"MIME-Version: 1.0\n"</span></span><br><span class="line"><span class="string">"Content-Type: text/plain; charset=UTF-8\n"</span></span><br><span class="line"><span class="string">"Content-Transfer-Encoding: 8bit\n"</span></span><br><span class="line"><span class="string">"X-Generator: Poedit 2.0.6\n"</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">msgid <span class="string">"Hello world!"</span></span><br><span class="line">msgstr <span class="string">"世界你好!"</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">msgid <span class="string">"Python is a good Language."</span></span><br><span class="line">msgstr <span class="string">"Python是门好语言."</span></span><br></pre></td></tr></table></figure>
<p>保存后，用Poedit打开po文件，并在File中的下拉框“编译为mo文件”，生成messages.mo文件。生成两个文件后拷贝在/locale/zh_CN/LC_MESSAGES/。</p>
<p>重写i18n的实现。i18n.py:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> gettext</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"> </span><br><span class="line">localedir = os.path.join(os.path.dirname(__file__), <span class="string">'locale'</span>)</span><br><span class="line">domain = <span class="string">'messages'</span></span><br><span class="line">threadLocalData = threading.local()</span><br><span class="line">threadLocalData.locale = <span class="string">'en_US'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># find out all supported locales in locale directory</span></span><br><span class="line">locales = []</span><br><span class="line"><span class="keyword">for</span> dirpath, dirnames, filenames <span class="keyword">in</span> os.walk(localedir):</span><br><span class="line">  <span class="keyword">for</span> dirname <span class="keyword">in</span> dirnames:</span><br><span class="line">    locales.append(dirname)</span><br><span class="line">  <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">AllTranslations = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> locale <span class="keyword">in</span> locales:</span><br><span class="line">  AllTranslations[locale] = gettext.translation(domain, localedir, [locale])</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gettext</span><span class="params">(message)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> AllTranslations[ threadLocalData.locale ].gettext(message)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ugettext</span><span class="params">(message)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> AllTranslations[ threadLocalData.locale ].ugettext(message)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ngettext</span><span class="params">(singular, plural, n)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> AllTranslations[ threadLocalData.locale ].ngettext(singular, plural, n)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ungettext</span><span class="params">(singular, plural, n)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> AllTranslations[ threadLocalData.locale ].ungettext(singular, plural, n)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setLocale</span><span class="params">(locale)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> locale <span class="keyword">in</span> locales:</span><br><span class="line">    threadLocalData.locale = locale</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   <span class="comment">#for test purpose</span></span><br><span class="line">   <span class="keyword">for</span> dirpath, dirnames, filenames <span class="keyword">in</span> os.walk(localedir):</span><br><span class="line">          <span class="keyword">for</span> dirname <span class="keyword">in</span> dirnames:</span><br><span class="line">               print(dirname)</span><br><span class="line">          <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>demo2.py:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> i18n</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    i18n.setLocale(<span class="string">"zh_CN"</span>)</span><br><span class="line">    print(i18n.gettext(<span class="string">"Hello world!"</span>))</span><br><span class="line">    print(i18n.gettext(<span class="string">"Python is a good Language."</span>))</span><br></pre></td></tr></table></figure>
<p>保存，运行demo2.py,查看结果！</p>
<p>参考：</p>
<p><a href="https://www.huaweicloud.com/articles/725cf3f2bf8930362f0422ee1124910b.html" target="_blank" rel="external">python库之i18n原理分析</a></p>
<p><a href="https://blog.csdn.net/ANXIN997483092/article/details/79539203?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-7.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-7.no_search_link" target="_blank" rel="external">关于OpenStack的i18n语言国际化实现</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Oslo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oslo系列之oslo.log]]></title>
      <url>https://magiceses.github.io/2018/10/05/openstack-oslo.packages-oslo.log/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">认真能够把事情做对，而用心却能够做到完美。<br></p>

<p>oslo.log为OpenStack所有组件提供一种标准的日志记录方式，它也能为用户提供定制的日志记录样式。通过oslo.log提供的日志记录，OpenStack开发者可以通过日志文件更加快速准确的定位问题本章将结合OpenStack项目中日志记录的应用分析oslo.log的实现原理。</p>
<h1 id="oslo-log的用法"><a href="#oslo-log的用法" class="headerlink" title="oslo.log的用法"></a>oslo.log的用法</h1><h2 id="oslo-log的使用方法"><a href="#oslo-log的使用方法" class="headerlink" title="oslo.log的使用方法"></a>oslo.log的使用方法</h2><p>对于OpenStack项目而言，使用oslo.log记录日志的方式非常简单。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> oslo_config <span class="keyword">import</span> cfg</span><br><span class="line"><span class="keyword">from</span> oslo_log <span class="keyword">import</span> log <span class="keyword">as</span> logging</span><br><span class="line"> </span><br><span class="line">LOG = logging.getLogger(__name__)</span><br><span class="line">CONF = cfg.CONF</span><br><span class="line">DOMAIN = <span class="string">"demo"</span></span><br><span class="line"> </span><br><span class="line">logging.register_options(CONF)</span><br><span class="line">logging.setup(CONF, DOMAIN)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Oslo Logging uses INFO as default</span></span><br><span class="line">LOG.info(<span class="string">"Oslo Logging"</span>)</span><br><span class="line">LOG.warning(<span class="string">"Oslo Logging"</span>)</span><br><span class="line">LOG.error(<span class="string">"Oslo Logging"</span>)</span><br></pre></td></tr></table></figure>
<p>首先，导入oslo_log的log模块，然后使用log模块中的getLogger()方法创建一个日志对象用于记录日志；接着，为日志注册配置参数，设置域。最后，使用对象中的方法记录相关的日志。</p>
<h2 id="oslo-log相关的配置参数"><a href="#oslo-log相关的配置参数" class="headerlink" title="oslo.log相关的配置参数"></a>oslo.log相关的配置参数</h2><p>在使用oslo.log时需要注册配置参数，这些配置参数常被统一写在对应组件的配置文件中。一般地，常用的配置参数如下：</p>
<ul>
<li>debug：表示是否将日志级别设置为DEBUG，默认为false。</li>
<li>verbose：表示将日志级别设置为INFO还是WARNNING，true为INFO，false表示设置为WARNNING。</li>
<li>log_file：表示日志文件的名称，默认以组件中服务名称命名。</li>
<li>log_dir：表示日志文件的路径，OpenStack日志文件默认存储在/var/log/目录下。</li>
<li>log_date_format：表示日志时间的格式，如%Y-%m-%d %H:%m:%s表示的格式为“2017-11-3 14:16:00”。</li>
<li>logging_context_format_string：表示日志内容的格式。</li>
<li>use_stderr：表示是否使用系统标准输出打印错误日志。</li>
<li>default_log_levels：表示日志的默认级别。</li>
<li>instance_format：表示instance的日志打印格式。</li>
</ul>
<p>以上的配置参数是在OpenStack开发与使用中经常需要关注的日志相关配置参数，如果还需要使用其他配置参数可参考官方文档，在此不再赘述。</p>
<h2 id="oslo-log日志级别"><a href="#oslo-log日志级别" class="headerlink" title="oslo.log日志级别"></a>oslo.log日志级别</h2><p>在一般的日志系统中，为了区分输出日志的类型，方便用户根据日志定位和分析问题，系统都会使用多种日志级别表示日志的类型；oslo.log也不例外。在oslo.log中，日志通常分为以下7个级别：</p>
<ul>
<li>CRITICAL/FATAL：最高日志级别，用于记录项目中非常严重的问题。</li>
<li>ERROR：常用于try-catch语句中，记录程序异常日志。</li>
<li>WARNNING/WARN：用于记录告警日志，在OpenStack中默认打印WARN及以上级别的日志。</li>
<li>INFO：用于记录用户或程序员关心的一般信息，常用于打印一些工作流程或操作步骤等信息。</li>
<li>DEBUG：常用于开发环境，用于开发时打印测试日志。</li>
<li>NOTEST：可用于用户自定义级别，一般设置为该级别，则表示打印所有日志。</li>
<li>TRACE：可用于追踪日志。</li>
</ul>
<h2 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h2><p>OpenStack各个组件一般都使用统一的日志格式记录日志，以便开发者可以快速定位问题。其格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;时间戳&gt;&lt;日志级别&gt;&lt;模块&gt;&lt;Request ID&gt;&lt;日志内容&gt;&lt;源代码位置&gt;</span><br></pre></td></tr></table></figure>
<p>由上述格式可知，OpenStack开发中通过日志文件定位问题是非常简单容易的，只要找到日志级别为ERROR的记录，然后找到打印的堆栈及其源代码位置即可。</p>
<h1 id="oslo-log的实现"><a href="#oslo-log的实现" class="headerlink" title="oslo.log的实现"></a>oslo.log的实现</h1><p>对于oslo.log的实现，其中最重要的便是Logger类，OpenStack各组件记录日志时，都需要创建一个Logger对象来记录日志。该类常用的属性包括name，标识该对象的名称，通常OpenStack组件使用模块作为日志记录的名称；level标识日志级别。该类定义了debug()、info()、warning()、warn()、exception()、error()、fatal()、critical()等方法来记录特定级别的日志。在记录日志时，每个方法会调用isEnabledFor(level)方法判断当前级别是否高于指定级别，系统只记录高于指定级别的日志。<br>在OpenStack其他组件使用日志记录时，只需要导入oslo_log.log模块，然后调用log.getLogger()方法即可获取到Logger类对象，然后通过调用上文中列出的方法记录日志即可。</p>
<p>原文链接：<a href="https://blog.csdn.net/Bill_Xiang_/article/details/78434662" target="_blank" rel="external">https://blog.csdn.net/Bill_Xiang_/article/details/78434662</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Oslo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oslo系列之oslo.middleware]]></title>
      <url>https://magiceses.github.io/2018/10/05/openstack-oslo.packages-oslo.middleware/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">俗话说：善有善报，恶有恶报；话又说：人善被人欺，马善被人骑！古今论坛，后人总结生存言谈：拥有善良之心待人，不向恶势力低头屈身。愿你吸收生存之道，日子过得美满逍遥！<br></p>

<p>oslo.middleware库可以添加在WSGI pipeline用来拦截request/response请求。其基类可以为WSGI增强功能，如添加、删除、修改HTTP头部信息，支持限制大小和连接数等。本文主要分析Oslo组件如何使用oslo.middleware来实现这些功能。</p>
<h2 id="oslo-middleware中的主要pipeline"><a href="#oslo-middleware中的主要pipeline" class="headerlink" title="oslo.middleware中的主要pipeline"></a>oslo.middleware中的主要pipeline</h2><p>oslo.middleware中定义了多个WSGI的pipeline，如cors、request_id等。所以，本文首先总结了oslo.middleware中常用的pipeline的实现、作用以及使用场景。在oslo.middleware中，所有的pipeline的实现类都继承自一个父类ConfigurableMiddleware，其是一个基本的WSGI middleware装饰器。该类在实例化时会绑定一个WSGI应用对象APP，则该ConfigurableMiddleware对象在实际使用中便会对绑定的WSGI APP的request/response进行相应的包装。在ConfigurableMiddleware类中，分别定义了process_request(request)和process_response(response, request)方法分别对request和response进行处理。最后，该类还为paste.deploy实现了factory方法，使其可以通过读取WSGI配置文件调用相关类的装饰器。了解了ConfigurableMiddleware类的实现之后，下面便可以根据ConfigurableMiddleware类的实现针对具体的pipeline的实现进行详细的解读。</p>
<a id="more"></a>
<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS指的是跨域资源共享，该机制允许Web服务器进行跨域访问控制，从而使得跨域数据传输得以安全进行。浏览器支持在API容器中使用CORS，以降低跨域HTTP请求所带来的风险。CORS在原有HTTP协议基础上新增了一组HTTP首部字段，用以表示服务器声明哪些源站可以访问哪些资源，这些字段包括Access-Control-Allow-Origin、Access-Control-Allow-Methods、Access-Control-Allow-Headers、Access-Control-Max-Age等。关于CORS的具体介绍，本文不作详细解释，感兴趣的朋友可以参考以下的博文<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS。" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS。</a></p>
<p>而oslo.middleware中的CORS即是为WSGI请求或响应添加CORS字段和处理的pipeline，其覆写了父类的process_request(request)和process_response(response, request)方法来实现其功能。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">simple_headers = [</span><br><span class="line">    <span class="string">'Accept'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>,</span><br><span class="line">    <span class="string">'Content-Type'</span>,</span><br><span class="line">    <span class="string">'Cache-Control'</span>,</span><br><span class="line">    <span class="string">'Content-Language'</span>,</span><br><span class="line">    <span class="string">'Expires'</span>,</span><br><span class="line">    <span class="string">'Last-Modified'</span>,</span><br><span class="line">    <span class="string">'Pragma'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>一般地，浏览器发送HTTP请求时，每个请求和请求的响应都会包含一些基本的头部字段；这些字段包括：Accept、Accept-Language、Content-Type、Cache-Control、Content-Language、Expires、Lash-Modified、Pragma等。而oslo.middleware中CORS的功能则是通过获取请求或请求的响应，为该请求添加跨域资源共享的头部字段。CORS覆写了父类的process_response(response, request=None)方法为每个响应添加CORS头部字段。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, response, request=None)</span>:</span></span><br><span class="line">    <span class="string">'''Check for CORS headers, and decorate if necessary.</span></span><br><span class="line"><span class="string">    Perform two checks. First, if an OPTIONS request was issued, let the</span></span><br><span class="line"><span class="string">    application handle it, and (if necessary) decorate the response with</span></span><br><span class="line"><span class="string">    preflight headers. In this case, if a 404 is thrown by the underlying</span></span><br><span class="line"><span class="string">    application (i.e. if the underlying application does not handle</span></span><br><span class="line"><span class="string">    OPTIONS requests, the response code is overridden.</span></span><br><span class="line"><span class="string">    In the case of all other requests, regular request headers are applied.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Sanity precheck: If we detect CORS headers provided by something in</span></span><br><span class="line">    <span class="comment"># in the middleware chain, assume that it knows better.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="keyword">in</span> response.headers:</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Doublecheck for an OPTIONS request.</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'OPTIONS'</span>:</span><br><span class="line">        <span class="keyword">return</span> self._apply_cors_preflight_headers(request=request,</span><br><span class="line">                                                  response=response)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Apply regular CORS headers.</span></span><br><span class="line">    self._apply_cors_request_headers(request=request, response=response)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Finally, return the response.</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
<p>首先，其会判断该响应的头部字段中是否含有Access-Control-Allow-Origin字段，如果有则直接返回该响应；否则，其会判断发送的请求的方法是否为OPTION，如果为OPTION则表示该请求为跨域资源共享预检请求，程序将调用CORS对象的<code>_apply_cors_preflight_headers(request, response)</code>方法为该请求的响应添加Vary、Access-Control-Allow-Origin、Access-Control-Allow-Credentials、Access-Control-Max-Age、Access-Control-Allow-Methods、Access-Control-Allow-Headers等字段；否则表示该请求为跨域资源共享基本请求，程序将调用CORS对象的_apply_cors_request_headers(request, response)方法为该请求的响应添加Vary、Access-Control-Allow-Origin、Access-Control-Allow-Credentials、Access-Control-Allow-Headers等字段。</p>
<h3 id="RequestId"><a href="#RequestId" class="headerlink" title="RequestId"></a>RequestId</h3><p>request_id在OpenStack的WSGI调用中具有非常重要的作用，它唯一标识了OpenStack API的获取的每一个请求，并将其记录到日志中，便于程序员定位问题等。RequestId类便是为每个发送到OpenStack API的请求添加request_id。该类覆写了父类的<strong>call</strong>方法，首先会判断该请求是否包含一个全局的request_id，即请求头部是否包含X-Openstack-Request-Id字段，如果包含则将该全局的request_id添加到该环境变量openstack.global_request_id中；接着该类会通过oslo.context中的generate_request_id()方法生成一个request_id，将其添加到环境变量openstack.request_id中，并将其追加到对应响应的头部。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@webob.dec.wsgify</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, req)</span>:</span></span><br><span class="line">    self.set_global_req_id(req)</span><br><span class="line"> </span><br><span class="line">    req_id = context.generate_request_id()</span><br><span class="line">    req.environ[ENV_REQUEST_ID] = req_id</span><br><span class="line">    response = req.get_response(self.application)</span><br><span class="line"> </span><br><span class="line">    return_headers = [HTTP_RESP_HEADER_REQUEST_ID]</span><br><span class="line">    return_headers.extend(self.compat_headers)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> header <span class="keyword">in</span> return_headers:</span><br><span class="line">        <span class="keyword">if</span> header <span class="keyword">not</span> <span class="keyword">in</span> response.headers:</span><br><span class="line">            response.headers.add(header, req_id)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
<h3 id="CorrelationId"><a href="#CorrelationId" class="headerlink" title="CorrelationId"></a>CorrelationId</h3><p>correlation_id为OpenStack API接收到的每个请求设置一个关联的ID，程序员可以根据该ID查询与相关请求的操作。CorrelationId通过覆写process_request(request)方法，为OpenStack API接收到的每个请求添加X_CORRELATION_ID存储其correlation_id。</p>
<h3 id="HTTPProxyToWSGI"><a href="#HTTPProxyToWSGI" class="headerlink" title="HTTPProxyToWSGI"></a>HTTPProxyToWSGI</h3><p>HTTPProxyToWSGI为OpenStack API提供反向代理的功能，其通过一个远程HTTP反向代理服务器重载WSGI的环境变量。该类通过覆写process_request(request)方法为OpenStack API接收到的每一个请求添加了RFC7239中指定的HTTP反向代理所需的头部字段。在接收到请求时，首先判断OpenStack服务是否允许使用HTTP代理头部，如果不允许则直接返回。接着，获取请求环境变量中的HTTP_FORWARDED是否为空，如果不为空则通过RFC7239标准解析该字段，获取相应的代理参数并添加到请求wsgi的环境变量中；否则，直接获取请求环境变量中与HTTP代理相关的字段添加到请求wsgi的环境变量中</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, req)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self._conf_get(<span class="string">'enable_proxy_headers_parsing'</span>):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    fwd_hdr = req.environ.get(<span class="string">"HTTP_FORWARDED"</span>)</span><br><span class="line">    <span class="keyword">if</span> fwd_hdr:</span><br><span class="line">        proxies = self._parse_rfc7239_header(fwd_hdr)</span><br><span class="line">        <span class="comment"># Let's use the value from the first proxy</span></span><br><span class="line">        <span class="keyword">if</span> proxies:</span><br><span class="line">            proxy = proxies[<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line">            forwarded_proto = proxy.get(<span class="string">"proto"</span>)</span><br><span class="line">            <span class="keyword">if</span> forwarded_proto:</span><br><span class="line">                req.environ[<span class="string">'wsgi.url_scheme'</span>] = forwarded_proto</span><br><span class="line"> </span><br><span class="line">            forwarded_host = proxy.get(<span class="string">"host"</span>)</span><br><span class="line">            <span class="keyword">if</span> forwarded_host:</span><br><span class="line">                req.environ[<span class="string">'HTTP_HOST'</span>] = forwarded_host</span><br><span class="line"> </span><br><span class="line">            forwarded_for = proxy.get(<span class="string">"for"</span>)</span><br><span class="line">            <span class="keyword">if</span> forwarded_for:</span><br><span class="line">                req.environ[<span class="string">'REMOTE_ADDR'</span>] = forwarded_for</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># World before RFC7239</span></span><br><span class="line">        forwarded_proto = req.environ.get(<span class="string">"HTTP_X_FORWARDED_PROTO"</span>)</span><br><span class="line">        <span class="keyword">if</span> forwarded_proto:</span><br><span class="line">            req.environ[<span class="string">'wsgi.url_scheme'</span>] = forwarded_proto</span><br><span class="line"> </span><br><span class="line">        forwarded_host = req.environ.get(<span class="string">"HTTP_X_FORWARDED_HOST"</span>)</span><br><span class="line">        <span class="keyword">if</span> forwarded_host:</span><br><span class="line">            req.environ[<span class="string">'HTTP_HOST'</span>] = forwarded_host</span><br><span class="line"> </span><br><span class="line">        forwarded_for = req.environ.get(<span class="string">"HTTP_X_FORWARDED_FOR"</span>)</span><br><span class="line">        <span class="keyword">if</span> forwarded_for:</span><br><span class="line">            req.environ[<span class="string">'REMOTE_ADDR'</span>] = forwarded_for</span><br><span class="line"> </span><br><span class="line">    v = req.environ.get(<span class="string">"HTTP_X_FORWARDED_PREFIX"</span>)</span><br><span class="line">    <span class="keyword">if</span> v:</span><br><span class="line">        req.environ[<span class="string">'SCRIPT_NAME'</span>] = v + req.environ[<span class="string">'SCRIPT_NAME'</span>]</span><br></pre></td></tr></table></figure>
<p>除了上述的pipeline外，oslo.middleware还定义了很多种pipeline，如限制请求体大小的RequestBodySizeLimiter、获取不到请求的响应抛出异常的CatchErrors、添加SSL认证的SSLMiddleware、基于API请求发送stats指令的StatsMiddleware等。而这些pipeline在实现上与上述pipeline的实现大同小异，因此这里便不在挨个展开介绍，感兴趣的朋友可以根据上述博客的内容举一反三，自行研究。下面，将详细介绍oslo.middleware在OpenStack其他组件的使用方法。</p>
<h2 id="oslo-middleware的使用方式"><a href="#oslo-middleware的使用方式" class="headerlink" title="oslo.middleware的使用方式"></a>oslo.middleware的使用方式</h2><p>因为oslo.middleware为WSGI的框架paste.deploy提供对应的pipeline，因此在OpenStack其他组件中的使用也非常简单。这里以Nova组件的WSGI为例，介绍oslo.middleware中各pipeline的使用。</p>
<p>Nova组件的WSGI配置文件api-paste.ini中，定义了多个app、pipeline以及composite，其中多个便直接使用了oslo.middleware中定义的pipeline，如2.1版本的计算服务API<br>openstack_compute_api_v21中便使用了cors、http_proxy_to_wsgi、sizelimit等多个oslo.middleware的pipeline。其配置文件如下：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[composite:openstack_compute_api_v21]</span></span><br><span class="line"><span class="attr">use</span> = call:nova.api.auth:pipeline_factory_v21</span><br><span class="line"><span class="attr">noauth2</span> = cors http_proxy_to_wsgi compute_req_id faultwrap request_log sizelimit osprofiler noauth2 osapi_compute_app_v21</span><br><span class="line"><span class="attr">keystone</span> = cors http_proxy_to_wsgi compute_req_id faultwrap request_log sizelimit osprofiler authtoken keystonecontext osapi_compute_app_v21</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:request_id]</span></span><br><span class="line">paste.filter_factory = oslo_middleware:RequestId.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:sizelimit]</span></span><br><span class="line">paste.filter_factory = oslo_middleware:RequestBodySizeLimiter.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:cors]</span></span><br><span class="line">paste.filter_factory = oslo_middleware.cors:filter_factory</span><br><span class="line"><span class="attr">oslo_config_project</span> = nova</span><br></pre></td></tr></table></figure>
<p>因此，在需要使用oslo.middleware中的pipeline时，OpenStack各组件只需要在相应服务的WSGI配置文件中添加一个对应的filter，并将paste.filter_factory指定为相应类的factory方法即可。而如果一个pipeline需要指定配置参数时，既可以直接在filter中指定，也可以在对应服务的配置文件中的oslo_middleware配置组下添加。而如果需要直接在代码中使用oslo.middleware的各pipeline的实现类，只需要将对应的模块导入即可。</p>
<p>原文链接：<a href="https://blog.csdn.net/Bill_Xiang_/article/details/78552271" target="_blank" rel="external">https://blog.csdn.net/Bill_Xiang_/article/details/78552271</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Oslo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oslo系列之oslo.policy]]></title>
      <url>https://magiceses.github.io/2018/10/05/openstack-oslo.packages-oslo.policy/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">你既然认准一条道路，何必去打听要走多久。<br></p>

<p>众所周知，OpenStack使用基于角色的权限访问控制（RBAC），在RBAC中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管理。在一个组织中，角色是为了完成各种工作而创造，用户则依据它的责任和资格来被指派相应的角色，用户可以很容易地从一个角色被指派到另一个角色。角色可依新的需求和系统的合并而赋予新的权限，而权限也可根据需要而从某角色中回收。角色与角色的关系可以建立起来以囊括更广泛的客观情况。为了更好的适应OpenStack的角色权限管理，oslo项目创建了oslo.policy子项目为所有OpenStack服务提供RBAC策略实施支持。本文将详细介绍oslo.policy的实现与使用。</p>
<h2 id="策略规则表达式"><a href="#策略规则表达式" class="headerlink" title="策略规则表达式"></a>策略规则表达式</h2><p>在通用的策略引擎实现中，策略规则表达式一般包含一个目标和一个相关联的规则。具体示例如下：</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"&lt;target&gt;"</span>: &lt;rule&gt;</span><br></pre></td></tr></table></figure>
<p>其中，target指定了正在执行策略的服务；通常，一个target指的是一个API调用。rule代表了具体的策略规则，一般可以用以下两种形式表示：一个使用新策略语法写成的字符串或者一个策略规则的列表。OpenStack推荐使用字符串格式，因为它更容易理解。</p>
<p>在策略语法中，每个规则检查都被指定为一个简单的”a:b”对形式，该”a:b”对通过匹配与之对应的类来执行检查访问权限。这些”a:b”对的类型与格式可以归纳为表1所示。</p>
<table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>格式</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>用户的角色</td>
<td>role:admin</td>
</tr>
<tr>
<td>policy中定义的规则</td>
<td>rule:admin_required</td>
</tr>
<tr>
<td>通过URL检查（URL检查返回True才有权限）</td>
<td><a href="http://my-url.org/check" target="_blank" rel="external">http://my-url.org/check</a></td>
</tr>
<tr>
<td>用户属性（可通过token获得，包括user_id、domain_id和project_id等）</td>
<td>project_id:%(target.project.id)s</td>
</tr>
<tr>
<td>字符串</td>
<td><variable>:’xpto2035abc’<br>‘myproject’:<variable></variable></variable></td>
</tr>
<tr>
<td>字面量</td>
<td>project_id:xpto2035abc<br>domain_id:20<br>True:%(user.enabled)s</td>
</tr>
</tbody>
</table>
<p>在字符串格式的策略规则表达式中，如果需要使用多个规则，可以使用连接运算符and或or，and表示与，or表示或。下面的例子表示允许角色为admin的用户或项目ID为%(project_id)s且角色为projectadmin的用户访问。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"role:admin or (project_id:%(project_id)s and role:projectadmin)"</span></span><br></pre></td></tr></table></figure>
<p>另外，策略规则表达式中还可以使用not运算符表取反。下面的例子表示允许项目ID为%(project_id)s且角色不是dunce的用户访问。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"project_id:%(project_id)s and not role:dunce"</span></span><br></pre></td></tr></table></figure>
<p>在策略规则表达式中，各运算符的优先级如表2所示。其中，数字越大代表优先级越高。</p>
<table>
<thead>
<tr>
<th>优先级</th>
<th><strong>类型</strong></th>
<th>表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td>4</td>
<td>组运算</td>
<td>(…)</td>
</tr>
<tr>
<td>3</td>
<td>逻辑否运算</td>
<td>not …</td>
</tr>
<tr>
<td>2</td>
<td>逻辑与运算</td>
<td>… and …</td>
</tr>
<tr>
<td>1</td>
<td>逻辑或运算</td>
<td>… or …</td>
</tr>
</tbody>
</table>
<p>在列表形式的策略规则表达式中，使用”[]”表示逻辑与运算，在”[]”内的多个规则使用”,”连接，在进行权限检查时，只有”[]”中的所有规则都满足才可以通过检查；而同一级的不同”[]”表示逻辑或运算，用”,”连接，表示只要满足其中一个”[]”定义的规则即可访问；另外，使用”@”表示始终允许访问，使用”!”表示拒绝访问。基于此，上述示例表达式使用列表形式可以表示如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="string">"role:admin"</span>], [<span class="string">"project_id:%(project_id)s"</span>, <span class="string">"role:projectadmin"</span>]]</span><br></pre></td></tr></table></figure>
<p>需要注意的是，如果一个规则定义为一个空列表[]或一个空字符串””，表示该target始终允许访问。</p>
<h2 id="规则检查"><a href="#规则检查" class="headerlink" title="规则检查"></a>规则检查</h2><p>在oslo.policy中，所有规则的封装与检查操作都定义在<code>oslo_policy._checks</code>模块中，该模块首先定义了一个BaseCheck抽象类，所有对规则检查的封装都需要继承该抽象类。在继承BaseCheck类时，每个规则检查类都需要覆写<strong>str</strong>()方法，用于显示该检查的含义；还需要覆写<strong>call</strong>()方法，在执行具体的检查操作时通过调用具体规则检查类的<strong>call</strong>()方法实现。接下来，本文首先介绍oslo.policy中定义了规则检查类。而针对”a:b”格式的策略规则表达式，oslo.policy定义了一个继承BaseCheck类的Check类来表示，并为其定义了kind属性表示该条规则检查的类型，即a，match属性表示具体匹配的值，即b。_</p>
<h3 id="GenericCheck"><a href="#GenericCheck" class="headerlink" title="GenericCheck"></a>GenericCheck</h3><p>GenericCheck类通常用于匹配与API调用一起发送的属性。通过以下语法，策略引擎可以使用这些属性（位于策略规则表达式的右侧）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_id:%(user.id)s</span><br></pre></td></tr></table></figure>
<p>在上述语法中，右侧的值是一个字符串或者使用规定的Python字符串替换。可用的属性和值取决于使用公共策略引擎的程序。所有这些属性（与用户、API调用和上下文相关的）都可以相互检查，或对固定的常量进行检查。</p>
<p>GenericCheck类可以对通过令牌获取的以下几种用户属性执行策略检查：</p>
<ul>
<li>user_id</li>
<li>domain_id和project_id（取决于token指定的范围）</li>
<li>给定的token范围内的角色role列表</li>
</ul>
<h3 id="特殊检查类"><a href="#特殊检查类" class="headerlink" title="特殊检查类"></a>特殊检查类</h3><p>特殊检查类是相较于GenericCheck类而言的，特殊检查类可以提供更加灵活的检查机制。oslo.policy内置的特殊检查类包括RoleCheck、RuleCheck、HTTPCheck等。</p>
<ul>
<li><p>RoleCheck类：该类用于检查提供的凭证中是否存在指定的角色。一个角色检查的表达式如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"role:&lt;role_name&gt;"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>RuleCheck类：该类用于通过名称引用另一个已定义的规则。这样，一个普通的规则可以定义为可重用的规则，然后在其他规则中引用该规则。它还适用于将一组检查定义为一个更具描述性的命名的情况，这样便于策略的可读性。一个规则检查的表达式如下，在这个示例中，将定义好的admin_required规则进行了重用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"admin_required"</span>: <span class="string">"role:admin"</span></span><br><span class="line"><span class="string">"&lt;target&gt;"</span>: <span class="string">"rule:admin_required"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>HTTPCheck类：该类用于向远程服务器发送HTTP请求，以确定检查结果。target和凭证将传递到远程服务器进行检查，如果远程服务器返回的响应结果为True，则表示该操作通过权限验证。HTTP检查的表达式如下，预期目标URL包含字符串格式的关键字，这个关键字是目标字典的key键。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"http:&lt;target URI&gt;"</span></span><br><span class="line"><span class="string">"http://server.test/%(name)s"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="运算符检查类"><a href="#运算符检查类" class="headerlink" title="运算符检查类"></a>运算符检查类</h3><p>oslo.policy为第1节中提到的各种运算符也提供了相应的检查类，主要包含以下几种检查类：</p>
<ul>
<li>FalseCheck类：相当于运算符”!”，即总是返回False，表示始终不允许访问；</li>
<li>TrueCheck类：相当于运算符”@”，即总是返回True，表示始终允许访问；</li>
<li>NotCheck类：相当于取反运算符”not …”；</li>
<li>AndCheck类：相当于逻辑与运算符”… and …”；</li>
<li>OrCheck类：相当于逻辑或运算符”… or …”。</li>
</ul>
<p>除了上述的三类检查类，用户也可以自定义检查类。在自定义检查类时，首先需要继承BaseCheck类或Check类，然后覆写<strong>str</strong>()和<strong>call</strong>()方法：<strong>str</strong>()方法用于返回以此节点为根的Check树的字符串表示形式，用于打印；<strong>call</strong>()方法实现了具体的匹配算法。另外，还需要注意的是自定义检查类时还应该使用oslo_policy._checks模块下的register(name, func=None)装饰器将其缓存在检查类字典中，便于查找。</p>
<h2 id="oslo-policy的权限检查实现原理"><a href="#oslo-policy的权限检查实现原理" class="headerlink" title="oslo.policy的权限检查实现原理"></a>oslo.policy的权限检查实现原理</h2><p>oslo.policy中权限检查的实现主要定义在oslo_policy.policy模块下。该模块中定义了用于保存规则，加载和检查规则以及定义策略的多个类。这些类的实现如下：</p>
<ul>
<li><p>Rules类：该类用于缓存所有的规则，其可以直接处理default_rule的设置。该类提供了load(data, default_rule=None)和load(data, default_rule=None)可以从策略的YAML或JSON配置文件中加载所有规则；还提供了from_dict(rules_dict, default_rule=None)一个指定的字典中加载所有规则；</p>
</li>
<li><p>Enforcer类：该类负责加载和执行规则。该类提供了load_rules(force_reload=False)从该类的实例化对象绑定的策略文件路径加载所有规则，如果force_reload为True，表示从配置文件重新加载数据；提供了register_default(default)注册一个默认的RuleDefault对象，提供了register_defaults(defaults)注册一组RuleDefault对象；提供了enforce(rule, target, creds, do_raise=False, exc=None, <em>args, \</em>*kwargs)根据目标target和凭证检查规则的权限，该方法通常需要结合authorize(self, rule, target, creds, do_raise=False, exc=None, <em>args, \</em>*kwargs)装饰器使用，以保证待检查的策略规则已经被注册；该类还提供了check_rules(raise_on_violation=False)检查是否存在明显不正确的规则，如未定义的规则或循环引用的规则等。</p>
</li>
<li><p>RuleDefault类：该类用于定义一个权限检查策略，创建时需要指定名称name和值check_str，建议对该策略定义一个详细的说明description；</p>
</li>
<li><p>DocumentedRuleDefault类：该类用于定义一个policy-in-code的策略对象。该类的功能与RuleDefault类似，但它还需要一些与注册的策略规则有关的额外的数据。这样就可以根据这个类的属性来呈现与之对应的文档。最终，oslo.policy都会使用该类而弃用RuleDefault。创建该类的对象时，必须指定名称name、值check_str、描述信息description；另外，还需要定义一个operations属性，这个属性包含了每个API的URL和相应HTTP请求方法的字典。下面是一个operations属性的示例。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">operations=[&#123;<span class="string">'path'</span>: <span class="string">'/foo'</span>, <span class="string">'method'</span>: <span class="string">'GET'</span>&#125;,</span><br><span class="line">            &#123;<span class="string">'path'</span>: <span class="string">'/some'</span>, <span class="string">'method'</span>: <span class="string">'POST'</span>&#125;]</span><br></pre></td></tr></table></figure>
</li>
<li><p>DeprecatedRule类：该类主要用于表示一个被废弃的策略或规则。</p>
</li>
</ul>
<h2 id="oslo-policy的使用方法"><a href="#oslo-policy的使用方法" class="headerlink" title="oslo.policy的使用方法"></a>oslo.policy的使用方法</h2><p>本节结合上面的内容以及nova组件介绍oslo.policy的使用方法。一般地，OpenStack其他组件可以直接使用oslo.policy库实现RBAC策略，也可以对oslo.policy库进行扩展，实现适合自身使用的RBAC策略。nova组件就是对oslo.policy的实现进行了扩展。</p>
<p>首先为了实现nova自身的需求，nova组件实现了一个检查类。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@policy.register('is_admin')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsAdminCheck</span><span class="params">(policy.Check)</span>:</span></span><br><span class="line">    <span class="string">"""An explicit check for is_admin."""</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, kind, match)</span>:</span></span><br><span class="line">        <span class="string">"""Initialize the check."""</span></span><br><span class="line"> </span><br><span class="line">        self.expected = (match.lower() == <span class="string">'true'</span>)</span><br><span class="line"> </span><br><span class="line">        super(IsAdminCheck, self).__init__(kind, str(self.expected))</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, target, creds, enforcer)</span>:</span></span><br><span class="line">        <span class="string">"""Determine whether is_admin matches the requested value."""</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> creds[<span class="string">'is_admin'</span>] == self.expected</span><br></pre></td></tr></table></figure>
<p>这个类用于判断用户是否是admin用户。接着，nova组件实现了一个初始化方法init()。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> oslo_config <span class="keyword">import</span> cfg</span><br><span class="line"><span class="keyword">from</span> oslo_log <span class="keyword">import</span> log <span class="keyword">as</span> logging</span><br><span class="line"><span class="keyword">from</span> oslo_policy <span class="keyword">import</span> policy</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(policy_file=None, rules=None, default_rule=None, use_conf=True)</span>:</span></span><br><span class="line">    <span class="string">"""Init an Enforcer class.</span></span><br><span class="line"><span class="string">       :param policy_file: Custom policy file to use, if none is specified,</span></span><br><span class="line"><span class="string">                           `CONF.policy_file` will be used.</span></span><br><span class="line"><span class="string">       :param rules: Default dictionary / Rules to use. It will be</span></span><br><span class="line"><span class="string">                     considered just in the first instantiation.</span></span><br><span class="line"><span class="string">       :param default_rule: Default rule to use, CONF.default_rule will</span></span><br><span class="line"><span class="string">                            be used if none is specified.</span></span><br><span class="line"><span class="string">       :param use_conf: Whether to load rules from config file.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">global</span> _ENFORCER</span><br><span class="line">    <span class="keyword">global</span> saved_file_rules</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> _ENFORCER:</span><br><span class="line">        _ENFORCER = policy.Enforcer(CONF,</span><br><span class="line">                                    policy_file=policy_file,</span><br><span class="line">                                    rules=rules,</span><br><span class="line">                                    default_rule=default_rule,</span><br><span class="line">                                    use_conf=use_conf)</span><br><span class="line">        register_rules(_ENFORCER)</span><br><span class="line">        _ENFORCER.load_rules()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Only the rules which are loaded from file may be changed.</span></span><br><span class="line">    current_file_rules = _ENFORCER.file_rules</span><br><span class="line">    current_file_rules = _serialize_rules(current_file_rules)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Checks whether the rules are updated in the runtime</span></span><br><span class="line">    <span class="keyword">if</span> saved_file_rules != current_file_rules:</span><br><span class="line">        _warning_for_deprecated_user_based_rules(current_file_rules)</span><br><span class="line">        saved_file_rules = copy.deepcopy(current_file_rules)</span><br></pre></td></tr></table></figure>
<p>该初始化方法创建了一个Enforcer对象，并将所有策略规则都加载到缓存中备用。然后，nova组件分别定义了两个用于检查规则的方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">authorize</span><span class="params">(context, action, target, do_raise=True, exc=None)</span>:</span></span><br><span class="line">    <span class="string">"""Verifies that the action is valid on the target in this context.</span></span><br><span class="line"><span class="string">       :param context: nova context</span></span><br><span class="line"><span class="string">       :param action: string representing the action to be checked</span></span><br><span class="line"><span class="string">           this should be colon separated for clarity.</span></span><br><span class="line"><span class="string">           i.e. ``compute:create_instance``,</span></span><br><span class="line"><span class="string">           ``compute:attach_volume``,</span></span><br><span class="line"><span class="string">           ``volume:attach_volume``</span></span><br><span class="line"><span class="string">       :param target: dictionary representing the object of the action</span></span><br><span class="line"><span class="string">           for object creation this should be a dictionary representing the</span></span><br><span class="line"><span class="string">           location of the object e.g. ``&#123;'project_id': context.project_id&#125;``</span></span><br><span class="line"><span class="string">       :param do_raise: if True (the default), raises PolicyNotAuthorized;</span></span><br><span class="line"><span class="string">           if False, returns False</span></span><br><span class="line"><span class="string">       :param exc: Class of the exception to raise if the check fails.</span></span><br><span class="line"><span class="string">                   Any remaining arguments passed to :meth:`authorize` (both</span></span><br><span class="line"><span class="string">                   positional and keyword arguments) will be passed to</span></span><br><span class="line"><span class="string">                   the exception class. If not specified,</span></span><br><span class="line"><span class="string">                   :class:`PolicyNotAuthorized` will be used.</span></span><br><span class="line"><span class="string">       :raises nova.exception.PolicyNotAuthorized: if verification fails</span></span><br><span class="line"><span class="string">           and do_raise is True. Or if 'exc' is specified it will raise an</span></span><br><span class="line"><span class="string">           exception of that type.</span></span><br><span class="line"><span class="string">       :return: returns a non-False value (not necessarily "True") if</span></span><br><span class="line"><span class="string">           authorized, and the exact value False if not authorized and</span></span><br><span class="line"><span class="string">           do_raise is False.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    init()</span><br><span class="line">    credentials = context.to_policy_values()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exc:</span><br><span class="line">        exc = exception.PolicyNotAuthorized</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = _ENFORCER.authorize(action, target, credentials,</span><br><span class="line">                                     do_raise=do_raise, exc=exc, action=action)</span><br><span class="line">    <span class="keyword">except</span> policy.PolicyNotRegistered:</span><br><span class="line">        <span class="keyword">with</span> excutils.save_and_reraise_exception():</span><br><span class="line">            LOG.exception(_LE(<span class="string">'Policy not registered'</span>))</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">with</span> excutils.save_and_reraise_exception():</span><br><span class="line">            LOG.debug(<span class="string">'Policy check for %(action)s failed with credentials '</span></span><br><span class="line">                      <span class="string">'%(credentials)s'</span>,</span><br><span class="line">                      &#123;<span class="string">'action'</span>: action, <span class="string">'credentials'</span>: credentials&#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_is_admin</span><span class="params">(context)</span>:</span></span><br><span class="line">    <span class="string">"""Whether or not roles contains 'admin' role according to policy setting.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"> </span><br><span class="line">    init()</span><br><span class="line">    <span class="comment"># the target is user-self</span></span><br><span class="line">    credentials = context.to_policy_values()</span><br><span class="line">    target = credentials</span><br><span class="line">    <span class="keyword">return</span> _ENFORCER.authorize(<span class="string">'context_is_admin'</span>, target, credentials)</span><br></pre></td></tr></table></figure>
<p>其中，authorize()方法对oslo.policy中的所有默认规则进行检查；而check_is_admin()方法只对nova自定义的IsAdminCheck类的规则进行检查。紧接着，nova组件定义了一个用户获取Enforcer对象的方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_enforcer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># This method is for use by oslopolicy CLI scripts. Those scripts need the</span></span><br><span class="line">    <span class="comment"># 'output-file' and 'namespace' options, but having those in sys.argv means</span></span><br><span class="line">    <span class="comment"># loading the Nova config options will fail as those are not expected to</span></span><br><span class="line">    <span class="comment"># be present. So we pass in an arg list with those stripped out.</span></span><br><span class="line">    conf_args = []</span><br><span class="line">    <span class="comment"># Start at 1 because cfg.CONF expects the equivalent of sys.argv[1:]</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(sys.argv):</span><br><span class="line">        <span class="keyword">if</span> sys.argv[i].strip(<span class="string">'-'</span>) <span class="keyword">in</span> [<span class="string">'namespace'</span>, <span class="string">'output-file'</span>]:</span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        conf_args.append(sys.argv[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    cfg.CONF(conf_args, project=<span class="string">'nova'</span>)</span><br><span class="line">    init()</span><br><span class="line">    <span class="keyword">return</span> _ENFORCER</span><br></pre></td></tr></table></figure>
<p>该方法通过读取配置文件或输入参数中的相关配置信息，获取一个Enforcer对象。因此，为了实现oslo.policy的功能，需要在nova组件的配置文件中添加如下的配置信息：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">output_file = policy-sample.yaml</span><br><span class="line">namespace = nova</span><br></pre></td></tr></table></figure>
<p>其中，namespace为oslo.policy添加了一个命名空间，这样可以隔离OpenStack的不同组件；output_file为默认策略规则文件的输出路径，当然你也可以自定义一个策略规则文件。</p>
<p>如果需要为定义的Enforcer对象添加RuleDefault对象，则可以使用如下的方式。首先，创建一个Enforcer对象，然后创建一个或多个RuleDefault对象，接着调用Enforcer对象的register_defaults()方法或register_default()方法将RuleDefault对象注册到Enforcer对象中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> oslo_config <span class="keyword">import</span> cfg</span><br><span class="line">CONF = cfg.CONF</span><br><span class="line">enforcer = policy.Enforcer(CONF, policy_file=_POLICY_PATH)</span><br><span class="line"> </span><br><span class="line">base_rules = [</span><br><span class="line">    policy.RuleDefault(<span class="string">'admin_required'</span>, <span class="string">'role:admin or is_admin:1'</span>,</span><br><span class="line">                       description=<span class="string">'Who is considered an admin'</span>),</span><br><span class="line">    policy.RuleDefault(<span class="string">'service_role'</span>, <span class="string">'role:service'</span>,</span><br><span class="line">                       description=<span class="string">'service role'</span>),</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">enforcer.register_defaults(base_rules)</span><br><span class="line">enforcer.register_default(policy.RuleDefault(<span class="string">'identity:create_region'</span>,</span><br><span class="line">                                             <span class="string">'rule:admin_required'</span>,</span><br><span class="line">                                             description=<span class="string">'helpful text'</span>))</span><br></pre></td></tr></table></figure>
<p>最后，为了可以使用oslo.policy相关的命令行更好的管理权限策略规则，可以在nova组件安装配置文件setup.cfg文件中进行添加如下配置：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[entry_points]</span><br><span class="line">oslo.policy.enforcer =</span><br><span class="line">    nova = nova.policy:get_enforcer</span><br></pre></td></tr></table></figure>
<p>这样，在使用命令行管理nova组件的权限控制策略时，便可以根据oslo.policy.enforcer配置项找到nova组件的Enforcer对象。</p>
<p>原文链接：<a href="https://blog.csdn.net/Bill_Xiang_/article/details/78665544" target="_blank" rel="external">https://blog.csdn.net/Bill_Xiang_/article/details/78665544</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Oslo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oslo系列之oslo.messaging]]></title>
      <url>https://magiceses.github.io/2018/10/05/openstack-oslo.packages-oslo.messaging/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">生命的道路上永远没有捷径可言，只有脚踏实地走下去。<br></p>

<p>今天介绍一下 openstack 中关于 <a href="https://blog.csdn.net/weixin_43700106/article/details/107763282" target="_blank" rel="external">RabbitMq</a> 和 oslo_messaging 库之间的前生今世</p>
<p>一定要弄清楚的一个问题就是：直接使用rabbitmq和使用oslo_messaging这个库间接的使用有什么区别。</p>
<p>olso_messaging实际上是在rabbitmq的基础上通过一些列的调用，最终暴露给用户一个简单的使用接口，用户不必关心内部的实现，只用配置好配置文件，进行简单的函数调用即可。<br>并且由于这个库是openstack的标准库，里面的一些函数命名和默认参数都是针对于openstack的概念来讲的。</p>
<a id="more"></a>
<p>基本结构就是：</p>
<p>openstack -&gt; oslo_messaging -&gt; kombu -&gt; AMQP -&gt; socket</p>
<p>首先看下 oslo_messaging 中对象封装：</p>
<h2 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h2><h3 id="Transport"><a href="#Transport" class="headerlink" title="Transport"></a>Transport</h3><p>Transport(传输层)主要实现RPC底层的通信(比如socket)以及事件循环,多线程等其他功能.可以通过URL来获得不同transport的句柄.URL的格式为:</p>
<p>transport://user:password@host:port[,hostN:portN]/virtual_host</p>
<p>目前支持的Transport有rabbit,qpid与zmq,分别对应不同的后端消息总线.用户可以使用oslo.messaging.get_transport函数来获得transport对象实例的句柄.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> oslo_messaging</span><br><span class="line">transport = oslo_messaging.get_transport(cfg, url=<span class="keyword">None</span>, **kwargs)</span><br></pre></td></tr></table></figure>
<h3 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h3><p>Target封装了指定某一个消息最终目的地的所有信息,下表所示为其所具有的属性:</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数=默认值</th>
<th style="text-align:left">说  明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">exchange = None</td>
<td style="text-align:left">(字符串类型)topic所属的范围,不指定的话默认使用配置文件中的control_exchange选项</td>
</tr>
<tr>
<td style="text-align:left">topic = None</td>
<td style="text-align:left">(字符串类型)一个topic可以用来标识服务器所暴露的一组接口(一个接口包含多个可被远程调用的方法).允许多个服务器暴露同一组接口,消息会以轮循的方式发送给多个服务器中的某一个</td>
</tr>
<tr>
<td style="text-align:left">namespace = None</td>
<td style="text-align:left">(字符串类型)用来标识服务器所暴露的某个特定接口(多个可被远程调用的方法)</td>
</tr>
<tr>
<td style="text-align:left">version = None</td>
<td style="text-align:left">(字符串类型)服务器所暴露的接口支持M.N类型的版本号.次版本号(N)的增加表示新的接口向前兼容,主版本号(M)的增加表示新接口和旧接口不兼容.RPC服务器可以实现多个不同的主版本号接口.</td>
</tr>
<tr>
<td style="text-align:left">server = None</td>
<td style="text-align:left">(字符串类型)客户端可以指定此参数来要求消息的目的地是某个特定的服务器,而不是一组同属某个topic的服务器中的任意一台.</td>
</tr>
<tr>
<td style="text-align:left">fanout = None</td>
<td style="text-align:left">(布尔型)当设置为真时,消息会被发送到同属某个topic的所有服务器上,而不是其中的一台.</td>
</tr>
</tbody>
</table>
<p>在不同的应用场景下,构造Target对象需要不同的参数:创建一个RPC服务器时,需要topic和server参数,exchange参数可选;指定一个endpoint时,namespace和version是可选的;客户端发送消息时,需要topic参数,其他可选.</p>
<h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>一个RPC服务器可以暴露多个endpoint,每个endpoint包含一组方法,这组方法是可以被客户端通过某种Transport对象远程调用的.创建Server对象时,需要指定Transport,Target和一组endpoint.</p>
<h3 id="RPC-Client"><a href="#RPC-Client" class="headerlink" title="RPC Client"></a>RPC Client</h3><p>通过RPC Client,可以远程调用RPC Sever上的方法.远程调用时,需要提供一个字典对象来指明调用的上下文,调用方法的名字和传递给调用方法的参数(用字典表示).</p>
<p>有cast和call两种远程调用方式.通过cast方式远程调用,请求发送后就直接返回了;通过call方式调用,需要等响应从服务器返回.</p>
<h3 id="Notifier"><a href="#Notifier" class="headerlink" title="Notifier"></a>Notifier</h3><p>Notifier用来通过某种transport发送通知消息.通知消息遵循如下的格式:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> six</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> oslo_utils <span class="keyword">import</span> timeutils</span><br><span class="line"> </span><br><span class="line">&#123;<span class="string">'message_id'</span>: six.text_type(uuid.uuid4()), <span class="comment">#消息id号</span></span><br><span class="line"> <span class="string">'publisher_id'</span>: <span class="string">'compute.hos1'</span>,    <span class="comment">#发送者id</span></span><br><span class="line"> <span class="string">'timestamp'</span>: timeutils.utcnow(),   <span class="comment">#时间戳</span></span><br><span class="line"> <span class="string">'priority'</span>: <span class="string">'WARN'</span>,                <span class="comment">#通知优先级</span></span><br><span class="line"> <span class="string">'event_type'</span>: <span class="string">'compute.create_instance'</span>,   <span class="comment">#通知类型</span></span><br><span class="line"> <span class="string">'payload'</span>: &#123;<span class="string">'instance_id'</span>: <span class="number">12</span>, ...&#125;&#125;       <span class="comment">#通知内容</span></span><br></pre></td></tr></table></figure>
<p>可以在不同的优先级别上发送通知,这些优先级包括sample,critical,error,warn,info,debug,audit等.</p>
<h3 id="Notification-Listener"><a href="#Notification-Listener" class="headerlink" title="Notification Listener"></a>Notification Listener</h3><p>Notification Listener和Server类似,一个Notification Listener对象可以暴露多个endpoint,每个endpoint包含一组方法.但是与Server对象中的endpoint不同的是,这里的endpoint中的方法对应通知消息的不同优先级.比如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> oslo_messaging</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorEndpoint</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(self, ctxt, publisher_id, event_type, payload, metadata)</span>:</span></span><br><span class="line">        do_something(payload)</span><br><span class="line">        <span class="keyword">return</span> oslo_messaging.NotificationResult.HANDLED</span><br></pre></td></tr></table></figure>
<p>endpoint中的方法如果返回messaging.NotificationResult.HANDLED或者None,表示这个通知消息已经确认被处理;如果返回messaging.NotificationResult.REQUEUE,表示这个通知消息要重新进入消息队列.</p>
<p>下面是一个利用oslo_messaging来实现远程过程调用的示例.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> oslo_config <span class="keyword">import</span> cfg</span><br><span class="line"><span class="keyword">import</span> oslo_messaging <span class="keyword">as</span> messaging</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerControlEndpoint</span><span class="params">(object)</span>:</span></span><br><span class="line">    target = messaging.Target(namespace=<span class="string">'controle'</span>,</span><br><span class="line">                              version=<span class="string">'2.0'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server)</span>:</span></span><br><span class="line">        self.server = server</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self, ctx)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.server:</span><br><span class="line">            self.server.stop()</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestEndpoint</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self, ctx, arg)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> arg</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">transport = messaging.get_transport(cfg.CONF)</span><br><span class="line">target = messaging.Target(topic=<span class="string">'test'</span>,</span><br><span class="line">                          server=<span class="string">'server1'</span>)</span><br><span class="line">endpoints = [</span><br><span class="line">    ServerControlEndpoint(<span class="keyword">None</span>),</span><br><span class="line">    TestEndpoint(),</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">server = messaging.get_rpc_server(transport, target, endpoints,</span><br><span class="line">                                  executor=<span class="string">'blocking'</span>)</span><br><span class="line">server.start()</span><br><span class="line">server.wait()</span><br></pre></td></tr></table></figure>
<p>这个例子里,定义了两个不同的endpoint:ServerControlEndpoint与TestEndpoint.这两个endpoint中的方法stop和test都可以被客户端远程调用.</p>
<p>创建rpc server对象之前,需要先创建transport和target对象,这里使用get_transport()函数来获得transport对象的句柄,get_transport()的参数如下表所示:</p>
<table>
<thead>
<tr>
<th>参数=默认值</th>
<th>说  明</th>
</tr>
</thead>
<tbody>
<tr>
<td>conf</td>
<td>(oslo.config.cfg.ConfigOpts类型)oslo.config配置项对象</td>
</tr>
<tr>
<td>url = None</td>
<td>(字符串或者oslo.messaging.Transport类型)transport URL.如果为空,采用conf配置中的transport_url项所指定的值</td>
</tr>
<tr>
<td>namespace = None</td>
<td>(字符串类型)用来标识服务器所暴露的某个特定接口(多个可被远程调用的方法)</td>
</tr>
<tr>
<td>allowed_remote_exmods = None</td>
<td>(列表类型)Python模块的列表.客户端可用列表里的模块来deserialize异常</td>
</tr>
<tr>
<td>aliases = None</td>
<td>(字典类型)transport别名和transport名称之间的对应关系</td>
</tr>
</tbody>
</table>
<p>conf对象里,除了包含transport_url项外,还可以包含control_exchange项.control_exchange用来指明topic所属的默认范围,默认为”openstack”.可以使用oslo.messaging.set_transport_defaults()函数来修改默认值.</p>
<p>此处构建的Target对象是用来建立RPC Server的,所以需指明topic和server参数.用户定义的endpoint对象也可以包含一个target属性,用来指明这个endpoint所支持的特定的namespace和version.</p>
<p>这里使用get_rpc_server()函数创建server对象,然后调用server对象的start方法开始接收远程调用.get_rpc_server()函数的参数如下表所求:</p>
<table>
<thead>
<tr>
<th>参数=默认值</th>
<th>说  明</th>
</tr>
</thead>
<tbody>
<tr>
<td>transport</td>
<td>(Transpor类型)transport对象</td>
</tr>
<tr>
<td>target</td>
<td>(Target类型)target对象,用来指明监听的exchange,topic和server</td>
</tr>
<tr>
<td>endpoints</td>
<td>(列表类型)包含了endpoints对象实例的列表</td>
</tr>
<tr>
<td>executor=’blocking’</td>
<td>(字符串类型)用来指明消息接收和发收的方式:目前支持两种方式: blocking:在这种方式中,用户调用start函数后,在start函数中开始请求处理循环:用户线程阻塞,处理下一个请求.直到用户调用了stop函数后,这个处理循环才会退出.消息的接收和分发处理都在调用start函数的线程中完成. eventlet:在这种方式中,会有一个协程GreenThread来处理消息的接收,然后有其他不同的GreenThread来处理不同消息的分发处理.调用start的用户线程不会被阻塞</td>
</tr>
<tr>
<td>serializer = None</td>
<td>(Serializer类型)用来序列化/反序列化消息</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#client.py 客户端</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> oslo_config <span class="keyword">import</span> cfg</span><br><span class="line"><span class="keyword">import</span> oslo_messaging <span class="keyword">as</span> messaging</span><br><span class="line"> </span><br><span class="line">transport = messaging.get_transport(cfg.CONF)</span><br><span class="line">target = messaging.Target(topic=<span class="string">'test'</span>)</span><br><span class="line">client = messaging.RPCClient(transport, target)</span><br><span class="line">ret = client.call(ctxt=&#123;&#125;,</span><br><span class="line">                  method=<span class="string">'test'</span>,</span><br><span class="line">                  arg=<span class="string">'myarg'</span>)</span><br><span class="line"> </span><br><span class="line">cctx = client.prepare(namespace=<span class="string">'control'</span>, version=<span class="string">'2.0'</span>)</span><br><span class="line">cctx.cast(&#123;&#125;, <span class="string">'stop'</span>)</span><br></pre></td></tr></table></figure>
<p>这里target对象构造时,必须要有的参数只有topic,创建RPCClient对象时,可以接受的参数如下表所示:</p>
<table>
<thead>
<tr>
<th>参数=默认值</th>
<th>说  明</th>
</tr>
</thead>
<tbody>
<tr>
<td>transport</td>
<td>(Transport类型)transport对象</td>
</tr>
<tr>
<td>target</td>
<td>(Taget类型)该client对象的默认target对象</td>
</tr>
<tr>
<td>timeout = None</td>
<td>(整数或者浮点数类型)客户端调用call方法时超时时间(秒)</td>
</tr>
<tr>
<td>version_cap = None</td>
<td>(字符串类型)最大所支持的版本号.当版本号超过时,会扔出RPCVersionCapError异常</td>
</tr>
<tr>
<td>serializer = None</td>
<td>（Serializer类型)用来序列化/反序列化消息</td>
</tr>
<tr>
<td>retry = None</td>
<td>(整数类型)连接重试次数:None或者-1:一直重试0:不重试&gt;0:重试次数</td>
</tr>
</tbody>
</table>
<p>远程调用时,需要传入调用上下文,调用方法的名字和传给调用方法的参数.</p>
<p>Target对象的属性在RPCClient对象构造以后,还可以通过prepare()方法修改.可以修改的属性包括exchange,topic,namespace,version,server,fanout,timeout,version_cap和retry.</p>
<p>修改后的target属性只在这个prepare()方法返回的对象中有效.</p>
<p>下面我们再来看一个利用oslo_messaing实现通知消息处理的例子:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#notification_listener.py 消息通知处理</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> oslo_config <span class="keyword">import</span> cfg</span><br><span class="line"><span class="keyword">import</span> oslo_messaging <span class="keyword">as</span> messaging</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationEndPoint</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warn</span><span class="params">(self, ctxt, publisher_id, event_type, payload, metadata)</span>:</span></span><br><span class="line">        do_something(payload)</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorEndpoint</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(self, ctxt, publisher_id, event_type, payload, metadata)</span>:</span></span><br><span class="line">        do_something(payload)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">transport = messaging.get_transport(cfg.CONF)</span><br><span class="line">targets = [</span><br><span class="line">    messaging.Target(topic=<span class="string">'notifications'</span>),</span><br><span class="line">    messaging.Target(topic=<span class="string">'notifications_bis'</span>)</span><br><span class="line">]</span><br><span class="line">endpoints = [</span><br><span class="line">    NotificationEndPoint(),</span><br><span class="line">    ErrorEndpoint(),</span><br><span class="line">]</span><br><span class="line">listener = messaging.get_notification_listener(transport,</span><br><span class="line">                                               targets,</span><br><span class="line">                                               endpoints)</span><br><span class="line"> </span><br><span class="line">listener.start()</span><br><span class="line">listener.wait()</span><br></pre></td></tr></table></figure>
<p>通知消息处理的endpoint对象和远程过程调用的endpoint对象不同,对象定义的方法要和通知消息的优先级一一对应.我们可以为每个endpoint指定所对应的target对象.</p>
<p>最后调用get_notificaton_listener()函数构造notification listener对象,get_notification_listener()函数的参数如下表所示:</p>
<table>
<thead>
<tr>
<th>参数=默认值</th>
<th>说  明</th>
</tr>
</thead>
<tbody>
<tr>
<td>transport</td>
<td>(Transport类型)transport对象</td>
</tr>
<tr>
<td>target</td>
<td>(列表类型)target对象的列表,用来指明endpoints列表中的每一个endpoint所侦听处理的exchange和topic</td>
</tr>
<tr>
<td>endpoints</td>
<td>(列表类型)包含了endpoints对象实例的列表</td>
</tr>
<tr>
<td>executor=’blocking’</td>
<td>(字符串类型)用来指明消息接收和发收的方式:目前支持两种方式: blocking:在这种方式中,用户调用start函数后,在start函数中开始请求处理循环:用户线程阻塞,处理下一个请求.直到用户调用了stop函数后,这个处理循环才会退出.消息的接收和分发处理都在调用start函数的线程中完成. eventlet:在这种方式中,会有一个协程GreenThread来处理消息的接收,然后有其他不同的GreenThread来处理不同消息的分发处理.调用start的用户线程不会被阻塞</td>
</tr>
<tr>
<td>serializer=None</td>
<td>（Serializer类型）用来序列化/反序列化消息</td>
</tr>
<tr>
<td>allow_requeue=False</td>
<td>(布尔类型)如果为真,表示支持NotificationResult.REQUEUE</td>
</tr>
</tbody>
</table>
<p>相对应的发送消息通知的代码如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#notifier_send.py</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> oslo_config <span class="keyword">import</span> cfg</span><br><span class="line"><span class="keyword">import</span> oslo_messaging <span class="keyword">as</span> messaging</span><br><span class="line"> </span><br><span class="line">transport = messaging.get_transport(cfg.CONF)</span><br><span class="line">notifier = messaging.Notifier(transport,</span><br><span class="line">                              driver=<span class="string">'messaging'</span>,</span><br><span class="line">                              topic=<span class="string">'notifications'</span>)</span><br><span class="line"> </span><br><span class="line">notifier2 = notifier.prepare(publisher_id=<span class="string">'compute'</span>)</span><br><span class="line">notifier2.error(ctxt=&#123;&#125;,</span><br><span class="line">                event_type=<span class="string">'my_type'</span>,</span><br><span class="line">                payload=&#123;<span class="string">'content'</span>: <span class="string">'error occurred'</span>&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发送通知消息时,首先要构造Notifier对象,此时可能需要指定的参数如下表所示:</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数=默认值</th>
<th>说  明</th>
</tr>
</thead>
<tbody>
<tr>
<td>transport</td>
<td>（Transport类型)transport对象</td>
</tr>
<tr>
<td>target</td>
<td>(列表类型)target对象的列表,用来指明endpoints列表中的每一个endpoint所侦听处理的exchange和topic</td>
</tr>
<tr>
<td>publish_id = None</td>
<td>(字符串类型)发送者id</td>
</tr>
<tr>
<td>driver = None</td>
<td>(字符串类型)后台驱动.一般采用”messaging”.如果没有指定,会使用配置文件中的notificaton_driver的值</td>
</tr>
<tr>
<td>topic = None</td>
<td>(字符串类型)发送消息的topic.如果没有指定,会使用配置文件中的notification_topics的值</td>
</tr>
<tr>
<td>serializer = None</td>
<td>（Serializer类型）用来序列化/反序列化消息</td>
</tr>
</tbody>
</table>
<p>初始化Notifier对象的操作比较复杂,所以可以用prepare()方法修改已创建的Notifier对象,prepare()方法返回的是新的Notifier对象的实例.它的参数如下表所示:</p>
<table>
<thead>
<tr>
<th>参数 = 默认值</th>
<th>说  明</th>
</tr>
</thead>
<tbody>
<tr>
<td>publish_id = None</td>
<td>(字符串类型)发送者id</td>
</tr>
<tr>
<td>retry = None</td>
<td>(整数类型)连接重试次数:None或者-1:一直重试0:不重试&gt;0:重试次数</td>
</tr>
</tbody>
</table>
<p>最后可以调用Notifier对象的不同方法(error, critical, warn, 等等)发送不同优先级的消息通知.</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>根据上个章节，我们可以看到其实这个库最终暴漏给用户的是两个概念：1.rpc，2.notification</p>
<p>下面我们来根据基本源码分析一下这两个概念</p>
<h3 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a>rpc</h3><p>rpc(即远程调用)的概念被划分为调用方和被调用方<br>调用方称为client：rpc_client<br>被调用方称为server：rpc_server<br>使用时，被调用方server.start,等待调用方client.cast 或 clinet.call即可发起阻塞或非阻塞的远程调用。</p>
<p>当rpc client执行一次远程调用时实际发生了什么呢 ？<br>（代码在oslo_messaging/rpc/client.py文件里）</p>
<h4 id="rpc-client"><a href="#rpc-client" class="headerlink" title="rpc client"></a>rpc client</h4><p>首先构建 rpc client ，实例化 RPCClient</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">self.rpc_client = messaging.get_rpc_client(</span><br><span class="line">    messaging.get_transport(),</span><br><span class="line">    version=<span class="string">'1.0'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_rpc_client</span><span class="params">(transport, retry=None, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""Return a configured oslo_messaging RPCClient."""</span></span><br><span class="line">    target = oslo_messaging.Target(**kwargs)</span><br><span class="line">    serializer = oslo_serializer.RequestContextSerializer(</span><br><span class="line">        oslo_serializer.JsonPayloadSerializer())</span><br><span class="line">    <span class="keyword">return</span> oslo_messaging.RPCClient(transport, target,</span><br><span class="line">                                    serializer=serializer,</span><br><span class="line">                                    retry=retry)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RPCClient</span><span class="params">(_BaseCallContext)</span>:</span></span><br><span class="line">      _marker = _BaseCallContext._marker</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, transport, target,</span></span></span><br><span class="line"><span class="function"><span class="params">                 timeout=None, version_cap=None, serializer=None, retry=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 call_monitor_timeout=None, transport_options=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> serializer <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            serializer = msg_serializer.NoOpSerializer()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(transport, msg_transport.RPCTransport):</span><br><span class="line">            LOG.warning(<span class="string">"Using notification transport for RPC. Please use "</span></span><br><span class="line">                        <span class="string">"get_rpc_transport to obtain an RPC transport "</span></span><br><span class="line">                        <span class="string">"instance."</span>)</span><br><span class="line"></span><br><span class="line">        super(RPCClient, self).__init__(</span><br><span class="line">            transport, target, serializer, timeout, version_cap, retry,</span><br><span class="line">            call_monitor_timeout, transport_options</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.conf.register_opts(_client_opts)</span><br></pre></td></tr></table></figure>
<p>然后通过 call 或者 cast 调用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.rpc_client.prepare(topic=topic).call(cxt, method, **args)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@six.add_metaclass(abc.ABCMeta)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BaseCallContext</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    _marker = object()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, transport, target, serializer,</span></span></span><br><span class="line"><span class="function"><span class="params">                 timeout=None, version_cap=None, retry=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 call_monitor_timeout=None, transport_options=None)</span>:</span></span><br><span class="line">        self.conf = transport.conf</span><br><span class="line"></span><br><span class="line">        self.transport = transport</span><br><span class="line">        self.target = target</span><br><span class="line">        self.serializer = serializer</span><br><span class="line">        self.timeout = timeout</span><br><span class="line">        self.call_monitor_timeout = call_monitor_timeout</span><br><span class="line">        self.retry = retry</span><br><span class="line">        self.version_cap = version_cap</span><br><span class="line">        self.transport_options = transport_options</span><br><span class="line"></span><br><span class="line">        super(_BaseCallContext, self).__init__()</span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">cast</span><span class="params">(self, ctxt, method, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""Invoke a method and return immediately. See RPCClient.cast()."""</span></span><br><span class="line">        msg = self._make_message(ctxt, method, kwargs)</span><br><span class="line">        msg_ctxt = self.serializer.serialize_context(ctxt)</span><br><span class="line"></span><br><span class="line">        self._check_version_cap(msg.get(<span class="string">'version'</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.transport._send(self.target, msg_ctxt, msg,</span><br><span class="line">                                 retry=self.retry,</span><br><span class="line">                                 transport_options=self.transport_options)</span><br><span class="line">        <span class="keyword">except</span> driver_base.TransportDriverError <span class="keyword">as</span> ex:</span><br><span class="line">            <span class="keyword">raise</span> ClientSendError(self.target, ex)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, ctxt, method, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""Invoke a method and wait for a reply. See RPCClient.call()."""</span></span><br><span class="line">        <span class="keyword">if</span> self.target.fanout:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.InvalidTarget(<span class="string">'A call cannot be used with fanout'</span>,</span><br><span class="line">                                           self.target)</span><br><span class="line"></span><br><span class="line">        msg = self._make_message(ctxt, method, kwargs)</span><br><span class="line">        msg_ctxt = self.serializer.serialize_context(ctxt)</span><br><span class="line"></span><br><span class="line">        timeout = self.timeout</span><br><span class="line">        <span class="keyword">if</span> self.timeout <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            timeout = self.conf.rpc_response_timeout</span><br><span class="line"></span><br><span class="line">        cm_timeout = self.call_monitor_timeout</span><br><span class="line"></span><br><span class="line">        self._check_version_cap(msg.get(<span class="string">'version'</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = \</span><br><span class="line">                self.transport._send(self.target, msg_ctxt, msg,</span><br><span class="line">                                     wait_for_reply=<span class="keyword">True</span>, timeout=timeout,</span><br><span class="line">                                     call_monitor_timeout=cm_timeout,</span><br><span class="line">                                     retry=self.retry,</span><br><span class="line">                                     transport_options=self.transport_options)</span><br><span class="line">        <span class="keyword">except</span> driver_base.TransportDriverError <span class="keyword">as</span> ex:</span><br><span class="line">            <span class="keyword">raise</span> ClientSendError(self.target, ex)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.serializer.deserialize_entity(ctxt, result)</span><br></pre></td></tr></table></figure>
<p>可以看到在 29 行和 54 行，两个方法都是执行了 transport._send</p>
<p>只有参数不同，这里最大的区别其实是wait_for_reply这个参数，顾名思义wait or no wait也就是我们说的阻塞/非阻塞。<br>那_send这个方法，最重要的两关键一个是transport本身，一个是target参数，这两个东西是rpc client <strong>init</strong>的时候必须要传的参数，</p>
<p><strong>transport</strong> 参数是由（osllo_messaging/transport.py文件）_get_transport方法而来:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_transport</span><span class="params">(conf, url=None, allowed_remote_exmods=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                   transport_cls=RPCTransport)</span>:</span></span><br><span class="line">    allowed_remote_exmods = allowed_remote_exmods <span class="keyword">or</span> []</span><br><span class="line">    conf.register_opts(_transport_opts)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(url, TransportURL):</span><br><span class="line">        url = TransportURL.parse(conf, url)</span><br><span class="line"></span><br><span class="line">    kwargs = dict(default_exchange=conf.control_exchange,</span><br><span class="line">                  allowed_remote_exmods=allowed_remote_exmods)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mgr = driver.DriverManager(<span class="string">'oslo.messaging.drivers'</span>,</span><br><span class="line">                                   url.transport.split(<span class="string">'+'</span>)[<span class="number">0</span>],</span><br><span class="line">                                   invoke_on_load=<span class="keyword">True</span>,</span><br><span class="line">                                   invoke_args=[conf, url],</span><br><span class="line">                                   invoke_kwds=kwargs)</span><br><span class="line">    <span class="keyword">except</span> RuntimeError <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="keyword">raise</span> DriverLoadFailure(url.transport, ex)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> transport_cls(mgr.driver)</span><br></pre></td></tr></table></figure>
<p>这里url是配置文件里配的，这里以rabbitmq为例<br>entry_point到oslo_messaging._drivers.impl_rabbit:RabbitDriver，最终获得到的是RabbitDriver的实例。</p>
<p><strong>target</strong>  直接实例化即可，这里注意到两个参数exchange和topic，和rabbitmq里的exchange和routing_key的概念一致</p>
<p>那我们接着来看 transport._send方法，前面也说到了transport此时是RabbitDriver</p>
<p>RabbitDriver 继承自 AMQPDriverBase 继承自 BaseDriver</p>
<p>_send 方法在AMQPDriverBase中：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AMQPDriverBase</span><span class="params">(base.BaseDriver)</span>:</span></span><br><span class="line">    missing_destination_retry_timeout = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, conf, url, connection_pool,</span></span></span><br><span class="line"><span class="function"><span class="params">                 default_exchange=None, allowed_remote_exmods=None)</span>:</span></span><br><span class="line">        super(AMQPDriverBase, self).__init__(conf, url, default_exchange,</span><br><span class="line">                                             allowed_remote_exmods)</span><br><span class="line"></span><br><span class="line">        self._default_exchange = default_exchange</span><br><span class="line"></span><br><span class="line">        self._connection_pool = connection_pool</span><br><span class="line"></span><br><span class="line">        self._reply_q_lock = threading.Lock()</span><br><span class="line">        self._reply_q = <span class="keyword">None</span></span><br><span class="line">        self._reply_q_conn = <span class="keyword">None</span></span><br><span class="line">        self._waiter = <span class="keyword">None</span>    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_send</span><span class="params">(self, target, ctxt, message,</span></span></span><br><span class="line"><span class="function"><span class="params">              wait_for_reply=None, timeout=None, call_monitor_timeout=None,</span></span></span><br><span class="line"><span class="function"><span class="params">              envelope=True, notify=False, retry=None, transport_options=None)</span>:</span></span><br><span class="line"></span><br><span class="line">        msg = message</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> wait_for_reply:</span><br><span class="line">            msg_id = uuid.uuid4().hex</span><br><span class="line">            msg.update(&#123;<span class="string">'_msg_id'</span>: msg_id&#125;)</span><br><span class="line">            msg.update(&#123;<span class="string">'_reply_q'</span>: self._get_reply_q()&#125;)</span><br><span class="line">            msg.update(&#123;<span class="string">'_timeout'</span>: call_monitor_timeout&#125;)</span><br><span class="line"></span><br><span class="line">        rpc_amqp._add_unique_id(msg)</span><br><span class="line">        unique_id = msg[rpc_amqp.UNIQUE_ID]</span><br><span class="line"></span><br><span class="line">        rpc_amqp.pack_context(msg, ctxt)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> envelope:</span><br><span class="line">            msg = rpc_common.serialize_msg(msg)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> wait_for_reply:</span><br><span class="line">            self._waiter.listen(msg_id)</span><br><span class="line">            log_msg = <span class="string">"CALL msg_id: %s "</span> % msg_id</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            log_msg = <span class="string">"CAST unique_id: %s "</span> % unique_id</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> self._get_connection(rpc_common.PURPOSE_SEND) <span class="keyword">as</span> conn:</span><br><span class="line">                <span class="keyword">if</span> notify:</span><br><span class="line">                    exchange = self._get_exchange(target)</span><br><span class="line">                    LOG.debug(log_msg + <span class="string">"NOTIFY exchange '%(exchange)s'"</span></span><br><span class="line">                              <span class="string">" topic '%(topic)s'"</span>, &#123;<span class="string">'exchange'</span>: exchange,</span><br><span class="line">                                                     <span class="string">'topic'</span>: target.topic&#125;)</span><br><span class="line">                    conn.notify_send(exchange, target.topic, msg, retry=retry)</span><br><span class="line">                <span class="keyword">elif</span> target.fanout:</span><br><span class="line">                    log_msg += <span class="string">"FANOUT topic '%(topic)s'"</span> % &#123;</span><br><span class="line">                        <span class="string">'topic'</span>: target.topic&#125;</span><br><span class="line">                    LOG.debug(log_msg)</span><br><span class="line">                    conn.fanout_send(target.topic, msg, retry=retry)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    topic = target.topic</span><br><span class="line">                    exchange = self._get_exchange(target)</span><br><span class="line">                    <span class="keyword">if</span> target.server:</span><br><span class="line">                        topic = <span class="string">'%s.%s'</span> % (target.topic, target.server)</span><br><span class="line">                    LOG.debug(log_msg + <span class="string">"exchange '%(exchange)s'"</span></span><br><span class="line">                              <span class="string">" topic '%(topic)s'"</span>, &#123;<span class="string">'exchange'</span>: exchange,</span><br><span class="line">                                                     <span class="string">'topic'</span>: topic&#125;)</span><br><span class="line">                    conn.topic_send(exchange_name=exchange, topic=topic,</span><br><span class="line">                                    msg=msg, timeout=timeout, retry=retry,</span><br><span class="line">                                    transport_options=transport_options)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> wait_for_reply:</span><br><span class="line">                result = self._waiter.wait(msg_id, timeout,</span><br><span class="line">                                           call_monitor_timeout)</span><br><span class="line">                <span class="keyword">if</span> isinstance(result, Exception):</span><br><span class="line">                    <span class="keyword">raise</span> result</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">if</span> wait_for_reply:</span><br><span class="line">                self._waiter.unlisten(msg_id)</span><br></pre></td></tr></table></figure>
<p>我们看下 44 行到 66 行，回顾上面的cast和call函数里调用_send的时候是没有传notify找个参数的，所以第一个条件一定不成立</p>
<p>那看接下来的两个case，elif target.fanout/else（这里的fanout与rabbitmq本身的fanout意义是一样的）那也就是说我们在生成target或者client.prepare的时候可以通过指定fanout这个参数来决定进入哪个case，(注意第三个case里如果指定了target.server那么topic是target.topic和target.server二者相结合)那我们这里来看一下conn.fanout_send和conn.topic_send这两个方法(conn是<strong>enter</strong> <strong>exit</strong> <strong>getattr</strong>的产物，具体本文不细说了，这里只要知道最终调用到了oslo_messaging/_drivers/impl_rabbit.py里Connection这个类就可以了)：</p>
<p><strong>conn.fanout_send</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span><span class="params">(object)</span>:</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">fanout_send</span><span class="params">(self, topic, msg, retry=None)</span>:</span></span><br><span class="line">        <span class="string">"""Send a 'fanout' message."""</span></span><br><span class="line">        exchange = kombu.entity.Exchange(name=<span class="string">'%s_fanout'</span> % topic,</span><br><span class="line">                                         type=<span class="string">'fanout'</span>,</span><br><span class="line">                                         durable=<span class="keyword">False</span>,</span><br><span class="line">                                         auto_delete=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">        self._ensure_publishing(self._publish, exchange, msg, retry=retry)</span><br></pre></td></tr></table></figure>
<p>其实到这里基本上就清楚了fanout_send就是往名叫target.topic + “_fanout”这个exchange里发送fanout模式的消息，所有bind到这个exchange的queue都会收到这条消息，如果这个exchange没有创建过，在self.publish方法里会被declare.</p>
<p><strong>conn.topic_send</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">topic_send</span><span class="params">(self, exchange_name, topic, msg, timeout=None, retry=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                   transport_options=None)</span>:</span></span><br><span class="line">        <span class="string">"""Send a 'topic' message."""</span></span><br><span class="line">        exchange = kombu.entity.Exchange(</span><br><span class="line">            name=exchange_name,</span><br><span class="line">            type=<span class="string">'topic'</span>,</span><br><span class="line">            durable=self.amqp_durable_queues,</span><br><span class="line">            auto_delete=self.amqp_auto_delete)</span><br><span class="line"></span><br><span class="line">        self._ensure_publishing(self._publish, exchange, msg,</span><br><span class="line">                                routing_key=topic, timeout=timeout,</span><br><span class="line">                                retry=retry,</span><br><span class="line">                                transport_options=transport_options)</span><br></pre></td></tr></table></figure>
<p>topic_send就是以topic做为routing_key 以exchange_name这个参数值命名的exchange里发送topic模式的消息，这里注意区别就是exchange_name是上级调用_get_exchange方法得来的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span><span class="params">(object)</span>:</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">_get_exchange</span><span class="params">(self, target)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> target.exchange <span class="keyword">or</span> self._default_exchange</span><br></pre></td></tr></table></figure>
<p>_default_exchange如果仔细看的话前面其实前面的截图里有，就是conf.control_exchange<br>默认是openstack（这里大概知道点为啥oslo_messaging是为openstack搞得了吧😄）,关键还是取决于target,如果target里没有指定才会用配置文件的。<br>同样，如果这个exchange没有创建过，在self.publish方法里会被declare.</p>
<h4 id="rpc-server"><a href="#rpc-server" class="headerlink" title="rpc server"></a>rpc server</h4><p>首先要获得一个rpc server的实例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_rpc_server</span><span class="params">(transport, target, endpoints,</span></span></span><br><span class="line"><span class="function"><span class="params">                   executor=<span class="string">'blocking'</span>, serializer=None, access_policy=None)</span>:</span></span><br><span class="line">  	dispatcher = rpc_dispatcher.RPCDispatcher(endpoints, serializer,</span><br><span class="line">                                              access_policy)</span><br><span class="line">    <span class="keyword">return</span> RPCServer(transport, target, dispatcher, executor)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RPCServer</span><span class="params">(msg_server.MessageHandlingServer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, transport, target, dispatcher, executor=<span class="string">'blocking'</span>)</span>:</span></span><br><span class="line">        super(RPCServer, self).__init__(transport, dispatcher, executor)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(transport, msg_transport.RPCTransport):</span><br><span class="line">            LOG.warning(<span class="string">"Using notification transport for RPC. Please use "</span></span><br><span class="line">                        <span class="string">"get_rpc_transport to obtain an RPC transport "</span></span><br><span class="line">                        <span class="string">"instance."</span>)</span><br><span class="line">        self._target = target</span><br></pre></td></tr></table></figure>
<p>RPCServer 继承自 MessageHandlingServer 继承自 ServiceBase,_OrderedTaskRunner</p>
<p>同样的，transport和target是必须要有的，获得 rpc sever实例后，rpc server调用start方法，最终调用到了基类的start方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@six.add_metaclass(abc.ABCMeta)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageHandlingServer</span><span class="params">(service.ServiceBase, _OrderedTaskRunner)</span>:</span></span><br><span class="line"><span class="meta">    @ordered(reset_after='stop')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self, override_pool_size=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._started:</span><br><span class="line">            LOG.warning(<span class="string">'The server has already been started. Ignoring '</span></span><br><span class="line">                        <span class="string">'the redundant call to start().'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self._started = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        executor_opts = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.executor_type <span class="keyword">in</span> (<span class="string">"threading"</span>, <span class="string">"eventlet"</span>):</span><br><span class="line">            executor_opts[<span class="string">"max_workers"</span>] = (</span><br><span class="line">                override_pool_size <span class="keyword">or</span> self.conf.executor_thread_pool_size</span><br><span class="line">            )</span><br><span class="line">        self._work_executor = self._executor_cls(**executor_opts)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.listener = self._create_listener()</span><br><span class="line">        <span class="keyword">except</span> driver_base.TransportDriverError <span class="keyword">as</span> ex:</span><br><span class="line">            <span class="keyword">raise</span> ServerListenError(self.target, ex)</span><br><span class="line"></span><br><span class="line">        self.listener.start(self._on_incoming)</span><br></pre></td></tr></table></figure>
<p>关键看下 20 行到 25 行，因为这里实例化的是 RPCServer，所以_create_listener 调用的是 RPCServer 的方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RPCServer</span><span class="params">(msg_server.MessageHandlingServer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_create_listener</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.transport._listen(self._target, <span class="number">1</span>, <span class="keyword">None</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transport</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_listen</span><span class="params">(self, target, batch_size, batch_timeout)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (target.topic <span class="keyword">and</span> target.server):</span><br><span class="line">            <span class="keyword">raise</span> exceptions.InvalidTarget(<span class="string">'A server\'s target must have '</span></span><br><span class="line">                                           <span class="string">'topic and server names specified'</span>,</span><br><span class="line">                                           target)</span><br><span class="line">        <span class="keyword">return</span> self._driver.listen(target, batch_size,</span><br><span class="line">                                   batch_timeout)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AMQPDriverBase</span><span class="params">(base.BaseDriver)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">listen</span><span class="params">(self, target, batch_size, batch_timeout)</span>:</span></span><br><span class="line">        conn = self._get_connection(rpc_common.PURPOSE_LISTEN)</span><br><span class="line"></span><br><span class="line">        listener = RpcAMQPListener(self, conn)</span><br><span class="line"></span><br><span class="line">        conn.declare_topic_consumer(exchange_name=self._get_exchange(target),</span><br><span class="line">                                    topic=target.topic,</span><br><span class="line">                                    callback=listener)</span><br><span class="line">        conn.declare_topic_consumer(exchange_name=self._get_exchange(target),</span><br><span class="line">                                    topic=<span class="string">'%s.%s'</span> % (target.topic,</span><br><span class="line">                                                     target.server),</span><br><span class="line">                                    callback=listener)</span><br><span class="line">        conn.declare_fanout_consumer(target.topic, listener)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> base.PollStyleListenerAdapter(listener, batch_size,</span><br><span class="line">                                             batch_timeout)</span><br></pre></td></tr></table></figure>
<p>listen方法实际上关键是执行了三个declare，以下称作：<br>declare_topic_consumer（1）<br>declare_topic_consumer (2)<br>declare_fanout_consumer</p>
<p><strong>declare_topic_consumer（1）</strong></p>
<p>oslo_messaging/_drivers/impl_rabbit.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span><span class="params">(object)</span>:</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">declare_topic_consumer</span><span class="params">(self, exchange_name, topic, callback=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                               queue_name=None)</span>:</span></span><br><span class="line">        <span class="string">"""Create a 'topic' consumer."""</span></span><br><span class="line">        consumer = Consumer(exchange_name=exchange_name,</span><br><span class="line">                            queue_name=queue_name <span class="keyword">or</span> topic,</span><br><span class="line">                            routing_key=topic,</span><br><span class="line">                            type=<span class="string">'topic'</span>,</span><br><span class="line">                            durable=self.amqp_durable_queues,</span><br><span class="line">                            exchange_auto_delete=self.amqp_auto_delete,</span><br><span class="line">                            queue_auto_delete=self.amqp_auto_delete,</span><br><span class="line">                            callback=callback,</span><br><span class="line">                            rabbit_ha_queues=self.rabbit_ha_queues)</span><br><span class="line"></span><br><span class="line">        self.declare_consumer(consumer)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">declare_consumer</span><span class="params">(self, consumer)</span>:</span></span><br><span class="line">    <span class="string">"""Create a Consumer using the class that was passed in and</span></span><br><span class="line"><span class="string">    add it to our list of consumers</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_connect_error</span><span class="params">(exc)</span>:</span></span><br><span class="line">        log_info = &#123;<span class="string">'topic'</span>: consumer.routing_key, <span class="string">'err_str'</span>: exc&#125;</span><br><span class="line">        LOG.error(<span class="string">"Failed to declare consumer for topic '%(topic)s': "</span></span><br><span class="line">                  <span class="string">"%(err_str)s"</span>, log_info)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_declare_consumer</span><span class="params">()</span>:</span></span><br><span class="line">        consumer.declare(self)</span><br><span class="line">        tag = self._active_tags.get(consumer.queue_name)</span><br><span class="line">        <span class="keyword">if</span> tag <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            tag = next(self._tags)</span><br><span class="line">            self._active_tags[consumer.queue_name] = tag</span><br><span class="line">            self._new_tags.add(tag)</span><br><span class="line"></span><br><span class="line">        self._consumers[consumer] = tag</span><br><span class="line">        <span class="keyword">return</span> consumer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> self._connection_lock:</span><br><span class="line">        <span class="keyword">return</span> self.ensure(_declare_consumer,</span><br><span class="line">                           error_callback=_connect_error)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">declare</span><span class="params">(self, conn)</span>:</span></span><br><span class="line">    <span class="string">"""Re-declare the queue after a rabbit (re)connect."""</span></span><br><span class="line"></span><br><span class="line">    self.queue = kombu.entity.Queue(</span><br><span class="line">        name=self.queue_name,</span><br><span class="line">        channel=conn.channel,</span><br><span class="line">        exchange=self.exchange,</span><br><span class="line">        durable=self.durable,</span><br><span class="line">        auto_delete=self.queue_auto_delete,</span><br><span class="line">        routing_key=self.routing_key,</span><br><span class="line">        queue_arguments=self.queue_arguments)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        LOG.debug(<span class="string">'[%s] Queue.declare: %s'</span>,</span><br><span class="line">                  conn.connection_id, self.queue_name)</span><br><span class="line">        self.queue.declare()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@python_2_unicode_compatible</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span><span class="params">(MaybeChannelBound)</span>:</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">declare</span><span class="params">(self, nowait=False, channel=None)</span>:</span></span><br><span class="line">        <span class="string">"""Declare queue and exchange then binds queue to exchange."""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.no_declare:</span><br><span class="line">            <span class="comment"># - declare main binding.</span></span><br><span class="line">            self._create_exchange(nowait=nowait, channel=channel)</span><br><span class="line">            self._create_queue(nowait=nowait, channel=channel)</span><br><span class="line">            self._create_bindings(nowait=nowait, channel=channel)</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_create_exchange</span><span class="params">(self, nowait=False, channel=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.exchange:</span><br><span class="line">        self.exchange.declare(nowait=nowait, channel=channel)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_create_queue</span><span class="params">(self, nowait=False, channel=None)</span>:</span></span><br><span class="line">    self.queue_declare(nowait=nowait, passive=<span class="keyword">False</span>, channel=channel)</span><br><span class="line">    <span class="keyword">if</span> self.exchange <span class="keyword">and</span> self.exchange.name:</span><br><span class="line">        self.queue_bind(nowait=nowait, channel=channel)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_create_bindings</span><span class="params">(self, nowait=False, channel=None)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> B <span class="keyword">in</span> self.bindings:</span><br><span class="line">        channel = channel <span class="keyword">or</span> self.channel</span><br><span class="line">        B.declare(channel)</span><br><span class="line">        B.bind(self, nowait=nowait, channel=channel)</span><br></pre></td></tr></table></figure>
<p>一目了然，总结来说就是使用target的exchange（默认openstack）做为exchange_name<br>使用target的topic做为默认的queue_name，然后declare这个exchange和queue，然后将二者bind。</p>
<p><strong>declare_topic_consumer（2）</strong><br>与declare_topic_consumer(1)的唯一区别是这里使用了target.topic结合target.server做为了默认的queue_name。</p>
<p><strong>declare_fanout_consumer</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span><span class="params">(object)</span>:</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">declare_fanout_consumer</span><span class="params">(self, topic, callback)</span>:</span></span><br><span class="line">        <span class="string">"""Create a 'fanout' consumer."""</span></span><br><span class="line"></span><br><span class="line">        unique = uuid.uuid4().hex</span><br><span class="line">        exchange_name = <span class="string">'%s_fanout'</span> % topic</span><br><span class="line">        queue_name = <span class="string">'%s_fanout_%s'</span> % (topic, unique)</span><br><span class="line"></span><br><span class="line">        consumer = Consumer(exchange_name=exchange_name,</span><br><span class="line">                            queue_name=queue_name,</span><br><span class="line">                            routing_key=topic,</span><br><span class="line">                            type=<span class="string">'fanout'</span>,</span><br><span class="line">                            durable=<span class="keyword">False</span>,</span><br><span class="line">                            exchange_auto_delete=<span class="keyword">True</span>,</span><br><span class="line">                            queue_auto_delete=<span class="keyword">False</span>,</span><br><span class="line">                            callback=callback,</span><br><span class="line">                            rabbit_ha_queues=self.rabbit_ha_queues,</span><br><span class="line">                            rabbit_queue_ttl=self.rabbit_transient_queues_ttl)</span><br><span class="line"></span><br><span class="line">        self.declare_consumer(consumer)</span><br></pre></td></tr></table></figure>
<p>与上述两种的区别是，这里的queue_name变成了target.topic+”<em>fanout</em>“+uuid<br>exchange_name变成了target.topic+”_fanout”，exchange的type变成了fanout</p>
<p>这里也指定了routing_key ，我觉得应该是没用的。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><h5 id="server监听"><a href="#server监听" class="headerlink" title="server监听"></a><strong>server监听</strong></h5><p>一、<br>1.由target.exchange或配置文件（openstack为默认值）命名的exchange（type为topic模式）<br>2.以target.topic做为queue_name<br>2.以target.topic做为routing_key进行queue和exchange的绑定<br>二、<br>1.由target.exchange或配置文件（openstack为默认值）命名的exchange（type为topic模式）<br>2.以target.topic结合target.server做为queue_name<br>2.以target.topic结合target.server做为routing<em>key进行queue和exchange的绑定<br>三、<br>1.由target.topic+”fanout”命名的exchange（type为fanout模式）<br>2.以target.topic+”fanout</em>“+唯一uuid做为queue_name<br>2.将queue和exchange的绑定</p>
<h5 id="client调用"><a href="#client调用" class="headerlink" title="client调用"></a><strong>client调用</strong></h5><p>1.非阻塞调用：client.cast<br>2.阻塞调用：client.call</p>
<p>通过prepare来改变client的target进行fanout或者指定server的调用</p>
<h3 id="notification"><a href="#notification" class="headerlink" title="notification"></a>notification</h3><p>notification，顾名思义，消息/通知，其概念被分为<br>通知方:notifier（官方也叫driver）, 监听方:notification_listener<br>使用时，监听方listener.start, 调用方notifier.notfiy(具体暴漏给用户使用时是sample,audit,info等不同level的方法) 即可把消息发给监听方进行处理。</p>
<h4 id="发送方"><a href="#发送方" class="headerlink" title="发送方"></a>发送方</h4><p>以 ceilometer 为例，首先需要实例化一个 Notifier 对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">self.notifier = oslo_messaging.Notifier(</span><br><span class="line">    messaging.get_transport(),</span><br><span class="line">    driver=cfg.CONF.publisher_notifier.telemetry_driver,</span><br><span class="line">    publisher_id=<span class="string">"ceilometer.polling"</span>)</span><br></pre></td></tr></table></figure>
<p>在处理完数据之后需要将数据发送出去（具体中间处理数据的部分就不讲了，见我的另一篇 <a href="https://blog.csdn.net/weixin_43700106/article/details/107006653" target="_blank" rel="external">polling 源码分析</a>）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Notifier</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sample</span><span class="params">(self, ctxt, event_type, payload)</span>:</span></span><br><span class="line">        self._notify(ctxt, event_type, payload, <span class="string">'SAMPLE'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_notify</span><span class="params">(self, ctxt, event_type, payload, priority, publisher_id=None,</span></span></span><br><span class="line"><span class="function"><span class="params">            retry=None)</span>:</span></span><br><span class="line">    payload = self._serializer.serialize_entity(ctxt, payload)</span><br><span class="line">    ctxt = self._serializer.serialize_context(ctxt)</span><br><span class="line"></span><br><span class="line">    msg = dict(message_id=six.text_type(uuid.uuid4()),</span><br><span class="line">               publisher_id=publisher_id <span class="keyword">or</span> self.publisher_id,</span><br><span class="line">               event_type=event_type,</span><br><span class="line">               priority=priority,</span><br><span class="line">               payload=payload,</span><br><span class="line">               timestamp=six.text_type(timeutils.utcnow()))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_notify</span><span class="params">(ext)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ext.obj.notify(ctxt, msg, priority, retry <span class="keyword">or</span> self.retry)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            _LOG.exception(<span class="string">"Problem '%(e)s' attempting to send to "</span></span><br><span class="line">                           <span class="string">"notification system. Payload=%(payload)s"</span>,</span><br><span class="line">                           &#123;<span class="string">'e'</span>: e, <span class="string">'payload'</span>: payload&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self._driver_mgr.extensions:</span><br><span class="line">        self._driver_mgr.map(do_notify)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtensionManager</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">map</span><span class="params">(self, func, *args, **kwds)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.extensions:</span><br><span class="line">            <span class="comment"># <span class="doctag">FIXME:</span> Use a more specific exception class here.</span></span><br><span class="line">            <span class="keyword">raise</span> NoMatches(<span class="string">'No %s extensions found'</span> % self.namespace)</span><br><span class="line">        response = []</span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> self.extensions:</span><br><span class="line">            self._invoke_one_plugin(response.append, func, e, args, kwds)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">分析def map：</span><br><span class="line">(Pdb) p func</span><br><span class="line">&lt;function do_notify at 0x7f2c3c1df758&gt;</span><br><span class="line">(Pdb) p args</span><br><span class="line">()</span><br><span class="line">(Pdb) p kwds</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">2)</span><br><span class="line">(Pdb) p self.extensions</span><br><span class="line">[&lt;stevedore.extension.Extension object at 0x7f2c48771450&gt;]</span><br><span class="line">(Pdb) p e</span><br><span class="line">&lt;stevedore.extension.Extension object at 0x7f2c48771450&gt;</span><br><span class="line">(Pdb) p e.__dict__</span><br><span class="line">&#123;&apos;obj&apos;: &lt;oslo_messaging.notify.messaging.MessagingV2Driver object at 0x7f2c48771210&gt;, &apos;entry_point&apos;: EntryPoint.parse(&apos;messagingv2 = oslo_messaging.notify.messaging:MessagingV2Driver&apos;), &apos;name&apos;: &apos;messagingv2&apos;, &apos;plugin&apos;: &lt;class &apos;oslo_messaging.notify.messaging.MessagingV2Driver&apos;&gt;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtensionManager</span><span class="params">(object)</span>:</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">_invoke_one_plugin</span><span class="params">(self, response_callback, func, e, args, kwds)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response_callback(func(e, *args, **kwds))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            <span class="keyword">if</span> self.propagate_map_exceptions:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                LOG.error(<span class="string">'error calling %r: %s'</span>, e.name, err)</span><br><span class="line">                LOG.exception(err)</span><br></pre></td></tr></table></figure>
<p>可以看到 response_callback 传过来是一个 append 方法，这里的 func 就是 do_notify，发生调用，即</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_notify</span><span class="params">(self, ctxt, event_type, payload, priority, publisher_id=None,</span></span></span><br><span class="line"><span class="function"><span class="params">            retry=None)</span>:</span></span><br><span class="line">    payload = self._serializer.serialize_entity(ctxt, payload)</span><br><span class="line">    ctxt = self._serializer.serialize_context(ctxt)</span><br><span class="line"></span><br><span class="line">    msg = dict(message_id=six.text_type(uuid.uuid4()),</span><br><span class="line">               publisher_id=publisher_id <span class="keyword">or</span> self.publisher_id,</span><br><span class="line">               event_type=event_type,</span><br><span class="line">               priority=priority,</span><br><span class="line">               payload=payload,</span><br><span class="line">               timestamp=six.text_type(timeutils.utcnow()))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_notify</span><span class="params">(ext)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ext.obj.notify(ctxt, msg, priority, retry <span class="keyword">or</span> self.retry)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            _LOG.exception(<span class="string">"Problem '%(e)s' attempting to send to "</span></span><br><span class="line">                           <span class="string">"notification system. Payload=%(payload)s"</span>,</span><br><span class="line">                           &#123;<span class="string">'e'</span>: e, <span class="string">'payload'</span>: payload&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self._driver_mgr.extensions:</span><br><span class="line">        self._driver_mgr.map(do_notify)</span><br></pre></td></tr></table></figure>
<p>即调用 13 行方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) p ext</span><br><span class="line">&lt;stevedore.extension.Extension object at 0x7f2c48771450&gt;</span><br><span class="line">(Pdb) p ext.__dict__</span><br><span class="line">&#123;&apos;obj&apos;: &lt;oslo_messaging.notify.messaging.MessagingV2Driver object at 0x7f2c48771210&gt;, &apos;entry_point&apos;: EntryPoint.parse(&apos;messagingv2 = oslo_messaging.notify.messaging:MessagingV2Driver&apos;), &apos;name&apos;: &apos;messagingv2&apos;, &apos;plugin&apos;: &lt;class &apos;oslo_messaging.notify.messaging.MessagingV2Driver&apos;&gt;&#125;</span><br><span class="line"></span><br><span class="line">(Pdb) p ext.obj</span><br><span class="line">&lt;oslo_messaging.notify.messaging.MessagingV2Driver object at 0x7f2c48771210&gt;</span><br><span class="line">(Pdb) p ext.obj.__dict__</span><br><span class="line">&#123;&apos;topics&apos;: [&apos;notifications&apos;], &apos;version&apos;: 2.0, &apos;transport&apos;: &lt;oslo_messaging.transport.Transport object at 0x7f2c485df890&gt;, &apos;conf&apos;: &lt;oslo_config.cfg.ConfigOpts object at 0x16ba490&gt;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessagingDriver</span><span class="params">(notifier.Driver)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, conf, topics, transport, version=<span class="number">1.0</span>)</span>:</span></span><br><span class="line">        super(MessagingDriver, self).__init__(conf, topics, transport)</span><br><span class="line">        self.version = version</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notify</span><span class="params">(self, ctxt, message, priority, retry)</span>:</span></span><br><span class="line">        priority = priority.lower()</span><br><span class="line">        <span class="keyword">for</span> topic <span class="keyword">in</span> self.topics:</span><br><span class="line">            target = oslo_messaging.Target(topic=<span class="string">'%s.%s'</span> % (topic, priority))</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.transport._send_notification(target, ctxt, message,</span><br><span class="line">                                                  version=self.version,</span><br><span class="line">                                                  retry=retry)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                LOG.exception(<span class="string">"Could not send notification to %(topic)s. "</span></span><br><span class="line">                              <span class="string">"Payload=%(message)s"</span>,</span><br><span class="line">                              &#123;<span class="string">'topic'</span>: topic, <span class="string">'message'</span>: message&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessagingV2Driver</span><span class="params">(MessagingDriver)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"Send notifications using the 2.0 message format."</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, conf, **kwargs)</span>:</span></span><br><span class="line">        super(MessagingV2Driver, self).__init__(conf, version=<span class="number">2.0</span>, **kwargs)</span><br></pre></td></tr></table></figure>
<p>实际调用到第 6 行，最关键的地方:<br>43  -&gt;       priority = priority.lower()<br>44        for topic in self.topics:<br>45          target = oslo_messaging.Target(topic=’%s.%s’ % (topic, priority))</p>
<p>可以看到oslo_messaging封装得到的真正队列名称是:</p>
<p><topic>.<priority> 这种形式，<br>样例:<br>notifications.sample<br>所以，一旦调用oslo_messaging.notifier.sample来发送消息，此时的priority就被设置为<br>sample了，并且该优先级被用于最终拼接生成oslo_messaging的Target，最后生成了对应的<br>队列notifications.sample</priority></topic></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transport</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_send_notification</span><span class="params">(self, target, ctxt, message, version, retry=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> target.topic:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.InvalidTarget(<span class="string">'A topic is required to send'</span>,</span><br><span class="line">                                           target)</span><br><span class="line">        self._driver.send_notification(target, ctxt, message, version,</span><br><span class="line">                                       retry=retry)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) p self._driver</span><br><span class="line">&lt;oslo_messaging._drivers.impl_rabbit.RabbitDriver object at 0x7f2c4876de90&gt;</span><br><span class="line">(Pdb) p self._driver.__dict__</span><br><span class="line">&#123;&apos;_waiter&apos;: None, &apos;_allowed_remote_exmods&apos;: [], &apos;_reply_q_lock&apos;: &lt;thread.lock object at 0x7f2c482efc30&gt;, &apos;conf&apos;: &lt;oslo_config.cfg.ConfigOpts object at 0x16ba490&gt;, &apos;_default_exchange&apos;: &apos;ceilometer&apos;, &apos;_connection_pool&apos;: &lt;oslo_messaging._drivers.pool.ConnectionPool object at 0x7f2c4876df90&gt;, &apos;_reply_q&apos;: None, &apos;missing_destination_retry_timeout&apos;: 60, &apos;prefetch_size&apos;: 0, &apos;_reply_q_conn&apos;: None, &apos;_url&apos;: &lt;TransportURL transport=&apos;rabbit&apos;, hosts=[&lt;TransportHost hostname=&apos;rabbitmq.openstack.svc.cluster.local&apos;, port=5672, username=&apos;rabbitmq&apos;, password=&apos;vut8mvvS&apos;&gt;]&gt;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AMQPDriverBase</span><span class="params">(base.BaseDriver)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_notification</span><span class="params">(self, target, ctxt, message, version, retry=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._send(target, ctxt, message,</span><br><span class="line">                          envelope=(version == <span class="number">2.0</span>), notify=<span class="keyword">True</span>, retry=retry)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_send</span><span class="params">(self, target, ctxt, message,</span></span></span><br><span class="line"><span class="function"><span class="params">          wait_for_reply=None, timeout=None, call_monitor_timeout=None,</span></span></span><br><span class="line"><span class="function"><span class="params">          envelope=True, notify=False, retry=None, transport_options=None)</span>:</span></span><br><span class="line"></span><br><span class="line">    msg = message</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> wait_for_reply:</span><br><span class="line">        msg_id = uuid.uuid4().hex</span><br><span class="line">        msg.update(&#123;<span class="string">'_msg_id'</span>: msg_id&#125;)</span><br><span class="line">        msg.update(&#123;<span class="string">'_reply_q'</span>: self._get_reply_q()&#125;)</span><br><span class="line">        msg.update(&#123;<span class="string">'_timeout'</span>: call_monitor_timeout&#125;)</span><br><span class="line"></span><br><span class="line">    rpc_amqp._add_unique_id(msg)</span><br><span class="line">    unique_id = msg[rpc_amqp.UNIQUE_ID]</span><br><span class="line"></span><br><span class="line">    rpc_amqp.pack_context(msg, ctxt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> envelope:</span><br><span class="line">        msg = rpc_common.serialize_msg(msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> wait_for_reply:</span><br><span class="line">        self._waiter.listen(msg_id)</span><br><span class="line">        log_msg = <span class="string">"CALL msg_id: %s "</span> % msg_id</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log_msg = <span class="string">"CAST unique_id: %s "</span> % unique_id</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> self._get_connection(rpc_common.PURPOSE_SEND) <span class="keyword">as</span> conn:</span><br><span class="line">            <span class="keyword">if</span> notify:</span><br><span class="line">                exchange = self._get_exchange(target)</span><br><span class="line">                LOG.debug(log_msg + <span class="string">"NOTIFY exchange '%(exchange)s'"</span></span><br><span class="line">                          <span class="string">" topic '%(topic)s'"</span>, &#123;<span class="string">'exchange'</span>: exchange,</span><br><span class="line">                                                 <span class="string">'topic'</span>: target.topic&#125;)</span><br><span class="line">                conn.notify_send(exchange, target.topic, msg, retry=retry)</span><br><span class="line">            <span class="keyword">elif</span> target.fanout:</span><br><span class="line">                log_msg += <span class="string">"FANOUT topic '%(topic)s'"</span> % &#123;</span><br><span class="line">                    <span class="string">'topic'</span>: target.topic&#125;</span><br><span class="line">                LOG.debug(log_msg)</span><br><span class="line">                conn.fanout_send(target.topic, msg, retry=retry)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                topic = target.topic</span><br><span class="line">                exchange = self._get_exchange(target)</span><br><span class="line">                <span class="keyword">if</span> target.server:</span><br><span class="line">                    topic = <span class="string">'%s.%s'</span> % (target.topic, target.server)</span><br><span class="line">                LOG.debug(log_msg + <span class="string">"exchange '%(exchange)s'"</span></span><br><span class="line">                          <span class="string">" topic '%(topic)s'"</span>, &#123;<span class="string">'exchange'</span>: exchange,</span><br><span class="line">                                                 <span class="string">'topic'</span>: topic&#125;)</span><br><span class="line">                conn.topic_send(exchange_name=exchange, topic=topic,</span><br><span class="line">                                msg=msg, timeout=timeout, retry=retry,</span><br><span class="line">                                transport_options=transport_options)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> wait_for_reply:</span><br><span class="line">            result = self._waiter.wait(msg_id, timeout,</span><br><span class="line">                                       call_monitor_timeout)</span><br><span class="line">            <span class="keyword">if</span> isinstance(result, Exception):</span><br><span class="line">                <span class="keyword">raise</span> result</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> wait_for_reply:</span><br><span class="line">            self._waiter.unlisten(msg_id)</span><br></pre></td></tr></table></figure>
<p>到了这里就和 rpc client 那块差不多了，区别就是这里发送的时候，传了 notify=True，后面就不啰嗦了，和前面差不多</p>
<h4 id="接收-监听方"><a href="#接收-监听方" class="headerlink" title="接收/监听方"></a>接收/监听方</h4><p>还是以 ceilometer 为例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">urls = cfg.CONF.notification.messaging_urls <span class="keyword">or</span> [<span class="keyword">None</span>]</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    transport = messaging.get_transport(url)</span><br><span class="line">    <span class="comment"># NOTE(gordc): ignore batching as we want pull</span></span><br><span class="line">    <span class="comment"># to maintain sequencing as much as possible.</span></span><br><span class="line">    listener = messaging.get_batch_notification_listener(</span><br><span class="line">        transport, targets, endpoints)</span><br><span class="line">    listener.start()</span><br><span class="line">    self.listeners.append(listener)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) endpoints</span><br><span class="line">[&lt;ceilometer.event.endpoint.EventsNotificationEndpoint object at 0x2f5f610&gt;,</span><br><span class="line"> &lt;ceilometer.ipmi.notifications.ironic.TemperatureSensorNotification object at 0x7fa1741f6810&gt;,</span><br><span class="line">  &lt;ceilometer.telemetry.notifications.TelemetryIpc object at 0x7fa17424d410&gt;,</span><br><span class="line">   &lt;ceilometer.ipmi.notifications.ironic.FanSensorNotification object at 0x7fa17424d8d0&gt;,</span><br><span class="line">    &lt;ceilometer.ipmi.notifications.ironic.VoltageSensorNotification object at 0x7fa1742461d0&gt;,</span><br><span class="line">     &lt;ceilometer.meter.notifications.ProcessMeterNotifications object at 0x7fa17424dc90&gt;,</span><br><span class="line">      &lt;ceilometer.ipmi.notifications.ironic.CurrentSensorNotification object at 0x7fa17467ddd0&gt;]</span><br><span class="line">(Pdb) cfg.CONF.notification.messaging_urls</span><br><span class="line">[&apos;rabbit://rabbitmq:I5dZs2KN@rabbitmq.openstack.svc.cluster.local:5672/&apos;]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_batch_notification_listener</span><span class="params">(transport, targets, endpoints,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    allow_requeue=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    batch_size=<span class="number">1</span>, batch_timeout=None)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> oslo_messaging.get_batch_notification_listener(</span><br><span class="line">        transport, targets, endpoints, executor=<span class="string">'threading'</span>,</span><br><span class="line">        allow_requeue=allow_requeue,</span><br><span class="line">        batch_size=batch_size, batch_timeout=batch_timeout)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_batch_notification_listener</span><span class="params">(transport, targets, endpoints,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    executor=<span class="string">'blocking'</span>, serializer=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    allow_requeue=False, pool=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    batch_size=None, batch_timeout=None)</span>:</span></span><br><span class="line">    dispatcher = notify_dispatcher.BatchNotificationDispatcher(</span><br><span class="line">        endpoints, serializer)</span><br><span class="line">    <span class="keyword">return</span> BatchNotificationServer(</span><br><span class="line">        transport, targets, dispatcher, executor, allow_requeue, pool,</span><br><span class="line">        batch_size, batch_timeout</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<p>其中 BatchNotificationDispatcher 实现了 dispatch 方法，BatchNotificationServer 中实现了 _process_incoming方法</p>
<p>BatchNotificationDispatcher 继承自 NotificationDispatcher 继承自 DispatcherBase</p>
<p>BatchNotificationServer 继承自 NotificationServerBase 继承自 MessageHandlingServer 继承自 ServiceBase，_OrderedTaskRunner</p>
<p>因为 listen 实例化的是 BatchNotificationServer 对象，所以在调用 listener.start() 的时候，实际调用的是 MessageHandlingServer 的 start 方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@six.add_metaclass(abc.ABCMeta)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageHandlingServer</span><span class="params">(service.ServiceBase, _OrderedTaskRunner)</span>:</span></span><br><span class="line"><span class="meta">		@ordered(reset_after='stop')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self, override_pool_size=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._started:</span><br><span class="line">            LOG.warning(<span class="string">'The server has already been started. Ignoring '</span></span><br><span class="line">                        <span class="string">'the redundant call to start().'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self._started = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        executor_opts = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.executor_type <span class="keyword">in</span> (<span class="string">"threading"</span>, <span class="string">"eventlet"</span>):</span><br><span class="line">            executor_opts[<span class="string">"max_workers"</span>] = (</span><br><span class="line">                override_pool_size <span class="keyword">or</span> self.conf.executor_thread_pool_size</span><br><span class="line">            )</span><br><span class="line">        self._work_executor = self._executor_cls(**executor_opts)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.listener = self._create_listener()</span><br><span class="line">        <span class="keyword">except</span> driver_base.TransportDriverError <span class="keyword">as</span> ex:</span><br><span class="line">            <span class="keyword">raise</span> ServerListenError(self.target, ex)</span><br><span class="line"></span><br><span class="line">        self.listener.start(self._on_incoming)</span><br></pre></td></tr></table></figure>
<p>重点在 21 和 25 行，第 21 行调到了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationServerBase</span><span class="params">(msg_server.MessageHandlingServer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, transport, targets, dispatcher, executor=<span class="string">'blocking'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 allow_requeue=True, pool=None, batch_size=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 batch_timeout=None)</span>:</span></span><br><span class="line">        super(NotificationServerBase, self).__init__(transport, dispatcher,</span><br><span class="line">                                                     executor)</span><br><span class="line">        self._allow_requeue = allow_requeue</span><br><span class="line">        self._pool = pool</span><br><span class="line">        self.targets = targets</span><br><span class="line">        self._targets_priorities = set(</span><br><span class="line">            itertools.product(self.targets,</span><br><span class="line">                              self.dispatcher.supported_priorities)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self._batch_size = batch_size</span><br><span class="line">        self._batch_timeout = batch_timeout</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_create_listener</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.transport._listen_for_notifications(</span><br><span class="line">            self._targets_priorities, self._pool, self._batch_size,</span><br><span class="line">            self._batch_timeout</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_listen_for_notifications</span><span class="params">(self, targets_and_priorities, pool,</span></span></span><br><span class="line"><span class="function"><span class="params">                              batch_size, batch_timeout)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> target, priority <span class="keyword">in</span> targets_and_priorities:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> target.topic:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.InvalidTarget(<span class="string">'A target must have '</span></span><br><span class="line">                                           <span class="string">'topic specified'</span>,</span><br><span class="line">                                           target)</span><br><span class="line">    <span class="keyword">return</span> self._driver.listen_for_notifications(</span><br><span class="line">        targets_and_priorities, pool, batch_size, batch_timeout</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AMQPDriverBase</span><span class="params">(base.BaseDriver)</span>:</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">listen_for_notifications</span><span class="params">(self, targets_and_priorities, pool,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 batch_size, batch_timeout)</span>:</span></span><br><span class="line">        conn = self._get_connection(rpc_common.PURPOSE_LISTEN)</span><br><span class="line"></span><br><span class="line">        listener = NotificationAMQPListener(self, conn)</span><br><span class="line">        <span class="keyword">for</span> target, priority <span class="keyword">in</span> targets_and_priorities:</span><br><span class="line">            conn.declare_topic_consumer(</span><br><span class="line">                exchange_name=self._get_exchange(target),</span><br><span class="line">                topic=<span class="string">'%s.%s'</span> % (target.topic, priority),</span><br><span class="line">                callback=listener, queue_name=pool)</span><br><span class="line">        <span class="keyword">return</span> base.PollStyleListenerAdapter(listener, batch_size,</span><br><span class="line">                                             batch_timeout)</span><br></pre></td></tr></table></figure>
<p>在listen_for_notification中建立连接后，创建topic.priority的queue。PollStyleListenerAdapter启动一个线程对获取到的数据进行处理，此处返回此类，所以_create_listener 就是返回了一个PollStyleListenerAdapter的实例</p>
<p>然后调用 self.listener.start(self._on_incoming)</p>
<p>PollStyleListenerAdapter 继承自 Listener</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PollStyleListenerAdapter</span><span class="params">(Listener)</span>:</span></span><br><span class="line">    <span class="string">"""A Listener that uses a PollStyleListener for message transfer. A</span></span><br><span class="line"><span class="string">    dedicated thread is created to do message polling.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, poll_style_listener, batch_size, batch_timeout)</span>:</span></span><br><span class="line">        super(PollStyleListenerAdapter, self).__init__(</span><br><span class="line">            batch_size, batch_timeout, poll_style_listener.prefetch_size</span><br><span class="line">        )</span><br><span class="line">        self._poll_style_listener = poll_style_listener</span><br><span class="line">        self._listen_thread = threading.Thread(target=self._runner)</span><br><span class="line">        self._listen_thread.daemon = <span class="keyword">True</span></span><br><span class="line">        self._started = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self, on_incoming_callback)</span>:</span></span><br><span class="line">        super(PollStyleListenerAdapter, self).start(on_incoming_callback)</span><br><span class="line">        self._started = <span class="keyword">True</span></span><br><span class="line">        self._listen_thread.start()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @excutils.forever_retry_uncaught_exceptions</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_runner</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self._started:</span><br><span class="line">            incoming = self._poll_style_listener.poll(</span><br><span class="line">                batch_size=self.batch_size, batch_timeout=self.batch_timeout)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> incoming:</span><br><span class="line">                self.on_incoming_callback(incoming)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># listener is stopped but we need to process all already consumed</span></span><br><span class="line">        <span class="comment"># messages</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            incoming = self._poll_style_listener.poll(</span><br><span class="line">                batch_size=self.batch_size, batch_timeout=self.batch_timeout)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> incoming:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            self.on_incoming_callback(incoming)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._started = <span class="keyword">False</span></span><br><span class="line">        self._poll_style_listener.stop()</span><br><span class="line">        self._listen_thread.join()</span><br><span class="line">        super(PollStyleListenerAdapter, self).stop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cleanup</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._poll_style_listener.cleanup()</span><br></pre></td></tr></table></figure>
<p>NotificationAMQPListener 继承自 AMQPListener 继承自 PollStyleListener</p>
<p>可以看到这里的 start 方法就是调用了 _runner方法，这里的 self.poll_style_listener 就是 NotificationAMQPListener 实例，通过 poll 不断从队列中取出数据</p>
<p>即调用  AMQPListener.poll</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationAMQPListener</span><span class="params">(AMQPListener)</span>:</span></span><br><span class="line">    message_cls = NotificationAMQPIncomingMessage</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AMQPListener</span><span class="params">(base.PollStyleListener)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, driver, conn)</span>:</span></span><br><span class="line">        super(AMQPListener, self).__init__(driver.prefetch_size)</span><br><span class="line">        self.driver = driver</span><br><span class="line">        self.conn = conn</span><br><span class="line">        self.msg_id_cache = rpc_amqp._MsgIdCache()</span><br><span class="line">        self.incoming = []</span><br><span class="line">        self._shutdown = threading.Event()</span><br><span class="line">        self._shutoff = threading.Event()</span><br><span class="line">        self._obsolete_reply_queues = ObsoleteReplyQueuesCache()</span><br><span class="line">        self._message_operations_handler = MessageOperationsHandler(</span><br><span class="line">            <span class="string">"AMQPListener"</span>)</span><br><span class="line">        self._current_timeout = ACK_REQUEUE_EVERY_SECONDS_MIN</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, message)</span>:</span></span><br><span class="line">        ctxt = rpc_amqp.unpack_context(message)</span><br><span class="line">        unique_id = self.msg_id_cache.check_duplicate_message(message)</span><br><span class="line">        <span class="keyword">if</span> ctxt.msg_id:</span><br><span class="line">            LOG.debug(<span class="string">"received message msg_id: %(msg_id)s reply to "</span></span><br><span class="line">                      <span class="string">"%(queue)s"</span>, &#123;<span class="string">'queue'</span>: ctxt.reply_q,</span><br><span class="line">                                    <span class="string">'msg_id'</span>: ctxt.msg_id&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            LOG.debug(<span class="string">"received message with unique_id: %s"</span>, unique_id)</span><br><span class="line"></span><br><span class="line">        self.incoming.append(self.message_cls(</span><br><span class="line">            self,</span><br><span class="line">            ctxt.to_dict(),</span><br><span class="line">            message,</span><br><span class="line">            unique_id,</span><br><span class="line">            ctxt.msg_id,</span><br><span class="line">            ctxt.reply_q,</span><br><span class="line">            ctxt.client_timeout,</span><br><span class="line">            self._obsolete_reply_queues,</span><br><span class="line">            self._message_operations_handler))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @base.batch_poll_helper</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">poll</span><span class="params">(self, timeout=None)</span>:</span></span><br><span class="line">        stopwatch = timeutils.StopWatch(duration=timeout).start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self._shutdown.is_set():</span><br><span class="line">            self._message_operations_handler.process()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.incoming:</span><br><span class="line">                <span class="keyword">return</span> self.incoming.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            left = stopwatch.leftover(return_none=<span class="keyword">True</span>)</span><br><span class="line">            <span class="keyword">if</span> left <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                left = self._current_timeout</span><br><span class="line">            <span class="keyword">if</span> left &lt;= <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.conn.consume(timeout=min(self._current_timeout, left))</span><br><span class="line">            <span class="keyword">except</span> rpc_common.Timeout:</span><br><span class="line">                self._current_timeout = max(self._current_timeout * <span class="number">2</span>,</span><br><span class="line">                                            ACK_REQUEUE_EVERY_SECONDS_MAX)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self._current_timeout = ACK_REQUEUE_EVERY_SECONDS_MIN</span><br><span class="line"></span><br><span class="line">        <span class="comment"># NOTE(sileht): listener is stopped, just processes remaining messages</span></span><br><span class="line">        <span class="comment"># and operations</span></span><br><span class="line">        self._message_operations_handler.process()</span><br><span class="line">        <span class="keyword">if</span> self.incoming:</span><br><span class="line">            <span class="keyword">return</span> self.incoming.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        self._shutoff.set()</span><br></pre></td></tr></table></figure>
<p>在 call 方法又调用了 self.message_cls ，即 NotificationAMQPIncomingMessage</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationAMQPIncomingMessage</span><span class="params">(AMQPIncomingMessage)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">acknowledge</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_do_ack</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.message.acknowledge()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">                <span class="comment"># NOTE(kgiusti): this failure is likely due to a loss of the</span></span><br><span class="line">                <span class="comment"># connection to the broker.  Not much we can do in this case,</span></span><br><span class="line">                <span class="comment"># especially considering the Notification has already been</span></span><br><span class="line">                <span class="comment"># dispatched. This *could* result in message duplication</span></span><br><span class="line">                <span class="comment"># (unacked msg is returned to the queue by the broker), but the</span></span><br><span class="line">                <span class="comment"># driver tries to catch that using the msg_id_cache.</span></span><br><span class="line">                LOG.warning(<span class="string">"Failed to acknowledge received message: %s"</span>, exc)</span><br><span class="line">        self._message_operations_handler.do(_do_ack)</span><br><span class="line">        self.listener.msg_id_cache.add(self.unique_id)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">requeue</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># NOTE(sileht): In case of the connection is lost between receiving the</span></span><br><span class="line">        <span class="comment"># message and requeing it, this requeue call fail</span></span><br><span class="line">        <span class="comment"># but because the message is not acknowledged and not added to the</span></span><br><span class="line">        <span class="comment"># msg_id_cache, the message will be reconsumed, the only difference is</span></span><br><span class="line">        <span class="comment"># the message stay at the beginning of the queue instead of moving to</span></span><br><span class="line">        <span class="comment"># the end.</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_do_requeue</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.message.requeue()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">                LOG.warning(<span class="string">"Failed to requeue received message: %s"</span>, exc)</span><br><span class="line">        self._message_operations_handler.do(_do_requeue)</span><br></pre></td></tr></table></figure>
<p>NotificationAMQPIncomingMessage 继承自 AMQPIncomingMessage 继承自 RpcIncomingMessage 继承自 IncomingMessage</p>
<p>（self.conn.consume 中有回调函数调用，call 方法，往 incoming 中塞值，poll 再从里面取值处理）括号中的部分有点疑问，理得不是很清楚，如果有清楚的大佬，欢迎指教。</p>
<p>NotificationAMQPIncomingMessage 是一个消息对象，包含了acknowledge和requeue方法，可以用于消息确认或再次入队。</p>
<p>取出之后用self.on_incoming_callback(incoming)处理，即MessageHandlingServer中的self.__on_incoming处理</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@six.add_metaclass(abc.ABCMeta)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageHandlingServer</span><span class="params">(service.ServiceBase, _OrderedTaskRunner)</span>:</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">_on_incoming</span><span class="params">(self, incoming)</span>:</span></span><br><span class="line">        <span class="string">"""Handles on_incoming event</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param incoming: incoming request.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._work_executor.submit(self._process_incoming, incoming)</span><br></pre></td></tr></table></figure>
<p>我们看到这边实际使用的是self._process_incoming来处理，即采用BatchNotificationServer类中的self.__process_incoming处理</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BatchNotificationServer</span><span class="params">(NotificationServerBase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_process_incoming</span><span class="params">(self, incoming)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            not_processed_messages = self.dispatcher.dispatch(incoming)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">						......</span><br></pre></td></tr></table></figure>
<p>可以看到该处理函数会调用dispatcher对象来分派消息，这里的self.dispatcher，就是之前使用NotificationDispatcher初始化后传过来的参数，后面就是一些数据处理的过程，详细请见我的另一篇 <a href="https://blog.csdn.net/weixin_43700106/article/details/107006677" target="_blank" rel="external">nogtification 源码分析</a></p>
<p>参考：</p>
<p><a href="https://www.cnblogs.com/gange111/p/9560446.html" target="_blank" rel="external">https://www.cnblogs.com/gange111/p/9560446.html</a></p>
<p><a href="https://blog.csdn.net/MrYuanRs/article/details/105955720?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param" target="_blank" rel="external">https://blog.csdn.net/MrYuanRs/article/details/105955720?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param</a></p>
<p><a href="https://blog.csdn.net/qingyuanluofeng/article/details/102511492?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param" target="_blank" rel="external">https://blog.csdn.net/qingyuanluofeng/article/details/102511492?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Oslo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oslo系列之oslo.service]]></title>
      <url>https://magiceses.github.io/2018/10/05/openstack-oslo.packages-oslo.service/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">生命力的好处在于拚搏，因为世界本身就是一个竞技场。<br></p>

<p>oslo.service为OpenStack各组件提供了一个定义新的长运行服务的框架；包括带有SSL和WSGI，周期性操作，结合systemd等的长运行应用。</p>
<h2 id="oslo-service的实现原理"><a href="#oslo-service的实现原理" class="headerlink" title="oslo.service的实现原理"></a>oslo.service的实现原理</h2><p>在oslo.service的实现中，核心是oslo_service.service模块中的Service类和Launcher类。下面分别介绍这两个类：</p>
<a id="more"></a>
<h3 id="Service类"><a href="#Service类" class="headerlink" title="Service类"></a>Service类</h3><p>Service类的对象描述了一个服务，其定义了一套管理服务生命周期的方法，包括启动服务start()、停止服务stop()、等待服务wait()、重置服务reset()等管理方法。另外，在实例化Service对象时，可以传入一个threads的参数创建一个包含threads个线程的线程组ThreadGroup对象，用来管理服务中的所有线程。</p>
<p>除了Service类外，oslo.service还提供了一个Services类来管理一组服务。其除了定义了run_service()、stop()、wait()、restart()等生命周期管理方法之外，还定义了一个add()方法用于为Services对象添加服务。</p>
<h3 id="Launcher类"><a href="#Launcher类" class="headerlink" title="Launcher类"></a>Launcher类</h3><p>Launcher类主要用来启动一个或多个服务并等待其完成。其定义了launcher_service(service, workers)、stop()、wait()、restart()方法管理Launcher对象中所有服务的生命周期；在实例化Launcher对象时，需要传入两个参数conf和restart_method，其中，conf表示加载的服务配置文件，restart_method表示重启服务的方式，在oslo.service中，定义了两种服务重启方式：reload方式表示重启服务时重新加载配置文件，mutate则表示重启服务时改变服务配置文件。</p>
<p>在oslo.service中，Launcher类主要有两个实现方案：ServiceLauncher类和ProcessLauncher类。其中，ServiceLauncher类是在一个一个父进程中启动一个或多个服务，其通过一个单实例的SignalHandler类监听针对服务的信号。而ProcessLauncher类则是在给定数量的worker中运行一个或多个服务，其启动服务时，首先将服务、workers封装为ServiceWrapper对象；然后，调用ProcessLauncher对象的</p>
<h3 id="launch-方法"><a href="#launch-方法" class="headerlink" title="launch()方法"></a>launch()方法</h3><p>在其他OpenStack组件的实际使用中，通常都会调用oslo_service.service模块下的launch()方法启动相应的服务。该方法需要传入一下几个参数：</p>
<ul>
<li>conf：对应服务的配置参数对象，即oslo.config中的ConfigOpt对象；</li>
<li>service：一个实例化的Service对象；</li>
<li>workers：为一个服务启动的worker数，如果workers为空或为1，则使用ServiceLauncher启动服务，如果workers&gt;1，则使用ProcessLauncher类启动服务；</li>
<li>restart_method：服务重启方式。</li>
</ul>
<p>launch()方法会根据上述给定的参数创建服务启动方法类，并调用其launcher_service()方法启动服务。</p>
<h2 id="oslo-service的使用方法"><a href="#oslo-service的使用方法" class="headerlink" title="oslo.service的使用方法"></a>oslo.service的使用方法</h2><p>本节主要以nova组件的nova-api服务的启动为例，阐述oslo.service的使用方法。通常，启动nova-api服务首先都会调用nova.cmd.api模块下的main()方法。其源码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    config.parse_args(sys.argv)</span><br><span class="line">    logging.setup(CONF, <span class="string">"nova"</span>)</span><br><span class="line">    utils.monkey_patch()</span><br><span class="line">    objects.register_all()</span><br><span class="line">    gmr_opts.set_defaults(CONF)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'osapi_compute'</span> <span class="keyword">in</span> CONF.enabled_apis:</span><br><span class="line">        <span class="comment"># NOTE(mriedem): This is needed for caching the nova-compute service</span></span><br><span class="line">        <span class="comment"># version.</span></span><br><span class="line">        objects.Service.enable_min_version_cache()</span><br><span class="line">    log = logging.getLogger(__name__)</span><br><span class="line"> </span><br><span class="line">    gmr.TextGuruMeditation.setup_autorun(version, conf=CONF)</span><br><span class="line"> </span><br><span class="line">    launcher = service.process_launcher()</span><br><span class="line">    started = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> api <span class="keyword">in</span> CONF.enabled_apis:</span><br><span class="line">        should_use_ssl = api <span class="keyword">in</span> CONF.enabled_ssl_apis</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            server = service.WSGIService(api, use_ssl=should_use_ssl)</span><br><span class="line">            launcher.launch_service(server, workers=server.workers <span class="keyword">or</span> <span class="number">1</span>)</span><br><span class="line">            started += <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span> exception.PasteAppNotFound <span class="keyword">as</span> ex:</span><br><span class="line">            log.warning(<span class="string">"%s. ``enabled_apis`` includes bad values. "</span></span><br><span class="line">                        <span class="string">"Fix to remove this warning."</span>, ex)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> started == <span class="number">0</span>:</span><br><span class="line">        log.error(<span class="string">'No APIs were started. '</span></span><br><span class="line">                  <span class="string">'Check the enabled_apis config option.'</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">    launcher.wait()</span><br></pre></td></tr></table></figure>
<p>从nova-api启动程序源码可知，在启动服务时，系统首先调用nova.service的process_launcher()方法创建了一个ProcessLauncher对象launcher；然后根据配置文件配置的enabled_apis创建了WSGIService对象；接着，调用launcher对象的launch_service()方法启动WSGI服务；最后，当所有enabled_apis中配置的api服务都启动后，调用launcher.wait()方法使所有api服务都处于等待状态等待外部请求。</p>
<p>在上述服务启动过程中，调用了nova.service模块中的WSGIService类，该类为nova组件自身封装的一个用于启动WSGI服务的Service子类；除此之外，nova.service模块中还定义了一个继承oslo.service Service类的子类Service。由此可知，在OpenStack各组件使用oslo.service时，还可以根据自身需求，实现自身的Service子类以便更好的使用oslo.service组件来管理自身的服务。</p>
<h2 id="oslo-service组件的其他使用"><a href="#oslo-service组件的其他使用" class="headerlink" title="oslo.service组件的其他使用"></a>oslo.service组件的其他使用</h2><p>本文开头介绍了oslo.service除了为OpenStack各组件提供了一个定义新的长运行服务的框架外，还可以实现带有SSL和WSGI，周期性操作，结合systemd等的长运行应用。本节将对这些实现进行简单介绍。</p>
<h3 id="sslutils模块"><a href="#sslutils模块" class="headerlink" title="sslutils模块"></a>sslutils模块</h3><p>sslutils模块主要提供一个wrap(conf, sock)方法，根据服务的配置文件，为基于SSL协议的服务添加ssl认证。</p>
<h3 id="periodic-task模块"><a href="#periodic-task模块" class="headerlink" title="periodic_task模块"></a>periodic_task模块</h3><p>periodic_task模块主要提供对周期性任务的管理方法。其中，主要包括一个类和一个方法：</p>
<ul>
<li>periodic_task(<em>args, *</em>kwargs)方法：为周期性任务提供一个装饰器。如果某周期性方法没有@periodic_task装饰器，则其将默认每隔60s运行一次；而如果其带有@periodic_task(spacing=N [, run_immediately=[True|False]] [, name=[None|”string”])装饰器，表示该方法将每隔Ns运行一次，如果run_immediately不为空，且设置为True，则表示该方法第一次运行将会马上执行，否则第一次运行将在Ns后执行。</li>
<li>PeriodicTasks类：封装了周期性任务的管理，其提供两个主要方法：add_periodic_task(task)，为PeriodicTask对象添加周期性任务task；run_periodic_tasks(context, raise_on_error=False)，运行周期性任务。</li>
</ul>
<h3 id="wsgi模块"><a href="#wsgi模块" class="headerlink" title="wsgi模块"></a>wsgi模块</h3><p>wsgi模块主要提供WSGI服务管理的实现框架。其中，主要包含三个重要的类：</p>
<ul>
<li>Loader类：主要用于加载WSGI的配置文件（如nova的api-paste.ini文件），主要提供load_app(name)加载WSGI配文件，并返回一个WSGI应用的URLMap对象;</li>
<li>Router类：主要用于缓存WSGI各REST API请求的路由信息，并在接收到请求时解析url并路由到具体的实现方法进行处理;</li>
<li>Server类：一个Service子类，主要实现了定义一个WSGI服务和管理该WSGI服务的生命周期。</li>
</ul>
<h3 id="systemd模块"><a href="#systemd模块" class="headerlink" title="systemd模块"></a>systemd模块</h3><p>systemd模块是一个用于通知systemd服务准备就绪的辅助类。使用onready(notify_socket, timeout)方法监听systemd服务准备就绪通知；使用notify()、notify_once()方法通知systemd服务准备就绪。</p>
<h3 id="loopingcall模块"><a href="#loopingcall模块" class="headerlink" title="loopingcall模块"></a>loopingcall模块</h3><p>loopingcall模块主要实现了一组管理回路调用的类。实现了动态回路调用、回滚回路调用、异常回路调用以及重试调用等多种回路调用策略。</p>
<h3 id="threadgroup模块"><a href="#threadgroup模块" class="headerlink" title="threadgroup模块"></a>threadgroup模块</h3><p>threadgroup模块首先通过Thread类封装了一个线程的生命周期管理；然后通过ThreadGroup类管理一组线程的生命周期。</p>
<p>原文链接：<a href="https://blog.csdn.net/Bill_Xiang_/article/details/78492967" target="_blank" rel="external">https://blog.csdn.net/Bill_Xiang_/article/details/78492967</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Oslo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oslo系列之oslo.utils]]></title>
      <url>https://magiceses.github.io/2018/10/05/openstack-oslo.packages-oslo.utils/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">每个人的一生都有许多梦想，但如果其中一个不断搅扰着你，剩下的就仅仅是行动了。<br></p>

<p>oslo.utils封装了OpenStack各个组件中常用的工具类或工具方法，包含了导入、文件、编码、线程、反射等多种工具类或方法。本文将详细介绍oslo.utils中重要的常用的功能。</p>
<h2 id="importutils"><a href="#importutils" class="headerlink" title="importutils"></a>importutils</h2><p>importutils提供了多个方法用于导入python包、类、对象等操作。常用方法如下：</p>
<a id="more"></a>
<ul>
<li>import_class(import_str)：导入一个类，输入一个”包.类”的字符串，返回其指定的类。</li>
<li>import_object(import_str, <em>args, *</em>kwargs)：导入一个对象，第一个输入参数为”包.类”的字符串，之后的参数用于创建对应类的对象，该方法即通过import_class(import_str)方法返回一个指定的类，然后根据args、kwargs等参数创建一个类的对象返回。</li>
<li>import_object_ns(name_space, import_str, <em>args, *</em>kwargs)：尝试从一个默认的namespace中导入一个对象，首先通过”name_space.import_str”导入类，如果没找到相应的类则通过”import_str”导入类，然后创建指定的类对象返回。</li>
<li>import_module(import_str)：导入一个模块，输入一个表示模块路径的字符串，返回对应的模块。</li>
<li>import_versioned_module(module, version, submodule=None)：导入指定版本的模块，导入的格式为”{module}.v{version}.submodule”。</li>
<li>try_import(import_str, default=None)：尝试导入指定模块，如果导入失败，返回default参数指定的模块，如果default未指定，默认返回None。</li>
<li>import_any(module, *modules)：尝试从一组模块中导入一个模块，对(module, ) + modules做循环遍历，如果导入的模块不为空则返回。</li>
</ul>
<h2 id="uuidutils"><a href="#uuidutils" class="headerlink" title="uuidutils"></a>uuidutils</h2><p>uuidutils提供了一系列用于管理UUID的方法。主要包含以下三个方法：</p>
<ul>
<li>generate_uuid(dashed=True)：生成一个随机的UUID，输入参数dashed表示UUID中是否需要包含”-“符号。</li>
<li>_format_uuid_string(string)：格式化UUID字符串，即将UUID去掉urn:、uuid，并将所有字母转换为小写。<br>is_uuid_like(val)：判断一个字符串是否是一个UUID。</li>
</ul>
<h2 id="encodeutils"><a href="#encodeutils" class="headerlink" title="encodeutils"></a>encodeutils</h2><p>encodeutils为OpenStack个组件提供了一系列编码相关的操作。常用方法如下：</p>
<ul>
<li>safe_encode(text, incoming=None, encoding=’utf-8’, errors=’strict’)：将指定的text或bytes数据设置为encoding指定的编码，其中incoming为text当前的编码，如果未指定则使用系统默认编码或标准输出编码。</li>
<li>safe_decode(text, incoming=None, errors=’strict’)：将指定text解码。</li>
<li>to_utf8(text)：将指定的text设置为utf-8编码。</li>
<li>exception_to_unicode(exc)：将指定异常信息设置为unicode编码。</li>
</ul>
<h2 id="eventletutils"><a href="#eventletutils" class="headerlink" title="eventletutils"></a>eventletutils</h2><p>eventletutils提供了一系列多线程和协程的工具方法。常用方法如下：</p>
<ul>
<li>is_monkey_patched(module)：确定模块是否使用eventlet补丁。</li>
<li>fetch_current_thread_functor()：获取当前线程，如果使用eventlet补丁，则返回当前的eventlet绿色线程；否则，返回当前的普通线程。</li>
<li>warn_eventlet_not_patched(expected_patched_modules=None, what=’this library’)：如果使用了没有补丁了eventlet，则提出警告。</li>
<li>Event()：生成一个提供线程操作API的类，如果使用eventlet补丁，则返回一个绿色线程的类；否则，返回普通线程的类。</li>
</ul>
<h2 id="fileutils"><a href="#fileutils" class="headerlink" title="fileutils"></a>fileutils</h2><p>fileutils提供了一系列方便的文件操作方法。常用的方法有：</p>
<ul>
<li>ensure_tree(path, mode=_DEFAULT_MODE)：创建一个文件夹，path指定文件夹路径，mode指定文件夹权限。</li>
<li>delete_if_exists(path, remove=os.unlink)：删除一个文件，忽略文件是否存在。</li>
<li>write_to_tempfile(content, path=None, suffix=’’, prefix=’tmp’)：创建一个临时文件保存数据。</li>
<li>compute_file_checksum(path, read_chunksize=65536, algorithm=’sha256’)：计算一个文件的校验和，其中path指定文件路径，read_chunksize指定从文件中一次读取的最大长度，algorithm指定了可用的算法。</li>
<li>remove_path_on_error(path, remove=delete_if_exists)：检测到任何错误即删除指定文件。</li>
</ul>
<p>除了上述utils方法之外，oslo.utils还提供了excutils异常处理工具方法，strutils字符串处理工具方法，netutils网络IP、CIDR、mac地址等的处理工具方法，imageutils镜像处理工具类等多种工具类和工具方法，在此不再赘述，有需要的同学可以查看oslo.utils的文档和源码。这些工具类或工具方法虽然实现简单，但是在OpenStack开发中有效的避免了重复代码开发，使得代码具有更好的重用性。</p>
<p>原文链接：<a href="https://blog.csdn.net/Bill_Xiang_/article/details/78402660" target="_blank" rel="external">https://blog.csdn.net/Bill_Xiang_/article/details/78402660</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Oslo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Prometheus-Operator 学习总结]]></title>
      <url>https://magiceses.github.io/2017/11/11/prometheus-operator-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">涓滴之水终可以磨损大石，不是由于它力量强大，而是由于昼夜不舍的滴坠。<br></p>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>所有的监控的 <code>agent</code> 底层最终都是查询的 <code>/proc 和 /sys</code> 里的信息推送(如果错了轻喷)，因为收集宿主机信息方面也想用 <code>pod</code> 跑，会面临到问题</p>
<p>常见的 <code>zabbix_agent</code> 默认读取 <code>fs 的 /proc 和 /sys</code> ，容器跑 <code>agent</code> 会导致读取的不是宿主机的<code>/proc 和 /sys</code></p>
<p>而 <code>prometheus</code> 的 <code>node-exporter</code> 有选项 <code>--path.procfs</code> 和 <code>--path.sysfs</code> 来指定从这俩选项的值的proc和sys读取,容器跑 <code>node-exporter</code> 只需要挂载宿主机的 <code>/proc和/sys</code> 到容器fs的某个路径挂载属性设置为 <code>readonly</code> 后用这两个选项指定即可，<code>zabbix4.0</code> 看了文档和容器都找不到类似选项应该不支持</p>
<p>虽说上 <code>prometheus</code> 但是 <code>k8s</code> 监控这方面,经常看到如下问题:</p>
<a id="more"></a>
<ul>
<li>如何部署</li>
<li>用 <code>prometheus</code>的话 <code>pod ip</code> 会变咋办之类的</li>
<li>我的 <code>target</code> 怎么是 <code>0/0</code></li>
<li>官方 <code>yaml</code> 怎么用</li>
<li><code>operator</code> 和传统的 <code>prometheus</code> 有啥差异</li>
<li><code>operator</code> 相对手动部署的 <code>prometheus</code> 有啥优秀之处</li>
<li>…..</li>
</ul>
<p>上面问题里大多都是对 <code>prometheus-operator</code> 不了解的,也就是说大多不看官方文档的,这里我举几个例子介绍说说怎样部署 <code>prometheus-operator</code> ,和一些常见的坑</p>
<p>另外网上大多是 <code>helm</code> 部署的以及管理组件是二进制下有几个<code>target</code> 是 <code>0/0</code> 发现不了的解决办法</p>
<p>需要看懂本文要具备一下知识点</p>
<ul>
<li><code>svc</code> 实现原理和会应用以及<code>svc</code> 和 <code>endpoint</code> 关系</li>
<li>了解<code>prometheus</code>(不是<code>operato</code>r的)工作机制</li>
<li>知道什么是<code>metrics</code>(不过有了<code>prometheus-operator</code>似乎不是必须)</li>
</ul>
<h1 id="速补基础"><a href="#速补基础" class="headerlink" title="速补基础"></a>速补基础</h1><p><strong>什么是metrics</strong></p>
<p>前面知识点第一条都考虑到<code>k8s</code>集群监控了想必都会了，第二条因为有<code>operator</code>的存在不太关心底层可能不太急需可以后面去稍微学学，第三条无论<code>etcd</code>还是<code>k8s</code>的管理组件基本都有<code>metrics</code>端口</p>
<p>这里来介绍啥什么是<code>metrics</code></p>
<p>例如我们要查看<code>etcd</code>的<code>metrics</code>，先查看etcd的运行参数找到相关的值,这里我是所有参数写在一个<code>yml</code>文件里，非<code>yml</code>自行查看<code>systemd</code>文件或者运行参数找到相关参数和值即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 ~]# ps aux | grep -P &apos;/etc[d] &apos;</span><br><span class="line">root      13531  2.8  0.8 10631072 140788 ?     Ssl   2018 472:58 /usr/local/bin/etcd --config-file=/etc/etcd/etcd.config.yml</span><br><span class="line">[root@k8s-m1 ~]# cat /etc/etcd/etcd.config.yml</span><br><span class="line">...</span><br><span class="line">listen-client-urls: &apos;https://172.16.0.2:2379&apos;</span><br><span class="line">...</span><br><span class="line">client-transport-security:</span><br><span class="line">  ca-file: &apos;/etc/etcd/ssl/etcd-ca.pem&apos;</span><br><span class="line">  cert-file: &apos;/etc/etcd/ssl/etcd.pem&apos;</span><br><span class="line">  key-file: &apos;/etc/etcd/ssl/etcd-key.pem&apos;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>我们需要两部分信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://172.16.0.2:2379</span><br></pre></td></tr></table></figure>
<p>然后使用下面的<code>curl</code>，带上各自证书路径访问https的url执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --cacert /etc/etcd/ssl/etcd-ca.pem --cert /etc/etcd/ssl/etcd.pem --key /etc/etcd/ssl/etcd-key.pem https://172.16.0.2:2379/metrics</span><br></pre></td></tr></table></figure>
<p>我们会看到<code>etcd</code>的<code>metrics</code>输出信息如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">grpc_server_started_total&#123;grpc_method=&quot;RoleList&quot;,grpc_service=&quot;etcdserverpb.Auth&quot;,grpc_type=&quot;unary&quot;&#125; 0</span><br><span class="line">grpc_server_started_total&#123;grpc_method=&quot;RoleRevokePermission&quot;,grpc_service=&quot;etcdserverpb.Auth&quot;,grpc_type=&quot;unary&quot;&#125; 0</span><br><span class="line">grpc_server_started_total&#123;grpc_method=&quot;Snapshot&quot;,grpc_service=&quot;etcdserverpb.Maintenance&quot;,grpc_type=&quot;server_stream&quot;&#125; 0</span><br><span class="line">grpc_server_started_total&#123;grpc_method=&quot;Status&quot;,grpc_service=&quot;etcdserverpb.Maintenance&quot;,grpc_type=&quot;unary&quot;&#125; 0</span><br><span class="line">grpc_server_started_total&#123;grpc_method=&quot;Txn&quot;,grpc_service=&quot;etcdserverpb.KV&quot;,grpc_type=&quot;unary&quot;&#125; 259160</span><br><span class="line">grpc_server_started_total&#123;grpc_method=&quot;UserAdd&quot;,grpc_service=&quot;etcdserverpb.Auth&quot;,grpc_type=&quot;unary&quot;&#125; 0</span><br><span class="line">grpc_server_started_total&#123;grpc_method=&quot;UserChangePassword&quot;,grpc_service=&quot;etcdserverpb.Auth&quot;,grpc_type=&quot;unary&quot;&#125; 0</span><br><span class="line">grpc_server_started_total&#123;grpc_method=&quot;UserDelete&quot;,grpc_service=&quot;etcdserverpb.Auth&quot;,grpc_type=&quot;unary&quot;&#125; 0</span><br><span class="line">grpc_server_started_total&#123;grpc_method=&quot;UserGet&quot;,grpc_service=&quot;etcdserverpb.Auth&quot;,grpc_type=&quot;unary&quot;&#125; 0</span><br><span class="line">grpc_server_started_total&#123;grpc_method=&quot;UserGrantRole&quot;,grpc_service=&quot;etcdserverpb.Auth&quot;,grpc_type=&quot;unary&quot;&#125; 0</span><br><span class="line">grpc_server_started_total&#123;grpc_method=&quot;UserList&quot;,grpc_service=&quot;etcdserverpb.Auth&quot;,grpc_type=&quot;unary&quot;&#125; 0</span><br><span class="line">grpc_server_started_total&#123;grpc_method=&quot;UserRevokeRole&quot;,grpc_service=&quot;etcdserverpb.Auth&quot;,grpc_type=&quot;unary&quot;&#125; 0</span><br><span class="line">grpc_server_started_total&#123;grpc_method=&quot;Watch&quot;,grpc_service=&quot;etcdserverpb.Watch&quot;,grpc_type=&quot;bidi_stream&quot;&#125; 86</span><br><span class="line"># HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.</span><br><span class="line"># TYPE process_cpu_seconds_total counter</span><br><span class="line">process_cpu_seconds_total 28145.45</span><br><span class="line"># HELP process_max_fds Maximum number of open file descriptors.</span><br><span class="line"># TYPE process_max_fds gauge</span><br><span class="line">process_max_fds 65536</span><br><span class="line"># HELP process_open_fds Number of open file descriptors.</span><br><span class="line"># TYPE process_open_fds gauge</span><br><span class="line">process_open_fds 121</span><br><span class="line"># HELP process_resident_memory_bytes Resident memory size in bytes.</span><br><span class="line"># TYPE process_resident_memory_bytes gauge</span><br><span class="line">process_resident_memory_bytes 1.46509824e+08</span><br><span class="line"># HELP process_start_time_seconds Start time of the process since unix epoch in seconds.</span><br><span class="line"># TYPE process_start_time_seconds gauge</span><br><span class="line">process_start_time_seconds 1.54557786888e+09</span><br><span class="line"># HELP process_virtual_memory_bytes Virtual memory size in bytes.</span><br><span class="line"># TYPE process_virtual_memory_bytes gauge</span><br><span class="line">process_virtual_memory_bytes 1.0886217728e+10</span><br></pre></td></tr></table></figure>
<p>同理<code>kube-apiserver</code>也有<code>metrics</code>信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get --raw /metrics</span><br><span class="line">...</span><br><span class="line">rest_client_request_latency_seconds_bucket&#123;url=&quot;https://[::1]:6443/apis?timeout=32s&quot;,verb=&quot;GET&quot;,le=&quot;0.512&quot;&#125; 39423</span><br><span class="line">rest_client_request_latency_seconds_bucket&#123;url=&quot;https://[::1]:6443/apis?timeout=32s&quot;,verb=&quot;GET&quot;,le=&quot;+Inf&quot;&#125; 39423</span><br><span class="line">rest_client_request_latency_seconds_sum&#123;url=&quot;https://[::1]:6443/apis?timeout=32s&quot;,verb=&quot;GET&quot;&#125; 24.781942557999795</span><br><span class="line">rest_client_request_latency_seconds_count&#123;url=&quot;https://[::1]:6443/apis?timeout=32s&quot;,verb=&quot;GET&quot;&#125; 39423</span><br><span class="line"># HELP rest_client_requests_total Number of HTTP requests, partitioned by status code, method, and host.</span><br><span class="line"># TYPE rest_client_requests_total counter</span><br><span class="line">rest_client_requests_total&#123;code=&quot;200&quot;,host=&quot;[::1]:6443&quot;,method=&quot;GET&quot;&#125; 2.032031e+06</span><br><span class="line">rest_client_requests_total&#123;code=&quot;200&quot;,host=&quot;[::1]:6443&quot;,method=&quot;PUT&quot;&#125; 1.106921e+06</span><br><span class="line">rest_client_requests_total&#123;code=&quot;201&quot;,host=&quot;[::1]:6443&quot;,method=&quot;POST&quot;&#125; 38</span><br><span class="line">rest_client_requests_total&#123;code=&quot;401&quot;,host=&quot;[::1]:6443&quot;,method=&quot;GET&quot;&#125; 17378</span><br><span class="line">rest_client_requests_total&#123;code=&quot;404&quot;,host=&quot;[::1]:6443&quot;,method=&quot;GET&quot;&#125; 3.546509e+06</span><br><span class="line">rest_client_requests_total&#123;code=&quot;409&quot;,host=&quot;[::1]:6443&quot;,method=&quot;POST&quot;&#125; 29</span><br><span class="line">rest_client_requests_total&#123;code=&quot;409&quot;,host=&quot;[::1]:6443&quot;,method=&quot;PUT&quot;&#125; 20</span><br><span class="line">rest_client_requests_total&#123;code=&quot;422&quot;,host=&quot;[::1]:6443&quot;,method=&quot;POST&quot;&#125; 1</span><br><span class="line">rest_client_requests_total&#123;code=&quot;503&quot;,host=&quot;[::1]:6443&quot;,method=&quot;GET&quot;&#125; 5</span><br><span class="line"># HELP ssh_tunnel_open_count Counter of ssh tunnel total open attempts</span><br><span class="line"># TYPE ssh_tunnel_open_count counter</span><br><span class="line">ssh_tunnel_open_count 0</span><br><span class="line"># HELP ssh_tunnel_open_fail_count Counter of ssh tunnel failed open attempts</span><br><span class="line"># TYPE ssh_tunnel_open_fail_count counter</span><br><span class="line">ssh_tunnel_open_fail_count 0</span><br></pre></td></tr></table></figure>
<p>这种就是<code>prometheus</code>的定义的<code>metrics</code>格式规范,缺省是在<code>http(s)的url的/metrics</code>输出</p>
<p>而<code>metrics</code>要么程序定义输出(模块或者自定义开发)，要么用官方的各种<code>exporter(node-exporter,mysqld-exporter,memcached_exporter…)</code>采集要监控的信息占用一个<code>web</code>端口然后输出成<code>metrics</code>格式的信息，<code>prometheus server</code>去收集各个<code>target</code>的<code>metrics</code>存储起来(tsdb)</p>
<p>用户可以在<code>prometheus</code>的<code>http</code>页面上用<code>promQL</code>(<code>prometheus</code>的查询语言)或者(<code>grafana</code>数据来源就是用)<code>api</code>去查询一些信息，也可以利用<code>pushgateway</code>去统一采集然后<code>prometheus</code>从<code>pushgateway</code>采集(所以<code>pushgateway</code>类似于<code>zabbix</code>的<code>proxy</code>)，<code>prometheus</code>的工作架构如下图</p>
<p><img src="/images/prometheus-operator-1.jpg" alt="全手动部署prometheus-operator监控K8S集群以及一些坑"></p>
<h1 id="为什么需要prometheus-operator"><a href="#为什么需要prometheus-operator" class="headerlink" title="为什么需要prometheus-operator"></a>为什么需要prometheus-operator</h1><p>因为是<code>prometheus</code>主动去拉取的,所以在<code>k8s</code>里<code>pod</code>因为调度的原因导致<code>pod</code>的<code>ip</code>会发生变化,人工不可能去维持,自动发现有基于<code>DNS</code>的,但是新增还是有点麻烦</p>
<p><code>Prometheus-operator</code>的本职就是一组用户自定义的<code>CRD</code>资源以及<code>Controller</code>的实现，<code>Prometheus Operator</code>这个<code>controller</code>有<code>RBAC</code>权限下去负责监听这些自定义资源的变化，并且根据这些资源的定义自动化的完成如<code>Prometheus Server</code>自身以及配置的自动化管理工作</p>
<p>在<code>Kubernetes</code>中我们使用<code>Deployment、DamenSet，StatefulSet</code>来管理应用<code>Workload</code>，使用<code>Service，Ingress</code>来管理应用的访问方式，使用<code>ConfigMap和Secret</code>来管理应用配置。我们在集群中对这些资源的创建，更新，删除的动作都会被转换为事件<code>(Event)</code>，<code>Kubernetes</code>的<code>Controller Manager</code>负责监听这些事件并触发相应的任务来满足用户的期望。这种方式我们成为声明式，用户只需要关心应用程序的最终状态，其它的都通过<code>Kubernetes</code>来帮助我们完成，通过这种方式可以大大简化应用的配置管理复杂度。</p>
<p>而除了这些原生的<code>Resource</code>资源以外，<code>Kubernetes</code>还允许用户添加自己的自定义资源(<code>Custom Resource</code>)。并且通过实现自定义<code>Controller</code>来实现对<code>Kubernetes</code>的扩展,不需要用户去二次开发<code>k8s</code>也能达到给<code>k8s</code>添加功能和对象</p>
<p>因为<code>svc</code>的负载均衡,所以在<code>K8S</code>里监控<code>metrics</code>基本最小单位都是一个<code>svc</code>背后的<code>pod</code>为<code>target</code>,所以<code>prometheus-operator</code>创建了对应的CRD: <code>kind: ServiceMonitor</code> ,创建的 <code>ServiceMonitor</code> 里声明需要监控选中的<code>svc</code>的<code>label</code>以及<code>metrics</code>的<code>url</code>路径的和<code>namespaces</code>即可</p>
<h1 id="prometheus-operator-架构"><a href="#prometheus-operator-架构" class="headerlink" title="prometheus-operator 架构"></a>prometheus-operator 架构</h1><p>工作架构如下：</p>
<p><img src="/images/prometheus-operator-2.jpg" alt="1.png"></p>
<p>上面架构图中，各组件以不同的方式运行在 <code>Kubernetes</code> 集群中：</p>
<ul>
<li><p><strong>Operator</strong>： 即 <code>Prometheus Operator</code>，在 <code>Kubernetes</code> 中以 <code>Deployment</code> 运行。其职责是部署和管理 <code>Prometheus Server</code>，根据 ServiceMonitor 动态更新 <code>Prometheus Server</code> 的监控对象。</p>
</li>
<li><p><strong>Prometheus</strong>：声明 <code>Prometheus deployment</code> 期望的状态，Operator 确保这个 <code>deployment</code> 运行时一直与定义保持一致。</p>
</li>
<li><p><strong>Prometheus Server</strong>： Operator 根据自定义资源 <code>Prometheus</code> 类型中定义的内容而部署的 Prometheus Server 集群，这些自定义资源可以看作是用来管理 <code>Prometheus Server</code> 集群的 <code>StatefulSets</code> 资源。</p>
</li>
<li><p><strong>ServiceMonitor</strong>：Operator 能够动态更新 <code>Prometheus</code> 的 Target 列表，<code>ServiceMonitor</code> 就是 Target 的抽象。比如想监控 <code>Kubernetes Scheduler</code>，用户可以创建一个与 <code>Scheduler Service</code> 相映射的 <code>ServiceMonitor</code> 对象。Operator 则会发现这个新的 <code>ServiceMonitor</code>，并将 Scheduler 的 <code>Target</code> 添加到 Prometheus 的监控列表中。</p>
<p><code>ServiceMonitor</code> 也是 Prometheus Operator 专门开发的一种 <code>Kubernetes</code> 定制化资源类型。</p>
</li>
<li><p><strong>Service</strong>：这里的 Service 就是 <code>Cluster</code> 中的 <code>Service</code> 资源，也是 <code>Prometheus</code> 要监控的对象，在 <code>Prometheus</code> 中叫做 <code>Target</code>。每个监控对象都有一个对应的 <code>Service</code>。比如要监控 <code>Kubernetes Scheduler</code>，就得有一个与 Scheduler 对应的 <code>Service</code>。当然，<code>Kubernetes</code> 集群默认是没有这个 <code>Service</code> 的，Prometheus Operator 会负责创建。</p>
</li>
<li><p><strong>Alertmanager</strong>：定义 <code>AlertManager deployment</code> 期望的状态，<code>Operator</code> 确保这个 <code>deployment</code> 运行时一直与定义保持一致。</p>
</li>
</ul>
<p><code>Operator</code>是最核心的部分，作为一个控制器，他会去创建<code>Prometheus、PodMonitor、ServiceMonitor、AlertManager</code>以及<code>PrometheusRule</code>等CRD资源对象，然后会一直监控并维持资源对象的状态。</p>
<p>其中创建的<code>Prometheus</code>这种资源对象就是作为<code>Prometheus Server</code>存在，而<code>PodMonitor和ServiceMonitor</code>就是<code>exporter</code>的各种抽象，是用来提供专门提供<code>metrics</code>数据接口的工具，<code>Prometheus</code>就是通过<code>PodMonitor和ServiceMonitor</code>提供的<code>metrics</code>数据接口去<code>pull</code>数据的，当然<code>alertmanager</code>这种资源对象就是对应的<code>AlertManager</code>的抽象，而<code>PrometheusRule</code>是用来被<code>Prometheus</code>实例使用的报警规则文件。</p>
<p>这样我们要在集群中监控什么数据，就变成了直接去操作 <code>Kubernetes</code> 集群的资源对象了，是不是方便很多了。上图中的 <code>Service</code> 和 <code>ServiceMonitor</code> 都是 <code>Kubernetes</code> 的资源，一个 <code>ServiceMonitor</code> 可以通过 <code>labelSelector</code> 的方式去匹配一类 <code>Service</code>，<code>Prometheus</code> 也可以通过 <code>labelSelector</code> 去匹配多个<code>ServiceMonitor</code>。</p>
<h1 id="自定义资源"><a href="#自定义资源" class="headerlink" title="自定义资源"></a>自定义资源</h1><p>在最新的社区部署方式中，<a href="https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack" target="_blank" rel="external">kube-prometheus-stack</a></p>
<p><code>Prometheus Operater</code> 定义了如下的几类自定义资源：</p>
<ul>
<li>AlertmanagerConfig</li>
<li>Alertmanager</li>
<li>PodMonitor</li>
<li>Probe</li>
<li>Prometheus</li>
<li>PrometheusRule</li>
<li>ServiceMonitor</li>
<li>ThanosRuler</li>
</ul>
<h2 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h2><p>该 CRD 声明定义了 Prometheus 期望在 Kubernetes 集群中运行的配置，提供了配置选项来配置副本、持久化、报警实例等。</p>
<p>对于每个 Prometheus CRD 资源，Operator 都会以 StatefulSet 形式在相同的命名空间下部署对应配置的资源，Prometheus Pod 的配置是通过一个包含 Prometheus 配置的名为 <code>&lt;prometheus-name&gt;</code> 的 Secret 对象声明挂载的。</p>
<p>该 CRD 根据标签选择来指定部署的 Prometheus 实例应该覆盖哪些 <code>ServiceMonitors</code>，然后 Operator 会根据包含的 ServiceMonitors 生成配置，并在包含配置的 Secret 中进行更新。</p>
<p>如果未提供对 <code>ServiceMonitor</code> 的选择，则 Operator 会将 Secret 的管理留给用户，这样就可以提供自定义配置，同时还能享受 Operator 管理 Operator 的设置能力。</p>
<p>一个样例配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Prometheus</span></span><br><span class="line"><span class="attr">metadata:</span> <span class="comment"># 略。。。。</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  alerting:</span></span><br><span class="line"><span class="attr">    alertmanagers:</span> <span class="comment">#Prometheus 对接的 Alertmanager 集群的名字, 在 monitor 这个 namespace 中</span></span><br><span class="line"><span class="attr">    - apiVersion:</span> <span class="string">v2</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">prometheus-kube-prometheus-alertmanager</span></span><br><span class="line"><span class="attr">      namespace:</span> <span class="string">monitor</span></span><br><span class="line"><span class="attr">      pathPrefix:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">      port:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">  arbitraryFSAccessThroughSMs:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  externalUrl:</span> <span class="attr">http://prometheus-dev.rencaiyoujia.cn/</span></span><br><span class="line"><span class="attr">  image:</span> <span class="string">quay.io/prometheus/prometheus:v2.26.0</span></span><br><span class="line"><span class="attr">  logFormat:</span> <span class="string">logfmt</span></span><br><span class="line"><span class="attr">  logLevel:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">  podMonitorNamespaceSelector:</span> <span class="string">&#123;&#125;</span> <span class="comment"># podMonitor选择名称空间，空为所有</span></span><br><span class="line"><span class="attr">  podMonitorSelector:</span>  <span class="comment">#podMonitor 选择标签， 必须带有这个标签才能被Prometheus 匹配到。</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      release:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  portName:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span> <span class="comment"># 定义该 Proemtheus “集群”有两个副本，说是集群，其实 Prometheus 自身不带集群功能，这里只是起两个完全一样的 Prometheus 来避免单点故障</span></span><br><span class="line"><span class="attr">  resources:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  retention:</span> <span class="number">10</span><span class="string">d</span></span><br><span class="line"><span class="attr">  routePrefix:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  ruleNamespaceSelector:</span> <span class="string">&#123;&#125;</span> <span class="comment"># PrometheusRule 选择的名称空间，空为所有</span></span><br><span class="line"><span class="attr">  ruleSelector:</span> <span class="comment">#  PrometheusRule 必须带有这两个标签才能被Prometheus 匹配到。</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">kube-prometheus-stack</span></span><br><span class="line"><span class="attr">      release:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    alert:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  securityContext:</span></span><br><span class="line"><span class="attr">    fsGroup:</span> <span class="number">2000</span></span><br><span class="line"><span class="attr">    runAsGroup:</span> <span class="number">2000</span></span><br><span class="line"><span class="attr">    runAsNonRoot:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    runAsUser:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">  serviceAccountName:</span> <span class="string">prometheus-kube-prometheus-prometheus</span></span><br><span class="line"><span class="attr">  serviceMonitorNamespaceSelector:</span> <span class="string">&#123;&#125;</span>  <span class="comment"># serviceMonitor 选择的名称空间，空为所有</span></span><br><span class="line"><span class="attr">  serviceMonitorSelector:</span> <span class="comment">#  serviceMonitor 必须带有这个标签才能被 Prometheus 匹配到。</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      release:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  version:</span> <span class="string">v2.26.0</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheus" target="_blank" rel="external">Prometheus 配置</a></p>
<h2 id="Alertmanager"><a href="#Alertmanager" class="headerlink" title="Alertmanager"></a>Alertmanager</h2><p>该 <code>CRD</code> 定义了在 <code>Kubernetes</code> 集群中运行的 <code>Alertmanager</code> 的配置，同样提供了多种配置，包括持久化存储。</p>
<p>对于每个 <code>Alertmanager</code> 资源，<code>Operator</code> 都会在相同的命名空间中部署一个对应配置的 <code>StatefulSet</code>，<code>Alertmanager Pods</code> 被配置为包含一个名为 <code>&lt;alertmanager-name&gt;</code> 的 <code>Secret</code>，该 <code>Secret</code> 以 <code>alertmanager.yaml</code> 为 <code>key</code> 的方式保存使用的配置文件。</p>
<p>当有两个或更多配置的副本时，<code>Operator</code> 会在<strong>高可用</strong>模式下运行 <code>Alertmanager</code> 实例。</p>
<p>一个样例配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Alertmanager</span> <span class="comment">#自定义资源</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">meta.helm.sh/release-name:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="string">meta.helm.sh/release-namespace:</span> <span class="string">monitor</span></span><br><span class="line"><span class="attr">  creationTimestamp:</span> <span class="string">"2021-04-19T08:12:34Z"</span></span><br><span class="line"><span class="attr">  generation:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">kube-prometheus-stack-alertmanager</span></span><br><span class="line">    <span class="string">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line"><span class="attr">    chart:</span> <span class="string">kube-prometheus-stack-14.9.0</span></span><br><span class="line"><span class="attr">    heritage:</span> <span class="string">Helm</span></span><br><span class="line"><span class="attr">    release:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus-kube-prometheus-alertmanager</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">monitor</span> <span class="comment"># 指定命名空间，这个后面配置和Prometheus关联的时候需要。建议保持默认。</span></span><br><span class="line"><span class="attr">  resourceVersion:</span> <span class="string">"57305495"</span></span><br><span class="line"><span class="attr">  selfLink:</span> <span class="string">/apis/monitoring.coreos.com/v1/namespaces/monitor/alertmanagers/prometheus-kube-prometheus-alertmanager</span></span><br><span class="line"><span class="attr">  uid:</span> <span class="string">aa997233-0341-413f-adde-45746e43ccdc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  alertmanagerConfigNamespaceSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  alertmanagerConfigSelector:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  externalUrl:</span> <span class="attr">http://alertmanager-dev.rencaiyoujia.cn/</span></span><br><span class="line"><span class="attr">  image:</span> <span class="string">quay.io/prometheus/alertmanager:v0.21.0</span></span><br><span class="line"><span class="attr">  listenLocal:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  logFormat:</span> <span class="string">logfmt</span></span><br><span class="line"><span class="attr">  logLevel:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">  paused:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  portName:</span> <span class="string">web</span> <span class="comment"># 指定你端口的名称，这个后面配置和Prometheus关联的时候需要。建议保持默认。</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span> <span class="comment"># 副本数，可做高可用配置</span></span><br><span class="line"><span class="attr">  retention:</span> <span class="number">120</span><span class="string">h</span></span><br><span class="line"><span class="attr">  routePrefix:</span> <span class="string">/</span> <span class="comment"># 指定路径前缀，这个后面配置和Prometheus关联的时候需要。建议保持默认。</span></span><br><span class="line"><span class="attr">  securityContext:</span></span><br><span class="line"><span class="attr">    fsGroup:</span> <span class="number">2000</span></span><br><span class="line"><span class="attr">    runAsGroup:</span> <span class="number">2000</span></span><br><span class="line"><span class="attr">    runAsNonRoot:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    runAsUser:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">  serviceAccountName:</span> <span class="string">prometheus-kube-prometheus-alertmanager</span></span><br><span class="line"><span class="attr">  version:</span> <span class="string">v0.21.0</span></span><br></pre></td></tr></table></figure>
<p><a href="https://so.csdn.net/so/search?q=prometheus-operator&amp;t=blog&amp;u=wzy_168" target="_blank" rel="external">关联文章1</a>，<a href="https://link.zhihu.com/?target=https%3A//github.com/coreos/prometheus-operator/blob/master/Documentation/api.md%23alertmanager" target="_blank" rel="external">Alertmanager 配置</a></p>
<h2 id="PrometheusRule"><a href="#PrometheusRule" class="headerlink" title="PrometheusRule"></a>PrometheusRule</h2><p>用于配置 <code>Prometheus</code> 的 <code>Rule</code> 规则文件，包括 <code>recording rules</code> 和 <code>alerting rules</code>，可以自动被 <code>Prometheus</code> 加载。</p>
<blockquote>
<p>为什么Prometheus为什么会识别这个资源对象呢？</p>
<p>简单来说，类似标签选择器，定义的PrometheusRule资源对象，需要带有一些Labels，具体哪些可以参考默认生成的PrometheusRule，然后新建的也给加上。</p>
<p><img src="/images/prometheus-operator-3.png" alt="img"></p>
<p><strong>所有的Rules都有对应的文件，默认生成在prometheus容器内的</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; /etc/prometheus/rules/prometheus-prometheus-operator-prometheus-rulefiles-0/</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><strong>目录下，新增一个PrometheusRule资源，也会在该目录下自动生成一个YAML文件。</strong></p>
<p><strong>因此我们可以不用管理配置文件，只需要管理PrometheusRule，prometheus-operator使得prometheus监控更加K8s</strong></p>
<p>可以用命令查看你创建的所有规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; kubectl get PrometheusRule -n monitoring</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>一个样例配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PrometheusRule</span> <span class="comment">#自定义资源</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span> <span class="comment">## 必须带有以下标签才能被prometheus 选择到，在prometheus 自定义资源中配置。</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">kube-prometheus-stack</span></span><br><span class="line"><span class="attr">    release:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">disk-free-rules</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">monitor</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  groups:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">disk</span></span><br><span class="line"><span class="attr">    rules:</span> <span class="comment"># 定义了一组报警规则， </span></span><br><span class="line"><span class="attr">    - alert:</span> <span class="string">diskFree</span></span><br><span class="line"><span class="attr">      annotations:</span></span><br><span class="line"><span class="attr">        summary:</span> <span class="string">"<span class="template-variable">&#123;&#123; $labels.job &#125;&#125;</span>  项目实例 <span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> 磁盘使用率大于 80%"</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">"<span class="template-variable">&#123;&#123; $labels.instance &#125;&#125;</span>  <span class="template-variable">&#123;&#123; $labels.mountpoint &#125;&#125;</span>  磁盘使用率大于80%  (当前的值: <span class="template-variable">&#123;&#123; $value &#125;&#125;</span>%),请及时处理"</span></span><br><span class="line"><span class="attr">      expr:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        (1-(node_filesystem_free_bytes&#123;fstype=~"ext4|xfs",mountpoint!="/boot"&#125; / node_filesystem_size_bytes&#123;fstype=~"ext4|xfs",mountpoint!="/boot"&#125;) )*100 &gt; 85</span></span><br><span class="line"><span class="string"></span><span class="attr">      for:</span> <span class="number">3</span><span class="string">m</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        level:</span> <span class="string">disaster</span></span><br><span class="line"><span class="attr">        severity:</span> <span class="string">warning</span></span><br></pre></td></tr></table></figure>
<p><a href="https://link.zhihu.com/?target=https%3A//github.com/coreos/prometheus-operator/blob/master/Documentation/api.md%23prometheusrule" target="_blank" rel="external">PrometheusRule 配置</a></p>
<h2 id="ServiceMonitor"><a href="#ServiceMonitor" class="headerlink" title="ServiceMonitor"></a>ServiceMonitor</h2><p>该 <code>CRD</code> 定义了如何监控一组动态的服务，使用标签选择来定义哪些 <code>Service</code> 被选择进行监控。这可以让团队制定一个如何暴露监控指标的规范，然后按照这些规范自动发现新的服务，而无需重新配置。</p>
<p>为了让 <code>Prometheus</code> 监控 <code>Kubernetes</code> 内的任何应用，需要存在一个 <code>Endpoints</code> 对象，<code>Endpoints</code> 对象本质上是<code>IP</code>地址的列表，通常 <code>Endpoints</code> 对象是由 <code>Service</code> 对象来自动填充的，<code>Service</code> 对象通过标签选择器匹配 <code>Pod</code>，并将其添加到<code>Endpoints</code> 对象中。一个 <code>Service</code> 可以暴露一个或多个端口，这些端口由多个 <code>Endpoints</code> 列表支持，这些端点一般情况下都是指向一个 <code>Pod</code>。</p>
<p><code>Prometheus Operator</code> 引入的这个 <code>ServiceMonitor</code> 对象就会发现这些 <code>Endpoints</code> 对象，并配置 <code>Prometheus</code> 监控这些 Pod。<code>ServiceMonitorSpec</code> 的 <code>endpoints</code> 部分就是用于配置这些 <code>Endpoints</code> 的哪些端口将被 <code>scrape</code> 指标的。</p>
<blockquote>
<p>注意：<code>endpoints</code>（小写）是 <code>ServiceMonitor CRD</code> 中的字段，而 <code>Endpoints</code>（大写）是 <code>Kubernetes</code> 的一种对象。</p>
</blockquote>
<p><code>ServiceMonitors</code> 以及被发现的目标都可以来自任何命名空间，这对于允许跨命名空间监控的场景非常重要。使用 <code>PrometheusSpec</code> 的 <code>ServiceMonitorNamespaceSelector</code>，可以限制各自的 <code>Prometheus</code> 服务器选择的 <code>ServiceMonitors</code> 的命名空间。使用 <code>ServiceMonitorSpec</code> 的 <code>namespaceSelector</code>，可以限制 <code>Endpoints</code> 对象被允许从哪些命名空间中发现，要在所有命名空间中发现目标，<code>namespaceSelector</code> 必须为空：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spec:</span><br><span class="line">  namespaceSelector:</span><br><span class="line">    any: true</span><br></pre></td></tr></table></figure>
<p>一个样例配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceMonitor</span> <span class="comment">#自定义资源</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">meta.helm.sh/release-name:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="string">meta.helm.sh/release-namespace:</span> <span class="string">monitor</span></span><br><span class="line"><span class="attr">  creationTimestamp:</span> <span class="string">"2021-04-19T08:12:35Z"</span></span><br><span class="line"><span class="attr">  generation:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">kube-prometheus-stack-alertmanager</span></span><br><span class="line">    <span class="string">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line"><span class="attr">    chart:</span> <span class="string">kube-prometheus-stack-14.9.0</span></span><br><span class="line"><span class="attr">    heritage:</span> <span class="string">Helm</span></span><br><span class="line"><span class="attr">    release:</span> <span class="string">prometheus</span>  <span class="comment">#必须带有此标签才能被 prometheus 选择到，在 prometheus 自定义资源中配置。</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus-kube-prometheus-alertmanager</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">monitor</span></span><br><span class="line"><span class="attr">  resourceVersion:</span> <span class="string">"57106409"</span></span><br><span class="line"><span class="attr">  selfLink:</span> <span class="string">/apis/monitoring.coreos.com/v1/namespaces/monitor/servicemonitors/prometheus-kube-prometheus-alertmanager</span></span><br><span class="line"><span class="attr">  uid:</span> <span class="number">06</span><span class="string">d6df58-ebc5-4e6d-afd8-d551afe8ad4e</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">  - path:</span> <span class="string">/metrics</span></span><br><span class="line"><span class="attr">    port:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">  namespaceSelector:</span></span><br><span class="line"><span class="attr">    matchNames:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">monitor</span> </span><br><span class="line"><span class="attr">  selector:</span> <span class="comment"># 要监控的 Endpoints  必须带有以下标签。</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">kube-prometheus-stack-alertmanager</span> </span><br><span class="line"><span class="attr">      release:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">      self-monitor:</span> <span class="string">"true"</span></span><br></pre></td></tr></table></figure>
<p><a href="https://link.zhihu.com/?target=https%3A//github.com/coreos/prometheus-operator/blob/master/Documentation/api.md%23servicemonitor" target="_blank" rel="external">ServiceMonitor 配置</a></p>
<p>以上几种自定义资源的关系大致如下图所示：</p>
<p><img src="/images/prometheus-operator-4.jpg" alt="preview"></p>
<h2 id="PodMonitor"><a href="#PodMonitor" class="headerlink" title="PodMonitor"></a>PodMonitor</h2><p>该 <code>CRD</code> 用于定义如何监控一组动态 <code>pods</code>，使用标签选择来定义哪些 <code>pods</code> 被选择进行监控。同样团队中可以制定一些规范来暴露监控的指标。</p>
<p><code>Pod</code> 是一个或多个容器的集合，可以在一些端口上暴露 <code>Prometheus</code> 指标。</p>
<p>由 <code>Prometheus Operator</code> 引入的 <code>PodMonitor</code> 对象会发现这些 <code>Pod</code>，并为 <code>Prometheus</code> 服务器生成相关配置，以便监控它们。</p>
<p><code>PodMonitorSpec</code> 中的 <code>PodMetricsEndpoints</code> 部分，用于配置 <code>Pod</code> 的哪些端口将被 <code>scrape</code> 指标，以及使用哪些参数。</p>
<p><code>PodMonitors</code> 和发现的目标可以来自任何命名空间，这同样对于允许跨命名空间的监控用例是很重要的。使用 <code>PodMonitorSpec</code> 的 <code>namespaceSelector</code>，可以限制 <code>Pod</code> 被允许发现的命名空间，要在所有命名空间中发现目标，<code>namespaceSelector</code> 必须为空：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spec:</span><br><span class="line">  namespaceSelector:</span><br><span class="line">    any: true</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>PodMonitor</code> 和 <code>ServieMonitor</code> 最大的区别就是不需要有对应的 <code>Service</code>。</p>
</blockquote>
<p>一个样例配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PodMonitor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">example-app</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    team:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">example-app</span></span><br><span class="line"><span class="attr">  podMetricsEndpoints:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="string">web</span></span><br></pre></td></tr></table></figure>
<h2 id="ThanosRuler"><a href="#ThanosRuler" class="headerlink" title="ThanosRuler"></a>ThanosRuler</h2><p>该 <code>CRD</code> 定义了一个 <code>Thanos Ruler</code> 组件的配置，以方便在 <code>Kubernetes</code> 集群中运行。通过 Thanos Ruler，可以跨多个<code>Prometheus</code> 实例处理记录和警报规则。</p>
<p>一个 <code>ThanosRuler</code> 实例至少需要一个 <code>queryEndpoint</code>，它指向 <code>Thanos Queriers</code> 或 <code>Prometheus</code> 实例的位置。<code>queryEndpoints</code> 用于配置 <code>Thanos</code> 运行时的 <code>--query</code> 参数，更多信息也可以在 <code>Thanos</code> 文档中找到。</p>
<p>一个样例配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ThanosRuler</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">thanos-ruler</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">thanos-ruler</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="string">quay.io/thanos/thanos:v0.11.2</span></span><br><span class="line"><span class="attr">  queryEndpoints:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">dnssrv+_http._tcp.thanos-query.default.svc.cluster.local</span></span><br><span class="line"><span class="attr">  ruleSelector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      role:</span> <span class="string">thanos-example</span></span><br></pre></td></tr></table></figure>
<h2 id="Probe"><a href="#Probe" class="headerlink" title="Probe"></a>Probe</h2><p>该 <code>CRD</code> 用于定义如何监控一组 <code>Ingress</code> 和静态目标。除了 <code>target</code> 之外，<code>Probe</code> 对象还需要一个 <code>prober</code>，它是监控的目标并为 <code>Prometheus</code> 提供指标的服务。例如可以通过使用 <code>blackbox-exporter</code> 来提供这个服务。</p>
<p>一个样例配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Probe</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">blackbox-exporter</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  jobName:</span> <span class="string">http-get</span></span><br><span class="line"><span class="attr">  interval:</span> <span class="number">60</span><span class="string">s</span></span><br><span class="line"><span class="attr">  module:</span> <span class="string">http_2xx</span></span><br><span class="line"><span class="attr">  prober:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">blackbox-exporter.monitoring-system.svc:19115</span></span><br><span class="line"><span class="attr">    scheme:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/probe</span></span><br><span class="line"><span class="attr">  targets:</span></span><br><span class="line"><span class="attr">    staticConfig:</span></span><br><span class="line"><span class="attr">      static:</span></span><br><span class="line"><span class="attr">      - https:</span><span class="string">//baidu.com</span></span><br><span class="line"><span class="attr">      - http:</span><span class="string">//qq.com</span></span><br></pre></td></tr></table></figure>
<h2 id="AlertmanagerConfig"><a href="#AlertmanagerConfig" class="headerlink" title="AlertmanagerConfig"></a>AlertmanagerConfig</h2><p>在以前的版本中要配置 <code>Alertmanager</code> 都是通过 <code>Configmap</code> 来完成的，在 <code>v0.43</code> 版本后新增该 <code>CRD</code>，可以将 <code>Alertmanager</code> 的配置分割成不同的子对象进行配置，允许将报警路由到自定义 <code>Receiver</code> 上，并配置抑制规则。</p>
<p><code>AlertmanagerConfig</code> 可以在命名空间级别上定义，为 <code>Alertmanager</code> 提供一个聚合的配置。这里提供了一个如何使用它的例子。不过需要注意这个 <code>CRD</code> 还不稳定。</p>
<p>这样我们要在集群中监控什么数据，就变成了直接去操作 <code>Kubernetes</code> 集群的资源对象了，是这样比之前手动的方式就方便很多了。</p>
<p>一个样例配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">AlertmanagerConfig</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">config-example</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    alertmanagerConfig:</span> <span class="string">example</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  route:</span></span><br><span class="line"><span class="attr">    groupBy:</span> <span class="string">['job']</span></span><br><span class="line"><span class="attr">    groupWait:</span> <span class="number">30</span><span class="string">s</span></span><br><span class="line"><span class="attr">    groupInterval:</span> <span class="number">5</span><span class="string">m</span></span><br><span class="line"><span class="attr">    repeatInterval:</span> <span class="number">12</span><span class="string">h</span></span><br><span class="line"><span class="attr">    receiver:</span> <span class="string">'wechat-example'</span></span><br><span class="line"><span class="attr">  receivers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">'wechat-example'</span></span><br><span class="line"><span class="attr">    wechatConfigs:</span></span><br><span class="line"><span class="attr">    - apiURL:</span> <span class="string">'http://wechatserver:8080/'</span></span><br><span class="line"><span class="attr">      corpID:</span> <span class="string">'wechat-corpid'</span></span><br><span class="line"><span class="attr">      apiSecret:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">'wechat-config'</span></span><br><span class="line"><span class="attr">        key:</span> <span class="string">'apiSecret'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">wechat-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line"><span class="attr">  apiSecret:</span> <span class="string">d2VjaGF0LXNlY3JldAo=</span></span><br></pre></td></tr></table></figure>
<h1 id="安装-prometheus-operator"><a href="#安装-prometheus-operator" class="headerlink" title="安装 prometheus-operator"></a>安装 prometheus-operator</h1><p>为了使用 <code>Prometheus-Operator</code>，这里我们直接使用 <code>kube-prometheus</code> 这个项目来进行安装，该项目和 <code>Prometheus-Operator</code> 的区别就类似于 <code>Linux</code> 内核和 <code>CentOS/Ubuntu</code> 这些发行版的关系，真正起作用的是 <code>Operator</code> 去实现的，而 <code>kube-prometheus</code> 只是利用 <code>Operator</code> 编写了一系列常用的监控资源清单。</p>
<p>首先 <code>clone</code> 项目代码，切换到当前最新的 <code>v0.7.0</code> 版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/prometheus-operator/kube-prometheus.git</span><br><span class="line">$ <span class="built_in">cd</span> kube-prometheus &amp;&amp; git checkout v0.7.0</span><br></pre></td></tr></table></figure>
<p>首先创建需要的命名空间和 <code>CRDs</code>，等待它们可用后再创建其余资源：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f manifests/setup</span><br><span class="line">$ until kubectl get servicemonitors --all-namespaces ; <span class="keyword">do</span> date; sleep 1; <span class="built_in">echo</span> <span class="string">""</span>; <span class="keyword">done</span></span><br><span class="line">$ kubectl apply -f manifests/</span><br></pre></td></tr></table></figure>
<p>进入到 <code>manifests</code> 目录下面，首先我们需要安装 <code>setup</code> 目录下面的 <code>CRD</code> 和 <code>Operator</code> 资源对象，等待它们可用后再创建其余资源：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f setup/</span><br><span class="line">$ kubectl get pods -n monitoring</span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">prometheus-operator-7649c7454f-wqtx7   2/2     Running   0          2m42s</span><br></pre></td></tr></table></figure>
<p>这会创建一个名为 <code>monitoring</code> 的命名空间，以及相关的 <code>CRD</code> 资源对象声明和 <code>Prometheus Operator</code> 控制器。前面章节中我们讲解过 <code>CRD</code> 和 <code>Operator</code> 的使用，当我们声明完 <code>CRD</code> 过后，就可以来自定义资源清单了，但是要让我们声明的自定义资源对象生效就需要安装对应的 <code>Operator</code> 控制器，这里我们都已经安装了，所以接下来就可以来用 <code>CRD</code> 创建真正的自定义资源对象了。在 <code>manifests</code> 目录下面的就是我们要去创建的 <code>Prometheus、Alertmanager</code> 以及各种监控对象的资源清单，直接安装即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f manifests/</span><br></pre></td></tr></table></figure>
<p>这会自动安装 <code>node-exporter</code>、<code>kube-state-metrics</code>、<code>grafana</code>、<code>prometheus-adapter</code> 以及 <code>prometheus</code> 和 <code>alertmanager</code> 等大量组件，而且 <code>prometheus</code> 和 <code>alertmanager</code> 还是多副本的。</p>
<blockquote>
<ul>
<li>使用grafana实现数据可视化</li>
<li>使用alertmanager实现监控报警</li>
<li>使用node_exporter收集集群中各节点的数据</li>
<li>使用kube-state-metrics收集k8s集群内资源对象数据</li>
<li>使用prometheus收集apiserver，scheduler，controller-manager，kubelet组件数据</li>
</ul>
<p>提下 kube-state-metrics：</p>
<blockquote>
<p>kube-state-metrics is a simple service that listens to the Kubernetes API server and generates metrics about the state of the objects. (See examples in the Metrics section below.) It is not focused on the health of the individual Kubernetes components, but rather on the health of the various objects inside, such as deployments, nodes and pods.</p>
</blockquote>
<p>上面是官方的解释，大概就是这个服务采集的k8s集群内部的各个对象的数据。包括 deployments，sts等。</p>
<p>一个样例采集结果如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; kube_state_metrics_list_total&#123;resource=&quot;*v1.Node&quot;,result=&quot;success&quot;&#125; 1</span><br><span class="line">&gt; kube_state_metrics_list_total&#123;resource=&quot;*v1.Node&quot;,result=&quot;error&quot;&#125; 52</span><br><span class="line">&gt; kube_state_metrics_watch_total&#123;resource=&quot;*v1beta1.Ingress&quot;,result=&quot;success&quot;&#125; 1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>kube-state-metrics 也可以采集 http request metrics，样例如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; http_request_duration_seconds_bucket&#123;handler=&quot;metrics&quot;,method=&quot;get&quot;,le=&quot;2.5&quot;&#125; 30</span><br><span class="line">&gt; http_request_duration_seconds_bucket&#123;handler=&quot;metrics&quot;,method=&quot;get&quot;,le=&quot;5&quot;&#125; 30</span><br><span class="line">&gt; http_request_duration_seconds_bucket&#123;handler=&quot;metrics&quot;,method=&quot;get&quot;,le=&quot;10&quot;&#125; 30</span><br><span class="line">&gt; http_request_duration_seconds_bucket&#123;handler=&quot;metrics&quot;,method=&quot;get&quot;,le=&quot;+Inf&quot;&#125; 30</span><br><span class="line">&gt; http_request_duration_seconds_sum&#123;handler=&quot;metrics&quot;,method=&quot;get&quot;&#125; 0.021113919999999998</span><br><span class="line">&gt; http_request_duration_seconds_count&#123;handler=&quot;metrics&quot;,method=&quot;get&quot;&#125; 30</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>kube-state-metrics also exposes build and configuration metrics:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; kube_state_metrics_build_info&#123;branch=&quot;master&quot;,goversion=&quot;go1.15.3&quot;,revision=&quot;6c9d775d&quot;,version=&quot;v2.0.0-beta&quot;&#125; 1</span><br><span class="line">&gt; kube_state_metrics_shard_ordinal&#123;shard_ordinal=&quot;0&quot;&#125; 0</span><br><span class="line">&gt; kube_state_metrics_total_shards 1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><code>kube_state_metrics_build_info</code> is used to expose version and other build information. For more usage about the info pattern, please check the blog post <a href="https://www.robustperception.io/exposing-the-software-version-to-prometheus" target="_blank" rel="external">here</a>. Sharding metrics expose <code>--shard</code> and <code>--total-shards</code> flags and can be used to validate run-time configuration, see <a href="https://github.com/kubernetes/kube-state-metrics/blob/master/examples/prometheus-alerting-rules" target="_blank" rel="external"><code>/examples/prometheus-alerting-rules</code></a>.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -n monitoring</span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">alertmanager-main-0                    2/2     Running   0          12m</span><br><span class="line">alertmanager-main-1                    2/2     Running   0          12m</span><br><span class="line">alertmanager-main-2                    2/2     Running   0          12m</span><br><span class="line">grafana-f8cd57fcf-kbnsj                1/1     Running   0          12m</span><br><span class="line">kube-state-metrics-587bfd4f97-pwk5p    3/3     Running   0          12m</span><br><span class="line">node-exporter-djwtz                    2/2     Running   0          12m</span><br><span class="line">node-exporter-k7zl9                    2/2     Running   0          12m</span><br><span class="line">node-exporter-rlnjt                    2/2     Running   0          12m</span><br><span class="line">prometheus-adapter-69b8496df6-vq7bl    1/1     Running   0          12m</span><br><span class="line">prometheus-k8s-0                       2/2     Running   0          12m</span><br><span class="line">prometheus-k8s-1                       1/2     Running   0          12m</span><br><span class="line">prometheus-operator-7649c7454f-wqtx7   2/2     Running   0          16m</span><br><span class="line">$ kubectl get svc -n monitoring                      </span><br><span class="line">NAME                    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">alertmanager-main       ClusterIP   10.104.5.112     &lt;none&gt;        9093/TCP                     4m58s</span><br><span class="line">alertmanager-operated   ClusterIP   None             &lt;none&gt;        9093/TCP,9094/TCP,9094/UDP   4m58s</span><br><span class="line">grafana                 ClusterIP   10.107.173.231   &lt;none&gt;        3000/TCP                     4m52s</span><br><span class="line">kube-state-metrics      ClusterIP   None             &lt;none&gt;        8443/TCP,9443/TCP            4m51s</span><br><span class="line">node-exporter           ClusterIP   None             &lt;none&gt;        9100/TCP                     4m51s</span><br><span class="line">prometheus-adapter      ClusterIP   10.104.205.68    &lt;none&gt;        443/TCP                      4m50s</span><br><span class="line">prometheus-k8s          ClusterIP   10.105.168.183   &lt;none&gt;        9090/TCP                     4m49s</span><br><span class="line">prometheus-operated     ClusterIP   None             &lt;none&gt;        9090/TCP                     4m50s</span><br><span class="line">prometheus-operator     ClusterIP   None             &lt;none&gt;        8443/TCP</span><br></pre></td></tr></table></figure>
<p>可以看到上面针对 <code>grafana</code>、<code>alertmanager</code> 和 <code>prometheus</code> 都创建了一个类型为 <code>ClusterIP</code> 的 Service，当然如果我们想要在外网访问这两个服务的话可以通过创建对应的 <code>Ingress</code> 对象或者使用 <code>NodePort</code> 类型的 <code>Service</code>，我们这里为了简单，直接使用 <code>NodePort</code> 类型的服务即可，编辑 <code>grafana</code>、<code>alertmanager-main</code> 和 <code>prometheus-k8s</code> 这3个 <code>Service</code>，将服务类型更改为 <code>NodePort</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 type: ClusterIP 更改为 type: NodePort</span></span><br><span class="line">$ kubectl edit svc grafana -n monitoring  </span><br><span class="line">$ kubectl edit svc alertmanager-main -n monitoring</span><br><span class="line">$ kubectl edit svc prometheus-k8s -n monitoring</span><br><span class="line">$ kubectl get svc -n monitoring</span><br><span class="line">NAME                    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">alertmanager-main       NodePort    10.111.28.173    &lt;none&gt;        9093:30733/TCP               18m</span><br><span class="line">grafana                 NodePort    10.99.62.32      &lt;none&gt;        3000:32150/TCP               17m</span><br><span class="line">prometheus-k8s          NodePort    10.111.105.155   &lt;none&gt;        9090:30206/TCP               17m</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>更改完成后，我们就可以通过上面的 <code>NodePort</code> 去访问对应的服务了，比如查看 <code>prometheus</code> 的服务发现页面：</p>
<p><img src="/images/prometheus-operator-5.png" alt="img"></p>
<p>可以看到已经监控上了很多指标数据了，上面我们可以看到 <code>Prometheus</code> 是两个副本，我们这里通过 <code>Service</code> 去访问，按正常来说请求是会去轮询访问后端的两个 <code>Prometheus</code> 实例的，但实际上我们这里访问的时候始终是路由到后端的一个实例上去，因为这里的 <code>Service</code> 在创建的时候添加了 <code>sessionAffinity: ClientIP</code> 这样的属性，会根据 <code>ClientIP</code> 来做 <code>session</code> 亲和性，所以我们不用担心请求会到不同的副本上去：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    prometheus:</span> <span class="string">k8s</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus-k8s</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">    prometheus:</span> <span class="string">k8s</span></span><br><span class="line"><span class="attr">  sessionAffinity:</span> <span class="string">ClientIP</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>为什么会担心请求会到不同的副本上去呢？正常多副本应该是看成高可用的常用方案，理论上来说不同副本本地的数据是一致的，但是需要注意的是 Prometheus 的主动 Pull 拉取监控指标的方式，由于抓取时间不能完全一致，即使一致也不一定就能保证网络没什么问题，所以最终不同副本下存储的数据很大可能是不一样的，所以这里我们配置了 session 亲和性，可以保证我们在访问数据的时候始终是一致的。</p>
</blockquote>
<p>我们可以看到上面的监控指标大部分的配置都是正常的，只有两三个没有管理到对应的监控目标，比如 <code>kube-controller-manager</code> 和 <code>kube-scheduler</code> 这两个系统组件。</p>
<p><img src="/images/prometheus-operator-6.png" alt="img"></p>
<p>这其实就和 <code>ServiceMonitor</code> 的定义有关系了，我们先来查看下 <code>kube-scheduler</code> 组件对应的 <code>ServiceMonitor</code> 资源的定义：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># manifests/prometheus-serviceMonitorKubeScheduler.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceMonitor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kube-scheduler</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-scheduler</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">  - bearerTokenFile:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span>  <span class="comment"># token 文件</span></span><br><span class="line"><span class="attr">    interval:</span> <span class="number">30</span><span class="string">s</span>  <span class="comment"># 每30s获取一次信息</span></span><br><span class="line"><span class="attr">    port:</span> <span class="string">https-metrics</span>  <span class="comment"># 对应 service 的端口名</span></span><br><span class="line"><span class="attr">    scheme:</span> <span class="string">https</span>  <span class="comment"># 注意是使用 https 协议</span></span><br><span class="line"><span class="attr">    tlsConfig:</span>  <span class="comment"># 跳过安全校验</span></span><br><span class="line"><span class="attr">      insecureSkipVerify:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  jobLabel:</span> <span class="string">k8s-app</span>  <span class="comment"># 用于从中检索任务名称的标签</span></span><br><span class="line"><span class="attr">  namespaceSelector:</span>  <span class="comment"># 表示去匹配某一命名空间中的 Service，如果想从所有的namespace中匹配用any:true</span></span><br><span class="line"><span class="attr">    matchNames:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  selector:</span>  <span class="comment"># 匹配的 Service 的 labels，如果使用 mathLabels，则下面的所有标签都匹配时才会匹配该 service，如果使用 matchExpressions，则至少匹配一个标签的 service 都会被选择</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      k8s-app:</span> <span class="string">kube-scheduler</span></span><br></pre></td></tr></table></figure>
<p>上面是一个典型的 <code>ServiceMonitor</code> 资源对象的声明方式，上面我们通过 <code>selector.matchLabels</code> 在 <code>kube-system</code> 这个命名空间下面匹配具有 <code>k8s-app=kube-scheduler</code> 这样的 Service，但是我们系统中根本就没有对应的 Service：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get svc -n kube-system -l k8s-app=kube-scheduler</span><br><span class="line">No resources found <span class="keyword">in</span> kube-system namespace.</span><br></pre></td></tr></table></figure>
<p>所以我们需要去创建一个对应的 Service 对象，才能与 <code>ServiceMonitor</code> 进行关联：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># prometheus-kubeSchedulerService.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-scheduler</span></span><br><span class="line"><span class="attr">  labels:</span>  <span class="comment"># 必须和上面的 ServiceMonitor 下面的 matchLabels 保持一致</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kube-scheduler</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    component:</span> <span class="string">kube-scheduler</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">https-metrics</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">10251</span>  </span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">10251</span>  <span class="comment"># 需要注意现在版本默认的安全端口可能是10259，自己确认下</span></span><br></pre></td></tr></table></figure>
<p>其中最重要的是上面 labels 和 selector 部分，labels 区域的配置必须和我们上面的 ServiceMonitor 对象中的 selector 保持一致，selector 下面配置的是 <code>component=kube-scheduler</code>，为什么会是这个 label 标签呢，我们可以去 describe 下 kube-scheduler 这个 Pod：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe pod kube-scheduler-master1 -n kube-system</span><br><span class="line">Name:                 kube-scheduler-master1</span><br><span class="line">Namespace:            kube-system</span><br><span class="line">Priority:             2000001000</span><br><span class="line">Priority Class Name:  system-node-critical</span><br><span class="line">Node:                 master1/192.168.31.75</span><br><span class="line">Start Time:           Mon, 29 Mar 2021 18:15:46 +0800</span><br><span class="line">Labels:               component=kube-scheduler</span><br><span class="line">                      tier=control-plane</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>我们可以看到这个 Pod 具有 <code>component=kube-scheduler</code> 和 <code>tier=control-plane</code> 这两个标签，而前面这个标签具有更唯一的特性，所以使用前面这个标签较好，这样上面创建的 Service 就可以和我们的 Pod 进行关联了，直接创建即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f prometheus-kubeSchedulerService.yaml</span><br><span class="line">$ kubectl get svc -n kube-system -l k8s-app=kube-scheduler</span><br><span class="line">NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)     AGE</span><br><span class="line">kube-scheduler   ClusterIP   10.100.66.246   &lt;none&gt;        10251/TCP   2m2s</span><br></pre></td></tr></table></figure>
<p>创建完成后，隔一小会儿后去 Prometheus 页面上查看 targets 下面 kube-scheduler 已经有采集的目标了，但是报了 <code>connect: connection refused</code> 这样的错误：</p>
<p><img src="/images/prometheus-operator-7.png" alt="img"></p>
<p>这是因为 kube-scheduler 启动的时候默认绑定的是 <code>127.0.0.1</code> 地址，所以要通过 IP 地址去访问就被拒绝了，我们可以查看 master 节点上的静态 Pod 资源清单来确认这一点：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/kubernetes/manifests/kube-scheduler.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    component:</span> <span class="string">kube-scheduler</span></span><br><span class="line"><span class="attr">    tier:</span> <span class="string">control-plane</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-scheduler</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - command:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">kube-scheduler</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--authentication-kubeconfig=/etc/kubernetes/scheduler.conf</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--authorization-kubeconfig=/etc/kubernetes/scheduler.conf</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--bind-address=127.0.0.1</span>  <span class="comment"># 绑定了127.0.0.1</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--kubeconfig=/etc/kubernetes/scheduler.conf</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--leader-elect=true</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">--port=0</span>  <span class="comment"># 如果为0，则不提供 HTTP 服务，--secure-port 默认值：10259，通过身份验证和授权为 HTTPS 服务的端口，如果为 0，则不提供 HTTPS。</span></span><br><span class="line"><span class="string">......</span></span><br></pre></td></tr></table></figure>
<p>我们可以直接将上面的 <code>--bind-address=127.0.0.1</code> 更改为 <code>--bind-address=0.0.0.0</code> 即可，更改后 kube-scheduler 会自动重启，重启完成后再去查看 Prometheus 上面的采集目标就正常了。</p>
<p>可以用同样的方式来修复下 kube-controller-manager 组件的监控，创建一个如下所示的 Service 对象，只是端口改成 10257：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># prometheus-kubeControllerManagerService.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-controller-manager</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kube-controller-manager</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    component:</span> <span class="string">kube-controller-manager</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">https-metrics</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">10252</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">10252</span>  <span class="comment"># # 需要注意现在版本默认的安全端口可能是10257，自己确认下</span></span><br></pre></td></tr></table></figure>
<p>然后将 kube-controller-manager 静态 Pod 的资源清单文件中的参数 <code>--bind-address=127.0.0.1</code> 更改为 <code>--bind-address=0.0.0.0</code>。</p>
<p><img src="/images/prometheus-operator-8.png" alt="img"></p>
<p>上面的监控数据配置完成后，我们就可以去查看下 Grafana 下面的监控图表了，同样使用上面的 NodePort 访问即可，第一次登录使用 <code>admin:admin</code> 登录即可，进入首页后，我们可以发现其实 Grafana 已经有很多配置好的监控图表了。</p>
<p><img src="/images/prometheus-operator-9.png" alt="img"></p>
<p>我们可以随便选择一个 Dashboard 查看监控图表信息。</p>
<p><img src="/images/prometheus-operator-10.png" alt="img"></p>
<p>参考：</p>
<p><a href="https://www.codercto.com/a/49349.html" target="_blank" rel="external">全手动部署prometheus-operator监控K8S集群以及一些坑</a></p>
<p><a href="https://blog.csdn.net/twingao/article/details/105261641" target="_blank" rel="external">Prometheus Operator部署和使用</a></p>
<p><a href="https://blog.51cto.com/wzlinux/2335343" target="_blank" rel="external">Kubernetes 监控方案之 Prometheus Operator(十九)</a></p>
<p><a href="https://blog.51cto.com/u_15127630/2766829" target="_blank" rel="external">聊聊 Prometheus Operator</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/76835425" target="_blank" rel="external">Prometheus-operator 介绍和配置解析</a></p>
<p><a href="https://jishuin.proginn.com/p/763bfbd55014" target="_blank" rel="external">Prometheus Operator 安装配置|最新版</a></p>
]]></content>
      
        <categories>
            
            <category> Prometheus </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Prometheus </tag>
            
            <tag> Operator </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ceilometer-Alarm-API参数详解]]></title>
      <url>https://magiceses.github.io/2017/10/04/openstack-telemetry-ceilometer-alarm%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">世界上只有想不通的人，没有走不通的路。<br></p>

<h1 id="Ceilometer-Alarm-API-参数详解"><a href="#Ceilometer-Alarm-API-参数详解" class="headerlink" title="Ceilometer Alarm API 参数详解"></a>Ceilometer Alarm API 参数详解</h1><p>Ceilometer Alarm是H版新添加的功能，监控报警是云平台不可缺少的部分，Ceilometer已经实现了比较完善的监控体系，报警怎么能缺少呢？用过AWS CloudWatch Alarm的人应该不会对Ceilometer的Alarm感到陌生，Ceilometer实现的Alarm和CloudWatch的Alarm很像，概念基本上都一样，Alarm的逻辑也基本上一样，可以说是一个开源版的CloudWatch Alarm，但是它进行了一些“微创新”，实现了一些比较有意思的小功能，而且代码写的也非常不错，是一个不错的学习素材。</p>
<p>下面我们从功能，实现，以及它目前存在的问题三个方面介绍一下Ceilometer的Alarm。</p>
<a id="more"></a>
<h5 id="功能篇"><a href="#功能篇" class="headerlink" title="功能篇"></a>功能篇</h5><p>简单来说，Alarm的功能其实很简单，监控某一个或多个指标的值，若高于或者是低于阈值，那么就执行相应的动作，比如发送邮件短信报警，或者是直接调用某个接口进行autoscaling操作，像Heat就是依赖Ceilometer的Alarm实现Auto Scaling的操作。</p>
<p>Ceilometer中，实现了2种alarm：一种是threshold，一种是combination。顾名思义，threshold就是我们熟悉的根据监控指标的阈值去判断alarm的状态，它只是针对某一个监控指标建立alarm，而combination则可以理解为alarm的alarm，它是根据多个alarm的状态来判断自己的状态的，多个alarm之间是or/and的关系，这相当于是对多个监控指标建立了一个alarm。一般情况下，我们只需要threshold类型的alarm就足够了，但是一些特殊情况，比如Heat要执行auto scaling操作，可能就要对多个监控指标进行衡量，然后再采取操作。</p>
<p>下面，我们来分析一下Alarm的API，看它到底提供了哪些不一样的功能：</p>
<ol>
<li>POST /v2/alarms</li>
</ol>
<p>创建一个alarm，详细的参数见下表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">name</td>
<td style="text-align:left">str</td>
<td style="text-align:left">name是project唯一的</td>
</tr>
<tr>
<td style="text-align:left">description</td>
<td style="text-align:left">str</td>
<td style="text-align:left">描述</td>
</tr>
<tr>
<td style="text-align:left">enabled</td>
<td style="text-align:left">bool</td>
<td style="text-align:left">alarm的一个开关，可以停止/启动该alarm，默认是True</td>
</tr>
<tr>
<td style="text-align:left">ok_actions</td>
<td style="text-align:left">list</td>
<td style="text-align:left">当alarm状态变为ok状态时，采取的动作，默认是[]</td>
</tr>
<tr>
<td style="text-align:left">alarm_actions</td>
<td style="text-align:left">list</td>
<td style="text-align:left">当alarm状态变为alarm状态时，采取的动作，默认是[]</td>
</tr>
<tr>
<td style="text-align:left">insufficient_data_actions</td>
<td style="text-align:left">list</td>
<td style="text-align:left">当alarm状态变为insufficient data状态时，采取的动作，默认是[]</td>
</tr>
<tr>
<td style="text-align:left">repeat_actions</td>
<td style="text-align:left">bool</td>
<td style="text-align:left">当alarm被触发时，是否重复执行对应的动作，默认是False</td>
</tr>
<tr>
<td style="text-align:left">type</td>
<td style="text-align:left">str</td>
<td style="text-align:left">alarm类型，目前有threshold和combination两种，必填</td>
</tr>
<tr>
<td style="text-align:left">threshold_rule</td>
<td style="text-align:left">AlarmThresholdRule</td>
<td style="text-align:left">当alarm类型为threshold时，制定的threshold规则</td>
</tr>
<tr>
<td style="text-align:left">combination_rule</td>
<td style="text-align:left">AlarmCombinationRule</td>
<td style="text-align:left">当alarm类型为combination时，制定的combination规则</td>
</tr>
<tr>
<td style="text-align:left">time_constraints</td>
<td style="text-align:left">list(AlarmTimeConstraint)</td>
<td style="text-align:left">约束该alarm在哪些时间段执行，默认是[]</td>
</tr>
<tr>
<td style="text-align:left">state</td>
<td style="text-align:left">str</td>
<td style="text-align:left">alarm的状态，默认是insufficient data</td>
</tr>
<tr>
<td style="text-align:left">user_id</td>
<td style="text-align:left">str</td>
<td style="text-align:left">user id，默认是context user id</td>
</tr>
<tr>
<td style="text-align:left">project_id</td>
<td style="text-align:left">str</td>
<td style="text-align:left">project id， 默认是context project id</td>
</tr>
<tr>
<td style="text-align:left">timestamp</td>
<td style="text-align:left">datetime</td>
<td style="text-align:left">alarm的定义最后一次被更新的时间</td>
</tr>
<tr>
<td style="text-align:left">state_timestamp</td>
<td style="text-align:left">datetime</td>
<td style="text-align:left">alarm的状态最后一次更改的时间</td>
</tr>
</tbody>
</table>
<p>这里主要说下面几个参数：</p>
<ul>
<li>name: name是project唯一的，在创建alarm的时候会检查</li>
<li>enabled: 这个功能比较人性化，可以暂停该alarm，是微创新之一</li>
<li>xxx_actions: 定义了在该alarm状态由其他的状态变为xxx状态时，执行的动作</li>
<li>repeat_actions: 这个参数指定了是否要重复执行action，比如第一次检查alarm已经超过阈值，执行了相应的action了，当下一次检查时如果该alarm还是超过阈值，那么这个参数决定了是否要重复执行相应的action，这也是微创新之一</li>
<li>threshold_rule: 当type为threshold时，定义的alarm被触发的规则，详细参数见下面AlarmThresholdRule对象属性</li>
<li>combination_rule: 当type为combination时，定义的alarm被触发的规则，详细参数见下面AlarmCombinationRule对象属性</li>
<li>time_constraints: 这也是一个很人性化的参数，可以指定该alarm被检查的时间的一个列表，比如说我只想让这个alarm在每天晚上的21点到23点被检查，以及每天中午的11点到13点被检查，其它时间不检查该alarm，这个参数就可以做这个限制，不过该参数设置稍微复杂一点，详细参数见下面AlarmTimeConstraint对象属性，默认是[]，即不设限制，随着alarm进程的interval time进行检查。</li>
<li>state: alarm总共有3个状态：OK, INSUFICIENT DATA, ALARM，这三个状态分别对应到上面的xxx_actions</li>
</ul>
<p>AlarmThresholdRule:</p>
<ul>
<li>meter_name: 监控指标</li>
<li>query: 该参数一般用于找到监控指标下的某个资源，默认是[]</li>
<li>period: 这个参数其实有两个作用，一个是确定了获取该监控指标的监控数据的时间范围，和下面的evaluation_periods配合使用，另外一个作用就是它确定了两个点之间的时间间隔，默认是60s</li>
<li>threshold: 阈值</li>
<li>comparison_operator: 这个参数确定了怎么和阈值进行比较，有6个可选：lt, le, eq, ne, ge, gt，默认是eq</li>
<li>statistic: 这个参数确定了使用什么数据去和threshold比较，有5种可选：max, min, avg, sum, count，默认是avg</li>
<li>evaluation_periods: 和period参数相乘，可以确定获取监控数据的时间范围，默认是1</li>
<li>exclude_outliners: 这个参数有点意思，我们都知道“标准差”是指一组数据的波动大小，平均值相同，但是标准差小的波动小，这个参数就是指对得到的一组监控数据，是否要根据标准差去除那些波动比较大的数据，以降低误判率，默认是False</li>
</ul>
<p>AlarmCombinationRule:</p>
<ul>
<li>operator: 定义alarms之间的逻辑关系，有两个选项：or 和 and，默认是and，注意这里的逻辑关系ALARM要比OK状态优先级高，比如有2个alarm，一个状态是ALARM，一个状态是OK，他们之间的逻辑关系是or，那么这个combination alarm是啥状态呢？答案是ALARM.</li>
<li>alarms_id: alarm列表</li>
</ul>
<p>AlarmTimeConstraint:</p>
<ul>
<li>name: name</li>
<li>description: description</li>
<li>start: 该参数以cron的格式指定了alarm被检查的开始时间，在程序中，使用<a href="https://pypi.python.org/pypi/croniter/0.3.4" target="_blank" rel="external">croniter</a>这个库来实现cron，格式是：”min hour day month day_of_week”，比如”2 4 mon,fri”，意思是在每周一和周五的04:02开始被检查</li>
<li>duration: 被检查持续的时间，单位是秒</li>
<li>timezone: 可以为上面的检查时间指定时区，默认使用的是UTC时间</li>
</ul>
<p><strong>举两个例子：</strong></p>
<ul>
<li>threshold</li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"ThresholdAlarm1"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"threshold"</span>,</span><br><span class="line">    <span class="attr">"threshold_rule"</span>: &#123;</span><br><span class="line">        <span class="attr">"comparison_operator"</span>: <span class="string">"gt"</span>,</span><br><span class="line">        <span class="attr">"evaluation_periods"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">"exclude_outliers"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"meter_name"</span>: <span class="string">"cpu_util"</span>,</span><br><span class="line">        <span class="attr">"period"</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="attr">"query"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"field"</span>: <span class="string">"resource_id"</span>,</span><br><span class="line">                <span class="attr">"op"</span>: <span class="string">"eq"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="string">"2a4d689b-f0b8-49c1-9eef-87cae58d80db"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"statistic"</span>: <span class="string">"avg"</span>,</span><br><span class="line">        <span class="attr">"threshold"</span>: <span class="number">70.0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"alarm_actions"</span>: [</span><br><span class="line">        <span class="string">"http://site:8000/alarm"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"insufficient_data_actions"</span>: [</span><br><span class="line">        <span class="string">"http://site:8000/nodata"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"ok_actions"</span>: [</span><br><span class="line">        <span class="string">"http://site:8000/ok"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"repeat_actions"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"time_constraints"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"description"</span>: <span class="string">"nightly build every night at 23h for 3 hours"</span>,</span><br><span class="line">            <span class="attr">"duration"</span>: <span class="number">10800</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"SampleConstraint"</span>,</span><br><span class="line">            <span class="attr">"start"</span>: <span class="string">"0 23 * * *"</span>,</span><br><span class="line">            <span class="attr">"timezone"</span>: <span class="string">"Europe/Ljubljana"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>combination</li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"CombinationAlarm1"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"combination"</span>,</span><br><span class="line">    <span class="attr">"combination_rule"</span>: &#123;</span><br><span class="line">        <span class="attr">"alarm_ids"</span>: [</span><br><span class="line">            <span class="string">"739e99cb-c2ec-4718-b900-332502355f38"</span>,</span><br><span class="line">            <span class="string">"153462d0-a9b8-4b5b-8175-9e4b05e9b856"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"operator"</span>: <span class="string">"or"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"alarm_actions"</span>: [</span><br><span class="line">        <span class="string">"http://site:8000/alarm"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"insufficient_data_actions"</span>: [</span><br><span class="line">        <span class="string">"http://site:8000/nodata"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"ok_actions"</span>: [</span><br><span class="line">        <span class="string">"http://site:8000/ok"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>GET /v2/alarms/{alarm_id}/history</li>
</ol>
<p>这个接口用来查询某个alarm发生的历史事件，记录的事件有：alarm被创建，alarm被更新，alarm被删除，alarm的状态被更新。</p>
<p>举个例子，比如我创建了一个alarm，然后又删除了，调用这个接口返回的结果是：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"on_behalf_of"</span>: <span class="string">"2c35166baba84f46b1c5b093f02747fa"</span>,</span><br><span class="line">        <span class="attr">"user_id"</span>: <span class="string">"778a4ae5d8904a41b00c4e0f5734bcfd"</span>,</span><br><span class="line">        <span class="attr">"event_id"</span>: <span class="string">"dc5583ac-7ac8-4f4e-b8f7-edaa04522945"</span>,</span><br><span class="line">        <span class="attr">"timestamp"</span>: <span class="string">"2014-07-26T16:50:59.387923"</span>,</span><br><span class="line">        <span class="attr">"detail"</span>: <span class="string">"xxx"</span>,</span><br><span class="line">        <span class="attr">"alarm_id"</span>: <span class="string">"697a05df-d704-46a4-a0bd-1591c6588a17"</span>,</span><br><span class="line">        <span class="attr">"project_id"</span>: <span class="string">"2c35166baba84f46b1c5b093f02747fa"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"deletion"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"on_behalf_of"</span>: <span class="string">"2c35166baba84f46b1c5b093f02747fa"</span>,</span><br><span class="line">        <span class="attr">"user_id"</span>: <span class="string">"778a4ae5d8904a41b00c4e0f5734bcfd"</span>,</span><br><span class="line">        <span class="attr">"event_id"</span>: <span class="string">"d09fe2c3-37a8-4b19-9729-ccb2664a1116"</span>,</span><br><span class="line">        <span class="attr">"timestamp"</span>: <span class="string">"2014-07-26T16:50:27.315824"</span>,</span><br><span class="line">        <span class="attr">"detail"</span>: <span class="string">"xxx"</span>,</span><br><span class="line">        <span class="attr">"alarm_id"</span>: <span class="string">"697a05df-d704-46a4-a0bd-1591c6588a17"</span>,</span><br><span class="line">        <span class="attr">"project_id"</span>: <span class="string">"2c35166baba84f46b1c5b093f02747fa"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"creation"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>Alarm还有其它一些接口，这里就不说了，更多见<a href="http://docs.openstack.org/developer/ceilometer/webapi/v2.html#alarms" target="_blank" rel="external">alarm-api</a>文档。</p>
<h5 id="实现篇"><a href="#实现篇" class="headerlink" title="实现篇"></a>实现篇</h5><p>对于Alarm的实现，值得一说的就是Alarm的分布式实现，也就是文章的标题，Distributed Alarm。Ceilometer提供了两种方式的Alarm服务，一种是单进程的(SingletonAlarmService)，一种是分布式的(PartitionedAlarmService)，可以通过evaluation_service这个配置项进行配置。</p>
<p>前者没啥可说的，就是在一个进程中去检查所有的alarm，这种方式主要的缺点是处理能力弱，当量稍微大的时候，就会有延时，而且也没法做高可用，当他挂掉之后，alarm整个service就挂掉了，所以不推荐在生产环境中使用这个SingletonAlarmService的方式。</p>
<p>对于PartitionedAlarmService，它通过rpc实现了一套多个evaluator进程之间的协作协议(PartitionCoordinator)，使得可以通过水平扩展来不断增大alarm service的处理能力，这样不仅实现了一个简单的负载均衡，还实现了高可用。下面我们就重点来说一下PartitionCoordinator这个协议。</p>
<p>PartitionCoordinator允许启动多个ceilometer-alarm-evaluator进程，这多个进程之间的关系是互相协作的关系，他们中最早启动的进程会被选为master进程，master进程主要做的事情就是给其他进程分配alarm，每个进程都在周期性的执行三个任务：</p>
<ul>
<li>通过rpc，向其它进程广播自己的状态，来告知其他进程，我是活着的，每个进程中都保存有其他进程的最后活跃时间。</li>
<li>争抢master，每个进程都会不断的更新自己所维护的其它进程的状态列表，根据这个状态列表，来判断是否应该由自己来当master，判断一个进程是否是master的条件只有一个，那就是看谁启动的早。</li>
<li>检查本进程负责的alarm，会去调用ceilometer的api，来获取该alarm的监控指标对应的监控数据，然后进行判断，发送报警等。</li>
</ul>
<p>进程之间的关系可参看下图：<br><img src="/images/openstack-telemetry-8.png" alt="image-20200907222228376"></p>
<p>当一个进程被确定为master之后，如果它不挂掉，那么它的master是不会被抢走的，该进程就会一直在履行master的职责：</p>
<ul>
<li>当有新的alarm被创建时，master会将这些新创建的alarm平均的分配给其它worker进程，如果不能平均分配的，剩下的零头就由master自己来负责</li>
<li>当有新的evaluator进程添加进来，或者是现有的evaluator进程被kill掉，那么master就会重新洗牌一次，把所有的alarm再平均的分配给现有的evaluator进程</li>
<li>当master挂掉咋办呢？那么就会由第二个最早启动的进程接替master的位置，然后重新洗牌</li>
</ul>
<p>通过这个协议，就实现了一个简单的分布式alarm服务，其中的进程之间的相互协调，master的选举都值得去学习。</p>
<h5 id="问题篇"><a href="#问题篇" class="headerlink" title="问题篇"></a>问题篇</h5><ol>
<li>目前有一个比较纠结的问题就是alarm和ceilometer的关系，虽然alarm的代码写在ceilometer的代码树中，其实，他们两个并没有紧密的关系，alarm是ceilometer api的消费者，把他们两个分开也是完全可以的，之前，在邮件列表中对这个问题有过讨论，感兴趣的可以自己搜索一下。</li>
<li>目前alarm是ceilometer api的消费者，每个alarm被检查的时间间隔是60s，当alarm数量很多的时候，会给api造成比较大的压力，所以有人提议让alarm直接访问数据库<a href="https://blueprints.launchpad.net/ceilometer/+spec/improve-alarm-evaluation" target="_blank" rel="external">[bp]</a>，但是由于上面的问题没有解决，这个问题也不好解决。</li>
<li>目前，有的使用ceilometer作为billing服务，但是alarm和billing使用的同一个数据库，这无形中有了一些安全隐患，而且alarm和billing这两个对数据的时效性要求还不一样，alarm可能只需要最近一段时间的数据，而billing则要求数据保持较长的时间，所以这导致db-ttl也比较难做。可以参看这篇<a href="http://techs.enovance.com/5991/autoscaling-with-heat-and-ceilometer" target="_blank" rel="external">博文</a>，相关改进<a href="https://blueprints.launchpad.net/ceilometer/+spec/dedicated-alarm-database" target="_blank" rel="external">BP</a>。</li>
<li>目前,alarm还没有quota限制，比较尴尬诶。</li>
</ol>
<h5 id="总结篇"><a href="#总结篇" class="headerlink" title="总结篇"></a>总结篇</h5><p>本文从三个方面大概描述了一下Ceilometer Alarm功能，功能篇主要从API入手，介绍Alarm都提供了哪些细枝末节的参数，实现篇主要描述了分布式Alarm协议的原理，很值得学习，问题篇其实没什么大问题，现在的alarm功能还是比较稳定的。</p>
<h5 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h5><ul>
<li><a href="https://review.openstack.org/#/c/89756/" target="_blank" rel="external">https://review.openstack.org/#/c/89756/</a></li>
<li><a href="https://review.openstack.org/#/c/95418/" target="_blank" rel="external">https://review.openstack.org/#/c/95418/</a></li>
<li><a href="https://etherpad.openstack.org/p/ceilometer-alarm-and-log-improvments" target="_blank" rel="external">https://etherpad.openstack.org/p/ceilometer-alarm-and-log-improvments</a></li>
<li><a href="https://wiki.openstack.org/w/images/c/ca/Alarm_structure.gif" target="_blank" rel="external">https://wiki.openstack.org/w/images/c/ca/Alarm_structure.gif</a></li>
<li><a href="https://blueprints.launchpad.net/ceilometer/+spec/dedicated-alarm-database" target="_blank" rel="external">https://blueprints.launchpad.net/ceilometer/+spec/dedicated-alarm-database</a></li>
<li><a href="https://blueprints.launchpad.net/ceilometer/+spec/alarm-on-notification" target="_blank" rel="external">https://blueprints.launchpad.net/ceilometer/+spec/alarm-on-notification</a></li>
<li><a href="https://blueprints.launchpad.net/ceilometer/+spec/quotas-on-alarms" target="_blank" rel="external">https://blueprints.launchpad.net/ceilometer/+spec/quotas-on-alarms</a></li>
<li><a href="https://blueprints.launchpad.net/ceilometer/+spec/alarming-logical-combination" target="_blank" rel="external">https://blueprints.launchpad.net/ceilometer/+spec/alarming-logical-combination</a></li>
<li><a href="http://techs.enovance.com/5991/autoscaling-with-heat-and-ceilometer" target="_blank" rel="external">http://techs.enovance.com/5991/autoscaling-with-heat-and-ceilometer</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Telemetry </tag>
            
            <tag> Ceilometer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CeilometerClient源码学习记录]]></title>
      <url>https://magiceses.github.io/2017/10/04/openstack-telemetry-ceilometerclient%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">在强者的眼中，没有最好，只有更好。<br></p>

<p>此篇文章介绍关于在命令行输入相关命令之后，这个命令是如何调用并且执行的</p>
<h1 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h1><p>首先介绍一下代码目录的结构</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--ceilometerclient</span><br><span class="line">  --common/         </span><br><span class="line">  --openstack/</span><br><span class="line">  --tests/</span><br><span class="line">  --v1/</span><br><span class="line">  --v2/</span><br><span class="line">  --client.py</span><br><span class="line">  --shell.py</span><br><span class="line">  --exc.py</span><br></pre></td></tr></table></figure>
<p>其中<em>commonopenstack</em>提供<em>utils</em>帮助类，<em>tests</em>是测试用例目录，<em>v1v2</em>分别对应<em>ceilometer</em>的<em>v1</em>和<em>v2</em>版本。<em>client.py</em>提供获取<em>client</em>的方法，包括<em>keystone</em>的<em>client</em>，提供获取<em>endpoint</em>和<em>token</em>的方法；还包括获取<em>ceilometer</em>的<em>client</em>的函数。<em>shell.py</em>是模块的入口，提供对命令行的解析和命令的调用。<em>exc.py</em>提供用到的异常类。</p>
<p>在每个版本目录下，代码的组织如下（<em>v2</em>为例）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--v2</span><br><span class="line">  --client.py</span><br><span class="line">  --shell.py</span><br><span class="line">  --alarms.py</span><br><span class="line">  --event_types.py</span><br><span class="line">  --events.py</span><br><span class="line">  --meters.py</span><br><span class="line">  -- … …</span><br></pre></td></tr></table></figure>
<p>每个版本目录下也有一个<em>client.py</em>和一个<em>shell.py</em>，这里的<em>shell.py</em>里面提供了<em>do_**</em>的函数完成从上层<em>shell.py</em>传进来的命令并返回结果。其它的<em>py</em>文件按照名称以<em>Manager</em>类的形式分别对应<em>ceilometer</em>各个资源的操作实现。<em>client.py</em>引用所有的<em>Manager</em>，这样<em>shell.py</em>只需要依赖<em>client</em>一个就可以完成对各个资源的操作。</p>
<h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>代码入口在 /ceilometer/shell.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(args=None)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> args <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            args = sys.argv[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">        CeilometerShell().main(args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'--debug'</span> <span class="keyword">in</span> args <span class="keyword">or</span> <span class="string">'-d'</span> <span class="keyword">in</span> args:</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(encodeutils.safe_encode(six.text_type(e)), file=sys.stderr)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        print(<span class="string">"Stopping Ceilometer Client"</span>, file=sys.stderr)</span><br><span class="line">        sys.exit(<span class="number">130</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>当用户输入ceilometerXXX-后，程序通过main函数启动。首先是解析输入的命令参数。具体实现语句self.parse_args(argv)后面会详细介绍，这里实际也对输入的合法性做了验证，如果输入关键字不对或者格式不符合，会有相应的错误信息提示并退出。如果只输入ceilometer，则会直接调用do_help函数，效果等效于输入ceilometerhelp.如果解析正常，则parse_args返回版本信息api_version和解析结果args.</p>
<p>如果用户输入的是ceilometer help/bash_completion,则解析后的args中的func属性就对应为do_help/do_bash_completion函数（原理后面会解释）。</p>
<p>如果输入的是实际的操作命令（比如ceilometermeter-list),则先会做keystone鉴权认证,故执行命令前要设置好环境变量或者在命令中加上鉴权的参数；然后再根据版本号得到ceilometer的client,最后执行args.func(client,args)完成对应命令的实现（这里会调用do_meter_list函数）。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CeilometerShell</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.auth_plugin = ceiloclient.AuthPlugin()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self, argv)</span>:</span></span><br><span class="line">        parsed = self.parse_args(argv)</span><br><span class="line">        <span class="keyword">if</span> parsed == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        api_version, args = parsed</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Short-circuit and deal with help command right away.</span></span><br><span class="line">        <span class="keyword">if</span> args.func == self.do_help:</span><br><span class="line">            self.do_help(args)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> args.func == self.do_bash_completion:</span><br><span class="line">            self.do_bash_completion(args)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ((self.auth_plugin.opts.get(<span class="string">'token'</span>)</span><br><span class="line">                 <span class="keyword">or</span> self.auth_plugin.opts.get(<span class="string">'auth_token'</span>))</span><br><span class="line">                <span class="keyword">and</span> self.auth_plugin.opts[<span class="string">'endpoint'</span>]):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.auth_plugin.opts[<span class="string">'username'</span>]:</span><br><span class="line">                <span class="keyword">raise</span> exc.CommandError(<span class="string">"You must provide a username via "</span></span><br><span class="line">                                       <span class="string">"either --os-username or via "</span></span><br><span class="line">                                       <span class="string">"env[OS_USERNAME]"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.auth_plugin.opts[<span class="string">'password'</span>]:</span><br><span class="line">                <span class="keyword">raise</span> exc.CommandError(<span class="string">"You must provide a password via "</span></span><br><span class="line">                                       <span class="string">"either --os-password or via "</span></span><br><span class="line">                                       <span class="string">"env[OS_PASSWORD]"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.no_project_and_domain_set(args):</span><br><span class="line">                <span class="comment"># steer users towards Keystone V3 API</span></span><br><span class="line">                <span class="keyword">raise</span> exc.CommandError(<span class="string">"You must provide a project_id via "</span></span><br><span class="line">                                       <span class="string">"either --os-project-id or via "</span></span><br><span class="line">                                       <span class="string">"env[OS_PROJECT_ID] and "</span></span><br><span class="line">                                       <span class="string">"a domain_name via either "</span></span><br><span class="line">                                       <span class="string">"--os-user-domain-name or via "</span></span><br><span class="line">                                       <span class="string">"env[OS_USER_DOMAIN_NAME] or "</span></span><br><span class="line">                                       <span class="string">"a domain_id via either "</span></span><br><span class="line">                                       <span class="string">"--os-user-domain-id or via "</span></span><br><span class="line">                                       <span class="string">"env[OS_USER_DOMAIN_ID]"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.auth_plugin.opts[<span class="string">'auth_url'</span>]:</span><br><span class="line">                <span class="keyword">raise</span> exc.CommandError(<span class="string">"You must provide an auth url via "</span></span><br><span class="line">                                       <span class="string">"either --os-auth-url or via "</span></span><br><span class="line">                                       <span class="string">"env[OS_AUTH_URL]"</span>)</span><br><span class="line"></span><br><span class="line">        client_kwargs = vars(args)</span><br><span class="line">        client_kwargs.update(self.auth_plugin.opts)</span><br><span class="line">        client_kwargs[<span class="string">'auth_plugin'</span>] = self.auth_plugin</span><br><span class="line">        client = ceiloclient.get_client(api_version, **client_kwargs)</span><br><span class="line">        <span class="comment"># call whatever callback was selected</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            args.func(client, args)</span><br><span class="line">        <span class="keyword">except</span> exc.HTTPUnauthorized:</span><br><span class="line">            <span class="keyword">raise</span> exc.CommandError(<span class="string">"Invalid OpenStack Identity credentials."</span>)</span><br><span class="line">                      </span><br><span class="line">	  <span class="function"><span class="keyword">def</span> <span class="title">parse_args</span><span class="params">(self, argv)</span>:</span></span><br><span class="line">        <span class="comment"># Parse args once to find version</span></span><br><span class="line">        parser = self.get_base_parser()  <span class="comment"># 构造参数解析类ArgumentParser的实例parser，然后通过实例调用方法parser.add_argument增加一些固有的参数。其中_get_optional_kwargs会将传入的参数选项最左边的‘-’去掉并将中间的‘-’转换为‘_’。</span></span><br><span class="line">        (options, args) = parser.parse_known_args(argv) <span class="comment"># parse_known_args函数是将解析的参数按属性的方式存储到Namespace对象。到用setattr函数，参见http://my.oschina.net/DreamG/blog/138551</span></span><br><span class="line">        self.auth_plugin.parse_opts(options)</span><br><span class="line">        self._setup_logging(options.debug)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># build available subcommands based on version</span></span><br><span class="line">        <span class="comment"># 解析子命令，其中会根据版本号动态加载对应模块。函数import_versioned_module中的 module = 'glanceclient.v%s' % version。</span></span><br><span class="line"><span class="comment"># 默认加载glanceclient.v1.shell.py，然后通过_find_actions调用，就将所有do_XXX函数加载到self.subcommands中了</span></span><br><span class="line">        api_version = options.ceilometer_api_version</span><br><span class="line">        subcommand_parser = self.get_subcommand_parser(api_version)</span><br><span class="line">        self.parser = subcommand_parser</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Handle top-level --help/-h before attempting to parse</span></span><br><span class="line">        <span class="comment"># a command off the command line</span></span><br><span class="line">        <span class="keyword">if</span> options.help <span class="keyword">or</span> <span class="keyword">not</span> argv:</span><br><span class="line">            self.do_help(options)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Return parsed args</span></span><br><span class="line">        <span class="comment"># 再次解析，将传入的命令和函数关联起来。如传入image-list，返回的args.func为do_image_list</span></span><br><span class="line">        <span class="keyword">return</span> api_version, subcommand_parser.parse_args(argv)</span><br><span class="line">      </span><br><span class="line">    <span class="comment"># parse_args函数解析命令行参数之前，会先获取由argparse提供的解析器parser,这里有两类parser并分主次。主parser提供了通用的可选命令行选项，比如-h/-v/--os-username等，而subparser提供了具体的命令和选项，具体实现在get_subcommand_parser函数中。</span></span><br><span class="line">    <span class="comment"># 说明：子解析器有多个（每个子命令对应一个），要获取每个子命令的解析器，首先根据版本号去版本目录下面获取shell模块，比如ceilometerclient.v2.shell,然后在通过_find_actions函数来创建子命令解析器。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_subcommand_parser</span><span class="params">(self, version)</span>:</span></span><br><span class="line">        parser = self.get_base_parser()</span><br><span class="line"></span><br><span class="line">        self.subcommands = &#123;&#125;</span><br><span class="line">        subparsers = parser.add_subparsers(metavar=<span class="string">'&lt;subcommand&gt;'</span>)</span><br><span class="line">        submodule = utils.import_versioned_module(version, <span class="string">'shell'</span>)</span><br><span class="line">        self._find_actions(subparsers, submodule)</span><br><span class="line">        self._find_actions(subparsers, self)</span><br><span class="line">        self._add_bash_completion_subparser(subparsers)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parser</span><br><span class="line">      </span><br><span class="line">    <span class="comment"># _find_actions在相应的（shell）模块中查找满足条件的函数，这里是以do_开头作为过滤条件。然后将函数名转换成具体的子命令command(比如do_meter_list转换成meter-list)，函数本身作为执行该命令的callback。然后根据command创建子命令解析器subparser。这里还要获取函数的arguments属性，作为子命令的选项，这些选项是通过@utils.arg装饰器加入到arguments中去的（详见ceilometerclient.common.utils）。arguments中的数据最终添加到子命令解析器中去，最后将callback函数作为func也加进去从而完成子命令解析器的创建和配置。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_find_actions</span><span class="params">(self, subparsers, actions_module)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> attr <span class="keyword">in</span> (a <span class="keyword">for</span> a <span class="keyword">in</span> dir(actions_module) <span class="keyword">if</span> a.startswith(<span class="string">'do_'</span>)):</span><br><span class="line">            <span class="comment"># I prefer to be hypen-separated instead of underscores.</span></span><br><span class="line">            command = attr[<span class="number">3</span>:].replace(<span class="string">'_'</span>, <span class="string">'-'</span>)</span><br><span class="line">            callback = getattr(actions_module, attr)</span><br><span class="line">            desc = callback.__doc__ <span class="keyword">or</span> <span class="string">''</span></span><br><span class="line">            help = desc.strip().split(<span class="string">'\n'</span>)[<span class="number">0</span>]</span><br><span class="line">            arguments = getattr(callback, <span class="string">'arguments'</span>, [])</span><br><span class="line"></span><br><span class="line">            subparser = subparsers.add_parser(command, help=help,</span><br><span class="line">                                              description=desc,</span><br><span class="line">                                              add_help=<span class="keyword">False</span>,</span><br><span class="line">                                              formatter_class=HelpFormatter)</span><br><span class="line">            subparser.add_argument(<span class="string">'-h'</span>, <span class="string">'--help'</span>, action=<span class="string">'help'</span>,</span><br><span class="line">                                   help=argparse.SUPPRESS)</span><br><span class="line">            self.subcommands[command] = subparser</span><br><span class="line">            <span class="keyword">for</span> (args, kwargs) <span class="keyword">in</span> arguments:</span><br><span class="line">                subparser.add_argument(*args, **kwargs)</span><br><span class="line">            subparser.set_defaults(func=callback)</span><br></pre></td></tr></table></figure>
<p>例如</p>
<p>当执行<em>ceilometermeter-list -q xxx</em>的时候，根据上面的分析，首先会创建好<em>command</em>为<em>meter-list</em>的<em>subparser</em>用来解析命令行，通过匹配最终将命令行字串解析成<em>python</em>对象，（比如<em>meter-list</em>解析成<em>do_meter_list</em>函数，<em>-qxxx</em> 解析为<em>args.query).</em>最终通过<strong>args.func(client,args)</strong>语句来执行<em>do_meter_list</em>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@utils.arg('-q', '--query', metavar='&lt;QUERY&gt;',</span></span><br><span class="line">           help=<span class="string">'key[op]data_type::value; list. data_type is optional, '</span></span><br><span class="line">                <span class="string">'but if supplied must be string, integer, float, or boolean'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_meter_list</span><span class="params">(cc, args=&#123;&#125;)</span>:</span></span><br><span class="line">    <span class="string">'''List the user's meters.'''</span></span><br><span class="line">    meters = cc.meters.list(q=options.cli_to_array(args.query))</span><br><span class="line">    field_labels = [<span class="string">'Name'</span>, <span class="string">'Type'</span>, <span class="string">'Unit'</span>, <span class="string">'Resource ID'</span>, <span class="string">'User ID'</span>,</span><br><span class="line">                    <span class="string">'Project ID'</span>]</span><br><span class="line">    fields = [<span class="string">'name'</span>, <span class="string">'type'</span>, <span class="string">'unit'</span>, <span class="string">'resource_id'</span>, <span class="string">'user_id'</span>,</span><br><span class="line">              <span class="string">'project_id'</span>]</span><br><span class="line">    utils.print_list(meters, fields, field_labels,</span><br><span class="line">                     sortby=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p><em>cc</em>即<em>ceilometerclient.</em>通过<em>cc.meters.list</em>列出满足<em>args.query</em>的<em>meters</em>值，最后通过<em>utils.print_list</em>打印出相应的字段。</p>
<p>参考：</p>
<p><a href="https://blog.csdn.net/joey_5566/article/details/19413015?utm_source=blogxgwz4" target="_blank" rel="external">https://blog.csdn.net/joey_5566/article/details/19413015?utm_source=blogxgwz4</a></p>
<p><a href="https://blog.csdn.net/llg8212/article/details/17954927" target="_blank" rel="external">https://blog.csdn.net/llg8212/article/details/17954927</a></p>
<p><a href="https://blog.csdn.net/lwyeluo/article/details/53260914?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.channel_param" target="_blank" rel="external">https://blog.csdn.net/lwyeluo/article/details/53260914?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.channel_param</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Telemetry </tag>
            
            <tag> Ceilometer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ceilometer-notification源码分析]]></title>
      <url>https://magiceses.github.io/2017/10/04/openstack-telemetry-ceilometer-notification%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">在强者的眼中，没有最好，只有更好。<br></p>

<p>以社区 N 版代码为例</p>
<h2 id="一、启动命令"><a href="#一、启动命令" class="headerlink" title="一、启动命令"></a>一、启动命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec ceilometer-agent-notification --config-file /etc/ceilometer/ceilometer.conf</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="二、代码入口"><a href="#二、代码入口" class="headerlink" title="二、代码入口"></a>二、代码入口</h2><p>ceilometer代码使用setuptools的pbr管理，该部分知识请见:</p>
<p><a href="https://blog.csdn.net/weixin_43700106/article/details/107144392" target="_blank" rel="external">Python打包之setuptools</a></p>
<p><a href="https://blog.csdn.net/weixin_43700106/article/details/107070025" target="_blank" rel="external">Openstack中setuptools和pbr软件打包管理</a></p>
<p>入口在：/ceilometer/cmd/agent_notification.py的main函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    service.prepare_service()</span><br><span class="line"></span><br><span class="line">    sm = cotyledon.ServiceManager()</span><br><span class="line">    sm.add(notification.NotificationService,</span><br><span class="line">           workers=CONF.notification.workers)</span><br><span class="line">    sm.run()</span><br></pre></td></tr></table></figure>
<p>该部分使用cotyledon的多进程框架实现</p>
<p>直接看NotificationService类的 run 方法</p>
<h2 id="三、服务启动"><a href="#三、服务启动" class="headerlink" title="三、服务启动"></a>三、服务启动</h2><p>服务启动在：NotificationService.run</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">    super(NotificationService, self).run()</span><br><span class="line">    self.shutdown = <span class="keyword">False</span></span><br><span class="line">    self.periodic = <span class="keyword">None</span></span><br><span class="line">    self.partition_coordinator = <span class="keyword">None</span></span><br><span class="line">    self.coord_lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    self.listeners = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NOTE(kbespalov): for the pipeline queues used a single amqp host</span></span><br><span class="line">    <span class="comment"># hence only one listener is required</span></span><br><span class="line">    self.pipeline_listener = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    (Pdb) self.pipeline_manager.__dict__</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        'cfg_mtime': 1592551325.2732353,</span></span><br><span class="line"><span class="string">        'cfg_hash': 'ba1311798d634022e4b684b72bf7b42a',</span></span><br><span class="line"><span class="string">        'cfg_loc': '/etc/ceilometer/pipeline.yaml',</span></span><br><span class="line"><span class="string">        'pipelines': [ &lt; ceilometer.pipeline.SamplePipeline object at 0x7fa1741e3ad0 &gt; , &lt; ceilometer.pipeline.SamplePipeline object at 0x7fa1741e3290 &gt; , &lt; ceilometer.pipeline.SamplePipeline object at 0x7fa1741e3b90 &gt; , &lt; ceilometer.pipeline.SamplePipeline object at 0x7fa1741e39d0 &gt; , &lt; ceilometer.pipeline.SamplePipeline object at 0x7fa1741e3950 &gt; , &lt; ceilometer.pipeline.SamplePipeline object at 0x7fa1741e3a10 &gt; , &lt; ceilometer.pipeline.SamplePipeline object at 0x7fa1741e37d0 &gt; ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    (Pdb) self.pipeline_manager.pipelines[0].__dict__</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        'source': &lt; ceilometer.pipeline.SampleSource object at 0x7fa17405e050 &gt; ,</span></span><br><span class="line"><span class="string">        'sink': &lt; ceilometer.pipeline.SampleSink object at 0x7fa17405e350 &gt; ,</span></span><br><span class="line"><span class="string">        'name': 'notification_source:notification_sink'</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    (Pdb) self.pipeline_manager.pipelines[0].source.__dict__</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        'name': 'notification_source',</span></span><br><span class="line"><span class="string">        'cfg': &#123;</span></span><br><span class="line"><span class="string">            'interval': 3600,</span></span><br><span class="line"><span class="string">            'meters': ['instance', 'volume', 'image', 'snapshot', 'backup', 'ip.floating', 'router', 'network', 'subnet', 'account'],</span></span><br><span class="line"><span class="string">            'name': 'notification_source',</span></span><br><span class="line"><span class="string">            'sinks': ['notification_sink']</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        'interval': 3600,</span></span><br><span class="line"><span class="string">        'meters': ['instance', 'volume', 'image', 'snapshot', 'backup', 'ip.floating', 'router', 'network', 'subnet', 'account'],</span></span><br><span class="line"><span class="string">        'discovery': [],</span></span><br><span class="line"><span class="string">        'resources': [],</span></span><br><span class="line"><span class="string">        'sinks': ['notification_sink']</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    (Pdb) self.pipeline_manager.pipelines[0].sink.__dict__</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        'publishers': [ &lt; ceilometer.publisher.messaging.SampleNotifierPublisher object at 0x7fa17405e410 &gt; ],</span></span><br><span class="line"><span class="string">        'transformers': [],</span></span><br><span class="line"><span class="string">        'name': 'notification_sink',</span></span><br><span class="line"><span class="string">        'cfg': &#123;</span></span><br><span class="line"><span class="string">            'publishers': ['notifier://'],</span></span><br><span class="line"><span class="string">            'transformers': None,</span></span><br><span class="line"><span class="string">            'name': 'notification_sink'</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        'multi_publish': False,</span></span><br><span class="line"><span class="string">        'transformer_cfg': []</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self.pipeline_manager = pipeline.setup_pipeline()</span><br><span class="line">    self.event_pipeline_manager = pipeline.setup_event_pipeline()</span><br><span class="line"></span><br><span class="line">    self.transport = messaging.get_transport()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cfg.CONF.notification.workload_partitioning:</span><br><span class="line">        self.group_id = self.NOTIFICATION_NAMESPACE</span><br><span class="line">        self.partition_coordinator = coordination.PartitionCoordinator()</span><br><span class="line">        self.partition_coordinator.start()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># FIXME(sileht): endpoint uses the notification_topics option</span></span><br><span class="line">        <span class="comment"># and it should not because this is an oslo_messaging option</span></span><br><span class="line">        <span class="comment"># not a ceilometer. Until we have something to get the</span></span><br><span class="line">        <span class="comment"># notification_topics in another way, we must create a transport</span></span><br><span class="line">        <span class="comment"># to ensure the option has been registered by oslo_messaging.</span></span><br><span class="line">        messaging.get_notifier(self.transport, <span class="string">''</span>)</span><br><span class="line">        self.group_id = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 该函数里判断了是否支持工作负载，如果是则返回SamplePipelineTransportManager类实例替换掉</span></span><br><span class="line">		<span class="comment"># PipelineManager类实例，否则还是PipelineManager类实例</span></span><br><span class="line">	  <span class="comment"># 这两者的区别在于publisher函数实现是不一样的</span></span><br><span class="line">	  <span class="comment"># SamplePipelineTransportManager的在调用publisher函数时会再发到消息队列中去保存，之后会再取出来处理再发到gnocchi-api上</span></span><br><span class="line">		<span class="comment"># PipelineManager的则直接去发到gnocchi-api服务上去了</span></span><br><span class="line">    self.pipe_manager = self._get_pipe_manager(self.transport,</span><br><span class="line">                                               self.pipeline_manager)</span><br><span class="line">    self.event_pipe_manager = self._get_event_pipeline_manager(</span><br><span class="line">        self.transport)</span><br><span class="line"></span><br><span class="line">    self._configure_main_queue_listeners(self.pipe_manager,</span><br><span class="line">                                         self.event_pipe_manager)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cfg.CONF.notification.workload_partitioning:</span><br><span class="line">		......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cfg.CONF.notification.disable_non_metric_meters:</span><br><span class="line">        LOG.warning(_LW(<span class="string">'Non-metric meters may be collected. It is highly '</span></span><br><span class="line">                        <span class="string">'advisable to disable these meters using '</span></span><br><span class="line">                        <span class="string">'ceilometer.conf or the pipeline.yaml'</span>))</span><br><span class="line"></span><br><span class="line">    self.init_pipeline_refresh()</span><br></pre></td></tr></table></figure>
<p>以上的代码中的一些参数我都用pdb打印出来了，可以更加直观的感受，我们来逐行分析一下服务启动的过程：</p>
<ol>
<li><p>前 12 主要是一些参数的定义和初始化的工作</p>
</li>
<li><p>看下第 61 行和 62 行两部分，实现的逻辑是一样的，我们来分析一下 61 行：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_pipeline</span><span class="params">(transformer_manager=None)</span>:</span></span><br><span class="line">    <span class="string">"""Setup pipeline manager according to yaml config file."""</span></span><br><span class="line"></span><br><span class="line">    default = extension.ExtensionManager(<span class="string">'ceilometer.transformer'</span>)</span><br><span class="line">    cfg_file = cfg.CONF.pipeline_cfg_file</span><br><span class="line">    <span class="keyword">return</span> PipelineManager(cfg_file, transformer_manager <span class="keyword">or</span> default,</span><br><span class="line">                           SAMPLE_TYPE)</span><br></pre></td></tr></table></figure>
<ol>
<li><p>第4行加载了 ceilometer.transformer 命名空间中的插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ceilometer.transformer =</span><br><span class="line">    accumulator = ceilometer.transformer.accumulator:TransformerAccumulator</span><br><span class="line">    delta = ceilometer.transformer.conversions:DeltaTransformer</span><br><span class="line">    unit_conversion = ceilometer.transformer.conversions:ScalingTransformer</span><br><span class="line">    rate_of_change = ceilometer.transformer.conversions:RateOfChangeTransformer</span><br><span class="line">    aggregator = ceilometer.transformer.conversions:AggregatorTransformer</span><br><span class="line">    arithmetic = ceilometer.transformer.arithmetic:ArithmeticTransformer</span><br></pre></td></tr></table></figure>
</li>
<li><p>第 5 行的文件是 pipeline.yaml ，然后使用 PipelineManager 类进行初始化</p>
<p>我们来看下 PipelineManager 类初始化的内容，同样的我也加了 pdb 调试出来，更加直观：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PipelineManager</span><span class="params">(ConfigManagerBase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cfg_info, transformer_manager, p_type=SAMPLE_TYPE)</span>:</span></span><br><span class="line">        super(PipelineManager, self).__init__()</span><br><span class="line">        cfg = self.load_config(cfg_info)</span><br><span class="line"></span><br><span class="line">        self.pipelines = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="string">'sources'</span> <span class="keyword">in</span> cfg <span class="keyword">and</span> <span class="string">'sinks'</span> <span class="keyword">in</span> cfg):</span><br><span class="line">            <span class="keyword">raise</span> PipelineException(<span class="string">"Both sources &amp; sinks are required"</span>,</span><br><span class="line">                                    cfg)</span><br><span class="line">        LOG.info(_LI(<span class="string">'detected decoupled pipeline config format'</span>))</span><br><span class="line"></span><br><span class="line">        unique_names = set()</span><br><span class="line">        sources = []</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        pipeline.yaml</span></span><br><span class="line"><span class="string">            (Pdb) cfg.get('sources')</span></span><br><span class="line"><span class="string">            [&#123;</span></span><br><span class="line"><span class="string">                'interval': 3600,</span></span><br><span class="line"><span class="string">                'meters': ['instance', 'volume', 'image', 'snapshot', 'backup', 'ip.floating', 'router', 'network', 'subnet', 'account'],</span></span><br><span class="line"><span class="string">                'name': 'notification_source',</span></span><br><span class="line"><span class="string">                'sinks': ['notification_sink']</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">                'interval': 300,</span></span><br><span class="line"><span class="string">                'meters': ['poll.*', 'memory.usage', 'memory.util'],</span></span><br><span class="line"><span class="string">                'name': 'meter_source',</span></span><br><span class="line"><span class="string">                'sinks': ['meter_sink']</span></span><br><span class="line"><span class="string">            &#125;]</span></span><br><span class="line"><span class="string">        event_pipeline.yaml</span></span><br><span class="line"><span class="string">            (Pdb) cfg.get('sources')</span></span><br><span class="line"><span class="string">            [&#123;</span></span><br><span class="line"><span class="string">                'sinks': ['event_sink'],</span></span><br><span class="line"><span class="string">                'name': 'event_source',</span></span><br><span class="line"><span class="string">                'events': ['*', '!magnum.bay.metrics.update', '!compute.instance.exists', '!volume.exists', '!snapshot.exists']</span></span><br><span class="line"><span class="string">            &#125;]</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> cfg.get(<span class="string">'sources'</span>):</span><br><span class="line">            name = s.get(<span class="string">'name'</span>)</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">in</span> unique_names:</span><br><span class="line">                <span class="keyword">raise</span> PipelineException(<span class="string">"Duplicated source names: %s"</span> %</span><br><span class="line">                                        name, self)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                unique_names.add(name)</span><br><span class="line">                <span class="string">"""</span></span><br><span class="line"><span class="string">                pipeline.yaml</span></span><br><span class="line"><span class="string">                    (Pdb) sources</span></span><br><span class="line"><span class="string">                    [&lt;ceilometer.pipeline.SampleSource object at 0x7fa17405e050&gt;, &lt;ceilometer.pipeline.SampleSource object at 0x7fa17405e110&gt;, &lt;ceilometer.pipeline.SampleSource object at 0x7fa17405e090&gt;, &lt;ceilometer.pipeline.SampleSource object at 0x7fa17405e190&gt;, &lt;ceilometer.pipeline.SampleSource object at 0x7fa17405e250&gt;, &lt;ceilometer.pipeline.SampleSource object at 0x7fa17405e210&gt;, &lt;ceilometer.pipeline.SampleSource object at 0x7fa17405e310&gt;]</span></span><br><span class="line"><span class="string">                    (Pdb) sources[0].__dict__</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                        'name': 'notification_source',</span></span><br><span class="line"><span class="string">                        'cfg': &#123;</span></span><br><span class="line"><span class="string">                            'interval': 3600,</span></span><br><span class="line"><span class="string">                            'meters': ['instance', 'volume', 'image', 'snapshot', 'backup', 'ip.floating', 'router', 'network', 'subnet', 'account'],</span></span><br><span class="line"><span class="string">                            'name': 'notification_source',</span></span><br><span class="line"><span class="string">                            'sinks': ['notification_sink']</span></span><br><span class="line"><span class="string">                        &#125;,</span></span><br><span class="line"><span class="string">                        'interval': 3600,</span></span><br><span class="line"><span class="string">                        'meters': ['instance', 'volume', 'image', 'snapshot', 'backup', 'ip.floating', 'router', 'network', 'subnet', 'account'],</span></span><br><span class="line"><span class="string">                        'discovery': [],</span></span><br><span class="line"><span class="string">                        'resources': [],</span></span><br><span class="line"><span class="string">                        'sinks': ['notification_sink']</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                    (Pdb) sources[1].__dict__</span></span><br><span class="line"><span class="string">                    &#123;'name': 'meter_source', 'cfg': &#123;'interval': 300, 'meters': ['poll.*', 'memory.usage', 'memory.util'], 'name': 'meter_source', 'sinks': ['meter_sink']&#125;, 'interval': 300, 'meters': ['poll.*', 'memory.usage', 'memory.util'], 'discovery': [], 'resources': [], 'sinks': ['meter_sink']&#125;</span></span><br><span class="line"><span class="string">               </span></span><br><span class="line"><span class="string">                event_pipeline.yaml</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                        'cfg': &#123;</span></span><br><span class="line"><span class="string">                            'sinks': ['event_sink'],</span></span><br><span class="line"><span class="string">                            'name': 'event_source',</span></span><br><span class="line"><span class="string">                            'events': ['*', '!magnum.bay.metrics.update', '!compute.instance.exists', '!volume.exists', '!snapshot.exists']</span></span><br><span class="line"><span class="string">                        &#125;,</span></span><br><span class="line"><span class="string">                        'events': ['*', '!magnum.bay.metrics.update', '!compute.instance.exists', '!volume.exists', '!snapshot.exists'],</span></span><br><span class="line"><span class="string">                        'name': 'event_source',</span></span><br><span class="line"><span class="string">                        'sinks': ['event_sink']</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                """</span></span><br><span class="line">                sources.append(p_type[<span class="string">'source'</span>](s))</span><br><span class="line">        unique_names.clear()</span><br><span class="line"></span><br><span class="line">        sinks = &#123;&#125;</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        pipeline.yaml</span></span><br><span class="line"><span class="string">            (Pdb) cfg.get('sinks')</span></span><br><span class="line"><span class="string">            [&#123;</span></span><br><span class="line"><span class="string">                'publishers': ['notifier://'],</span></span><br><span class="line"><span class="string">                'transformers': None,</span></span><br><span class="line"><span class="string">                'name': 'notification_sink'</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">                'publishers': ['notifier://'],</span></span><br><span class="line"><span class="string">                'transformers': None,</span></span><br><span class="line"><span class="string">                'name': 'meter_sink'</span></span><br><span class="line"><span class="string">            &#125;]</span></span><br><span class="line"><span class="string">        event_pipeline.yaml</span></span><br><span class="line"><span class="string">            (Pdb) cfg.get('sinks')</span></span><br><span class="line"><span class="string">            [&#123;'publishers': ['notifier://'], 'transformers': None, 'name': 'event_sink'&#125;]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> cfg.get(<span class="string">'sinks'</span>):</span><br><span class="line">            name = s.get(<span class="string">'name'</span>)</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">in</span> unique_names:</span><br><span class="line">                <span class="keyword">raise</span> PipelineException(<span class="string">"Duplicated sink names: %s"</span> %</span><br><span class="line">                                        name, self)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                unique_names.add(name)</span><br><span class="line">                <span class="string">"""</span></span><br><span class="line"><span class="string">                (Pdb) sinks</span></span><br><span class="line"><span class="string">                &#123;'network_sink': &lt;ceilometer.pipeline.SampleSink object at 0x7fa1741e3350&gt;, 'volume_sink': &lt;ceilometer.pipeline.SampleSink object at 0x7fa1741dbfd0&gt;, 'disk_sink': &lt;ceilometer.pipeline.SampleSink object at 0x7fa1741dbc50&gt;, 'cpu_delta_sink': &lt;ceilometer.pipeline.SampleSink object at 0x7fa17405e290&gt;, 'cpu_sink': &lt;ceilometer.pipeline.SampleSink object at 0x7fa17405e390&gt;, 'meter_sink': &lt;ceilometer.pipeline.SampleSink object at 0x7fa17405e3d0&gt;, 'notification_sink': &lt;ceilometer.pipeline.SampleSink object at 0x7fa17405e350&gt;&#125;</span></span><br><span class="line"><span class="string">                (Pdb) sinks.get('network_sink').__dict__</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    'publishers': [ &lt; ceilometer.publisher.messaging.SampleNotifierPublisher object at 0x7fa1741e3890 &gt; ],</span></span><br><span class="line"><span class="string">                    'transformers': [ &lt; ceilometer.transformer.conversions.RateOfChangeTransformer object at 0x7fa1741e3710 &gt; ],</span></span><br><span class="line"><span class="string">                    'name': 'network_sink',</span></span><br><span class="line"><span class="string">                    'cfg': &#123;</span></span><br><span class="line"><span class="string">                        'publishers': ['notifier://'],</span></span><br><span class="line"><span class="string">                        'transformers': [&#123;</span></span><br><span class="line"><span class="string">                            'name': 'rate_of_change',</span></span><br><span class="line"><span class="string">                            'parameters': &#123;</span></span><br><span class="line"><span class="string">                                'source': &#123;</span></span><br><span class="line"><span class="string">                                    'map_from': &#123;</span></span><br><span class="line"><span class="string">                                        'name': 'network\\.(incoming|outgoing)\\.(bytes|packets)',</span></span><br><span class="line"><span class="string">                                        'unit': '(B|packet)'</span></span><br><span class="line"><span class="string">                                    &#125;</span></span><br><span class="line"><span class="string">                                &#125;,</span></span><br><span class="line"><span class="string">                                'target': &#123;</span></span><br><span class="line"><span class="string">                                    'map_to': &#123;</span></span><br><span class="line"><span class="string">                                        'name': 'network.\\1.\\2.rate',</span></span><br><span class="line"><span class="string">                                        'unit': '\\1/s'</span></span><br><span class="line"><span class="string">                                    &#125;,</span></span><br><span class="line"><span class="string">                                    'type': 'gauge'</span></span><br><span class="line"><span class="string">                                &#125;</span></span><br><span class="line"><span class="string">                            &#125;</span></span><br><span class="line"><span class="string">                        &#125;],</span></span><br><span class="line"><span class="string">                        'name': 'network_sink'</span></span><br><span class="line"><span class="string">                    &#125;,</span></span><br><span class="line"><span class="string">                    'multi_publish': False,</span></span><br><span class="line"><span class="string">                    'transformer_cfg': [&#123;</span></span><br><span class="line"><span class="string">                        'name': 'rate_of_change',</span></span><br><span class="line"><span class="string">                        'parameters': &#123;</span></span><br><span class="line"><span class="string">                            'source': &#123;</span></span><br><span class="line"><span class="string">                                'map_from': &#123;</span></span><br><span class="line"><span class="string">                                    'name': 'network\\.(incoming|outgoing)\\.(bytes|packets)',</span></span><br><span class="line"><span class="string">                                    'unit': '(B|packet)'</span></span><br><span class="line"><span class="string">                                &#125;</span></span><br><span class="line"><span class="string">                            &#125;,</span></span><br><span class="line"><span class="string">                            'target': &#123;</span></span><br><span class="line"><span class="string">                                'map_to': &#123;</span></span><br><span class="line"><span class="string">                                    'name': 'network.\\1.\\2.rate',</span></span><br><span class="line"><span class="string">                                    'unit': '\\1/s'</span></span><br><span class="line"><span class="string">                                &#125;,</span></span><br><span class="line"><span class="string">                                'type': 'gauge'</span></span><br><span class="line"><span class="string">                            &#125;</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                    &#125;]</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">                """</span></span><br><span class="line">                sinks[s[<span class="string">'name'</span>]] = p_type[<span class="string">'sink'</span>](s, transformer_manager)</span><br><span class="line">        unique_names.clear()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> source <span class="keyword">in</span> sources:</span><br><span class="line">            source.check_sinks(sinks)</span><br><span class="line">            <span class="keyword">for</span> target <span class="keyword">in</span> source.sinks:</span><br><span class="line">                pipe = p_type[<span class="string">'pipeline'</span>](source, sinks[target])</span><br><span class="line">                <span class="keyword">if</span> pipe.name <span class="keyword">in</span> unique_names:</span><br><span class="line">                    <span class="keyword">raise</span> PipelineException(</span><br><span class="line">                        <span class="string">"Duplicate pipeline name: %s. Ensure pipeline"</span></span><br><span class="line">                        <span class="string">" names are unique. (name is the source and sink"</span></span><br><span class="line">                        <span class="string">" names combined)"</span> % pipe.name, cfg)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    unique_names.add(pipe.name)</span><br><span class="line">                    self.pipelines.append(pipe)</span><br><span class="line">        unique_names.clear()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">publisher</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Build a new Publisher for these manager pipelines.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param context: The context.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> PublishContext(self.pipelines)</span><br></pre></td></tr></table></figure>
<ol>
<li><p>第 37-79 行是取出 pipeline.yaml 文件中的 sources然后经过p_type[‘source’]类的初始化，再放进 sources 对象里，那么p_type[‘source’]类是什么呢，如下所示，代表SampleSource类，这个类里面就是解析下配置文件中每个资源的采集周期interval和采集插件 meters</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SAMPLE_TYPE = &#123;&apos;pipeline&apos;: SamplePipeline,</span><br><span class="line">               &apos;source&apos;: SampleSource,</span><br><span class="line">               &apos;sink&apos;: SampleSink&#125;</span><br><span class="line">EVENT_TYPE = &#123;&apos;pipeline&apos;: EventPipeline,</span><br><span class="line">              &apos;source&apos;: EventSource,</span><br><span class="line">              &apos;sink&apos;: EventSink&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>同样的，第 98-158 行是为了取出配置文件中的 sinks 对象，使用SampleSink类进行初始化，这个类本身没有 init 函数，所以使用此类的基类进行初始化，即 Sink 类</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sink</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cfg, transformer_manager)</span>:</span></span><br><span class="line">        self.cfg = cfg</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.name = cfg[<span class="string">'name'</span>]</span><br><span class="line">            <span class="comment"># It's legal to have no transformer specified</span></span><br><span class="line">            self.transformer_cfg = cfg.get(<span class="string">'transformers'</span>) <span class="keyword">or</span> []</span><br><span class="line">        <span class="keyword">except</span> KeyError <span class="keyword">as</span> err:</span><br><span class="line">            <span class="keyword">raise</span> PipelineException(</span><br><span class="line">                <span class="string">"Required field %s not specified"</span> % err.args[<span class="number">0</span>], cfg)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cfg.get(<span class="string">'publishers'</span>):</span><br><span class="line">            <span class="keyword">raise</span> PipelineException(<span class="string">"No publisher specified"</span>, cfg)</span><br><span class="line"></span><br><span class="line">        self.publishers = []</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> cfg[<span class="string">'publishers'</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'://'</span> <span class="keyword">not</span> <span class="keyword">in</span> p:</span><br><span class="line">                <span class="comment"># Support old format without URL</span></span><br><span class="line">                p = p + <span class="string">"://"</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.publishers.append(publisher.get_publisher(p,</span><br><span class="line">                                                               self.NAMESPACE))</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                LOG.exception(_(<span class="string">"Unable to load publisher %s"</span>), p)</span><br><span class="line"></span><br><span class="line">        self.multi_publish = <span class="keyword">True</span> <span class="keyword">if</span> len(self.publishers) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="keyword">False</span></span><br><span class="line">        self.transformers = self._setup_transformers(cfg, transformer_manager)</span><br></pre></td></tr></table></figure>
<p>这里面主要看下第 22 行和第 28 行，分析：</p>
<ol>
<li>第 22 行调用了get_publisher方法，这个里面主要是加载ceilometer.publisher命名空间中的notifier插件</li>
<li>第 28 行调用了_setup_transformers 方法，其中transformer_manager参数是ceilometer-transformer 中的所有插件，方法里面主要实现的是，遍历配置文件中的 sinks ，然后根据transformer 中的 name 来生成插件对象，比如name 是rate_of_change的话，即代表生成在ceilometer-transformer中的rate_of_change插件，然后放到transformers列表里</li>
</ol>
</li>
<li><p>我们接着来分析PipelineManager，然后第 160-185 行，就是遍历在以上分析配置文件之后存储的值 sources 和 sinks，拿出 sources 中每个 source，然后再拿出 source 中的每个 sink，使用SamplePipeline类初始化之后，放进self.pipelines列表，该类没有 init 方法，所以调用基类Pipeline</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@six.add_metaclass(abc.ABCMeta)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Represents a coupling between a sink and a corresponding source."""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, source, sink)</span>:</span></span><br><span class="line">        self.source = source</span><br><span class="line">        self.sink = sink</span><br><span class="line">        self.name = str(self)</span><br></pre></td></tr></table></figure>
</li>
<li><p>最终在对象存储的数据是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pipeline.yaml</span><br><span class="line">    (Pdb) self.pipelines</span><br><span class="line">    [&lt;ceilometer.pipeline.SamplePipeline object at 0x7fa1741e3ad0&gt;, &lt;ceilometer.pipeline.SamplePipeline object at 0x7fa1741e3290&gt;, &lt;ceilometer.pipeline.SamplePipeline object at 0x7fa1741e3b90&gt;, &lt;ceilometer.pipeline.SamplePipeline object at 0x7fa1741e39d0&gt;]</span><br><span class="line">    (Pdb) self.pipelines[0].__dict__</span><br><span class="line">    &#123;&apos;source&apos;: &lt;ceilometer.pipeline.SampleSource object at 0x7fc20c082650&gt;, &apos;sink&apos;: &lt;ceilometer.pipeline.SampleSink object at 0x7fc20c082050&gt;, &apos;name&apos;: &apos;notification_source:notification_sink&apos;&#125;</span><br><span class="line">event_pipeline.yaml</span><br><span class="line">    (Pdb) self.pipelines</span><br><span class="line">    [&lt;ceilometer.pipeline.EventPipeline object at 0x7fa1741e3d10&gt;]</span><br><span class="line">    (Pdb) self.pipelines[0].__dict__</span><br><span class="line">    &#123;&apos;source&apos;: &lt;ceilometer.pipeline.EventSource object at 0x7fa1741e3dd0&gt;, &apos;sink&apos;: &lt;ceilometer.pipeline.EventSink object at 0x7fa1741e3ed0&gt;, &apos;name&apos;: &apos;event:event_source:event_sink&apos;&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>再继续 NotificationService.run 方法，61 行已经分析完毕，62 行和 61 行逻辑一致</p>
</li>
<li><p>第 79-82 行的分析见代码中</p>
</li>
<li><p>最终的是第 89 行的代码，调用了 _configure_main_queue_listeners 方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_configure_main_queue_listeners</span><span class="params">(self, pipe_manager,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    event_pipe_manager)</span>:</span></span><br><span class="line">    <span class="string">""""""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    (Pdb) notification_manager.extensions[0].__dict__</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        'obj': &lt; ceilometer.network.notifications.Firewall object at 0x7fa1741e3d50 &gt; ,</span></span><br><span class="line"><span class="string">        'entry_point': EntryPoint.parse('network.services.firewall = ceilometer.network.notifications:Firewall'),</span></span><br><span class="line"><span class="string">        'name': 'network.services.firewall',</span></span><br><span class="line"><span class="string">        'plugin': &lt; class 'ceilometer.network.notifications.Firewall' &gt;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    notification_manager = self._get_notifications_manager(pipe_manager)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> list(notification_manager):</span><br><span class="line">        LOG.warning(_(<span class="string">'Failed to load any notification handlers for %s'</span>),</span><br><span class="line">                    self.NOTIFICATION_NAMESPACE)</span><br><span class="line">       </span><br><span class="line">    ack_on_error = cfg.CONF.notification.ack_on_event_error</span><br><span class="line">       </span><br><span class="line">    endpoints = []</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    (Pdb) endpoints</span></span><br><span class="line"><span class="string">    [&lt;ceilometer.event.endpoint.EventsNotificationEndpoint object at 0x2f5f610&gt;]</span></span><br><span class="line"><span class="string">    (Pdb) endpoints[0].__dict__</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        'event_converter': &lt; ceilometer.event.converter.NotificationEventsConverter object at 0x7fa17467c050 &gt; ,</span></span><br><span class="line"><span class="string">        'manager': &lt; ceilometer.pipeline.PipelineManager object at 0x2f6d550 &gt;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    (Pdb) endpoints[0].manager.__dict__</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        'cfg_mtime': 1592551325.2732353,</span></span><br><span class="line"><span class="string">        'cfg_hash': 'c01e8ee1c40b66314628536afcd48a39',</span></span><br><span class="line"><span class="string">        'cfg_loc': '/etc/ceilometer/event_pipeline.yaml',</span></span><br><span class="line"><span class="string">        'pipelines': [ &lt; ceilometer.pipeline.EventPipeline object at 0x7fa1741e3d10 &gt; ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    endpoints.append(</span><br><span class="line">        event_endpoint.EventsNotificationEndpoint(event_pipe_manager))</span><br><span class="line">       </span><br><span class="line">    targets = []</span><br><span class="line">    <span class="keyword">for</span> ext <span class="keyword">in</span> notification_manager:</span><br><span class="line">        handler = ext.obj</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        (Pdb) cfg.CONF.oslo_messaging_notifications.topics</span></span><br><span class="line"><span class="string">        ['notifications']</span></span><br><span class="line"><span class="string">        (Pdb) cfg.CONF.notification.disable_non_metric_meters</span></span><br><span class="line"><span class="string">        True</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">       </span><br><span class="line">        <span class="keyword">if</span> (cfg.CONF.notification.disable_non_metric_meters <span class="keyword">and</span></span><br><span class="line">                isinstance(handler, base.NonMetricNotificationBase)):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        LOG.debug(<span class="string">'Event types from %(name)s: %(type)s'</span></span><br><span class="line">                  <span class="string">' (ack_on_error=%(error)s)'</span>,</span><br><span class="line">                  &#123;<span class="string">'name'</span>: ext.name,</span><br><span class="line">                   <span class="string">'type'</span>: <span class="string">', '</span>.join(handler.event_types),</span><br><span class="line">                   <span class="string">'error'</span>: ack_on_error&#125;)</span><br><span class="line">        <span class="comment"># NOTE(gordc): this could be a set check but oslo_messaging issue</span></span><br><span class="line">        <span class="comment"># https://bugs.launchpad.net/oslo.messaging/+bug/1398511</span></span><br><span class="line">        <span class="comment"># This ensures we don't create multiple duplicate consumers.</span></span><br><span class="line">        <span class="keyword">for</span> new_tar <span class="keyword">in</span> handler.get_targets(cfg.CONF):</span><br><span class="line">            <span class="keyword">if</span> new_tar <span class="keyword">not</span> <span class="keyword">in</span> targets:</span><br><span class="line">                targets.append(new_tar)</span><br><span class="line">        endpoints.append(handler)</span><br><span class="line">       </span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    (Pdb) endpoints</span></span><br><span class="line"><span class="string">    [&lt;ceilometer.event.endpoint.EventsNotificationEndpoint object at 0x2f5f610&gt;,</span></span><br><span class="line"><span class="string">     &lt;ceilometer.ipmi.notifications.ironic.TemperatureSensorNotification object at 0x7fa1741f6810&gt;,</span></span><br><span class="line"><span class="string">      &lt;ceilometer.telemetry.notifications.TelemetryIpc object at 0x7fa17424d410&gt;,</span></span><br><span class="line"><span class="string">       &lt;ceilometer.ipmi.notifications.ironic.FanSensorNotification object at 0x7fa17424d8d0&gt;,</span></span><br><span class="line"><span class="string">        &lt;ceilometer.ipmi.notifications.ironic.VoltageSensorNotification object at 0x7fa1742461d0&gt;,</span></span><br><span class="line"><span class="string">         &lt;ceilometer.meter.notifications.ProcessMeterNotifications object at 0x7fa17424dc90&gt;,</span></span><br><span class="line"><span class="string">          &lt;ceilometer.ipmi.notifications.ironic.CurrentSensorNotification object at 0x7fa17467ddd0&gt;]</span></span><br><span class="line"><span class="string">    (Pdb) cfg.CONF.notification.messaging_urls</span></span><br><span class="line"><span class="string">    ['rabbit://rabbitmq:I5dZs2KN@rabbitmq.openstack.svc.cluster.local:5672/']</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    urls = cfg.CONF.notification.messaging_urls <span class="keyword">or</span> [<span class="keyword">None</span>]</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        transport = messaging.get_transport(url)</span><br><span class="line">        <span class="comment"># NOTE(gordc): ignore batching as we want pull</span></span><br><span class="line">        <span class="comment"># to maintain sequencing as much as possible.</span></span><br><span class="line">        listener = messaging.get_batch_notification_listener(</span><br><span class="line">            transport, targets, endpoints)</span><br><span class="line">        listener.start()</span><br><span class="line">        self.listeners.append(listener)</span><br></pre></td></tr></table></figure>
<ol>
<li><p>第 13 行，里面主要是加载了ceilometer.notification命名空间的插件，并将pipe_manager作为自动加载extension时传入的参数</p>
</li>
<li><p>第 37 行，定义了当其余组件触发事件的时候的 endpoints，此处我们稍后分析</p>
</li>
<li><p>第 40-64 行，遍历刚在 13 行加载的插件，里面大概的逻辑是，先判断该插件的对象是不是 NonMetricNotificationBase 类的子类，如果是的话，直接跳过，如果不是的话，调用插件的 get-target 方法，生成oslo_messaging.Target实例，topic 是 notifications，然后将插件也放进 endpoints 中</p>
</li>
<li><p>第 78 行到最后就是开启服务的最后了，首先我们看下这个 urls 是什么：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) cfg.CONF.notification.messaging_urls</span><br><span class="line">[&apos;rabbit://rabbitmq:I5dZs2KN@rabbitmq.openstack.svc.cluster.local:5672/&apos;]</span><br></pre></td></tr></table></figure>
<p>使用 rabbitmq 通信，然后在 83 行调用了get_batch_notification_listener方法，方法中定义接收消息的 target 类型，已经消息过来之后的 endpoints ，这个 endpoints 我们知道里面有两中类型的数据，一种是采集的数据的收集，还有一种是 event 事件的收集，我们看下这个里面发生了什么</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_batch_notification_listener</span><span class="params">(transport, targets, endpoints,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    allow_requeue=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    batch_size=<span class="number">1</span>, batch_timeout=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        (Pdb) a</span></span><br><span class="line"><span class="string">        transport = &lt;oslo_messaging.transport.Transport object at 0x7fab5c6a9190&gt;</span></span><br><span class="line"><span class="string">        targets = [&lt;Target exchange=ironic, topic=notifications&gt;, &lt;Target exchange=ceilometer, topic=notifications&gt;, &lt;Target exchange=nova, topic=notifications&gt;, &lt;Target exchange=cinder, topic=notifications&gt;, &lt;Target exchange=glance, topic=notifications&gt;, &lt;Target exchange=neutron, topic=notifications&gt;, &lt;Target exchange=heat, topic=notifications&gt;, &lt;Target exchange=keystone, topic=notifications&gt;, &lt;Target exchange=sahara, topic=notifications&gt;, &lt;Target exchange=trove, topic=notifications&gt;, &lt;Target exchange=zaqar, topic=notifications&gt;, &lt;Target exchange=swift, topic=notifications&gt;, &lt;Target exchange=magnum, topic=notifications&gt;, &lt;Target exchange=central, topic=notifications&gt;]</span></span><br><span class="line"><span class="string">        endpoints = [&lt;ceilometer.event.endpoint.EventsNotificationEndpoint object at 0x7fab5c258c90&gt;, &lt;ceilometer.ipmi.notifications.ironic.TemperatureSensorNotification object at 0x7fab5c2a9610&gt;, &lt;ceilometer.telemetry.notifications.TelemetryIpc object at 0x7fab5c2b8110&gt;, &lt;ceilometer.ipmi.notifications.ironic.FanSensorNotification object at 0x7fab5c2b8510&gt;, &lt;ceilometer.ipmi.notifications.ironic.VoltageSensorNotification object at 0x7fab5c2b8810&gt;, &lt;ceilometer.meter.notifications.ProcessMeterNotifications object at 0x7fab5c2b8a90&gt;, &lt;ceilometer.ipmi.notifications.ironic.CurrentSensorNotification object at 0x7fab5c6be210&gt;]</span></span><br><span class="line"><span class="string">        allow_requeue = False</span></span><br><span class="line"><span class="string">        batch_size = 1</span></span><br><span class="line"><span class="string">        batch_timeout = None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> oslo_messaging.get_batch_notification_listener(</span><br><span class="line">        transport, targets, endpoints, executor=<span class="string">'threading'</span>,</span><br><span class="line">        allow_requeue=allow_requeue,</span><br><span class="line">        batch_size=batch_size, batch_timeout=batch_timeout)</span><br></pre></td></tr></table></figure>
<p>实际上调用还是oslo_messaging.get_batch_notification_listener 我们继续往里分析</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_batch_notification_listener</span><span class="params">(transport, targets, endpoints,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    executor=<span class="string">'blocking'</span>, serializer=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    allow_requeue=False, pool=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    batch_size=None, batch_timeout=None)</span>:</span></span><br><span class="line">    dispatcher = notify_dispatcher.BatchNotificationDispatcher(</span><br><span class="line">        endpoints, serializer)</span><br><span class="line">    <span class="keyword">return</span> BatchNotificationServer(</span><br><span class="line">        transport, targets, dispatcher, executor, allow_requeue, pool,</span><br><span class="line">        batch_size, batch_timeout</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<p>看下BatchNotificationDispatcher的实现，没有 init 方法，调用基类NotificationDispatcher的 init 方法，即：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PRIORITIES = [<span class="string">'audit'</span>, <span class="string">'debug'</span>, <span class="string">'info'</span>, <span class="string">'warn'</span>, <span class="string">'error'</span>, <span class="string">'critical'</span>, <span class="string">'sample'</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationDispatcher</span><span class="params">(dispatcher.DispatcherBase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, endpoints, serializer)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.endpoints = endpoints</span><br><span class="line">        self.serializer = serializer <span class="keyword">or</span> msg_serializer.NoOpSerializer()</span><br><span class="line"></span><br><span class="line">        self._callbacks_by_priority = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> endpoint, prio <span class="keyword">in</span> itertools.product(endpoints, PRIORITIES):</span><br><span class="line">            <span class="keyword">if</span> hasattr(endpoint, prio):</span><br><span class="line">                method = getattr(endpoint, prio)</span><br><span class="line">                screen = getattr(endpoint, <span class="string">'filter_rule'</span>, <span class="keyword">None</span>)</span><br><span class="line">                self._callbacks_by_priority.setdefault(prio, []).append(</span><br><span class="line">                    (screen, method))</span><br></pre></td></tr></table></figure>
<p>这里用到了itertools.product（A，B），这个方法返回A、B中的元素的笛卡尔积的元组，以此遍历，如果某个 endpoint 中实现了此 prio 的属性，如果存在的话，即存进_callbacks_by_priority，大概格式是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'sample'</span>: [</span><br><span class="line">                        ( &lt; oslo_messaging.notify.filter.NotificationFilter object at <span class="number">0x7ff14c254590</span> &gt; , &lt; bound method TemperatureSensorNotification.sample of &lt; ceilometer.ipmi.notifications.ironic.TemperatureSensorNotification object at <span class="number">0x7ff14c254550</span> &gt;&gt; ), </span><br><span class="line">                        ( &lt; oslo_messaging.notify.filter.NotificationFilter object at <span class="number">0x7ff14c260590</span> &gt; , &lt; bound method TelemetryIpc.sample of &lt; ceilometer.telemetry.notifications.TelemetryIpc object at <span class="number">0x7ff14c260150</span> &gt;&gt; )]</span><br></pre></td></tr></table></figure>
<p>列表中元祖格式（screen,method），其中 screen 是插件类的filter_rule属性，以TelemetryIpc为例，NotificationBase是其基类：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@six.add_metaclass(abc.ABCMeta)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationBase</span><span class="params">(PluginBase)</span>:</span></span><br><span class="line">    <span class="string">"""Base class for plugins that support the notification API."""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, manager)</span>:</span></span><br><span class="line">        super(NotificationBase, self).__init__()</span><br><span class="line">        <span class="comment"># NOTE(gordc): this is filter rule used by oslo.messaging to dispatch</span></span><br><span class="line">        <span class="comment"># messages to an endpoint.</span></span><br><span class="line">        <span class="keyword">if</span> self.event_types:</span><br><span class="line">            self.filter_rule = oslo_messaging.NotificationFilter(</span><br><span class="line">                event_type=<span class="string">'|'</span>.join(self.event_types))</span><br><span class="line">        self.manager = manager</span><br></pre></td></tr></table></figure>
<p>NotificationFilter是用来筛选 notification 服务接收到的消息的，可以根据 context,publisher_id, event_type, metadata and payload来筛选</p>
<p>我们再回到get_batch_notification_listener，dispatcher分析完了之后，下面就是BatchNotificationServer类的实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">继承关系</span><br><span class="line">BatchNotificationServer---&gt;NotificationServerBase---&gt;MessageHandlingServer</span><br></pre></td></tr></table></figure>
<p>这里面的初始化就是简单的定义一些参数，返回 listen 对象</p>
<p>然后_configure_main_queue_listeners方法的第 83 行调用了 listen.start，这里就是调用MessageHandlingServer的 start 方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ordered(reset_after='stop')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self, override_pool_size=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self._started:</span><br><span class="line">        LOG.warning(<span class="string">'The server has already been started. Ignoring '</span></span><br><span class="line">                    <span class="string">'the redundant call to start().'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">           </span><br><span class="line">    self._started = <span class="keyword">True</span></span><br><span class="line">           </span><br><span class="line">    executor_opts = &#123;&#125;</span><br><span class="line">           </span><br><span class="line">    <span class="keyword">if</span> self.executor_type <span class="keyword">in</span> (<span class="string">"threading"</span>, <span class="string">"eventlet"</span>):</span><br><span class="line">        executor_opts[<span class="string">"max_workers"</span>] = (</span><br><span class="line">            override_pool_size <span class="keyword">or</span> self.conf.executor_thread_pool_size</span><br><span class="line">        )</span><br><span class="line">    self._work_executor = self._executor_cls(**executor_opts)</span><br><span class="line">           </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.listener = self._create_listener()</span><br><span class="line">    <span class="keyword">except</span> driver_base.TransportDriverError <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="keyword">raise</span> ServerListenError(self.target, ex)</span><br><span class="line">           </span><br><span class="line">    self.listener.start(self._on_incoming)</span><br></pre></td></tr></table></figure>
<p>这里主要看下 19 行和 23 行，第 19 行调用了_create_listener，实际上调用的是NotificationServerBase的方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_create_listener</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.transport._listen_for_notifications(</span><br><span class="line">        self._targets_priorities, self._pool, self._batch_size,</span><br><span class="line">        self._batch_timeout</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<p>我们看到这里又调用了_listen_for_notifications</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_listen_for_notifications</span><span class="params">(self, targets_and_priorities, pool,</span></span></span><br><span class="line"><span class="function"><span class="params">                              batch_size, batch_timeout)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> target, priority <span class="keyword">in</span> targets_and_priorities:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> target.topic:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.InvalidTarget(<span class="string">'A target must have '</span></span><br><span class="line">                                           <span class="string">'topic specified'</span>,</span><br><span class="line">                                           target)</span><br><span class="line">    <span class="keyword">return</span> self._driver.listen_for_notifications(</span><br><span class="line">        targets_and_priorities, pool, batch_size, batch_timeout</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<p>继续往里分析</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listen_for_notifications</span><span class="params">(self, targets_and_priorities, pool,</span></span></span><br><span class="line"><span class="function"><span class="params">                             batch_size, batch_timeout)</span>:</span></span><br><span class="line">    conn = self._get_connection(rpc_common.PURPOSE_LISTEN)</span><br><span class="line">           </span><br><span class="line">    listener = NotificationAMQPListener(self, conn)</span><br><span class="line">    <span class="keyword">for</span> target, priority <span class="keyword">in</span> targets_and_priorities:</span><br><span class="line">        conn.declare_topic_consumer(</span><br><span class="line">            exchange_name=self._get_exchange(target),</span><br><span class="line">            topic=<span class="string">'%s.%s'</span> % (target.topic, priority),</span><br><span class="line">            callback=listener, queue_name=pool)</span><br><span class="line">    <span class="keyword">return</span> base.PollStyleListenerAdapter(listener, batch_size,</span><br><span class="line">                                         batch_timeout)</span><br></pre></td></tr></table></figure>
<p>这段代码主要是为了在要监听的队列上创建消费者进行监听，并初始化PollStyleListenerAdapter类实例并返回</p>
<p>PollStyleListenerAdapter类对象初始化时会生成一个线程对象：</p>
<p>File：oslo_messaging/_drivers/base.py:PollStyleListenerAdapter.<strong><strong>init</strong></strong></p>
<p>self._listen_thread = threading.Thread(target=self.____runner)</p>
<p>然后调用start后就会生成一个线程运行___runner函数，该函数主要功能是不断的去获取消息，并通过调用_process_incoming函数来处理消息</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PollStyleListenerAdapter</span><span class="params">(Listener)</span>:</span></span><br><span class="line">    <span class="string">"""A Listener that uses a PollStyleListener for message transfer. A</span></span><br><span class="line"><span class="string">    dedicated thread is created to do message polling.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, poll_style_listener, batch_size, batch_timeout)</span>:</span></span><br><span class="line">        super(PollStyleListenerAdapter, self).__init__(</span><br><span class="line">            batch_size, batch_timeout, poll_style_listener.prefetch_size</span><br><span class="line">        )</span><br><span class="line">        self._poll_style_listener = poll_style_listener</span><br><span class="line">        self._listen_thread = threading.Thread(target=self._runner)</span><br><span class="line">        self._listen_thread.daemon = <span class="keyword">True</span></span><br><span class="line">        self._started = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self, on_incoming_callback)</span>:</span></span><br><span class="line">        super(PollStyleListenerAdapter, self).start(on_incoming_callback)</span><br><span class="line">        self._started = <span class="keyword">True</span></span><br><span class="line">        self._listen_thread.start()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @excutils.forever_retry_uncaught_exceptions</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_runner</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self._started:</span><br><span class="line">            incoming = self._poll_style_listener.poll(</span><br><span class="line">                batch_size=self.batch_size, batch_timeout=self.batch_timeout)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> incoming:</span><br><span class="line">                self.on_incoming_callback(incoming)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># listener is stopped but we need to process all already consumed</span></span><br><span class="line">        <span class="comment"># messages</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            incoming = self._poll_style_listener.poll(</span><br><span class="line">                batch_size=self.batch_size, batch_timeout=self.batch_timeout)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> incoming:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            self.on_incoming_callback(incoming)</span><br></pre></td></tr></table></figure>
<p>我们看到在MessageHandlingServer的 start 方法中的最后一行是 self.listener.start(self._on_incoming) 这里调用的就是上述代码中的 start，启动之后调用 runner，然后通过poll 不断从队列中取出数据，取出之后用self.on_incoming_callback(incoming)处理，即MessageHandlingServer中的self.__on_incoming处理</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_on_incoming</span><span class="params">(self, incoming)</span>:</span></span><br><span class="line">    <span class="string">"""Handles on_incoming event</span></span><br><span class="line"><span class="string">           </span></span><br><span class="line"><span class="string">    :param incoming: incoming request.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self._work_executor.submit(self._process_incoming, incoming)</span><br></pre></td></tr></table></figure>
<p>我们看到这边实际使用的是self._process_incoming来处理，即采用BatchNotificationServer类中的self.__process_incoming处理</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BatchNotificationServer</span><span class="params">(NotificationServerBase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_process_incoming</span><span class="params">(self, incoming)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            not_processed_messages = self.dispatcher.dispatch(incoming)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">                        ......</span><br></pre></td></tr></table></figure>
<p>可以看到该处理函数会调用dispatcher对象来分派消息，这里的self.dispatcher，就是之前使用NotificationDispatcher初始化后传过来的参数，即调用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BatchNotificationDispatcher</span><span class="params">(NotificationDispatcher)</span>:</span></span><br><span class="line">    <span class="string">"""A message dispatcher which understands Notification messages.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A MessageHandlingServer is constructed by passing a callable dispatcher</span></span><br><span class="line"><span class="string">    which is invoked with a list of message dictionaries each time 'batch_size'</span></span><br><span class="line"><span class="string">    messages are received or 'batch_timeout' seconds is reached.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, incoming)</span>:</span></span><br><span class="line">        <span class="string">"""Dispatch notification messages to the appropriate endpoint method.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        messages_grouped = itertools.groupby(sorted(</span><br><span class="line">            (self._extract_user_message(m) <span class="keyword">for</span> m <span class="keyword">in</span> incoming),</span><br><span class="line">            key=operator.itemgetter(<span class="number">0</span>)), operator.itemgetter(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        requeues = set()</span><br><span class="line">        <span class="keyword">for</span> priority, messages <span class="keyword">in</span> messages_grouped:</span><br><span class="line">            __, raw_messages, messages = six.moves.zip(*messages)</span><br><span class="line">            <span class="keyword">if</span> priority <span class="keyword">not</span> <span class="keyword">in</span> PRIORITIES:</span><br><span class="line">                LOG.warning(<span class="string">'Unknown priority "%s"'</span>, priority)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> screen, callback <span class="keyword">in</span> self._callbacks_by_priority.get(priority,</span><br><span class="line">                                                                    []):</span><br><span class="line">                <span class="keyword">if</span> screen:</span><br><span class="line">                    filtered_messages = [message <span class="keyword">for</span> message <span class="keyword">in</span> messages</span><br><span class="line">                                         <span class="keyword">if</span> screen.match(</span><br><span class="line">                                             message[<span class="string">"ctxt"</span>],</span><br><span class="line">                                             message[<span class="string">"publisher_id"</span>],</span><br><span class="line">                                             message[<span class="string">"event_type"</span>],</span><br><span class="line">                                             message[<span class="string">"metadata"</span>],</span><br><span class="line">                                             message[<span class="string">"payload"</span>])]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    filtered_messages = list(messages)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> filtered_messages:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                ret = self._exec_callback(callback, filtered_messages)</span><br><span class="line">                <span class="keyword">if</span> ret == NotificationResult.REQUEUE:</span><br><span class="line">                    requeues.update(raw_messages)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> requeues</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_exec_callback</span><span class="params">(self, callback, messages)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> callback(messages)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            LOG.exception(<span class="string">"Callback raised an exception."</span>)</span><br><span class="line">            <span class="keyword">return</span> NotificationResult.REQUEUE</span><br></pre></td></tr></table></figure>
<p>这里重点看通过消息的priority字段查找self._callbacks_by_priority字典里匹配的插件的对应方法，也即是获取到callback函数，然后进行调用。比如notifications.sample上的消息会匹配到TelemetryIpc类的sample方法去处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_sample = ceilometer.telemetry.notifications:TelemetryIpc</span><br></pre></td></tr></table></figure>
<p>但该类实例是调用了它父类的sample方法：ceilometer/agent/plugin_base.py:NotificationBase.sample</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sample</span><span class="params">(self, notifications)</span>:</span></span><br><span class="line">    self._process_notifications(<span class="string">'sample'</span>, notifications)</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_process_notifications</span><span class="params">(self, priority, notifications)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> notification <span class="keyword">in</span> notifications:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            notification = messaging.convert_to_old_notification_format(</span><br><span class="line">                priority, notification)</span><br><span class="line">            self.to_samples_and_publish(notification)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            LOG.error(_LE(<span class="string">'Fail to process notification'</span>), exc_info=<span class="keyword">True</span>)</span><br><span class="line">           </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_samples_and_publish</span><span class="params">(self, notification)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> self.manager.publisher() <span class="keyword">as</span> p:</span><br><span class="line">        p(list(self.process_notification(notification)))</span><br></pre></td></tr></table></figure>
<p>可以看到这边以次往下调用_process_notifications–&gt;to_samples_and_publish，这边比较重要的是第 14 行和第 15 行，第14 行调用了self.manager.publisher()，此处的 manager 是在插件初始化的时候传进来的，是PipelineManager类的实例，所以看下PipelineManager.publisher</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publisher</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> PublishContext(self.pipelines)</span><br></pre></td></tr></table></figure>
<p>参数self.pipelines是在init的时候生成的，看下PublishContext</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublishContext</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, pipelines=None)</span>:</span></span><br><span class="line">        pipelines = pipelines <span class="keyword">or</span> []</span><br><span class="line">        self.pipelines = set(pipelines)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_pipelines</span><span class="params">(self, pipelines)</span>:</span></span><br><span class="line">        self.pipelines.update(pipelines)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">p</span><span class="params">(data)</span>:</span></span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> self.pipelines:</span><br><span class="line">                p.publish_data(data)</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, traceback)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> self.pipelines:</span><br><span class="line">            p.flush()</span><br></pre></td></tr></table></figure>
<p>因为这边使用 with 实现，所以看下 enter 方法，enter 返回的值与 as 后面的值绑定，data 参数就是list(self.process_notification(notification))，这里的 p 有两种类型，SamplePipeline和EventPipeline</p>
<p>以SamplePipeline为例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publish_data</span><span class="params">(self, samples)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(samples, list):</span><br><span class="line">        samples = [samples]</span><br><span class="line">    supported = [s <span class="keyword">for</span> s <span class="keyword">in</span> samples <span class="keyword">if</span> self.source.support_meter(s.name)</span><br><span class="line">                 <span class="keyword">and</span> self._validate_volume(s)]</span><br><span class="line">    self.sink.publish_samples(supported)</span><br></pre></td></tr></table></figure>
<p>调用SampleSink的publish_samples方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transform_sample</span><span class="params">(self, start, sample)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> transformer <span class="keyword">in</span> self.transformers[start:]:</span><br><span class="line">                <span class="comment"># 这里就是调用了RateOfChangeTransformer的handle_sample方法进行处理</span></span><br><span class="line">            sample = transformer.handle_sample(sample)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> sample:</span><br><span class="line">                LOG.debug(</span><br><span class="line">                    <span class="string">"Pipeline %(pipeline)s: Sample dropped by "</span></span><br><span class="line">                    <span class="string">"transformer %(trans)s"</span>, &#123;<span class="string">'pipeline'</span>: self,</span><br><span class="line">                                              <span class="string">'trans'</span>: transformer&#125;)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">return</span> sample</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">        <span class="comment"># TODO(gordc): only use one log level.</span></span><br><span class="line">        LOG.warning(_(<span class="string">"Pipeline %(pipeline)s: "</span></span><br><span class="line">                      <span class="string">"Exit after error from transformer "</span></span><br><span class="line">                      <span class="string">"%(trans)s for %(smp)s"</span>) % (&#123;<span class="string">'pipeline'</span>: self,</span><br><span class="line">                                                   <span class="string">'trans'</span>: transformer,</span><br><span class="line">                                                   <span class="string">'smp'</span>: sample&#125;))</span><br><span class="line">        LOG.exception(err)</span><br><span class="line">           </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_publish_samples</span><span class="params">(self, start, samples)</span>:</span></span><br><span class="line">    <span class="string">"""Push samples into pipeline for publishing.</span></span><br><span class="line"><span class="string">           </span></span><br><span class="line"><span class="string">    :param start: The first transformer that the sample will be injected.</span></span><br><span class="line"><span class="string">                  This is mainly for flush() invocation that transformer</span></span><br><span class="line"><span class="string">                  may emit samples.</span></span><br><span class="line"><span class="string">    :param samples: Sample list.</span></span><br><span class="line"><span class="string">           </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">           </span><br><span class="line">    transformed_samples = []</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.transformers:</span><br><span class="line">        transformed_samples = samples</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> sample <span class="keyword">in</span> samples:</span><br><span class="line">            LOG.debug(</span><br><span class="line">       <span class="string">"Pipeline %(pipeline)s: Transform sample "</span></span><br><span class="line">                <span class="string">"%(smp)s from %(trans)s transformer"</span>, &#123;<span class="string">'pipeline'</span>: self,</span><br><span class="line">                                              <span class="string">'smp'</span>: sample,</span><br><span class="line">                                                       <span class="string">'trans'</span>: start&#125;)</span><br><span class="line">            sample = self._transform_sample(start, sample)</span><br><span class="line">            <span class="keyword">if</span> sample:</span><br><span class="line">                transformed_samples.append(sample)</span><br><span class="line">           </span><br><span class="line">    <span class="keyword">if</span> transformed_samples:</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> self.publishers:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                p.publish_samples(transformed_samples)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                LOG.exception(_(</span><br><span class="line">                    <span class="string">"Pipeline %(pipeline)s: Continue after error "</span></span><br><span class="line">                    <span class="string">"from publisher %(pub)s"</span>) % (&#123;<span class="string">'pipeline'</span>: self,</span><br><span class="line">                                                  <span class="string">'pub'</span>: p&#125;))</span><br><span class="line">           </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publish_samples</span><span class="params">(self, samples)</span>:</span></span><br><span class="line">    self._publish_samples(<span class="number">0</span>, samples)</span><br></pre></td></tr></table></figure>
<p>可以看到self._publish_samples方法被调用，在该方法中组装了transformed_samples之后，遍历self.publishers的publish_samples方法来处理数据，之前我们看到 publisher 里面放的是 notifier 插件，那么即调用SampleNotifierPublisher类，此类继承NotifierPublisher–&gt;MessagingPublisher，即调用到MessagingPublisher的publish_samples方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">publish_samples</span><span class="params">(self, samples)</span>:</span></span><br><span class="line">     <span class="string">"""Publish samples on RPC.</span></span><br><span class="line"><span class="string">           </span></span><br><span class="line"><span class="string">     :param samples: Samples from pipeline after transformation.</span></span><br><span class="line"><span class="string">           </span></span><br><span class="line"><span class="string">     """</span></span><br><span class="line">           </span><br><span class="line">     meters = [</span><br><span class="line">utils.meter_message_from_counter(</span><br><span class="line">             sample, cfg.CONF.publisher.telemetry_secret)</span><br><span class="line">         <span class="keyword">for</span> sample <span class="keyword">in</span> samples</span><br><span class="line">     ]</span><br><span class="line">     topic = cfg.CONF.publisher_notifier.metering_topic</span><br><span class="line">     self.local_queue.append((topic, meters))</span><br><span class="line">           </span><br><span class="line">     <span class="keyword">if</span> self.per_meter_topic:</span><br><span class="line">         <span class="keyword">for</span> meter_name, meter_list <span class="keyword">in</span> itertools.groupby(</span><br><span class="line">        sorted(meters, key=operator.itemgetter(<span class="string">'counter_name'</span>)),</span><br><span class="line">                 operator.itemgetter(<span class="string">'counter_name'</span>)):</span><br><span class="line">    meter_list = list(meter_list)</span><br><span class="line">             topic_name = topic + <span class="string">'.'</span> + meter_name</span><br><span class="line">             LOG.debug(<span class="string">'Publishing %(m)d samples on %(n)s'</span>,</span><br><span class="line">                       &#123;<span class="string">'m'</span>: len(meter_list), <span class="string">'n'</span>: topic_name&#125;)</span><br><span class="line">             self.local_queue.append((topic_name, meter_list))</span><br><span class="line">           </span><br><span class="line">     self.flush()</span><br></pre></td></tr></table></figure>
<p>第 13 行的 topic 是 metering，最后执行了 flush，然后执行了_process_queue，其中有个send方法，将数据发出去</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_send</span><span class="params">(self, event_type, data)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.notifier.sample(&#123;&#125;, event_type=event_type,</span><br><span class="line">                             payload=data)</span><br><span class="line">    <span class="keyword">except</span> oslo_messaging.MessageDeliveryFailure <span class="keyword">as</span> e:</span><br><span class="line">        raise_delivery_failure(e)</span><br></pre></td></tr></table></figure>
<p>发到了 metering.sample 队列，之后的消息发送流程便和polling-compute 服务一样了，具体请见：<a href="https://blog.csdn.net/weixin_43700106/article/details/107006653" target="_blank" rel="external">polling-compute</a></p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>参考：<br><a href="https://www.cnblogs.com/luohaixian/p/11145939.html" target="_blank" rel="external">https://www.cnblogs.com/luohaixian/p/11145939.html</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Telemetry </tag>
            
            <tag> Ceilometer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ceilometer-polling源码分析]]></title>
      <url>https://magiceses.github.io/2017/10/04/openstack-telemetry-ceilometer-polling%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">实力的来源不是胜利。唯有奋斗才能增强实力。当你历经苦难而不气馁，那就是实力。<br></p>

<p>以社区 N 版代码为例</p>
<h2 id="一、启动命令"><a href="#一、启动命令" class="headerlink" title="一、启动命令"></a>一、启动命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec ceilometer-polling --polling-namespaces compute --config-file /etc/ceilometer/ceilometer.conf</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="二、代码入口"><a href="#二、代码入口" class="headerlink" title="二、代码入口"></a>二、代码入口</h2><p>ceilometer代码使用setuptools的pbr管理，该部分知识请见:</p>
<p><a href="https://blog.csdn.net/weixin_43700106/article/details/107144392" target="_blank" rel="external">Python打包之setuptools</a></p>
<p><a href="https://blog.csdn.net/weixin_43700106/article/details/107070025" target="_blank" rel="external">Openstack中setuptools和pbr软件打包管理</a></p>
<p>入口在：/ceilometer/cmd/polling.py的main函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_polling_service</span><span class="params">(worker_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> manager.AgentManager(CONF.polling_namespaces,</span><br><span class="line">                                CONF.pollster_list,</span><br><span class="line">                                worker_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    service.prepare_service()</span><br><span class="line">    sm = cotyledon.ServiceManager()</span><br><span class="line">    sm.add(create_polling_service)</span><br><span class="line">    sm.run()</span><br><span class="line">    </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">关键:</span></span><br><span class="line"><span class="string">1 cotyledon.Service(worker_id)</span></span><br><span class="line"><span class="string">作用: 创建一个新的服务</span></span><br><span class="line"><span class="string">参数: worker_id (int) – service实例的标示符</span></span><br><span class="line"><span class="string">2 ServiceManager()</span></span><br><span class="line"><span class="string">2.1 作用</span></span><br><span class="line"><span class="string">类似于主进程，管理服务的生命周期。</span></span><br><span class="line"><span class="string">控制子进程的生命周期，如果子进程意外死亡就重启他们。</span></span><br><span class="line"><span class="string">每一个子进程ServiceWorker运行在一个服务的实例上。</span></span><br><span class="line"><span class="string">一个应用必须创建一个ServiceManager类并且使用</span></span><br><span class="line"><span class="string">ServiceManager.run()做为和应用的主循环</span></span><br><span class="line"><span class="string">样例:</span></span><br><span class="line"><span class="string">class cotyledon.ServiceManager(wait_interval=0.01, graceful_shutdown_timeout=60)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">2.2 cotyledon.ServiceManager.add</span></span><br><span class="line"><span class="string">cotyledon.ServiceManager.add(service, workers=1, args=None, kwargs=None)</span></span><br><span class="line"><span class="string">作用: 创建一个子进程来运行AgentService服务</span></span><br><span class="line"><span class="string">参数:</span></span><br><span class="line"><span class="string">service (callable) – callable that return an instance of Service</span></span><br><span class="line"><span class="string">workers (int) – number of processes/workers for this service</span></span><br><span class="line"><span class="string">args (tuple) – additional positional arguments for this service</span></span><br><span class="line"><span class="string">kwargs (dict) – additional keywoard arguments for this service</span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">a service id</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">2.3 cotyledon.ServiceManager.run()</span></span><br><span class="line"><span class="string">开启并监督服务工作者</span></span><br><span class="line"><span class="string">这个方法将会开启和监督所有子进程，直到主进程被关闭了</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">参考:</span></span><br><span class="line"><span class="string">https://blog.csdn.net/qingyuanluofeng/article/details/95533476</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>
<p>该部分使用cotyledon的多进程框架实现</p>
<p>实例化子进程调用create_polling_service方法，该方法又调用AgentManager类，传入三个参数，分别是</p>
<ul>
<li>CONF.polling_namespaces # 即是你在命令行中传入的参数，compute或者是central，分别代表两个服务</li>
<li>CONF.pollster_list # 默认为[]</li>
<li>worker_id # cotyledon中服务实例的标识符</li>
</ul>
<p>compute服务即从此处开始，调用AgentManager的 init方法初始化，然后调用run方法进行数据的采集</p>
<p>让我们来看看AgentManager里面是什么</p>
<h2 id="三、初始化AgentManager"><a href="#三、初始化AgentManager" class="headerlink" title="三、初始化AgentManager"></a>三、初始化AgentManager</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AgentManager</span><span class="params">(service_base.PipelineBasedService)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, namespaces=None, pollster_list=None, worker_id=<span class="number">0</span>)</span>:</span></span><br><span class="line">        namespaces = namespaces <span class="keyword">or</span> [<span class="string">'compute'</span>, <span class="string">'central'</span>]</span><br><span class="line">        pollster_list = pollster_list <span class="keyword">or</span> []</span><br><span class="line">        group_prefix = cfg.CONF.polling.partitioning_group_prefix</span><br><span class="line">        self._inspector = virt_inspector.get_hypervisor_inspector()</span><br><span class="line">        self.nv = nova_client.Client()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># features of using coordination and pollster-list are exclusive, and</span></span><br><span class="line">        <span class="comment"># cannot be used at one moment to avoid both samples duplication and</span></span><br><span class="line">        <span class="comment"># samples being lost</span></span><br><span class="line">				......</span><br><span class="line">        <span class="comment"># we'll have default ['compute', 'central'] here if no namespaces will</span></span><br><span class="line">        <span class="comment"># be passed</span></span><br><span class="line">        <span class="string">''' </span></span><br><span class="line"><span class="string">        (Pdb) p self.extensions[0].__dict__</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            'obj': &lt; ceilometer.compute.pollsters.cpu.CPUL3CachePollster object at 0x7f392837acd0 &gt; ,</span></span><br><span class="line"><span class="string">            'entry_point': EntryPoint.parse('cpu_l3_cache = ceilometer.compute.pollsters.cpu:CPUL3CachePollster'),</span></span><br><span class="line"><span class="string">            'name': 'cpu_l3_cache',</span></span><br><span class="line"><span class="string">            'plugin': &lt; class 'ceilometer.compute.pollsters.cpu.CPUL3CachePollster' &gt;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        (Pdb) p self.extensions[1].__dict__</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            'obj': &lt; ceilometer.compute.pollsters.disk.WriteRequestsRatePollster object at 0x7f3928385650 &gt; ,</span></span><br><span class="line"><span class="string">            'entry_point': EntryPoint.parse('disk.write.requests.rate = ceilometer.compute.pollsters.disk:WriteRequestsRatePollster'),</span></span><br><span class="line"><span class="string">            'name': 'disk.write.requests.rate',</span></span><br><span class="line"><span class="string">            'plugin': &lt; class 'ceilometer.compute.pollsters.disk.WriteRequestsRatePollster' &gt;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        (Pdb) p self.extensions[2].__dict__</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            'obj': &lt; ceilometer.compute.pollsters.disk.DisksTotalPoller object at 0x7f39283973d0 &gt; ,</span></span><br><span class="line"><span class="string">            'entry_point': EntryPoint.parse('disks.total = ceilometer.compute.pollsters.disk:DisksTotalPoller'),</span></span><br><span class="line"><span class="string">            'name': 'disks.total',</span></span><br><span class="line"><span class="string">            'plugin': &lt; class 'ceilometer.compute.pollsters.disk.DisksTotalPoller' &gt;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        extensions = (self._extensions(<span class="string">'poll'</span>, namespace).extensions</span><br><span class="line">                      <span class="keyword">for</span> namespace <span class="keyword">in</span> namespaces)</span><br><span class="line">        <span class="comment"># get the extensions from pollster builder</span></span><br><span class="line">        extensions_fb = (self._extensions_from_builder(<span class="string">'poll'</span>, namespace)</span><br><span class="line">                         <span class="keyword">for</span> namespace <span class="keyword">in</span> namespaces)</span><br><span class="line">        <span class="keyword">if</span> pollster_list:</span><br><span class="line">            extensions = (moves.filter(_match, exts)</span><br><span class="line">                          <span class="keyword">for</span> exts <span class="keyword">in</span> extensions)</span><br><span class="line">            extensions_fb = (moves.filter(_match, exts)</span><br><span class="line">                             <span class="keyword">for</span> exts <span class="keyword">in</span> extensions_fb)</span><br><span class="line"></span><br><span class="line">        self.extensions = list(itertools.chain(*list(extensions))) + list(</span><br><span class="line">            itertools.chain(*list(extensions_fb)))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.extensions == []:</span><br><span class="line">            <span class="keyword">raise</span> EmptyPollstersList()</span><br><span class="line"></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        (Pdb) p self.discoveries[0].__dict__</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            'obj': &lt; ceilometer.compute.discovery.InstanceDiscovery object at 0x7f392864d390 &gt; ,</span></span><br><span class="line"><span class="string">            'entry_point': EntryPoint.parse('local_instances = ceilometer.compute.discovery:InstanceDiscovery'),</span></span><br><span class="line"><span class="string">            'name': 'local_instances',</span></span><br><span class="line"><span class="string">            'plugin': &lt; class 'ceilometer.compute.discovery.InstanceDiscovery' &gt;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        discoveries = (self._extensions(<span class="string">'discover'</span>, namespace).extensions</span><br><span class="line">                       <span class="keyword">for</span> namespace <span class="keyword">in</span> namespaces)</span><br><span class="line">        self.discoveries = list(itertools.chain(*list(discoveries)))</span><br><span class="line">        self.polling_periodics = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        (Pdb) p self.heartbeat_timer.__dict__</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            '_dead': &lt; threading._Event object at 0x7f3928654c10 &gt; ,</span></span><br><span class="line"><span class="string">            '_waiter': &lt; Condition( &lt; _RLock owner = None count = 0 &gt; , 0) &gt; ,</span></span><br><span class="line"><span class="string">            '_now_func': &lt; function monotonic at 0x18d51b8 &gt; ,</span></span><br><span class="line"><span class="string">            '_schedule': &lt; futurist.periodics._Schedule object at 0x7f3928654d10 &gt; ,</span></span><br><span class="line"><span class="string">            '_active': &lt; threading._Event object at 0x7f3928654c90 &gt; ,</span></span><br><span class="line"><span class="string">            '_initial_schedule_strategy': &lt; function _now_plus_periodicity at 0x1bccc80 &gt; ,</span></span><br><span class="line"><span class="string">            '_watchers': [(&#123;</span></span><br><span class="line"><span class="string">                'successes': 0,</span></span><br><span class="line"><span class="string">                'failures': 0,</span></span><br><span class="line"><span class="string">                'runs': 0,</span></span><br><span class="line"><span class="string">                'elapsed': 0,</span></span><br><span class="line"><span class="string">                'elapsed_waiting': 0</span></span><br><span class="line"><span class="string">            &#125;, &lt; Watcher object at 0x7f3928654d90(runs = 0, successes = 0, failures = 0, elapsed = 0.00, elapsed_waiting = 0.00) &gt; )],</span></span><br><span class="line"><span class="string">            '_on_failure': &lt; functools.partial object at 0x7f3928649b50 &gt; ,</span></span><br><span class="line"><span class="string">            '_executor_factory': &lt; function &lt; lambda &gt; at 0x7f39283809b0 &gt; ,</span></span><br><span class="line"><span class="string">            '_schedule_strategy': &lt; function _last_started_strategy at 0x1bccb90 &gt; ,</span></span><br><span class="line"><span class="string">            '_log': &lt; logging.Logger object at 0x1bbfa90 &gt; ,</span></span><br><span class="line"><span class="string">            '_callables': [( &lt; function &lt; lambda &gt; at 0x7f39286581b8 &gt; , 'ceilometer.utils.&lt;lambda&gt;', (), &#123;&#125;)],</span></span><br><span class="line"><span class="string">            '_cond_cls': &lt; function Condition at 0x7f39364b2938 &gt; ,</span></span><br><span class="line"><span class="string">            '_tombstone': &lt; threading._Event object at 0x7f3928654b10 &gt; ,</span></span><br><span class="line"><span class="string">            '_immediates': deque([0])</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        (Pdb) p self.partition_coordinator.__dict__</span></span><br><span class="line"><span class="string">        &#123;'_groups': set([]), '_my_id': 'c6ee6425-1bac-4e9c-a026-2022b133c825', '_coordinator': None&#125;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.partition_coordinator = coordination.PartitionCoordinator()</span><br><span class="line">        self.heartbeat_timer = utils.create_periodic(</span><br><span class="line">            target=self.partition_coordinator.heartbeat,</span><br><span class="line">            spacing=cfg.CONF.coordination.heartbeat,</span><br><span class="line">            run_immediately=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Compose coordination group prefix.</span></span><br><span class="line">        <span class="comment"># We'll use namespaces as the basement for this partitioning.</span></span><br><span class="line">        namespace_prefix = <span class="string">'-'</span>.join(sorted(namespaces))</span><br><span class="line">        self.group_prefix = (<span class="string">'%s-%s'</span> % (namespace_prefix, group_prefix)</span><br><span class="line">                             <span class="keyword">if</span> group_prefix <span class="keyword">else</span> namespace_prefix)</span><br><span class="line"></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        (Pdb) p self.notifier.__dict__</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            '_serializer': &lt; oslo_messaging.serializer.NoOpSerializer object at 0x7f1cc9aa3710 &gt; ,</span></span><br><span class="line"><span class="string">            '_driver_mgr': &lt; stevedore.named.NamedExtensionManager object at 0x7f1cc9aa3890 &gt; ,</span></span><br><span class="line"><span class="string">            'retry': -1,</span></span><br><span class="line"><span class="string">            '_driver_names': ['messagingv2'],</span></span><br><span class="line"><span class="string">            '_topics': ['notifications'],</span></span><br><span class="line"><span class="string">            'publisher_id': 'ceilometer.polling',</span></span><br><span class="line"><span class="string">            'transport': &lt; oslo_messaging.transport.NotificationTransport object at 0x7f1cc9b26550 &gt;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        (Pdb) p self.notifier._driver_mgr</span></span><br><span class="line"><span class="string">        &lt;stevedore.named.NamedExtensionManager object at 0x7f1cc9aa3890&gt;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        (Pdb) p self.notifier._driver_mgr.__dict__</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            '_names': ['messagingv2'],</span></span><br><span class="line"><span class="string">            'namespace': 'oslo.messaging.notify.drivers',</span></span><br><span class="line"><span class="string">            '_on_load_failure_callback': None,</span></span><br><span class="line"><span class="string">            'extensions': [ &lt; stevedore.extension.Extension object at 0x7fddfc80e990 &gt; ],</span></span><br><span class="line"><span class="string">            'propagate_map_exceptions': False,</span></span><br><span class="line"><span class="string">            '_extensions_by_name': None,</span></span><br><span class="line"><span class="string">            '_name_order': False,</span></span><br><span class="line"><span class="string">            '_missing_names': set([])</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        (Pdb) p self.notifier._driver_mgr.__dict__.get('extensions')[0].__dict__</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            'obj': &lt; oslo_messaging.notify.messaging.MessagingV2Driver object at 0x7fddfc80e750 &gt; ,</span></span><br><span class="line"><span class="string">            'entry_point': EntryPoint.parse('messagingv2 = oslo_messaging.notify.messaging:MessagingV2Driver'),</span></span><br><span class="line"><span class="string">            'name': 'messagingv2',</span></span><br><span class="line"><span class="string">            'plugin': &lt; class 'oslo_messaging.notify.messaging.MessagingV2Driver' &gt;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.notifier = oslo_messaging.Notifier(</span><br><span class="line">            messaging.get_transport(),</span><br><span class="line">            driver=cfg.CONF.publisher_notifier.telemetry_driver,</span><br><span class="line">            publisher_id=<span class="string">"ceilometer.polling"</span>)</span><br><span class="line"></span><br><span class="line">        self._keystone = <span class="keyword">None</span></span><br><span class="line">        self._keystone_last_exception = <span class="keyword">None</span></span><br></pre></td></tr></table></figure>
<p>以上的代码中的一些参数我都用pdb打印出来了，可以更加直观的感受，我们来逐行分析一下这个初始化的过程：</p>
<ol>
<li><p>前5行应该不必多说，基本的参数传递，init的参数已经在代码入口处介绍过</p>
</li>
<li><p>第6行是为了实现工作负载分区协调</p>
</li>
<li><p>第7行调用get_hypervisor_inspector方法来加载libvirt驱动</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_hypervisor_inspector</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        namespace = <span class="string">'ceilometer.compute.virt'</span></span><br><span class="line">        mgr = driver.DriverManager(namespace,</span><br><span class="line">                                   cfg.CONF.hypervisor_inspector,</span><br><span class="line">                                   invoke_on_load=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">return</span> mgr.driver</span><br><span class="line">    <span class="keyword">except</span> ImportError <span class="keyword">as</span> e:</span><br><span class="line">        LOG.error(_(<span class="string">"Unable to load the hypervisor inspector: %s"</span>) % e)</span><br><span class="line">        <span class="keyword">return</span> Inspector()</span><br></pre></td></tr></table></figure>
<p>这里使用的是stevedore库，在该篇文章不过多介绍，具体请见：<a href="https://blog.csdn.net/weixin_43700106/article/details/107150715" target="_blank" rel="external">Python插件之stevedore</a></p>
</li>
<li><p>第8行初始化了个nove的client</p>
</li>
<li><p>第40-69行主要就是在加载插件了，加载插件的方式也是使用stevedore库，其中40和43行的namespace就是你传进来的方法，我们来看下_extensions的实现</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_extensions</span><span class="params">(self, category, agent_ns=None)</span>:</span></span><br><span class="line">  namespace = (<span class="string">'ceilometer.%s.%s'</span> % (category, agent_ns) <span class="keyword">if</span> agent_ns</span><br><span class="line">               <span class="keyword">else</span> <span class="string">'ceilometer.%s'</span> % category)</span><br><span class="line">  <span class="keyword">return</span> self._get_ext_mgr(namespace)</span><br></pre></td></tr></table></figure>
<p>这里主要就是加载在ceilometer.poll.compute命名空间中的插件（如果开启的是central服务，即加载的是ceilometer.poll.central命名空间中的插件），插件在setup.cfg文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ceilometer.poll.compute =</span><br><span class="line">    disks.util = ceilometer.compute.pollsters.disk:DisksUtilPoller</span><br><span class="line">    disks.total = ceilometer.compute.pollsters.disk:DisksTotalPoller</span><br><span class="line">    disks.used = ceilometer.compute.pollsters.disk:DisksUsedPoller</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">ceilometer.poll.central =</span><br><span class="line">    account = ceilometer.chakra.chakra:AccountPollster</span><br><span class="line">    ip.floating = ceilometer.network.floatingip:FloatingIPPollster</span><br><span class="line">    image = ceilometer.image.glance:ImagePollster</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>加载后的extension对象是这样的，是一个存储了在命名空间在所有插件对象的列表：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) p self.extensions[<span class="number">0</span>].__dict__</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">'obj'</span>: &lt; ceilometer.compute.pollsters.cpu.CPUL3CachePollster object at <span class="number">0x7f392837acd0</span> &gt; ,</span><br><span class="line">  <span class="string">'entry_point'</span>: EntryPoint.parse(<span class="string">'cpu_l3_cache = ceilometer.compute.pollsters.cpu:CPUL3CachePollster'</span>),</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'cpu_l3_cache'</span>,</span><br><span class="line">  <span class="string">'plugin'</span>: &lt; <span class="class"><span class="keyword">class</span> '<span class="title">ceilometer</span>.<span class="title">compute</span>.<span class="title">pollsters</span>.<span class="title">cpu</span>.<span class="title">CPUL3CachePollster</span>' &gt;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"><span class="params">(Pdb)</span> <span class="title">p</span> <span class="title">self</span>.<span class="title">extensions</span>[1].<span class="title">__dict__</span></span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">'obj'</span>: &lt; ceilometer.compute.pollsters.disk.WriteRequestsRatePollster object at <span class="number">0x7f3928385650</span> &gt; ,</span><br><span class="line">  <span class="string">'entry_point'</span>: EntryPoint.parse(<span class="string">'disk.write.requests.rate = ceilometer.compute.pollsters.disk:WriteRequestsRatePollster'</span>),</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'disk.write.requests.rate'</span>,</span><br><span class="line">  <span class="string">'plugin'</span>: &lt; <span class="class"><span class="keyword">class</span> '<span class="title">ceilometer</span>.<span class="title">compute</span>.<span class="title">pollsters</span>.<span class="title">disk</span>.<span class="title">WriteRequestsRatePollster</span>' &gt;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"><span class="params">(Pdb)</span> <span class="title">p</span> <span class="title">self</span>.<span class="title">extensions</span>[2].<span class="title">__dict__</span></span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">'obj'</span>: &lt; ceilometer.compute.pollsters.disk.DisksTotalPoller object at <span class="number">0x7f39283973d0</span> &gt; ,</span><br><span class="line">  <span class="string">'entry_point'</span>: EntryPoint.parse(<span class="string">'disks.total = ceilometer.compute.pollsters.disk:DisksTotalPoller'</span>),</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'disks.total'</span>,</span><br><span class="line">  <span class="string">'plugin'</span>: &lt; <span class="class"><span class="keyword">class</span> '<span class="title">ceilometer</span>.<span class="title">compute</span>.<span class="title">pollsters</span>.<span class="title">disk</span>.<span class="title">DisksTotalPoller</span>' &gt;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure>
<p>43-69行的加载插件的原理同上，不赘述</p>
</li>
<li><p>第99-103行是为了获取一个工作负载分区协调类实例，用来协调多个采集程序worker时的分工处理，每个对象的实例在代码中已经打印，有兴趣的可以了解下，这里使用的是tooz库的一些用法，简单介绍下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">1 Tooz基础</span><br><span class="line"></span><br><span class="line">作用: </span><br><span class="line">1) 提供分布式协调API来管理群组和群组中的成员</span><br><span class="line">2) 提供分布式锁从而允许分布式节点获取和释放锁来实现同步</span><br><span class="line">解决的问题: 多个分布式进程同步问题</span><br><span class="line"></span><br><span class="line">2 Tooz架构</span><br><span class="line"></span><br><span class="line">本质: Tooz是zookeeper,  Raft consensus algorithm, Redis等方案的抽象，</span><br><span class="line">    通过驱动(driver)形式来提供后端功能</span><br><span class="line">驱动分类:</span><br><span class="line">zookeeper, Zake, memcached, redis,</span><br><span class="line">SysV IPC(只提供分布式锁功能)， PostgreSQL(只提供分布式锁功能)， MySQL(只提供分布式锁功能)</span><br><span class="line">驱动特点:</span><br><span class="line">所有驱动都支持分布式进程， Tooz API完全异步，更高校。</span><br><span class="line"></span><br><span class="line">3 Tooz功能</span><br><span class="line"></span><br><span class="line">3.1 群组管理</span><br><span class="line"></span><br><span class="line">管理群组成员。</span><br><span class="line">操作: 群组创建，加入群组，离开群组，查看群组成员，有成员加入或离开群组时通知的功能</span><br><span class="line">应用场景:</span><br><span class="line">ceilometer-notification服务利用群组管理实现负载均衡和真正意义上的服务水平扩展。</span><br><span class="line"></span><br><span class="line">3.2 领导选取</span><br><span class="line"></span><br><span class="line">每个群组都有领导，所有节点可决定是否参与选举；</span><br><span class="line">领导消失则选取新领导节点；</span><br><span class="line">领导被选取其他成员可能得到通知；</span><br><span class="line">各节点可随时获取当前组的领导。</span><br><span class="line">感悟:</span><br><span class="line">考虑可以使用tooz实现自己的leader选举算法和服务高可用。</span><br><span class="line"></span><br><span class="line">3.3 分布式锁</span><br><span class="line"></span><br><span class="line">应用场景:</span><br><span class="line">原来ceilometer中通过RPC检测alarm evaluator进程是否存活。</span><br><span class="line">后来ceilometer通过Tooz群组管理来协调多个alarm evaluator进程。</span><br><span class="line">应用场景2:</span><br><span class="line">gnocchi中利用分布式锁操作监控项与监控数据</span><br><span class="line"></span><br><span class="line">参考：https://blog.csdn.net/qingyuanluofeng/article/details/90349185</span><br></pre></td></tr></table></figure>
</li>
<li><p>第154-157比较重要，这里是初始化了个oslo_messaging.Notifier的实例，用来发送采集之后的数据到指定的队列notifications.sample，基本解释如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""       </span></span><br><span class="line"><span class="string">  self.notifier.topics = ['notifications']</span></span><br><span class="line"><span class="string">  self.notifier._driver_names = 'messagingv2'(定义在ceilometer/publisher/messaging.py 中的 telemetry_driver这个变量)，代表的是ceilometer向消息队列发送消息时使用的驱动类型</span></span><br><span class="line"><span class="string">  self.notifier.publisher_id = 'ceilometer.polling'</span></span><br><span class="line"><span class="string">  self.notifier._driver_mgr 是从oslo.messaging.notify.drivers 中加载名称为messagingv2对应的插件</span></span><br><span class="line"><span class="string">  self.notifier.transport 是从oslo.messaging.drivers 中加载名称为 rabbit对应的插件。因为ceilometer.conf 中 transport_url定义是：transport_url=rabbit://guest:guest@192.168.2.120:5672/</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>此时就初始化完毕了，下面就是采集数据了，执行的是sm.run()代码，则是调用到了AgentManager类实例的run方法</p>
</li>
</ol>
<h2 id="四、采集数据"><a href="#四、采集数据" class="headerlink" title="四、采集数据"></a>四、采集数据</h2><p>入口：ceilometer/agent/manager.py:AgentManager.run</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">  super(AgentManager, self).run()</span><br><span class="line"></span><br><span class="line">  self.polling_manager = pipeline.setup_polling()</span><br><span class="line">  self.join_partitioning_groups()</span><br><span class="line">  self.start_polling_tasks()</span><br><span class="line">  self.init_pipeline_refresh()</span><br></pre></td></tr></table></figure>
<p>run方法看起来比较简单，我们来分析一下：</p>
<ol>
<li><p>第4行调用了setup_polling的方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_polling</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Setup polling manager according to yaml config file."""</span></span><br><span class="line">    cfg_file = cfg.CONF.pipeline_cfg_file</span><br><span class="line">    <span class="keyword">return</span> PollingManager(cfg_file)</span><br></pre></td></tr></table></figure>
<p>这里面是为了加载配置文件pipeline.yaml文件中的你所配置的采集项，我们来看下这里面发生了什么：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PollingManager</span><span class="params">(ConfigManagerBase)</span>:</span></span><br><span class="line">    <span class="string">"""Polling Manager</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Polling manager sets up polling according to config file.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cfg_info)</span>:</span></span><br><span class="line">        <span class="string">"""Setup the polling according to config.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The configuration is the sources half of the Pipeline Config.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super(PollingManager, self).__init__()</span><br><span class="line">        <span class="comment"># 加载配置文件中内容</span></span><br><span class="line">        cfg = self.load_config(cfg_info)</span><br><span class="line">        self.sources = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="string">'sources'</span> <span class="keyword">in</span> cfg <span class="keyword">and</span> <span class="string">'sinks'</span> <span class="keyword">in</span> cfg):</span><br><span class="line">            <span class="keyword">raise</span> PipelineException(<span class="string">"Both sources &amp; sinks are required"</span>,</span><br><span class="line">                                    cfg)</span><br><span class="line">        LOG.info(_LI(<span class="string">'detected decoupled pipeline config format'</span>))</span><br><span class="line"></span><br><span class="line">        unique_names = set()</span><br><span class="line">        <span class="comment"># 初始化并记录配置文件中的 sources 项</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> cfg.get(<span class="string">'sources'</span>):</span><br><span class="line">            name = s.get(<span class="string">'name'</span>)</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">in</span> unique_names:</span><br><span class="line">                <span class="keyword">raise</span> PipelineException(<span class="string">"Duplicated source names: %s"</span> %</span><br><span class="line">                                        name, self)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                unique_names.add(name)</span><br><span class="line">                <span class="comment"># 将配置文件中的数据皆放进 self.sources 中</span></span><br><span class="line">                self.sources.append(SampleSource(s))</span><br><span class="line">        unique_names.clear()</span><br></pre></td></tr></table></figure>
<p>初始化好了之后，返回一个 self.polling_manager 的对象， 我们来看下这个对象中存的东西：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(Pdb) p self.polling_manager.__dict__</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;'cfg_mtime': 1592535895.477891, 'cfg_hash': 'ba1311798d634022e4b684b72bf7b42a', 'cfg_loc': '/etc/ceilometer/pipeline.yaml', 'sources': [&lt;ceilometer.pipeline.SampleSource object at 0x7f0eec042110&gt;, &lt;ceilometer.pipeline.SampleSource object at 0x7f0eec0423d0&gt;, &lt;ceilometer.pipeline.SampleSource object at 0x7f0eec042050&gt;, &lt;ceilometer.pipeline.SampleSource object at 0x7f0eec0422d0&gt;, &lt;ceilometer.pipeline.SampleSource object at 0x7f0eec042290&gt;, &lt;ceilometer.pipeline.SampleSource object at 0x7f0eec042390&gt;, &lt;ceilometer.pipeline.SampleSource object at 0x7f0eec042350&gt;]&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(Pdb) p self.polling_manager.sources</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[&lt;ceilometer.pipeline.SampleSource object at 0x7f0eec042110&gt;, &lt;ceilometer.pipeline.SampleSource object at 0x7f0eec0423d0&gt;, &lt;ceilometer.pipeline.SampleSource object at 0x7f0eec042050&gt;, &lt;ceilometer.pipeline.SampleSource object at 0x7f0eec0422d0&gt;, &lt;ceilometer.pipeline.SampleSource object at 0x7f0eec042290&gt;, &lt;ceilometer.pipeline.SampleSource object at 0x7f0eec042390&gt;, &lt;ceilometer.pipeline.SampleSource object at 0x7f0eec042350&gt;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(Pdb) p self.polling_manager.sources[0].__dict__</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    'name': 'notification_source',</span></span><br><span class="line"><span class="string">    'cfg': &#123;</span></span><br><span class="line"><span class="string">        'interval': 3600,</span></span><br><span class="line"><span class="string">        'meters': ['instance', 'volume', 'image', 'snapshot', 'backup', 'ip.floating', 'router', 'network', 'subnet', 'account'],</span></span><br><span class="line"><span class="string">        'name': 'notification_source',</span></span><br><span class="line"><span class="string">        'sinks': ['notification_sink']</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    'interval': 3600,</span></span><br><span class="line"><span class="string">    'meters': ['instance', 'volume', 'image', 'snapshot', 'backup', 'ip.floating', 'router', 'network', 'subnet', 'account'],</span></span><br><span class="line"><span class="string">    'discovery': [],</span></span><br><span class="line"><span class="string">    'resources': [],</span></span><br><span class="line"><span class="string">    'sinks': ['notification_sink']</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(Pdb) p self.polling_manager.sources[1].__dict__</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    'name': 'meter_source',</span></span><br><span class="line"><span class="string">    'cfg': &#123;</span></span><br><span class="line"><span class="string">        'interval': 300,</span></span><br><span class="line"><span class="string">        'meters': ['poll.*', 'memory.usage', 'memory.util'],</span></span><br><span class="line"><span class="string">        'name': 'meter_source',</span></span><br><span class="line"><span class="string">        'sinks': ['meter_sink']</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    'interval': 300,</span></span><br><span class="line"><span class="string">    'meters': ['poll.*', 'memory.usage', 'memory.util'],</span></span><br><span class="line"><span class="string">    'discovery': [],</span></span><br><span class="line"><span class="string">    'resources': [],</span></span><br><span class="line"><span class="string">    'sinks': ['meter_sink']</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                """</span></span><br></pre></td></tr></table></figure>
<p>可以看到，这行代码的意义就是为了加载在配置文件的定义的采集项</p>
</li>
<li><p>第 6 行调用 start_polling_tasks 方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_polling_tasks</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># allow time for coordination if necessary</span></span><br><span class="line">    delay_start = self.partition_coordinator.is_active()</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># set shuffle time before polling task if necessary</span></span><br><span class="line">    delay_polling_time = random.randint(</span><br><span class="line">        <span class="number">0</span>, cfg.CONF.shuffle_time_before_polling_task)</span><br><span class="line">   </span><br><span class="line">    data = self.setup_polling_tasks()</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># One thread per polling tasks is enough</span></span><br><span class="line">    <span class="comment"># 按照时间间隔创建线程池，相同时间间隔创建一个线程</span></span><br><span class="line">    self.polling_periodics = periodics.PeriodicWorker.create(</span><br><span class="line">        [], executor_factory=<span class="keyword">lambda</span>:</span><br><span class="line">        futures.ThreadPoolExecutor(max_workers=len(data)))</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span> interval, polling_task <span class="keyword">in</span> data.items():</span><br><span class="line">        delay_time = (interval + delay_polling_time <span class="keyword">if</span> delay_start</span><br><span class="line">                      <span class="keyword">else</span> delay_polling_time)</span><br><span class="line">   </span><br><span class="line"><span class="meta">        @periodics.periodic(spacing=interval, run_immediately=False)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(running_task)</span>:</span></span><br><span class="line">            self.interval_task(running_task)</span><br><span class="line">   </span><br><span class="line">        utils.spawn_thread(utils.delayed, delay_time,</span><br><span class="line">                           self.polling_periodics.add, task, polling_task)</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        <span class="comment"># Don't start useless threads if no task will run</span></span><br><span class="line">        utils.spawn_thread(self.polling_periodics.start, allow_empty=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<ol>
<li><p>前 8 行不用说，就是简单的参数定义，重要的是第 9 行之后的代码，分析一下</p>
</li>
<li><p>第9 行调用了 setup_polling_tasks 的方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_polling_tasks</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""  </span></span><br><span class="line"><span class="string">    (Pdb) p self.polling_manager.sources[1].__dict__</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        'name': 'meter_source',</span></span><br><span class="line"><span class="string">        'cfg': &#123;</span></span><br><span class="line"><span class="string">            'interval': 300,</span></span><br><span class="line"><span class="string">            'meters': ['poll.*', 'memory.usage', 'memory.util'],</span></span><br><span class="line"><span class="string">            'name': 'meter_source',</span></span><br><span class="line"><span class="string">            'sinks': ['meter_sink']</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        'interval': 300,</span></span><br><span class="line"><span class="string">        'meters': ['poll.*', 'memory.usage', 'memory.util'],</span></span><br><span class="line"><span class="string">        'discovery': [],</span></span><br><span class="line"><span class="string">        'resources': [],</span></span><br><span class="line"><span class="string">        'sinks': ['meter_sink']</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    (Pdb) p self.extensions[0].__dict__</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        'obj': &lt; ceilometer.compute.pollsters.memory.MemoryUtilizationPollster object at 0x7ff12062e590 &gt; ,</span></span><br><span class="line"><span class="string">        'entry_point': EntryPoint.parse('memory.util = ceilometer.compute.pollsters.memory:MemoryUtilizationPollster'),</span></span><br><span class="line"><span class="string">        'name': 'memory.util',</span></span><br><span class="line"><span class="string">        'plugin': &lt; class 'ceilometer.compute.pollsters.memory.MemoryUtilizationPollster' &gt;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    polling_tasks = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> source <span class="keyword">in</span> self.polling_manager.sources:</span><br><span class="line">        polling_task = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">for</span> pollster <span class="keyword">in</span> self.extensions:</span><br><span class="line">            <span class="comment"># 将 souce 中的 meters 与 extensions 中的每个对象的 name 进行匹配，如果一样则以采集周期为 key，以 PollingTask 对象为 value，加入到 polling_tasks中</span></span><br><span class="line">            <span class="keyword">if</span> source.support_meter(pollster.name):</span><br><span class="line">                polling_task = polling_tasks.get(source.get_interval())</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> polling_task:</span><br><span class="line">                    polling_task = self.create_polling_task()</span><br><span class="line">                    polling_tasks[source.get_interval()] = polling_task</span><br><span class="line">                polling_task.add(pollster, source)</span><br><span class="line">    <span class="keyword">return</span> polling_tasks</span><br></pre></td></tr></table></figure>
<p>这里是遍历self.polling_manager.sources中的source，同时遍历self.extensions，查看如果对应插件在对应source的meters列表中,代表该插件需要定期执行，获取该插件定义的执行周期，将其加入到polling_tasks中</p>
<p>我们来看下 polling_tasks 中的 value 对象，其实就是初始化了一些值，然后调用 add 方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PollingTask</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Polling task for polling samples and notifying.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A polling task can be invoked periodically or only once.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, agent_manager)</span>:</span></span><br><span class="line">        self.manager = agent_manager</span><br><span class="line"></span><br><span class="line">        <span class="comment"># elements of the Cartesian product of sources X pollsters</span></span><br><span class="line">        <span class="comment"># with a common interval</span></span><br><span class="line">        self.pollster_matches = collections.defaultdict(set)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># we relate the static resources and per-source discovery to</span></span><br><span class="line">        <span class="comment"># each combination of pollster and matching source</span></span><br><span class="line">        resource_factory = <span class="keyword">lambda</span>: Resources(agent_manager)</span><br><span class="line">        self.resources = collections.defaultdict(resource_factory)</span><br><span class="line"></span><br><span class="line">        self._batch = cfg.CONF.batch_polled_samples</span><br><span class="line">        self._telemetry_secret = cfg.CONF.publisher.telemetry_secret</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, pollster, source)</span>:</span></span><br><span class="line">        self.pollster_matches[source.name].add(pollster)</span><br><span class="line">        key = Resources.key(source.name, pollster)</span><br><span class="line">        self.resources[key].setup(source)</span><br></pre></td></tr></table></figure>
<p>即最终返回后的 data 是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) p data</span><br><span class="line">&#123;</span><br><span class="line">  3600: &lt; ceilometer.agent.manager.PollingTask object at 0x7fe6a4043bd0 &gt; ,</span><br><span class="line">  300: &lt; ceilometer.agent.manager.PollingTask object at 0x7fe6a4043d10 &gt;</span><br><span class="line">&#125;</span><br><span class="line">(Pdb) p data[3600].__dict__</span><br><span class="line">&#123;</span><br><span class="line">  &apos;manager&apos;: &lt; ceilometer.agent.manager.AgentManager object at 0x3230b50 &gt; ,</span><br><span class="line">  &apos;_telemetry_secret&apos;: &apos;change this for valid signing&apos;,</span><br><span class="line">  &apos;pollster_matches&apos;: defaultdict( &lt; type &apos;set&apos; &gt; , &#123;</span><br><span class="line">          &apos;notification_source&apos;: set([ &lt; stevedore.extension.Extension object at 0x7fe6b062ec50 &gt; ])</span><br><span class="line">  &#125;),</span><br><span class="line">  &apos;resources&apos;: defaultdict( &lt; function &lt; lambda &gt; at 0x7fe6a40319b0 &gt; , &#123;</span><br><span class="line">          &apos;notification_source-instance&apos;: &lt; ceilometer.agent.manager.Resources object at 0x7fe6a4043b90 &gt;</span><br><span class="line">  &#125;),</span><br><span class="line">  &apos;_batch&apos;: True</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>第 13 到 30 行即是按照时间间隔创建线程池，相同时间间隔创建一个线程，这里用到了futurist 库（这里不做介绍），实现了一个周期任务，每隔配置文件中定义的采样周期调用 self.interval_task，而 self.interval_task 又调用了 task.poll_and_notify()，下面看下task.poll_and_notify()的实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poll_and_notify</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Polling sample and notify."""</span></span><br><span class="line">        cache = &#123;&#125;</span><br><span class="line">        discovery_cache = &#123;&#125;</span><br><span class="line">        poll_history = &#123;&#125;</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        (Pdb) self.pollster_matches</span></span><br><span class="line"><span class="string">        defaultdict( &lt; type 'set' &gt; , &#123;</span></span><br><span class="line"><span class="string">            'meter_source': set([ &lt; stevedore.extension.Extension object at 0x7f9a645de8d0 &gt; , &lt; stevedore.extension.Extension object at 0x7f9a645d40d0 &gt; ]),</span></span><br><span class="line"><span class="string">            'cpu_source': set([ &lt; stevedore.extension.Extension object at 0x7f9a645d4cd0 &gt; ]),</span></span><br><span class="line"><span class="string">            'cpu_util_source': set([ &lt; stevedore.extension.Extension object at 0x7f9a645dec10 &gt; ]),</span></span><br><span class="line"><span class="string">            'disk_source': set([ &lt; stevedore.extension.Extension object at 0x7f9a64399c90 &gt; , &lt; stevedore.extension.Extension object at 0x7f9a645d4ad0 &gt; , &lt; stevedore.extension.Extension object at 0x7f9a645d49d0 &gt; , &lt; stevedore.extension.Extension object at 0x7f9a645d4950 &gt; , &lt; stevedore.extension.Extension object at 0x7f9a645dea90 &gt; , &lt; stevedore.extension.Extension object at 0x7f9a64389fd0 &gt; , &lt; stevedore.extension.Extension object at 0x7f9a645d43d0 &gt; , &lt; stevedore.extension.Extension object at 0x7f9a645d4d50 &gt; ]),</span></span><br><span class="line"><span class="string">            'network_source': set([ &lt; stevedore.extension.Extension object at 0x7f9a645def10 &gt; , &lt; stevedore.extension.Extension object at 0x7f9a645d4650 &gt; , &lt; stevedore.extension.Extension object at 0x7f9a645d4450 &gt; , &lt; stevedore.extension.Extension object at 0x7f9a645d4550 &gt; ]),</span></span><br><span class="line"><span class="string">            'volume_source': set([ &lt; stevedore.extension.Extension object at 0x7f9a645d4b50 &gt; , &lt; stevedore.extension.Extension object at 0x7f9a645d4c50 &gt; ])</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># self.pollster_matches 中存的是以你在配置文件中定义的 source name 为 key，以在 source name 中定义的每个采集插件的对象的集合为 value</span></span><br><span class="line">        <span class="comment"># Resources中的 key 是 source.name + 插件的名字</span></span><br><span class="line">        <span class="keyword">for</span> source_name <span class="keyword">in</span> self.pollster_matches:</span><br><span class="line">            <span class="keyword">for</span> pollster <span class="keyword">in</span> self.pollster_matches[source_name]:</span><br><span class="line"></span><br><span class="line">                <span class="string">"""</span></span><br><span class="line"><span class="string">                first</span></span><br><span class="line"><span class="string">                    (Pdb) p key</span></span><br><span class="line"><span class="string">                    'meter_source-memory.util'</span></span><br><span class="line"><span class="string">                    (Pdb) p candidate_res</span></span><br><span class="line"><span class="string">                    []</span></span><br><span class="line"><span class="string">                    (Pdb) p pollster.obj.default_discovery</span></span><br><span class="line"><span class="string">                    'local_instances'                               </span></span><br><span class="line"><span class="string">                """</span></span><br><span class="line">                key = Resources.key(source_name, pollster)</span><br><span class="line">                candidate_res = list(</span><br><span class="line">                    self.resources[key].get(discovery_cache))</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> candidate_res <span class="keyword">and</span> pollster.obj.default_discovery:</span><br><span class="line">                    candidate_res = self.manager.discover(</span><br><span class="line">                        [pollster.obj.default_discovery], discovery_cache)</span><br><span class="line">                    <span class="string">"""</span></span><br><span class="line"><span class="string">                    (Pdb) p candidate_res</span></span><br><span class="line"><span class="string">                    [&lt;Server: jy-2&gt;]</span></span><br><span class="line"><span class="string">                    """</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># Remove duplicated resources and black resources. Using</span></span><br><span class="line">                <span class="comment"># set() requires well defined __hash__ for each resource.</span></span><br><span class="line">                <span class="comment"># Since __eq__ is defined, 'not in' is safe here.</span></span><br><span class="line">                polling_resources = []</span><br><span class="line">                black_res = self.resources[key].blacklist</span><br><span class="line">                history = poll_history.get(pollster.name, [])</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> candidate_res:</span><br><span class="line">                    <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> history:</span><br><span class="line">                        history.append(x)</span><br><span class="line">                        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> black_res:</span><br><span class="line">                            polling_resources.append(x)</span><br><span class="line">                <span class="string">"""</span></span><br><span class="line"><span class="string">                first</span></span><br><span class="line"><span class="string">                    (Pdb) p poll_history</span></span><br><span class="line"><span class="string">                    &#123;'memory.util': [&lt;Server: jy-2&gt;]&#125;</span></span><br><span class="line"><span class="string">                second</span></span><br><span class="line"><span class="string">                    (Pdb) p poll_history</span></span><br><span class="line"><span class="string">                    &#123;'memory.util': [&lt;Server: jy-2&gt;], 'memory.usage': [&lt;Server: jy-2&gt;]&#125;</span></span><br><span class="line"><span class="string">                """</span></span><br><span class="line">                poll_history[pollster.name] = history</span><br><span class="line"></span><br><span class="line">                <span class="comment"># If no resources, skip for this pollster</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> polling_resources:</span><br><span class="line">                    p_context = <span class="string">'new '</span> <span class="keyword">if</span> history <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">                    LOG.info(_(<span class="string">"Skip pollster %(name)s, no %(p_context)s"</span></span><br><span class="line">                               <span class="string">"resources found this cycle"</span>),</span><br><span class="line">                             &#123;<span class="string">'name'</span>: pollster.name, <span class="string">'p_context'</span>: p_context&#125;)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                LOG.info(_(<span class="string">"Polling pollster %(poll)s in the context of "</span></span><br><span class="line">                           <span class="string">"%(src)s"</span>),</span><br><span class="line">                         dict(poll=pollster.name, src=source_name))</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    polling_timestamp = timeutils.utcnow().isoformat()</span><br><span class="line">                    samples = pollster.obj.get_samples(</span><br><span class="line">                        manager=self.manager,</span><br><span class="line">                        cache=cache,</span><br><span class="line">                        resources=polling_resources</span><br><span class="line">                    )</span><br><span class="line">                    sample_batch = []</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># filter None in samples</span></span><br><span class="line">                    <span class="string">"""</span></span><br><span class="line"><span class="string">                    first</span></span><br><span class="line"><span class="string">                        (Pdb) samples</span></span><br><span class="line"><span class="string">                        [&lt;name: memory.util, volume: 18.58, resource_id: 32eb16e0-c8af-4b41-b18c-b63152f0f8fc, timestamp: None&gt;]</span></span><br><span class="line"><span class="string">                    second</span></span><br><span class="line"><span class="string">                        (Pdb) samples</span></span><br><span class="line"><span class="string">                        [&lt;name: memory.usage, volume: 91, resource_id: 32eb16e0-c8af-4b41-b18c-b63152f0f8fc, timestamp: None&gt;]</span></span><br><span class="line"><span class="string">                    """</span></span><br><span class="line">                    samples = [s <span class="keyword">for</span> s <span class="keyword">in</span> samples <span class="keyword">if</span> s <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>]</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> sample <span class="keyword">in</span> samples:</span><br><span class="line">                        <span class="comment"># Note(yuywz): Unify the timestamp of polled samples</span></span><br><span class="line">                        sample.set_timestamp(polling_timestamp)</span><br><span class="line">                        <span class="string">"""</span></span><br><span class="line"><span class="string">                        (Pdb) sample_dict</span></span><br><span class="line"><span class="string">                        &#123;</span></span><br><span class="line"><span class="string">                            'counter_name': 'memory.util',</span></span><br><span class="line"><span class="string">                            'resource_id': u '32eb16e0-c8af-4b41-b18c-b63152f0f8fc',</span></span><br><span class="line"><span class="string">                            'timestamp': '2020-06-19T06:21:32.542893',</span></span><br><span class="line"><span class="string">                            'counter_volume': 18.58,</span></span><br><span class="line"><span class="string">                            'user_id': u '7431e07e49de2703f1b9e703daf5aff158e32028506f77e05a62e9eb3892dcde',</span></span><br><span class="line"><span class="string">                            'message_signature': '76e6cbd944963855306b829cdf2c49bba9f0b20220c8c738b61b5048be51b24f',</span></span><br><span class="line"><span class="string">                            'resource_metadata': &#123;</span></span><br><span class="line"><span class="string">                                'status': u 'active',</span></span><br><span class="line"><span class="string">                                'ephemeral_gb': 0,</span></span><br><span class="line"><span class="string">                                'disk_gb': 0,</span></span><br><span class="line"><span class="string">                                'instance_host': u 'node-3.domain.tld',</span></span><br><span class="line"><span class="string">                                'kernel_id': None,</span></span><br><span class="line"><span class="string">                                'image': None,</span></span><br><span class="line"><span class="string">                                'ramdisk_id': None,</span></span><br><span class="line"><span class="string">                                'host': u '619a474e64dbedcd55508bda51aea8a611fd15f3f3e8fa39ce0d0552',</span></span><br><span class="line"><span class="string">                                'flavor': &#123;</span></span><br><span class="line"><span class="string">                                    'name': u '1C-0.5G',</span></span><br><span class="line"><span class="string">                                    u 'links': [&#123;</span></span><br><span class="line"><span class="string">                                        u 'href': u 'http://nova-api.openstack.svc.cluster.local:8774/ca80e5ccd445438580c4b128296d1936/flavors/211',</span></span><br><span class="line"><span class="string">                                        u 'rel': u 'bookmark'</span></span><br><span class="line"><span class="string">                                    &#125;],</span></span><br><span class="line"><span class="string">                                    'ram': 512,</span></span><br><span class="line"><span class="string">                                    'ephemeral': 0,</span></span><br><span class="line"><span class="string">                                    'vcpus': 1,</span></span><br><span class="line"><span class="string">                                    'disk': 0,</span></span><br><span class="line"><span class="string">                                    u 'id': u '211'</span></span><br><span class="line"><span class="string">                                &#125;,</span></span><br><span class="line"><span class="string">                                'task_state': None,</span></span><br><span class="line"><span class="string">                                'image_ref_url': None,</span></span><br><span class="line"><span class="string">                                'memory_mb': 512,</span></span><br><span class="line"><span class="string">                                'root_gb': 0,</span></span><br><span class="line"><span class="string">                                'display_name': u 'jy-2',</span></span><br><span class="line"><span class="string">                                'name': u 'instance-00000002',</span></span><br><span class="line"><span class="string">                                'vcpus': 1,</span></span><br><span class="line"><span class="string">                                'instance_id': u '32eb16e0-c8af-4b41-b18c-b63152f0f8fc',</span></span><br><span class="line"><span class="string">                                'instance_type': u '1C-0.5G',</span></span><br><span class="line"><span class="string">                                'state': u 'active',</span></span><br><span class="line"><span class="string">                                'image_ref': None,</span></span><br><span class="line"><span class="string">                                'OS-EXT-AZ:availability_zone': u 'default-az'</span></span><br><span class="line"><span class="string">                            &#125;,</span></span><br><span class="line"><span class="string">                            'source': 'openstack',</span></span><br><span class="line"><span class="string">                            'counter_unit': '%',</span></span><br><span class="line"><span class="string">                            'project_id': u '34ecb9aca8454157bd5c3c64708990bf',</span></span><br><span class="line"><span class="string">                            'message_id': '6fbcdc0e-b1f5-11ea-a901-be1696955049',</span></span><br><span class="line"><span class="string">                            'monotonic_time': None,</span></span><br><span class="line"><span class="string">                            'counter_type': 'gauge'</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                        """</span></span><br><span class="line">                        sample_dict = (</span><br><span class="line">                            publisher_utils.meter_message_from_counter(</span><br><span class="line">                                sample, self._telemetry_secret</span><br><span class="line">                            ))</span><br><span class="line">                        <span class="keyword">if</span> self._batch:</span><br><span class="line">                            sample_batch.append(sample_dict)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            self._send_notification([sample_dict])</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> sample_batch:</span><br><span class="line">                        self._send_notification(sample_batch)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">except</span> plugin_base.PollsterPermanentError <span class="keyword">as</span> err:</span><br><span class="line">                    LOG.error(_(</span><br><span class="line">                        <span class="string">'Prevent pollster %(name)s for '</span></span><br><span class="line">                        <span class="string">'polling source %(source)s anymore!'</span>)</span><br><span class="line">                        % (&#123;<span class="string">'name'</span>: pollster.name, <span class="string">'source'</span>: source_name&#125;))</span><br><span class="line">                    self.resources[key].blacklist.extend(err.fail_res_list)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">                    LOG.warning(_(</span><br><span class="line">                        <span class="string">'Continue after error from %(name)s: %(error)s'</span>)</span><br><span class="line">                        % (&#123;<span class="string">'name'</span>: pollster.name, <span class="string">'error'</span>: err&#125;),</span><br><span class="line">                        exc_info=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_send_notification</span><span class="params">(self, samples)</span>:</span></span><br><span class="line">        self.manager.notifier.sample(</span><br><span class="line">            &#123;&#125;,</span><br><span class="line">            <span class="string">'telemetry.polling'</span>,</span><br><span class="line">            &#123;<span class="string">'samples'</span>: samples&#125;</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>
<ol>
<li><p>前 5 行不谈</p>
</li>
<li><p>第 19 和 20 行，拿出在 self.pollster_matches 中定义的资源和插件遍历，然后第 31 行到最后都是采集数据的一些转换，其中比较重要的地方都已经打印出来了，很清楚，选几个介绍下（candidate_res这个对象我现在貌似还不能非常清楚的理解，如果有清楚的大佬，还请麻烦留言介绍下，十分感谢）</p>
</li>
<li><p>看下第 76 行，这边就是采集数据的地方，调用的就是插件中的方法，比如现在的pollster.name=memory.usage，那么就是调用MemoryUsagePollster类的get_samples方法，可以看见在该方法中实现数据采集之后，yield 返回</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemoryUsagePollster</span><span class="params">(pollsters.BaseComputePollster)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_samples</span><span class="params">(self, manager, cache, resources)</span>:</span></span><br><span class="line">        self._inspection_duration = self._record_poll_time()</span><br><span class="line">        <span class="keyword">for</span> instance <span class="keyword">in</span> resources:</span><br><span class="line">            LOG.debug(<span class="string">'Checking memory usage for instance %s'</span>, instance.id)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                memory_info = self.inspector.inspect_memory_usage(</span><br><span class="line">                    instance, self._inspection_duration)</span><br><span class="line">                LOG.debug(<span class="string">"MEMORY USAGE: %(instance)s %(usage)f"</span>,</span><br><span class="line">                          &#123;<span class="string">'instance'</span>: instance,</span><br><span class="line">                           <span class="string">'usage'</span>: memory_info.usage&#125;)</span><br><span class="line">                <span class="keyword">yield</span> util.make_sample_from_instance(</span><br><span class="line">                    instance,</span><br><span class="line">                    name=<span class="string">'memory.usage'</span>,</span><br><span class="line">                    type=sample.TYPE_GAUGE,</span><br><span class="line">                    unit=<span class="string">'MB'</span>,</span><br><span class="line">                    volume=memory_info.usage,</span><br><span class="line">                )</span><br></pre></td></tr></table></figure>
</li>
<li><p>再看下第 157 行，这里是实现发送消息的地方，调用self._send_notification(sample_batch)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_send_notification</span><span class="params">(self, samples)</span>:</span></span><br><span class="line">    self.manager.notifier.sample(</span><br><span class="line">        &#123;&#125;,</span><br><span class="line">        <span class="string">'telemetry.polling'</span>,</span><br><span class="line">        &#123;<span class="string">'samples'</span>: samples&#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<p>这里使用了oslo_messaging库，继续往里分析，这里的 sample 调用的是 oslo_messaging.py/notify/notifier.py:Notifier 类的 sample 方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sample</span><span class="params">(self, ctxt, event_type, payload)</span>:</span></span><br><span class="line">           </span><br><span class="line">    self._notify(ctxt, event_type, payload, <span class="string">'SAMPLE'</span>)</span><br></pre></td></tr></table></figure>
<p>继续往里调用 _notify 方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_notify</span><span class="params">(self, ctxt, event_type, payload, priority, publisher_id=None,</span></span></span><br><span class="line"><span class="function"><span class="params">            retry=None)</span>:</span></span><br><span class="line">    payload = self._serializer.serialize_entity(ctxt, payload)</span><br><span class="line">    ctxt = self._serializer.serialize_context(ctxt)</span><br><span class="line">           </span><br><span class="line">    msg = dict(message_id=six.text_type(uuid.uuid4()),</span><br><span class="line">               publisher_id=publisher_id <span class="keyword">or</span> self.publisher_id,</span><br><span class="line">               event_type=event_type,</span><br><span class="line">               priority=priority,</span><br><span class="line">               payload=payload,</span><br><span class="line">               timestamp=six.text_type(timeutils.utcnow()))</span><br><span class="line">           </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_notify</span><span class="params">(ext)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ext.obj.notify(ctxt, msg, priority, retry <span class="keyword">or</span> self.retry)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            _LOG.exception(<span class="string">"Problem '%(e)s' attempting to send to "</span></span><br><span class="line">                           <span class="string">"notification system. Payload=%(payload)s"</span>,</span><br><span class="line">                           &#123;<span class="string">'e'</span>: e, <span class="string">'payload'</span>: payload&#125;)</span><br><span class="line">           </span><br><span class="line">    <span class="keyword">if</span> self._driver_mgr.extensions:</span><br><span class="line">        self._driver_mgr.map(do_notify)</span><br></pre></td></tr></table></figure>
<p>这里主要是调用了 15 行，我们看下这个对象的信息：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) p ext.obj</span><br><span class="line">&lt;oslo_messaging.notify.messaging.MessagingV2Driver object at <span class="number">0x7f72f876d510</span>&gt;</span><br><span class="line">(Pdb) p ext.obj.__dict__</span><br><span class="line">&#123;<span class="string">'topics'</span>: [<span class="string">'notifications'</span>], <span class="string">'version'</span>: <span class="number">2.0</span>, <span class="string">'transport'</span>: &lt;oslo_messaging.transport.Transport object at <span class="number">0x7f72f85dd1d0</span>&gt;, <span class="string">'conf'</span>: &lt;oslo_config.cfg.ConfigOpts object at <span class="number">0x13dc990</span>&gt;&#125;</span><br></pre></td></tr></table></figure>
<p>继续往里调用 notify 方法（oslo_messaging.py/notify/messaging.py:MessagingDriver类）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notify</span><span class="params">(self, ctxt, message, priority, retry)</span>:</span></span><br><span class="line">    priority = priority.lower()</span><br><span class="line">    <span class="keyword">for</span> topic <span class="keyword">in</span> self.topics:</span><br><span class="line">        target = oslo_messaging.Target(topic=<span class="string">'%s.%s'</span> % (topic, priority))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.transport._send_notification(target, ctxt, message,</span><br><span class="line">                                              version=self.version,</span><br><span class="line">                                              retry=retry)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            LOG.exception(<span class="string">"Could not send notification to %(topic)s. "</span></span><br><span class="line">                          <span class="string">"Payload=%(message)s"</span>,</span><br><span class="line">                          &#123;<span class="string">'topic'</span>: topic, <span class="string">'message'</span>: message&#125;)</span><br></pre></td></tr></table></figure>
<p>可以看到这里的 target 就是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) p target</span><br><span class="line">&lt;Target topic=notifications.sample&gt;</span><br></pre></td></tr></table></figure>
<p>所以最终调用 self.transport._send_notification 将消息发送至 notifications.sample 队列，由此整个 ceilometer-compute 服务的采集任务就完成了</p>
<p>ceilometer-central 服务和 ceilometer-compute 服务差不多，加载命令空间的插件不同，逻辑基本一致，不赘述。</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>参考：<br><a href="https://www.cnblogs.com/luohaixian/p/11145939.html" target="_blank" rel="external">https://www.cnblogs.com/luohaixian/p/11145939.html</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Telemetry </tag>
            
            <tag> Ceilometer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gnocchi 使用原理及源码分析-下]]></title>
      <url>https://magiceses.github.io/2017/10/03/openstack-telemetry-gnocchi%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%90%86%E5%92%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E7%BB%AD/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">任何你的不足，在你成功的那刻，都会被人说为特色。所以，坚持做你自己，而不是在路上被别人修改的面目全非。<br></p>

<p>继续上篇的内容之前，先介绍下和今天有关系的两个库 numpy 、 pandas</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Python Data Analysis Library 或 pandas 是基于NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。Pandas 纳入了大量库和一些标准的数据模型，提供了高效地操作大型数据集所需的工具。pandas提供了大量能使我们快速便捷地处理数据的函数和方法。你很快就会发现，它是使Python成为强大而高效的数据分析环境的重要因素之一。</p>
<p>Pandas 是python的一个数据分析包，最初由AQR Capital Management于2008年4月开发，并于2009年底开源出来，目前由专注于Python数据包开发的PyData开发team继续开发和维护，属于PyData项目的一部分。Pandas最初被作为金融数据分析工具而开发出来，因此，pandas为时间序列分析提供了很好的支持。 Pandas的名称来自于面板数据（panel data）和python数据分析（data analysis）。panel data是经济学中关于多维数据集的一个术语，在Pandas中也提供了panel的数据类型。</p>
<a id="more"></a>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>Series：一维数组，与Numpy中的一维array类似。二者与Python基本的数据结构List也很相近，其区别是：List中的元素可以是不同的数据类型，而Array和Series中则只允许存储相同的数据类型，这样可以更有效的使用内存，提高运算效率。以下内容基本以这种结构为主。</p>
<p>Time- Series：以时间为索引的Series。</p>
<p>DataFrame：二维的表格型数据结构。很多功能与R中的data.frame类似。可以将DataFrame理解为Series的容器。</p>
<p>Panel ：三维的数组，可以理解为DataFrame的容器。</p>
<p>Pandas 有两种自己独有的基本数据结构。读者应该注意的是，它固然有着两种数据结构，因为它依然是 Python 的一个库，所以，Python 中有的数据类型在这里依然适用，也同样还可以使用类自己定义数据类型。只不过，Pandas 里面又定义了两种数据类型：Series 和 DataFrame，它们让数据操作更简单了。</p>
<h3 id="使用-Series"><a href="#使用-Series" class="headerlink" title="使用 Series"></a>使用 Series</h3><h4 id="创建-series"><a href="#创建-series" class="headerlink" title="创建 series"></a>创建 series</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入 Pandas 包</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建Series</span></span><br><span class="line"><span class="comment">#1.1.1 通过列表 List</span></span><br><span class="line">listSer=pd.Series([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])</span><br><span class="line">print(listSer)</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.1.2 通过字典 dict</span></span><br><span class="line">dictSer=pd.Series(&#123;<span class="string">'a'</span>:<span class="number">10</span>,<span class="string">'b'</span>:<span class="number">40</span>,<span class="string">'c'</span>:<span class="number">5</span>,<span class="string">'d'</span>:<span class="number">90</span>,<span class="string">'e'</span>:<span class="number">35</span>,<span class="string">'f'</span>:<span class="number">40</span>&#125;,name=<span class="string">'数值'</span>)</span><br><span class="line">print(dictSer)</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.1.3 通过 array</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arrySer=pd.Series(np.arange(<span class="number">10</span>,<span class="number">15</span>),index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>])</span><br><span class="line">print(arrySer)</span><br><span class="line"></span><br><span class="line">[output]</span><br><span class="line"><span class="number">0</span>    <span class="number">10</span></span><br><span class="line"><span class="number">1</span>    <span class="number">20</span></span><br><span class="line"><span class="number">2</span>    <span class="number">30</span></span><br><span class="line"><span class="number">3</span>    <span class="number">40</span></span><br><span class="line">dtype: int64</span><br><span class="line">a    <span class="number">10</span></span><br><span class="line">b    <span class="number">40</span></span><br><span class="line">c     <span class="number">5</span></span><br><span class="line">d    <span class="number">90</span></span><br><span class="line">e    <span class="number">35</span></span><br><span class="line">f    <span class="number">40</span></span><br><span class="line">Name: 数值, dtype: int64</span><br><span class="line">a    <span class="number">10</span></span><br><span class="line">b    <span class="number">11</span></span><br><span class="line">c    <span class="number">12</span></span><br><span class="line">d    <span class="number">13</span></span><br><span class="line">e    <span class="number">14</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<h4 id="index及value属性"><a href="#index及value属性" class="headerlink" title="index及value属性"></a>index及value属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Series类型包括(index,values)两部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#index</span></span><br><span class="line">print(arrySer.index)</span><br><span class="line"><span class="comment">#values</span></span><br><span class="line">print(arrySer.values)</span><br><span class="line"></span><br><span class="line">[output]</span><br><span class="line">Index([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>],dtype=<span class="string">'object'</span>)</span><br><span class="line">[<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pandas.Index.is_monotonic <span class="comment"># Alias for is_monotonic_increasing</span></span><br><span class="line"></span><br><span class="line">pandas.Index.is_monotonic_increasing</span><br><span class="line"><span class="comment"># Return if the index is monotonic increasing (only equal or increasing) values.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line">Index([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).is_monotonic_increasing</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">Index([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]).is_monotonic_increasing</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">Index([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>]).is_monotonic_increasing</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pandas.Index.has_duplicates</span><br><span class="line"><span class="comment"># Check if the Index has duplicate values.</span></span><br><span class="line"></span><br><span class="line">idx = pd.Index([<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>])</span><br><span class="line">idx.has_duplicates</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">idx = pd.Index([<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>])</span><br><span class="line">idx.has_duplicates</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pandas.Series.combine_first(other)</span><br><span class="line"><span class="comment"># 用“other”中相同位置的值更新空元素。</span></span><br><span class="line"><span class="comment"># 通过用另一个系列的非空值填充一个系列中的空值来组合两个系列对象。结果索引将是两个索引的并集。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line">s1 = pd.Series([<span class="number">1</span>, np.nan])</span><br><span class="line">s2 = pd.Series([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">s1.combine_first(s2)</span><br><span class="line"><span class="number">0</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">5.0</span></span><br><span class="line">dtype: float64</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 如果该空值的位置不存在于 other</span></span><br><span class="line">s1 = pd.Series(&#123;<span class="string">'falcon'</span>: np.nan, <span class="string">'eagle'</span>: <span class="number">160.0</span>&#125;)</span><br><span class="line">s2 = pd.Series(&#123;<span class="string">'eagle'</span>: <span class="number">200.0</span>, <span class="string">'duck'</span>: <span class="number">30.0</span>&#125;)</span><br><span class="line">s1.combine_first(s2)</span><br><span class="line">duck       <span class="number">30.0</span></span><br><span class="line">eagle     <span class="number">160.0</span></span><br><span class="line">falcon      NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure>
<p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Index.has_duplicates.html" target="_blank" rel="external">pandas methed</a></p>
<h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#iloc通过位置获取数据</span></span><br><span class="line">dictSer[<span class="number">0</span>:<span class="number">1</span>] <span class="comment">#相当于dictSer.iloc[0:1]</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">a    <span class="number">10</span></span><br><span class="line">Name: 数值, dtype: int64</span><br><span class="line"></span><br><span class="line"><span class="comment">#loc通过索引获取数据</span></span><br><span class="line">dictSer[[<span class="string">'a'</span>,<span class="string">'b'</span>]]  <span class="comment">#相当于dictSer.loc[['a','b']]</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">a    <span class="number">10</span></span><br><span class="line">b    <span class="number">40</span></span><br><span class="line">Name: 数值, dtype: int64</span><br><span class="line"></span><br><span class="line"><span class="comment">#boolean indexing获取值</span></span><br><span class="line">dictSer[dictSer.values&lt;=<span class="number">10</span>] <span class="comment">#获取值不超过10的数据</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">a    <span class="number">10</span></span><br><span class="line">c     <span class="number">5</span></span><br><span class="line">Name: 数值, dtype: int64</span><br><span class="line"></span><br><span class="line">dictSer[dictSer.index!=<span class="string">'a'</span>]  <span class="comment">#获取索引值不是a的数据</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">b    <span class="number">40</span></span><br><span class="line">c     <span class="number">5</span></span><br><span class="line">d    <span class="number">90</span></span><br><span class="line">e    <span class="number">35</span></span><br><span class="line">f    <span class="number">40</span></span><br><span class="line">Name: 数值, dtype: int64</span><br></pre></td></tr></table></figure>
<h4 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看描述性统计数据</span></span><br><span class="line"></span><br><span class="line">dictSer.describe() </span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">count     <span class="number">6.000000</span></span><br><span class="line">mean     <span class="number">36.666667</span></span><br><span class="line">std      <span class="number">30.276504</span></span><br><span class="line">min       <span class="number">5.000000</span></span><br><span class="line"><span class="number">25</span>%      <span class="number">16.250000</span></span><br><span class="line"><span class="number">50</span>%      <span class="number">37.500000</span></span><br><span class="line"><span class="number">75</span>%      <span class="number">40.000000</span></span><br><span class="line">max      <span class="number">90.000000</span></span><br><span class="line">Name: 数值, dtype: float64</span><br><span class="line"></span><br><span class="line">dictSer.mean() <span class="comment">#均值</span></span><br><span class="line">dictSer.median() <span class="comment">#中位数</span></span><br><span class="line">dictSer.sum() <span class="comment">#求和</span></span><br><span class="line">dictSer.std() <span class="comment">#标准差</span></span><br><span class="line">dictSer.mode() <span class="comment">#众数</span></span><br><span class="line">dictSer.value_counts() <span class="comment">#每个值的数量</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数学运算</span></span><br><span class="line"></span><br><span class="line">dictSer/<span class="number">2</span> <span class="comment">#对每个值除2</span></span><br><span class="line">dictSer//<span class="number">2</span> <span class="comment">#对每个值除2后取整</span></span><br><span class="line">dictSer%<span class="number">2</span> <span class="comment">#取余</span></span><br><span class="line">dictSer**<span class="number">2</span> <span class="comment">#求平方</span></span><br><span class="line">np.sqrt(dictSer) <span class="comment">#求开方</span></span><br><span class="line">np.log(dictSer) <span class="comment">#求对数</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对齐计算</span></span><br><span class="line"></span><br><span class="line">dictSer2=pd.Series(&#123;<span class="string">'a'</span>:<span class="number">10</span>,<span class="string">'b'</span>:<span class="number">20</span>,<span class="string">'d'</span>:<span class="number">23</span>,<span class="string">'g'</span>:<span class="number">90</span>,<span class="string">'h'</span>:<span class="number">35</span>,<span class="string">'i'</span>:<span class="number">40</span>&#125;,name=<span class="string">'数值'</span>)</span><br><span class="line">dictSer3=dictSer+dictSer2</span><br><span class="line">dictSer3</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">a     <span class="number">20.0</span></span><br><span class="line">b     <span class="number">60.0</span></span><br><span class="line">c      NaN</span><br><span class="line">d    <span class="number">113.0</span></span><br><span class="line">e      NaN</span><br><span class="line">f      NaN</span><br><span class="line">g      NaN</span><br><span class="line">h      NaN</span><br><span class="line">i      NaN</span><br><span class="line">Name: 数值, dtype: float64</span><br></pre></td></tr></table></figure>
<h4 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#找出空/非空值</span></span><br><span class="line">dictSer3[dictSer3.notnull()] <span class="comment">#非空值</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">a     <span class="number">20.0</span></span><br><span class="line">b     <span class="number">60.0</span></span><br><span class="line">d    <span class="number">113.0</span></span><br><span class="line">Name: 数值, dtype: float64</span><br><span class="line"></span><br><span class="line">dictSer3[dictSer3.isnull()]  <span class="comment">#空值</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">c   NaN</span><br><span class="line">e   NaN</span><br><span class="line">f   NaN</span><br><span class="line">g   NaN</span><br><span class="line">h   NaN</span><br><span class="line">i   NaN</span><br><span class="line">Name: 数值, dtype: float64</span><br><span class="line"></span><br><span class="line"><span class="comment">#填充空值</span></span><br><span class="line">dictSer3=dictSer3.fillna(dictSer3.mean()) <span class="comment">#用均值来填充缺失值</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">a     <span class="number">20.000000</span></span><br><span class="line">b     <span class="number">60.000000</span></span><br><span class="line">c     <span class="number">64.333333</span></span><br><span class="line">d    <span class="number">113.000000</span></span><br><span class="line">e     <span class="number">64.333333</span></span><br><span class="line">f     <span class="number">64.333333</span></span><br><span class="line">g     <span class="number">64.333333</span></span><br><span class="line">h     <span class="number">64.333333</span></span><br><span class="line">i     <span class="number">64.333333</span></span><br><span class="line">Name: 数值, dtype: float64</span><br></pre></td></tr></table></figure>
<h4 id="删除值"><a href="#删除值" class="headerlink" title="删除值"></a>删除值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dictSer3=dictSer3.drop(<span class="string">'b'</span>)</span><br><span class="line">print(dictSer3)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">a     <span class="number">20.000000</span></span><br><span class="line">c     <span class="number">64.333333</span></span><br><span class="line">d    <span class="number">113.000000</span></span><br><span class="line">e     <span class="number">64.333333</span></span><br><span class="line">f     <span class="number">64.333333</span></span><br><span class="line">g     <span class="number">64.333333</span></span><br><span class="line">h     <span class="number">64.333333</span></span><br><span class="line">i     <span class="number">64.333333</span></span><br><span class="line">Name: 数值, dtype: float64</span><br></pre></td></tr></table></figure>
<p>总结归纳：</p>
<p><img src="/images/openstack-telemetry-6.png" alt="Array/Series/DataFrame对比学习"></p>
<p><img src="/images/openstack-telemetry-7.png" alt="Pandas包之Series"></p>
<h3 id="使用-timestamp"><a href="#使用-timestamp" class="headerlink" title="使用 timestamp"></a>使用 timestamp</h3><h4 id="Timestamp"><a href="#Timestamp" class="headerlink" title="Timestamp()"></a>Timestamp()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line">p1=pd.Timestamp(<span class="number">2017</span>,<span class="number">6</span>,<span class="number">19</span>)</span><br><span class="line">p2=pd.Timestamp(dt(<span class="number">2017</span>,<span class="number">6</span>,<span class="number">19</span>,hour=<span class="number">9</span>,minute=<span class="number">13</span>,second=<span class="number">45</span>))</span><br><span class="line">p3=pd.Timestamp(<span class="string">"2017-6-19 9:13:45"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"type of p1:"</span>,type(p1))</span><br><span class="line">print(p1)</span><br><span class="line">print(<span class="string">"type of p2:"</span>,type(p2))</span><br><span class="line">print(p2)</span><br><span class="line">print(<span class="string">"type of p3:"</span>,type(p3))</span><br><span class="line">print(p3)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">(<span class="string">'type of p1:'</span>, &lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">tslib</span>.<span class="title">Timestamp</span>'&gt;)</span></span><br><span class="line"><span class="class">2017-06-19 00:</span><span class="number">00</span>:<span class="number">00</span></span><br><span class="line">(<span class="string">'type of p2:'</span>, &lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">tslib</span>.<span class="title">Timestamp</span>'&gt;)</span></span><br><span class="line"><span class="class">2017-06-19 09:</span><span class="number">13</span>:<span class="number">45</span></span><br><span class="line">(<span class="string">'type of p3:'</span>, &lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">tslib</span>.<span class="title">Timestamp</span>'&gt;)</span></span><br><span class="line"><span class="class">2017-06-19 09:</span><span class="number">13</span>:<span class="number">45</span></span><br></pre></td></tr></table></figure>
<h4 id="to-datetime"><a href="#to-datetime" class="headerlink" title="to_datetime()"></a>to_datetime()</h4><p><code>pandas.to_datetime（arg，errors =&#39;raise&#39;，utc = None，format = None，unit = None ）</code></p>
<p><strong>errors</strong>：三种取值，‘ignore’, ‘raise’, ‘coerce’，默认为raise。</p>
<ul>
<li><p>‘raise’，则无效的解析将引发异常</p>
</li>
<li><p>‘coerce’，那么无效解析将被设置为NaT</p>
</li>
<li><p>‘ignore’，那么无效的解析将返回输入值</p>
</li>
</ul>
<p><strong>utc</strong>：布尔值，默认为none。返回utc即协调世界时。<br><strong>format</strong>：格式化显示时间的格式。<br><strong>unit</strong>：默认值为‘ns’，则将会精确到微妙，‘s’为秒。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line"></span><br><span class="line">p4=pd.to_datetime(<span class="string">"2017-6-19 9:13:45"</span>)</span><br><span class="line">p5=pd.to_datetime(dt(<span class="number">2017</span>,<span class="number">6</span>,<span class="number">19</span>,hour=<span class="number">9</span>,minute=<span class="number">13</span>,second=<span class="number">45</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"type of p4:"</span>,type(p4))</span><br><span class="line">print(p4)</span><br><span class="line">print(<span class="string">"type of p5:"</span>,type(p5))</span><br><span class="line">print(p5)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">(<span class="string">'type of p4:'</span>, &lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">tslib</span>.<span class="title">Timestamp</span>'&gt;)</span></span><br><span class="line"><span class="class">2017-06-19 09:</span><span class="number">13</span>:<span class="number">45</span></span><br><span class="line">(<span class="string">'type of p5:'</span>, &lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">tslib</span>.<span class="title">Timestamp</span>'&gt;)</span></span><br><span class="line"><span class="class">2017-06-19 09:</span><span class="number">13</span>:<span class="number">45</span></span><br></pre></td></tr></table></figure>
<h2 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h2><p>Numpy（Numerical Python 的简称）时高性能科学计算和数据分析的基础包，提供了矩阵运算的功能。</p>
<p>相关链接<a href="https://docs.scipy.org/doc/numpy/user/quickstart.html" target="_blank" rel="external">Numpy官方推荐教程</a></p>
<p>Numpy具有以下几点能力：</p>
<ul>
<li>ndarry——一个具有向量算数运算和复杂广播能力的多位数组对象</li>
<li>用于对数组数据进行快速运算的标准数学函数</li>
<li>用于读写磁盘数据的工具以及用于操作内存映射文件的工具</li>
<li>非常有用的线性代数，傅立叶变换和随机数操作</li>
<li>用于继承c/c++和Fortran代码的工具</li>
</ul>
<h3 id="创建Numpy数组"><a href="#创建Numpy数组" class="headerlink" title="创建Numpy数组"></a>创建Numpy数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用numpy.array()可直接导入数组或矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">b = np.array([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]])</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">[[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">2</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">3</span> <span class="number">3</span>]]</span><br></pre></td></tr></table></figure>
<h3 id="获取与创建数组时设置纬度"><a href="#获取与创建数组时设置纬度" class="headerlink" title="获取与创建数组时设置纬度"></a>获取与创建数组时设置纬度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reshape将当前一位数组设置成对应的m*n的矩阵</span></span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>])</span><br><span class="line">a = a.reshape(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[[ <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>]</span><br><span class="line"> [ <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span>]</span><br><span class="line"> [<span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过a.shape()可以查看当前矩阵的纬度，返回值是一个元组</span></span><br><span class="line"></span><br><span class="line">tu = a.shape</span><br><span class="line">print(tu)</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<h3 id="数组索引、切片、比较"><a href="#数组索引、切片、比较" class="headerlink" title="数组索引、切片、比较"></a>数组索引、切片、比较</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">matrix = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]])</span><br><span class="line"><span class="comment"># *索引与正常二位数组相同*</span></span><br><span class="line">print(matrix[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">matrix = np.array([</span><br><span class="line">[<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>],</span><br><span class="line">[<span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>],</span><br><span class="line">[<span class="number">35</span>,<span class="number">40</span>,<span class="number">45</span>]])</span><br><span class="line"><span class="comment"># *切片与正常二维数组相同*</span></span><br><span class="line">print(matrix[:,<span class="number">1</span>])</span><br><span class="line">print(matrix[:,<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">print(matrix[<span class="number">1</span>:<span class="number">3</span>,:])</span><br><span class="line">print(matrix[<span class="number">1</span>:<span class="number">3</span>,<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># *结果*</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">[<span class="number">10</span> <span class="number">25</span> <span class="number">40</span>]</span><br><span class="line">[[ <span class="number">5</span> <span class="number">10</span>]</span><br><span class="line"> [<span class="number">20</span> <span class="number">25</span>]</span><br><span class="line"> [<span class="number">35</span> <span class="number">40</span>]]</span><br><span class="line">[[<span class="number">20</span> <span class="number">25</span> <span class="number">30</span>]</span><br><span class="line"> [<span class="number">35</span> <span class="number">40</span> <span class="number">45</span>]]</span><br><span class="line">[[<span class="number">20</span> <span class="number">25</span>]</span><br><span class="line"> [<span class="number">35</span> <span class="number">40</span>]]</span><br><span class="line"><span class="comment"># *比较返回的是每一个数组元素比较之后的值，返回的也是一个数组，都是布尔类型*</span></span><br><span class="line"> z = (matrix[<span class="number">1</span>,:]==<span class="number">25</span>)</span><br><span class="line">print(z)</span><br><span class="line"><span class="comment"># *结果*</span></span><br><span class="line">[<span class="keyword">False</span>  <span class="keyword">True</span> <span class="keyword">False</span>]</span><br></pre></td></tr></table></figure>
<h3 id="数组值的替换"><a href="#数组值的替换" class="headerlink" title="数组值的替换"></a>数组值的替换</h3><p>值的替换在自然语言处理中很有用，例如我们在处理一个文本数组的时候，有几个数据元素是空，那么我们可以结合判断语句来获得是否为空的一个布尔数组，然后利用这个布尔数组进行元素替换</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">matrix=np.array([[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">''</span>],[<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>],[<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">''</span>]])</span><br><span class="line">m = (matrix[:,<span class="number">2</span>] == <span class="string">''</span>)</span><br><span class="line">matrix[m,<span class="number">2</span>]=<span class="string">'0'</span></span><br><span class="line">print(matrix)</span><br><span class="line"></span><br><span class="line"><span class="comment"># *这里判断第三列中值为空的数据，返回一个bool类型的数组，再将bool类型的数组当成是数组的下标进行替换数据就可以了，这里只会替换值为真的时候的值，所以完全不必担心替换不必要的数据*</span></span><br></pre></td></tr></table></figure>
<h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>初始化时设置数据类型用dtype<br>astype用于更改数据类型</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector = np.array([<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>])</span><br><span class="line">vector = vector.astype(float)</span><br><span class="line">print(vector)</span><br><span class="line">*结果*</span><br><span class="line">[<span class="number">1.</span> <span class="number">2.</span> <span class="number">3.</span>]</span><br></pre></td></tr></table></figure>
<h3 id="统计计算方法"><a href="#统计计算方法" class="headerlink" title="统计计算方法"></a>统计计算方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sum</span><br><span class="line">mean</span><br><span class="line">max</span><br><span class="line">**********</span><br><span class="line">vector.sum()</span><br><span class="line">vector.mean()</span><br><span class="line">vector.max()</span><br><span class="line">**********</span><br><span class="line"><span class="number">6.0</span>    和</span><br><span class="line"><span class="number">2.0</span>   平均</span><br><span class="line"><span class="number">3.0</span>   最大</span><br><span class="line">************</span><br><span class="line">对于矩阵需要设置行或者列</span><br><span class="line">matrix = np.array([[<span class="number">20</span>,<span class="number">10</span>,<span class="number">15</span>],[<span class="number">30</span>,<span class="number">20</span>,<span class="number">14</span>],[<span class="number">30</span>,<span class="number">29</span>,<span class="number">43</span>]])</span><br><span class="line">matrix.sum(axis=<span class="number">1</span>)//每行相加求和</span><br><span class="line">*结果*</span><br><span class="line">array([ <span class="number">45</span>,  <span class="number">64</span>, <span class="number">102</span>])</span><br><span class="line"></span><br><span class="line">matrix.sum(axis=<span class="number">0</span>)//每列相加求和</span><br><span class="line">*结果*</span><br><span class="line">array([<span class="number">80</span>, <span class="number">59</span>, <span class="number">72</span>])</span><br></pre></td></tr></table></figure>
<h3 id="计算差值"><a href="#计算差值" class="headerlink" title="计算差值"></a>计算差值</h3><p><code>numpy.diff(a, n=1,axis=-1)</code></p>
<p>沿着指定轴计算第N维的离散差值<br>参数：<br>a：输入矩阵<br>n：可选，代表要执行几次差值<br>axis：默认是最后一个<br>示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">A = np.arange(<span class="number">2</span> , <span class="number">14</span>).reshape((<span class="number">3</span> , <span class="number">4</span>))</span><br><span class="line">A[<span class="number">1</span> , <span class="number">1</span>] = <span class="number">8</span></span><br><span class="line">print(<span class="string">'A:'</span> , A)</span><br><span class="line"><span class="comment"># A: [[ 2  3  4  5]</span></span><br><span class="line"><span class="comment">#  [ 6  8  8  9]</span></span><br><span class="line"><span class="comment">#  [10 11 12 13]]</span></span><br><span class="line"></span><br><span class="line">print(np.diff(A))</span><br><span class="line"><span class="comment"># [[1 1 1]</span></span><br><span class="line"><span class="comment">#  [2 0 1]</span></span><br><span class="line"><span class="comment">#  [1 1 1]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从输出结果可以看出，其实diff函数就是执行的是后一个元素减去前一个元素。</span></span><br></pre></td></tr></table></figure>
<h3 id="添加元素-insert"><a href="#添加元素-insert" class="headerlink" title="添加元素 insert"></a>添加元素 insert</h3><p><code>numpy.insert(arr, obj, values, axis=None)</code></p>
<p>第一个参数arr是一个数组，可以是一维的也可以是多维的，在arr的基础上插入元素</p>
<p>第二个参数obj是元素插入的位置</p>
<p>第三个参数values是需要插入的数值</p>
<p>第四个参数axis是指示在哪一个轴上对应的插入位置进行插入</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一维数组示例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">4</span>)</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># [0 1 2 3]</span></span><br><span class="line"></span><br><span class="line">print(np.insert(a, <span class="number">2</span>, <span class="number">100</span>))</span><br><span class="line"><span class="comment"># [  0   1 100   2   3]</span></span><br><span class="line"></span><br><span class="line">print(np.insert(a, <span class="number">1</span>, [<span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>]))</span><br><span class="line"><span class="comment"># [  0 100 101 102   1   2   3]</span></span><br><span class="line"></span><br><span class="line">print(np.insert(a, [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>], [<span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>]))</span><br><span class="line"><span class="comment"># [100   0   1 101   2   3 102]</span></span><br></pre></td></tr></table></figure>
<p>多维数组可以看下 –&gt; <a href="https://blog.csdn.net/qq_18351157/article/details/107831008?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.control&amp;spm=1001.2101.3001.4242" target="_blank" rel="external">numpy.insert  详解</a></p>
<h3 id="缓冲区读取"><a href="#缓冲区读取" class="headerlink" title="缓冲区读取"></a>缓冲区读取</h3><p><code>numpy.frombuffer(buffer, dtype = float, count = -1, offset = 0)</code></p>
<p>第一个参数 <strong>buffer</strong> ：<code>buffer_like</code>：公开缓冲区接口的对象。</p>
<p>第二个参数 <strong>dtype</strong> ：<code>data-type</code>, 可选：返回array的数据类型;默认值:float。</p>
<p>第三个参数 <strong>count</strong> ：<code>int</code>, 可选：要阅读的条目数。<code>-1</code>表示缓冲区中的所有数据。</p>
<p>第四个参数 <strong>offset</strong> ：<code>int</code>, 可选：从这个偏移量(以字节为单位)开始读取缓冲区;默认值:<code>0</code>。</p>
<p>此函数将缓冲区解释为一维数组。 暴露缓冲区接口的任何对象都用作参数来返回<code>ndarray</code>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">s =  <span class="string">'Hello World'</span> </span><br><span class="line">a = np.frombuffer(s, dtype =  <span class="string">'S1'</span>)  </span><br><span class="line"><span class="keyword">print</span> a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># ['H'  'e'  'l'  'l'  'o'  ' '  'W'  'o'  'r'  'l'  'd']</span></span><br></pre></td></tr></table></figure>
<h3 id="计算给定轴上数组元素的累计和"><a href="#计算给定轴上数组元素的累计和" class="headerlink" title="计算给定轴上数组元素的累计和"></a>计算给定轴上数组元素的累计和</h3><p><code>numpy.cumsum(arr, axis=None, dtype=None, out=None)</code></p>
<p>第一个参数 <strong>arr :</strong> [数组]包含需要累计综合的数字的数组。如果arr不是数组，则尝试进行转换。</p>
<p>第二个参数 <strong>axis :</strong> 计算累计的轴，默认值是计算展平数组的综合。</p>
<ul>
<li>axis=0，按照行累加。</li>
<li>axis=1，按照列累加。</li>
<li>axis不给定具体值，就把numpy数组当成一个一维数组。</li>
</ul>
<p>第三个参数 <strong>dtype :</strong> 返回数组的类型，以及与元素相乘的累加器的类型。如果未指定dtype，则默认为arr的dtype，除非arr的整数dtype的精度小于默认平台整数的精度。在这种情況下，将使用默认平台整数。</p>
<p>第四个参数 <strong>out :</strong>[ndarray，可选]将结果存储到的位置。</p>
<ul>
<li>如果提供，则必須具有广播输入的形狀。</li>
<li>如果未提供或沒有，则返回新分配的数组。</li>
</ul>
<p>返回 <strong>Return :</strong>除非指定out，否则将返回保存结果的新数组，在这种情況下将返回该数组。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">np.cumsum(a)</span><br><span class="line"><span class="comment"># array([ 1,  3,  6, 10, 15, 21])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#按照行累加，行求和</span></span><br><span class="line">np.cumsum(a,axis=<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line"></span><br><span class="line">       [<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]])    </span><br><span class="line">  </span><br><span class="line">                        [1, 2, 3]------&gt;     |1     |2     |3    |</span><br><span class="line"></span><br><span class="line">                        [4, 5, 6]------&gt;     |5=1+4 |7=2+5 |9=3+6|  </span><br><span class="line">      </span><br><span class="line"><span class="comment">#按照列累加，列求和</span></span><br><span class="line">np.cumsum(a,axis=<span class="number">1</span>)</span><br><span class="line">array([[ <span class="number">1</span>,  <span class="number">3</span>,  <span class="number">6</span>],</span><br><span class="line"></span><br><span class="line">       [ <span class="number">4</span>,  <span class="number">9</span>, <span class="number">15</span>]])</span><br><span class="line">                        [1, 2, 3]------&gt;     |1     |2+1    |3+2+1   |</span><br><span class="line"></span><br><span class="line">                        [4, 5, 6]------&gt;     |4     |4+5    |4+5+6   |  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定输出类型</span></span><br><span class="line">np.cumsum(a, dtype=float)</span><br><span class="line"><span class="comment"># 注意啦！没有指定轴参数(axis)！输出就变成1维数组了。</span></span><br><span class="line">  array([  <span class="number">1.</span>,  <span class="number">3.</span>,  <span class="number">6.</span>,  <span class="number">10.</span>,  <span class="number">15.</span>,  <span class="number">21.</span>])第一步:每个值都变成float了</span><br><span class="line"></span><br><span class="line">  array([<span class="number">1</span>，<span class="number">1</span>+<span class="number">2</span>=<span class="number">3</span>，<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>=<span class="number">6</span>，<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+<span class="number">4</span>=<span class="number">10</span>，<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+<span class="number">4</span>+<span class="number">5</span>=<span class="number">15</span>，<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+<span class="number">4</span>+<span class="number">5</span>+<span class="number">6</span>=<span class="number">21</span>]）第二部：累加</span><br></pre></td></tr></table></figure>
<p><a href="https://docs.scipy.org/doc/numpy/user/quickstart.html" target="_blank" rel="external">Numpy官方推荐教程</a></p>
<p>上述两个库的体量很大，这里只是简单介绍，有兴趣的同学可自行 google</p>
<h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><p>python中struct 模块用于python数据结构与C结构之间的相互转换，其中C结构是用一种格式化字符串表示的，学习struct 模块的难点就在这个格式化字符串上</p>
<h3 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常见方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将v1 v2按照fmt 转化为一个字节流(bytes)</span></span><br><span class="line">struct.pack(fmt, v1, v2, ...)</span><br><span class="line"><span class="comment">#将v1 v2按照fmt 转化为一个字节流(bytes),并写入buffer，从位置offset处开始写入</span></span><br><span class="line">struct.pack_into(fmt, buffer, offset, v1, v2, ...)</span><br><span class="line"><span class="comment">#将字节流按照fmt转化为python对象返回</span></span><br><span class="line">struct.unpack(fmt, string)</span><br><span class="line"><span class="comment">#同unpack，只是针特定buffer转化为python对象返回</span></span><br><span class="line">struct.unpack_from(fmt, buffer[, offset=<span class="number">0</span>])</span><br><span class="line"><span class="comment">#返回fmt的所表示的C结构体所占字节大小</span></span><br><span class="line">struct.calcsize(fmt)</span><br><span class="line"><span class="comment">#如果一述函数使用过程中fmt格式不对，会抛出这个异常</span></span><br><span class="line">exception struct.error</span><br></pre></td></tr></table></figure>
<h3 id="格式化串"><a href="#格式化串" class="headerlink" title="格式化串"></a>格式化串</h3><p>格式化串的字符根据功能不同可以分为两类，一类用于控制字节顺序、大小及对齐(Byte Order, Size, and Alignment)，另一类用于表示结构体的组成(Format Characters)。</p>
<h4 id="Byte-Order-Size-and-Alignment"><a href="#Byte-Order-Size-and-Alignment" class="headerlink" title="Byte Order, Size, and Alignment"></a>Byte Order, Size, and Alignment</h4><p>字节顺序对齐相关知识详见 <a href="https://www.cnblogs.com/prettyshuang/p/5553140.html C语言字节对齐问题详解（对齐、字节序、网络序等）" target="_blank" rel="external">C语言字节对齐问题详解（对齐、字节序、网络序等）</a></p>
<table>
<thead>
<tr>
<th>字符</th>
<th>字节序</th>
<th>大小</th>
<th>对齐方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>@</td>
<td>原生</td>
<td>原生</td>
<td>原生</td>
</tr>
<tr>
<td>=</td>
<td>原生</td>
<td>标准</td>
<td>无</td>
</tr>
<tr>
<td>&lt;</td>
<td>小端</td>
<td>标准</td>
<td>无</td>
</tr>
<tr>
<td>&gt;</td>
<td>大端</td>
<td>标准</td>
<td>无</td>
</tr>
<tr>
<td>!</td>
<td>网络字节序</td>
<td>标准</td>
<td>无</td>
</tr>
</tbody>
</table>
<p>注：原生指使用本地机器的字节序、大小和对齐方式<br>这些字符出现在格式化字符串的开头，如果没有给出，默认为@，字节大小一列中的标准是指下面的 Format Characters。</p>
<h4 id="Format-Characters"><a href="#Format-Characters" class="headerlink" title="Format Characters"></a>Format Characters</h4><table>
<thead>
<tr>
<th style="text-align:left">格式</th>
<th style="text-align:left">C 类型</th>
<th style="text-align:left">Python 类型</th>
<th style="text-align:left">标准大小</th>
<th style="text-align:left">注释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>x</code></td>
<td style="text-align:left">填充字节</td>
<td style="text-align:left">无</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>c</code></td>
<td style="text-align:left"><code>char</code></td>
<td style="text-align:left">长度为 1 的字节串</td>
<td style="text-align:left">1</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>b</code></td>
<td style="text-align:left"><code>signed char</code></td>
<td style="text-align:left">整数</td>
<td style="text-align:left">1</td>
<td style="text-align:left">(1), (2)</td>
</tr>
<tr>
<td style="text-align:left"><code>B</code></td>
<td style="text-align:left"><code>unsigned char</code></td>
<td style="text-align:left">整数</td>
<td style="text-align:left">1</td>
<td style="text-align:left">(2)</td>
</tr>
<tr>
<td style="text-align:left"><code>?</code></td>
<td style="text-align:left"><code>_Bool</code></td>
<td style="text-align:left">bool</td>
<td style="text-align:left">1</td>
<td style="text-align:left">(1)</td>
</tr>
<tr>
<td style="text-align:left"><code>h</code></td>
<td style="text-align:left"><code>short</code></td>
<td style="text-align:left">整数</td>
<td style="text-align:left">2</td>
<td style="text-align:left">(2)</td>
</tr>
<tr>
<td style="text-align:left"><code>H</code></td>
<td style="text-align:left"><code>unsigned short</code></td>
<td style="text-align:left">整数</td>
<td style="text-align:left">2</td>
<td style="text-align:left">(2)</td>
</tr>
<tr>
<td style="text-align:left"><code>i</code></td>
<td style="text-align:left"><code>int</code></td>
<td style="text-align:left">整数</td>
<td style="text-align:left">4</td>
<td style="text-align:left">(2)</td>
</tr>
<tr>
<td style="text-align:left"><code>I</code></td>
<td style="text-align:left"><code>unsigned int</code></td>
<td style="text-align:left">整数</td>
<td style="text-align:left">4</td>
<td style="text-align:left">(2)</td>
</tr>
<tr>
<td style="text-align:left"><code>l</code></td>
<td style="text-align:left"><code>long</code></td>
<td style="text-align:left">整数</td>
<td style="text-align:left">4</td>
<td style="text-align:left">(2)</td>
</tr>
<tr>
<td style="text-align:left"><code>L</code></td>
<td style="text-align:left"><code>unsigned long</code></td>
<td style="text-align:left">整数</td>
<td style="text-align:left">4</td>
<td style="text-align:left">(2)</td>
</tr>
<tr>
<td style="text-align:left"><code>q</code></td>
<td style="text-align:left"><code>long long</code></td>
<td style="text-align:left">整数</td>
<td style="text-align:left">8</td>
<td style="text-align:left">(2)</td>
</tr>
<tr>
<td style="text-align:left"><code>Q</code></td>
<td style="text-align:left"><code>unsigned long long</code></td>
<td style="text-align:left">整数</td>
<td style="text-align:left">8</td>
<td style="text-align:left">(2)</td>
</tr>
<tr>
<td style="text-align:left"><code>n</code></td>
<td style="text-align:left"><code>ssize_t</code></td>
<td style="text-align:left">整数</td>
<td style="text-align:left"></td>
<td style="text-align:left">(3)</td>
</tr>
<tr>
<td style="text-align:left"><code>N</code></td>
<td style="text-align:left"><code>size_t</code></td>
<td style="text-align:left">整数</td>
<td style="text-align:left"></td>
<td style="text-align:left">(3)</td>
</tr>
<tr>
<td style="text-align:left"><code>e</code></td>
<td style="text-align:left">(6)</td>
<td style="text-align:left">浮点数</td>
<td style="text-align:left">2</td>
<td style="text-align:left">(4)</td>
</tr>
<tr>
<td style="text-align:left"><code>f</code></td>
<td style="text-align:left"><code>float</code></td>
<td style="text-align:left">浮点数</td>
<td style="text-align:left">4</td>
<td style="text-align:left">(4)</td>
</tr>
<tr>
<td style="text-align:left"><code>d</code></td>
<td style="text-align:left"><code>double</code></td>
<td style="text-align:left">浮点数</td>
<td style="text-align:left">8</td>
<td style="text-align:left">(4)</td>
</tr>
<tr>
<td style="text-align:left"><code>s</code></td>
<td style="text-align:left"><code>char[]</code></td>
<td style="text-align:left">字节串</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>p</code></td>
<td style="text-align:left"><code>char[]</code></td>
<td style="text-align:left">字节串</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><code>P</code></td>
<td style="text-align:left"><code>void *</code></td>
<td style="text-align:left">整数</td>
<td style="text-align:left"></td>
<td style="text-align:left">(5)</td>
</tr>
</tbody>
</table>
<h1 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h1><p>上篇我们说到 ceilometer-collector 会先将监控数据发给 gnocchi-api ，gnocchi-api 先和 mysql 即 index storage 中的 metric 进行对比，metric  不存在就创建，存在就更新，然后将监控数据 metric + measures 存进 redis 即 incoming storage，然后 gnocch-metricd 服务每隔 30s 到 redis 中拿取数据，进行处理，数据处理主要分为以下几步：</p>
<ol>
<li>遍历 metrics ，通过每个 metric 的 id 从 redis 拿到相应的 measures</li>
<li>从 ceph 查询拿到该 metric 没有聚合过的时间序列进行反序列化（为什么会有未序列化的数据？）</li>
<li>根据给定的聚合方法，归档策略等信息，以及已经分组的时间序列，计算聚合后的时间序列，并将聚合后的时间序列写入到ceph的对象中</li>
<li>序列化没有聚合过的时间序列后，再压缩后存进 ceph （同2，为什么会有未序列化的数据？）</li>
</ol>
<p>我们对上面的步骤进行拆解下，详细分析一下过程：</p>
<p>上面分析过了，到 <code>_compute_and_store_timeseries</code> 方法对 measures 进行排序之后，变量大概是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">(Pdb) p metric</span><br><span class="line">&lt;Metric 01f0658b-f147-482b-bca9-f474a79320dc&gt;</span><br><span class="line"></span><br><span class="line">(Pdb) p metric.__dict__</span><br><span class="line">&#123;&apos;status&apos;: u&apos;active&apos;, &apos;_sa_instance_state&apos;: &lt;sqlalchemy.orm.state.InstanceState object at 0x5536b50&gt;, &apos;name&apos;: u&apos;cpu_util&apos;, &apos;creator&apos;: u&apos;6a18a77646104fcb93e92cb3daf10c91:55e9bc42c004471b9111ffbb516a9bbe&apos;, &apos;resource_id&apos;: UUID(&apos;d872305c-94b3-4f35-a2d5-602af219945d&apos;), &apos;archive_policy&apos;: &lt;gnocchi.indexer.sqlalchemy_base.ArchivePolicy object at 0x5536c50&gt;, &apos;archive_policy_name&apos;: u&apos;frequency_300s&apos;, &apos;id&apos;: UUID(&apos;01f0658b-f147-482b-bca9-f474a79320dc&apos;), &apos;unit&apos;: None&#125;</span><br><span class="line"></span><br><span class="line">(Pdb) p type(metric)</span><br><span class="line">&lt;class &apos;gnocchi.indexer.sqlalchemy_base.Metric&apos;&gt;</span><br><span class="line"></span><br><span class="line">(Pdb) p measures</span><br><span class="line">[(Timestamp(&apos;2018-04-19 04:21:08.054995&apos;), 4.799075611984741),</span><br><span class="line">(Timestamp(&apos;2018-04-19 05:10:10.429245&apos;), 4.574397482330608),</span><br><span class="line">(Timestamp(&apos;2018-04-19 04:08:07.438367&apos;), 4.597624310196946)]</span><br><span class="line"></span><br><span class="line">(Pdb) p metric.archive_policy</span><br><span class="line">&lt;gnocchi.indexer.sqlalchemy_base.ArchivePolicy object at 0x5536c50&gt;</span><br><span class="line"></span><br><span class="line">(Pdb) p metric.archive_policy.__dict__</span><br><span class="line">&#123;&apos;back_window&apos;: 0, &apos;definition&apos;: [&#123;&apos;points&apos;: 300, &apos;granularity&apos;: 300.0, &apos;timespan&apos;: 90000.0&#125;, &#123;&apos;points&apos;: 100, &apos;granularity&apos;: 900.0, &apos;timespan&apos;: 90000.0&#125;, &#123;&apos;points&apos;: 100, &apos;granularity&apos;: 7200.0, &apos;timespan&apos;: 720000.0&#125;, &#123;&apos;points&apos;: 200, &apos;granularity&apos;: 86400.0, &apos;timespan&apos;: 17280000.0&#125;], &apos;_sa_instance_state&apos;: &lt;sqlalchemy.orm.state.InstanceState object at 0x5536c90&gt;, &apos;name&apos;: u&apos;frequency_300s&apos;, &apos;aggregation_methods&apos;: set([u&apos;count&apos;, u&apos;max&apos;, u&apos;sum&apos;, u&apos;mean&apos;, u&apos;min&apos;])&#125;</span><br><span class="line"></span><br><span class="line">(Pdb) p metric.archive_policy.aggregation_methods</span><br><span class="line">set([u&apos;count&apos;, u&apos;max&apos;, u&apos;sum&apos;, u&apos;mean&apos;, u&apos;min&apos;])</span><br><span class="line"></span><br><span class="line">(Pdb) p metric.archive_policy.max_block_size</span><br><span class="line">86400.0</span><br><span class="line"></span><br><span class="line">(Pdb) p metric.archive_policy.back_window</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">(Pdb) p metric.archive_policy.definition</span><br><span class="line">[&#123;&apos;points&apos;: 300, &apos;granularity&apos;: 300.0, &apos;timespan&apos;: 90000.0&#125;, &#123;&apos;points&apos;: 100, &apos;granularity&apos;: 900.0, &apos;timespan&apos;: 90000.0&#125;, &#123;&apos;points&apos;: 100, &apos;granularity&apos;: 7200.0, &apos;timespan&apos;: 720000.0&#125;, &#123;&apos;points&apos;: 200, &apos;granularity&apos;: 86400.0, &apos;timespan&apos;: 17280000.0&#125;]</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>下一步开始取出未聚合的时间序列进行反序列化，这里是与最后的 <code>_store_unaggregated_timeserie</code> 过程其实是相反的，一个是序列化，一个是反序列化。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">_SERIALIZATION_TIMESTAMP_VALUE_LEN = struct.calcsize(<span class="string">"&lt;Qd"</span>) <span class="comment"># 16</span></span><br><span class="line">_SERIALIZATION_TIMESTAMP_LEN = struct.calcsize(<span class="string">"&lt;Q"</span>) <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># NOTE(jd) Use a double delta encoding for timestamps</span></span><br><span class="line">        timestamps = numpy.insert(numpy.diff(self.ts.index),</span><br><span class="line">                                  <span class="number">0</span>, self.first.value)</span><br><span class="line">        timestamps = numpy.array(timestamps, dtype=<span class="string">'&lt;Q'</span>)</span><br><span class="line">        values = numpy.array(self.ts.values, dtype=<span class="string">'&lt;d'</span>)</span><br><span class="line">        payload = (timestamps.tobytes() + values.tobytes())</span><br><span class="line">        <span class="keyword">return</span> lz4.dumps(payload)</span><br><span class="line">      </span><br><span class="line"><span class="comment"># 反序列化</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unserialize</span><span class="params">(cls, data, block_size, back_window)</span>:</span></span><br><span class="line">        uncompressed = lz4.loads(data)</span><br><span class="line"></span><br><span class="line">        nb_points = (</span><br><span class="line">            len(uncompressed) // cls._SERIALIZATION_TIMESTAMP_VALUE_LEN</span><br><span class="line">        )</span><br><span class="line">        timestamps_raw = uncompressed[</span><br><span class="line">            :nb_points*cls._SERIALIZATION_TIMESTAMP_LEN]</span><br><span class="line">        timestamps = numpy.frombuffer(timestamps_raw, dtype=<span class="string">'&lt;Q'</span>)</span><br><span class="line">        timestamps = numpy.cumsum(timestamps)</span><br><span class="line">        timestamps = numpy.array(timestamps, dtype=<span class="string">'datetime64[ns]'</span>)</span><br><span class="line"></span><br><span class="line">        values_raw = uncompressed[nb_points*cls._SERIALIZATION_TIMESTAMP_LEN:]</span><br><span class="line">        values = numpy.frombuffer(values_raw, dtype=<span class="string">'&lt;d'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cls.from_data(</span><br><span class="line">            pandas.to_datetime(timestamps),</span><br><span class="line">            values,</span><br><span class="line">            block_size=block_size,</span><br><span class="line">            back_window=back_window)</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_data</span><span class="params">(cls, timestamps=None, values=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                  block_size=None, back_window=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls(pandas.Series(values, timestamps),</span><br><span class="line">                   block_size=block_size, back_window=back_window)</span><br></pre></td></tr></table></figure>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>根据上面的工具专栏介绍我们知道了 numpy 的一些用法，以此为基础分析：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 序列化</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">first</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.ts.index[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># NOTE(jd) Use a double delta encoding for timestamps</span></span><br><span class="line">        <span class="comment"># 对时间序列的索引进行diff的求差值操作，并在所求的索引差值列表的最前面加上该时间序列的第一个值，得到差值索引列表</span></span><br><span class="line">        timestamps = numpy.insert(numpy.diff(self.ts.index),</span><br><span class="line">                                  <span class="number">0</span>, self.first.value)</span><br><span class="line">        <span class="comment"># 对差值索引列表的类型转换为uint64类型</span></span><br><span class="line">        timestamps = numpy.array(timestamps, dtype=<span class="string">'&lt;Q'</span>)</span><br><span class="line">        <span class="comment"># 对时间序列的值列表类型转换为浮点型</span></span><br><span class="line">        values = numpy.array(self.ts.values, dtype=<span class="string">'&lt;d'</span>)</span><br><span class="line">        <span class="comment"># 对差值索引列表转换为字节 + 对时间序列的值列表转换为字节，得到字符串</span></span><br><span class="line">        payload = (timestamps.tobytes() + values.tobytes())</span><br><span class="line">        <span class="comment"># 对该字符串调用lz4.dumps进行压缩，返回该压缩后的字符串</span></span><br><span class="line">        <span class="keyword">return</span> lz4.dumps(payload)</span><br></pre></td></tr></table></figure>
<p>序列化的过程发生在存储未聚合的时间序列的数据的时候，一个 ts 类似是以下对象：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">(Pdb) ts</span></span><br><span class="line"><span class="string">  &lt;gnocchi.carbonara.BoundTimeSerie object at 0x7fbdb91fd5d0&gt;</span></span><br><span class="line"><span class="string">(Pdb) ts.__dict__</span></span><br><span class="line"><span class="string">  &#123;'back_window': 0, 'block_size': &lt;86400000000000 * Nanos&gt;, 'ts':</span></span><br><span class="line"><span class="string">    2020-07-21 13:32:18      0.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:33:18      1.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:34:19      2.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:35:19      3.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:36:19      4.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:37:19      5.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:38:20      6.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:39:20      7.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:40:20      8.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:41:20      9.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:42:21     10.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:43:21     11.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:44:21     12.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:45:21     13.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:46:21     14.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:47:21     15.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:48:22     16.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:49:22     17.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:50:22     18.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:51:22     19.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:52:22     20.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:53:23     21.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:54:23     22.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:55:23     23.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:56:23     24.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:57:23     25.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:58:24     26.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:59:24     27.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:00:25     28.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:01:25     29.0</span></span><br><span class="line"><span class="string">                           ...</span></span><br><span class="line"><span class="string">    2020-07-21 14:51:40     79.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:52:40     80.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:53:41     81.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:54:41     82.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:55:41     83.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:56:41     84.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:57:41     85.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:58:42     86.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:59:42     87.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:00:42     88.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:01:42     89.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:02:42     90.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:03:43     91.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:04:43     92.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:05:43     93.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:06:43     94.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:07:43     95.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:08:44     96.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:09:44     97.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:10:44     98.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:11:44     99.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:12:44    100.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:13:45    101.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:14:45    102.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:15:17      0.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:15:45    103.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:17:45    105.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:18:17      0.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:18:46    106.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:19:17      1.0</span></span><br><span class="line"><span class="string">    Length: 109, dtype: float64&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 反序列化</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unserialize</span><span class="params">(cls, data, block_size, back_window)</span>:</span></span><br><span class="line">        uncompressed = lz4.loads(data)</span><br><span class="line"></span><br><span class="line">        nb_points = (</span><br><span class="line">            len(uncompressed) // cls._SERIALIZATION_TIMESTAMP_VALUE_LEN</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 先解压从步骤0中读取的数据（实际是一个字符串），前面一半为时间，后面一半为时间对应的值</span></span><br><span class="line">        timestamps_raw = uncompressed[</span><br><span class="line">            :nb_points*cls._SERIALIZATION_TIMESTAMP_LEN]</span><br><span class="line">        <span class="comment"># 解压的时间由于采用差值，所以累加计算每个时间</span></span><br><span class="line">        timestamps = numpy.frombuffer(timestamps_raw, dtype=<span class="string">'&lt;Q'</span>)</span><br><span class="line">        timestamps = numpy.cumsum(timestamps)</span><br><span class="line">        timestamps = numpy.array(timestamps, dtype=<span class="string">'datetime64[ns]'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这里一半取的是值</span></span><br><span class="line">        values_raw = uncompressed[nb_points*cls._SERIALIZATION_TIMESTAMP_LEN:]</span><br><span class="line">        values = numpy.frombuffer(values_raw, dtype=<span class="string">'&lt;d'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cls.from_data(</span><br><span class="line">            pandas.to_datetime(timestamps),</span><br><span class="line">            values,</span><br><span class="line">            block_size=block_size,</span><br><span class="line">            back_window=back_window)</span><br><span class="line">      </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_data</span><span class="params">(cls, timestamps=None, values=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                  block_size=None, back_window=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="comment"># 将时间列表，值列表来构建时间序列，然后根据block_size(实际是最大采样间隔)对序列计算出这个时间序列中最后一个数据，</span></span><br><span class="line">        <span class="comment"># 在一天之前的起始时间，以该时间为基础，对此时间序列进行切片，得到最终需要处理的时间序列。</span></span><br><span class="line">        <span class="comment"># 实例化类并返回最终需要处理的BoundTimeSerie</span></span><br><span class="line">        <span class="keyword">return</span> cls(pandas.Series(values, timestamps),</span><br><span class="line">                   block_size=block_size, back_window=back_window)</span><br></pre></td></tr></table></figure>
<p>我们从 ceph 中拿到的一个解压后的字符串大概是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\x00T\r\x15\xc4\xc7#\x16\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00\xec|o\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00\xec|o\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x00XG\xf8\r\x00\x00\x00\x00@Ys\x07\x00\x00\x00\x00\x18\xee\x84\x06\x00\x00\x00\x00\xb0\x8e\xf0\x1b\x00\x00\x00\x00@Ys\x07\x00\x00\x00\x00\xe2\x88\xc0\x06\x00\x00\x00\x00v\xbe7\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x00\x18@\x00\x00\x00\x00\x00\x00\x1c@\x00\x00\x00\x00\x00\x00 @\x00\x00\x00\x00\x00\x00&quot;@\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x00&amp;@\x00\x00\x00\x00\x00\x00(@\x00\x00\x00\x00\x00\x00*@\x00\x00\x00\x00\x00\x00,@\x00\x00\x00\x00\x00\x00.@\x00\x00\x00\x00\x00\x000@\x00\x00\x00\x00\x00\x001@\x00\x00\x00\x00\x00\x002@\x00\x00\x00\x00\x00\x003@\x00\x00\x00\x00\x00\x004@\x00\x00\x00\x00\x00\x005@\x00\x00\x00\x00\x00\x006@\x00\x00\x00\x00\x00\x007@\x00\x00\x00\x00\x00\x008@\x00\x00\x00\x00\x00\x009@\x00\x00\x00\x00\x00\x00:@\x00\x00\x00\x00\x00\x00;@\x00\x00\x00\x00\x00\x00&lt;@\x00\x00\x00\x00\x00\x00=@\x00\x00\x00\x00\x00\x00&gt;@\x00\x00\x00\x00\x00\x00?@\x00\x00\x00\x00\x00\x00@@\x00\x00\x00\x00\x00\x80@@\x00\x00\x00\x00\x00\x00A@\x00\x00\x00\x00\x00\x80A@\x00\x00\x00\x00\x00\x00B@\x00\x00\x00\x00\x00\x80B@\x00\x00\x00\x00\x00\x00C@\x00\x00\x00\x00\x00\x80C@\x00\x00\x00\x00\x00\x00D@\x00\x00\x00\x00\x00\x80D@\x00\x00\x00\x00\x00\x00E@\x00\x00\x00\x00\x00\x80E@\x00\x00\x00\x00\x00\x00F@\x00\x00\x00\x00\x00\x80F@\x00\x00\x00\x00\x00\x00G@\x00\x00\x00\x00\x00\x80G@\x00\x00\x00\x00\x00\x00H@\x00\x00\x00\x00\x00\x80H@\x00\x00\x00\x00\x00\x00I@\x00\x00\x00\x00\x00\x80I@\x00\x00\x00\x00\x00\x00J@\x00\x00\x00\x00\x00\x80J@\x00\x00\x00\x00\x00\x00K@\x00\x00\x00\x00\x00\x80K@\x00\x00\x00\x00\x00\x00L@\x00\x00\x00\x00\x00\x80L@\x00\x00\x00\x00\x00\x00M@\x00\x00\x00\x00\x00\x80M@\x00\x00\x00\x00\x00\x00N@\x00\x00\x00\x00\x00\x80N@\x00\x00\x00\x00\x00\x00O@\x00\x00\x00\x00\x00\x80O@\x00\x00\x00\x00\x00\x00P@\x00\x00\x00\x00\x00@P@\x00\x00\x00\x00\x00\x80P@\x00\x00\x00\x00\x00\xc0P@\x00\x00\x00\x00\x00\x00Q@\x00\x00\x00\x00\x00@Q@\x00\x00\x00\x00\x00\x80Q@\x00\x00\x00\x00\x00\xc0Q@\x00\x00\x00\x00\x00\x00R@\x00\x00\x00\x00\x00@R@\x00\x00\x00\x00\x00\x80R@\x00\x00\x00\x00\x00\xc0R@\x00\x00\x00\x00\x00\x00S@\x00\x00\x00\x00\x00@S@\x00\x00\x00\x00\x00\x80S@\x00\x00\x00\x00\x00\xc0S@\x00\x00\x00\x00\x00\x00T@\x00\x00\x00\x00\x00@T@\x00\x00\x00\x00\x00\x80T@\x00\x00\x00\x00\x00\xc0T@\x00\x00\x00\x00\x00\x00U@\x00\x00\x00\x00\x00@U@\x00\x00\x00\x00\x00\x80U@\x00\x00\x00\x00\x00\xc0U@\x00\x00\x00\x00\x00\x00V@\x00\x00\x00\x00\x00@V@\x00\x00\x00\x00\x00\x80V@\x00\x00\x00\x00\x00\xc0V@\x00\x00\x00\x00\x00\x00W@\x00\x00\x00\x00\x00@W@\x00\x00\x00\x00\x00\x80W@\x00\x00\x00\x00\x00\xc0W@\x00\x00\x00\x00\x00\x00X@\x00\x00\x00\x00\x00@X@\x00\x00\x00\x00\x00\x80X@\x00\x00\x00\x00\x00\xc0X@\x00\x00\x00\x00\x00\x00Y@\x00\x00\x00\x00\x00@Y@\x00\x00\x00\x00\x00\x80Y@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0Y@\x00\x00\x00\x00\x00@Z@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80Z@\x00\x00\x00\x00\x00\x00\xf0?</span><br></pre></td></tr></table></figure>
<h1 id="聚合和归档"><a href="#聚合和归档" class="headerlink" title="聚合和归档"></a>聚合和归档</h1><p>聚合和归档操作发生在：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> timeutils.StopWatch() <span class="keyword">as</span> sw:</span><br><span class="line">    ts.set_values(measures,</span><br><span class="line">                  before_truncate_callback=_map_add_measures,</span><br><span class="line">                  ignore_too_old_timestamps=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="合并时间序列"><a href="#合并时间序列" class="headerlink" title="合并时间序列"></a>合并时间序列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoundTimeSerie</span><span class="params">(TimeSerie)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_values</span><span class="params">(self, values, before_truncate_callback=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                   ignore_too_old_timestamps=False)</span>:</span></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> values must be sorted when passed in.</span></span><br><span class="line">        <span class="string">""""""</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        (Pdb) a</span></span><br><span class="line"><span class="string">        self = &lt;gnocchi.carbonara.BoundTimeSerie object at 0x7fbdb91fd5d0&gt;</span></span><br><span class="line"><span class="string">        values = [(Timestamp('2020-07-21 15:19:46'), 107.0)]</span></span><br><span class="line"><span class="string">        before_truncate_callback = &lt;function _map_add_measures at 0x7fbdb91f6f50&gt;</span></span><br><span class="line"><span class="string">        ignore_too_old_timestamps = True</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 从未聚合的时间序列最后一个时间lastTime为基点，找出能够被最大采样间隔(例如86400)整除且最接近lasTtime</span></span><br><span class="line">        <span class="comment"># 的时间作为最近的起始时间firstTime</span></span><br><span class="line">        <span class="keyword">if</span> self.block_size <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> <span class="keyword">not</span> self.ts.empty:</span><br><span class="line">            first_block_timestamp = self.first_block_timestamp()</span><br><span class="line">            <span class="keyword">if</span> ignore_too_old_timestamps:</span><br><span class="line">                <span class="keyword">for</span> index, (timestamp, value) <span class="keyword">in</span> enumerate(values):</span><br><span class="line">                    <span class="comment"># 然后从待处理监控数据列表中过滤出时间 &gt;= firstTime的待处理监控数据</span></span><br><span class="line">                    <span class="keyword">if</span> timestamp &gt;= first_block_timestamp:</span><br><span class="line">                        values = values[index:]</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    values = []</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># Check that the smallest timestamp does not go too much back</span></span><br><span class="line">                <span class="comment"># in time.</span></span><br><span class="line">                smallest_timestamp = values[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> smallest_timestamp &lt; first_block_timestamp:</span><br><span class="line">                    <span class="keyword">raise</span> NoDeloreanAvailable(first_block_timestamp,</span><br><span class="line">                                              smallest_timestamp)</span><br><span class="line">				<span class="comment"># 在这个步骤中，会将我们从ceph中拿出来的未聚合的时间序列和从redis中拿到的待处理时间序列进行合并，去重，排序等操作</span></span><br><span class="line">        super(BoundTimeSerie, self).set_values(values)</span><br><span class="line">        <span class="comment"># 再调用 before_truncate_callback = _map_add_measures 方法</span></span><br><span class="line">        <span class="keyword">if</span> before_truncate_callback:</span><br><span class="line">            before_truncate_callback(self)</span><br><span class="line">        <span class="comment"># 对时间序列进行分割</span></span><br><span class="line">        self._truncate()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_truncate</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Truncate the timeserie."""</span></span><br><span class="line">        <span class="keyword">if</span> self.block_size <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> <span class="keyword">not</span> self.ts.empty:</span><br><span class="line">            <span class="comment"># Change that to remove the amount of block needed to have</span></span><br><span class="line">            <span class="comment"># the size &lt;= max_size. A block is a number of "seconds" (a</span></span><br><span class="line">            <span class="comment"># timespan)</span></span><br><span class="line">            self.ts = self.ts[self.first_block_timestamp():]</span><br><span class="line">            </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">first_block_timestamp</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Return the timestamp of the first block."""</span></span><br><span class="line">        rounded = round_timestamp(self.ts.index[<span class="number">-1</span>],</span><br><span class="line">                                  self.block_size.delta.value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rounded - (self.block_size * self.back_window)</span><br><span class="line">      </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">round_timestamp</span><span class="params">(ts, freq)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> pandas.Timestamp(</span><br><span class="line">        (pandas.Timestamp(ts).value // freq) * freq)</span><br></pre></td></tr></table></figure>
<p>ts的索引是时间，value是时间对应的值，上面的方法主要做了几个事情：</p>
<ol>
<li>根据之前未聚合的时间序列最后一个时间lastTime为基点（这个未聚合的数据就是下面第四步将时间序列分割之后存进ceph的），计算出能够被最大采样间隔(例如86400)整除且最接近lasTtime的时间作为最近的起始时间firstTime，然后从待处理监控数据列表中过滤出时间 &gt;= firstTime的待处理监控数据，太老的数据直接丢弃；</li>
<li>将待处理的监控数据(有时间，值的元组组成的列表)，构建为待处理时间序列，并检查重复和是否是单调的，然后用原来未聚合的时间序列和当前待处理时间序列进行合并操作，得到新生成的时间序列</li>
<li>调用 <code>_map_add_measures</code> 聚合归档</li>
<li>对时间序列进行分割，之后便是调用 <code>self._store_unaggregated_timeserie(metric, ts.serialize())</code> ，将分割后的时间序列经过序列化和压缩后存进ceph，用于下一次的计算。</li>
</ol>
<h2 id="归档聚合"><a href="#归档聚合" class="headerlink" title="归档聚合"></a>归档聚合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">        current_first_block_timestamp = ts.first_block_timestamp() <span class="comment"># 这个ts是未聚合的时间序列</span></span><br><span class="line">  </span><br><span class="line">  			<span class="comment"># # 这里的 bound_timeserie 就是经过上个章节得到的新生成的时间序列。gnocchi.carbonara.BoundTimeSerie object</span></span><br><span class="line">  			<span class="function"><span class="keyword">def</span> <span class="title">_map_add_measures</span><span class="params">(bound_timeserie)</span>:</span></span><br><span class="line">            tstamp = max(bound_timeserie.first, measures[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">            new_first_block_timestamp = bound_timeserie.first_block_timestamp()</span><br><span class="line">            computed_points[<span class="string">'number'</span>] = len(bound_timeserie)</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> definition:</span><br><span class="line">                ts = bound_timeserie.group_serie(</span><br><span class="line">                    d.granularity, carbonara.round_timestamp(</span><br><span class="line">                        tstamp, d.granularity * <span class="number">10e8</span>))</span><br><span class="line"></span><br><span class="line">                self._map_in_thread(</span><br><span class="line">                    self._add_measures,</span><br><span class="line">                    ((aggregation, d, metric, ts,</span><br><span class="line">                        current_first_block_timestamp,</span><br><span class="line">                        new_first_block_timestamp)</span><br><span class="line">                        <span class="keyword">for</span> aggregation <span class="keyword">in</span> agg_methods))</span><br><span class="line">         </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeSerie</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">group_serie</span><span class="params">(self, granularity, start=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="comment"># NOTE(jd) Our whole serialization system is based on Epoch, and we</span></span><br><span class="line">        <span class="comment"># store unsigned integer, so we can't store anything before Epoch.</span></span><br><span class="line">        <span class="comment"># Sorry!</span></span><br><span class="line">        <span class="keyword">if</span> self.ts.index[<span class="number">0</span>].value &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> BeforeEpochError(self.ts.index[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> GroupedTimeSeries(self.ts[start:], granularity)</span><br><span class="line">      </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupedTimeSeries</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ts, granularity)</span>:</span></span><br><span class="line">        <span class="comment"># NOTE(sileht): The whole class assumes ts is ordered and don't have</span></span><br><span class="line">        <span class="comment"># duplicate timestamps, it uses numpy.unique that sorted list, but</span></span><br><span class="line">        <span class="comment"># we always assume the orderd to be the same as the input.</span></span><br><span class="line">        freq = granularity * <span class="number">10e8</span></span><br><span class="line">        self._ts = ts</span><br><span class="line">        self.indexes = (numpy.array(ts.index, <span class="string">'float'</span>) // freq) * freq</span><br><span class="line">        self.tstamps, self.counts = numpy.unique(self.indexes,</span><br><span class="line">                                                 return_counts=<span class="keyword">True</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mean</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._scipy_aggregate(ndimage.mean)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._scipy_aggregate(ndimage.sum)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">min</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._scipy_aggregate(ndimage.minimum)</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>
<ol>
<li>BoundTimeSerie 继承 TimeSerie，这里的first就是第一个索引值，我们知道 ts 是pandas.series对象，包括索引和值，索引是时间，值是时间对应的值，而 measures 是 <code>[(Timestamp(&#39;2018-04-19 04:21:08.054995&#39;), 4.799075611984741)]</code> 这样的对象，这里就是比较新生成的时间序列和从redis取的当前待处理时间序列，取出最大时间，接着计算出新生成的时间序列的第一个时间和需要计算的point；</li>
<li>然后遍历归档策略：<ol>
<li>先根据采样间隔和上步生成的最大边界的时间，算出这个间隔的另一个时间边界，返回一个 GroupedTimeSeries 对象，这个对象里面有很多的聚合方法，mean、min、max等。</li>
<li>然后再遍历聚合方法，通过 <code>_add_measures(聚合方法，归档策略，metric指标，ts(GroupedTimeSeries对象)，未聚合的时间序列的第一个时间戳，聚合后的时间序列的第一个时间戳)</code> 对事件序列进行聚合计算存进 ceph：</li>
</ol>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AggregatedTimeSerie</span><span class="params">(TimeSerie)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sampling, aggregation_method, ts=None, max_size=None)</span>:</span></span><br><span class="line">        <span class="string">"""A time serie that is downsampled.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Used to represent the downsampled timeserie for a single</span></span><br><span class="line"><span class="string">        granularity/aggregation-function pair stored for a metric.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super(AggregatedTimeSerie, self).__init__(ts)</span><br><span class="line">        self.sampling = self._to_offset(sampling).nanos / <span class="number">10e8</span></span><br><span class="line">        self.max_size = max_size</span><br><span class="line">        self.aggregation_method = aggregation_method</span><br><span class="line">        self._truncate(quick=<span class="keyword">True</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarbonaraBasedStorage</span><span class="params">(storage.StorageDriver)</span>:</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">_add_measures</span><span class="params">(self, aggregation, archive_policy_def,</span></span></span><br><span class="line"><span class="function"><span class="params">                      metric, grouped_serie,</span></span></span><br><span class="line"><span class="function"><span class="params">                      previous_oldest_mutable_timestamp,</span></span></span><br><span class="line"><span class="function"><span class="params">                      oldest_mutable_timestamp)</span>:</span></span><br><span class="line">        <span class="comment"># 步骤一</span></span><br><span class="line">				<span class="comment"># （ts(GroupedTimeSeries对象)，归档策略中定义的采集计算间隔，聚合方法，当前归档策略需要计算的最大点）</span></span><br><span class="line">        ts = carbonara.AggregatedTimeSerie.from_grouped_serie(</span><br><span class="line">            grouped_serie, archive_policy_def.granularity,</span><br><span class="line">            aggregation, max_size=archive_policy_def.points)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Don't do anything if the timeserie is empty</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ts:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># We only need to check for rewrite if driver is not in WRITE_FULL mode</span></span><br><span class="line">        <span class="comment"># and if we already stored splits once</span></span><br><span class="line">        <span class="comment"># true</span></span><br><span class="line">        need_rewrite = (</span><br><span class="line">            <span class="keyword">not</span> self.WRITE_FULL</span><br><span class="line">            <span class="keyword">and</span> previous_oldest_mutable_timestamp <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 步骤二</span></span><br><span class="line">        <span class="keyword">if</span> archive_policy_def.timespan <span class="keyword">or</span> need_rewrite:</span><br><span class="line">            existing_keys = self._list_split_keys_for_metric(</span><br><span class="line">                metric, aggregation, archive_policy_def.granularity)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># First delete old splits</span></span><br><span class="line">        <span class="comment"># 步骤三</span></span><br><span class="line">        <span class="keyword">if</span> archive_policy_def.timespan:</span><br><span class="line">            oldest_point_to_keep = ts.last - datetime.timedelta(</span><br><span class="line">                seconds=archive_policy_def.timespan)</span><br><span class="line">            oldest_key_to_keep = ts.get_split_key(oldest_point_to_keep)</span><br><span class="line">            oldest_key_to_keep_s = str(oldest_key_to_keep)</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> list(existing_keys):</span><br><span class="line">                <span class="comment"># NOTE(jd) Only delete if the key is strictly inferior to</span></span><br><span class="line">                <span class="comment"># the timestamp; we don't delete any timeserie split that</span></span><br><span class="line">                <span class="comment"># contains our timestamp, so we prefer to keep a bit more</span></span><br><span class="line">                <span class="comment"># than deleting too much</span></span><br><span class="line">                <span class="keyword">if</span> key &lt; oldest_key_to_keep_s:</span><br><span class="line">                    self._delete_metric_measures(</span><br><span class="line">                        metric, key, aggregation,</span><br><span class="line">                        archive_policy_def.granularity)</span><br><span class="line">                    existing_keys.remove(key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            oldest_key_to_keep = carbonara.SplitKey(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Rewrite all read-only splits just for fun (and compression). This</span></span><br><span class="line">        <span class="comment"># only happens if `previous_oldest_mutable_timestamp' exists, which</span></span><br><span class="line">        <span class="comment"># means we already wrote some splits at some point – so this is not the</span></span><br><span class="line">        <span class="comment"># first time we treat this timeserie.</span></span><br><span class="line">        <span class="comment"># 步骤四</span></span><br><span class="line">        <span class="keyword">if</span> need_rewrite:</span><br><span class="line">            previous_oldest_mutable_key = str(ts.get_split_key(</span><br><span class="line">                previous_oldest_mutable_timestamp))</span><br><span class="line">            oldest_mutable_key = str(ts.get_split_key(</span><br><span class="line">                oldest_mutable_timestamp))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> previous_oldest_mutable_key != oldest_mutable_key:</span><br><span class="line">                <span class="keyword">for</span> key <span class="keyword">in</span> existing_keys:</span><br><span class="line">                    <span class="keyword">if</span> previous_oldest_mutable_key &lt;= key &lt; oldest_mutable_key:</span><br><span class="line">                        LOG.debug(</span><br><span class="line">                            <span class="string">"Compressing previous split %s (%s) for metric %s"</span>,</span><br><span class="line">                            key, aggregation, metric)</span><br><span class="line">                        <span class="comment"># NOTE(jd) Rewrite it entirely for fun (and later for</span></span><br><span class="line">                        <span class="comment"># compression). For that, we just pass None as split.</span></span><br><span class="line">                        self._store_timeserie_split(</span><br><span class="line">                            metric, carbonara.SplitKey(</span><br><span class="line">                                float(key), archive_policy_def.granularity),</span><br><span class="line">                            <span class="keyword">None</span>, aggregation, archive_policy_def,</span><br><span class="line">                            oldest_mutable_timestamp)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 步骤五</span></span><br><span class="line">        <span class="keyword">for</span> key, split <span class="keyword">in</span> ts.split():</span><br><span class="line">            <span class="keyword">if</span> key &gt;= oldest_key_to_keep:</span><br><span class="line">                LOG.debug(</span><br><span class="line">                    <span class="string">"Storing split %s (%s) for metric %s"</span>,</span><br><span class="line">                    key, aggregation, metric)</span><br><span class="line">                self._store_timeserie_split(</span><br><span class="line">                    metric, key, split, aggregation, archive_policy_def,</span><br><span class="line">                    oldest_mutable_timestamp)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>definition样例：</p>
<p>[{‘points’: 300, ‘granularity’: 300.0, ‘timespan’: 90000.0}, {‘points’: 100, ‘granularity’: 900.0, ‘timespan’: 90000.0}, {‘points’: 100, ‘granularity’: 7200.0, ‘timespan’: 720000.0}, {‘points’: 200, ‘granularity’: 86400.0, ‘timespan’: 17280000.0}]</p>
<p>一个d即archive_policy_def：{‘points’: 300, ‘granularity’: 300.0, ‘timespan’: 90000.0}，代表计算间隔300s，采集300个点，间隔300*300=90000</p>
</blockquote>
<ol>
<li><p>步骤一：从 GroupedTimeSeries 取出具体的聚合方法，实例化 AggregatedTimeSerie 类对象，返回 ts</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">        ts = carbonara.AggregatedTimeSerie.from_grouped_serie(</span><br><span class="line">            grouped_serie, archive_policy_def.granularity,</span><br><span class="line">            aggregation, max_size=archive_policy_def.points)</span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AggregatedTimeSerie</span><span class="params">(TimeSerie)</span>:</span></span><br><span class="line">    _AGG_METHOD_PCT_RE = re.compile(<span class="string">r"([1-9][0-9]?)pct"</span>)</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_grouped_serie</span><span class="params">(cls, grouped_serie, sampling, aggregation_method,</span></span></span><br><span class="line"><span class="function"><span class="params">                           max_size=None)</span>:</span></span><br><span class="line">        agg_name, q = cls._get_agg_method(aggregation_method)</span><br><span class="line">        <span class="keyword">return</span> cls(sampling, aggregation_method,</span><br><span class="line">                   ts=cls._resample_grouped(grouped_serie, agg_name,</span><br><span class="line">                                            q),</span><br><span class="line">                   max_size=max_size)</span><br></pre></td></tr></table></figure>
</li>
<li><p>步骤二：拿出当前metric在ceph中的字符串（待分析）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CephStorage</span><span class="params">(_carbonara.CarbonaraBasedStorage)</span>:</span></span><br><span class="line">    WRITE_FULL = <span class="keyword">False</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">_list_split_keys_for_metric</span><span class="params">(self, metric, aggregation, granularity,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    version=None)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> rados.ReadOpCtx() <span class="keyword">as</span> op:</span><br><span class="line">            omaps, ret = self.ioctx.get_omap_vals(op, <span class="string">""</span>, <span class="string">""</span>, <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.ioctx.operate_read_op(</span><br><span class="line">                    op, self._build_unaggregated_timeserie_path(metric, <span class="number">3</span>))</span><br><span class="line">            <span class="keyword">except</span> rados.ObjectNotFound:</span><br><span class="line">                <span class="keyword">raise</span> storage.MetricDoesNotExist(metric)</span><br><span class="line">            <span class="keyword">if</span> ret == errno.ENOENT:</span><br><span class="line">                <span class="keyword">raise</span> storage.MetricDoesNotExist(metric)</span><br><span class="line">            keys = set()</span><br><span class="line">            <span class="keyword">for</span> name, value <span class="keyword">in</span> omaps:</span><br><span class="line">                meta = name.split(<span class="string">'_'</span>)</span><br><span class="line">                <span class="keyword">if</span> (aggregation == meta[<span class="number">3</span>] <span class="keyword">and</span> granularity == float(meta[<span class="number">4</span>])</span><br><span class="line">                        <span class="keyword">and</span> self._version_check(name, version)):</span><br><span class="line">                    keys.add(meta[<span class="number">2</span>])</span><br><span class="line">            <span class="keyword">return</span> keys</span><br></pre></td></tr></table></figure>
</li>
<li><p>步骤三：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> archive_policy_def.timespan:</span><br><span class="line">    oldest_point_to_keep = ts.last - datetime.timedelta(</span><br><span class="line">        seconds=archive_policy_def.timespan)</span><br><span class="line">    oldest_key_to_keep = ts.get_split_key(oldest_point_to_keep)</span><br><span class="line">    oldest_key_to_keep_s = str(oldest_key_to_keep)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> list(existing_keys):</span><br><span class="line">        <span class="comment"># NOTE(jd) Only delete if the key is strictly inferior to</span></span><br><span class="line">        <span class="comment"># the timestamp; we don't delete any timeserie split that</span></span><br><span class="line">        <span class="comment"># contains our timestamp, so we prefer to keep a bit more</span></span><br><span class="line">        <span class="comment"># than deleting too much</span></span><br><span class="line">        <span class="keyword">if</span> key &lt; oldest_key_to_keep_s:</span><br><span class="line">            self._delete_metric_measures(</span><br><span class="line">                metric, key, aggregation,</span><br><span class="line">                archive_policy_def.granularity)</span><br><span class="line">            existing_keys.remove(key)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    oldest_key_to_keep = carbonara.SplitKey(<span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>步骤四：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> need_rewrite:</span><br><span class="line">    previous_oldest_mutable_key = str(ts.get_split_key(</span><br><span class="line">        previous_oldest_mutable_timestamp))</span><br><span class="line">    oldest_mutable_key = str(ts.get_split_key(</span><br><span class="line">        oldest_mutable_timestamp))</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> previous_oldest_mutable_key != oldest_mutable_key:</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> existing_keys:</span><br><span class="line">            <span class="keyword">if</span> previous_oldest_mutable_key &lt;= key &lt; oldest_mutable_key:</span><br><span class="line">                LOG.debug(</span><br><span class="line">                    <span class="string">"Compressing previous split %s (%s) for metric %s"</span>,</span><br><span class="line">                    key, aggregation, metric)</span><br><span class="line">                <span class="comment"># NOTE(jd) Rewrite it entirely for fun (and later for</span></span><br><span class="line">                <span class="comment"># compression). For that, we just pass None as split.</span></span><br><span class="line">                self._store_timeserie_split(</span><br><span class="line">                    metric, carbonara.SplitKey(</span><br><span class="line">                        float(key), archive_policy_def.granularity),</span><br><span class="line">                    <span class="keyword">None</span>, aggregation, archive_policy_def,</span><br><span class="line">                    oldest_mutable_timestamp)</span><br></pre></td></tr></table></figure>
</li>
<li><p>步骤五：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, split <span class="keyword">in</span> ts.split():</span><br><span class="line">    <span class="keyword">if</span> key &gt;= oldest_key_to_keep:</span><br><span class="line">        LOG.debug(</span><br><span class="line">            <span class="string">"Storing split %s (%s) for metric %s"</span>,</span><br><span class="line">            key, aggregation, metric)</span><br><span class="line">        self._store_timeserie_split(</span><br><span class="line">            metric, key, split, aggregation, archive_policy_def,</span><br><span class="line">            oldest_mutable_timestamp)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">处理逻辑:</span><br><span class="line">步骤1. 对待处理监控数据按照时间从旧到新排序，获取监控项中聚合方法，采样间隔等信息</span><br><span class="line">步骤2. 调用_get_unaggregated_timeserie_and_unserialize方法获取未聚合的时间序列数据进行反序列化，来重新构建为新的时间序列，具体步骤如下</span><br><span class="line">	2.0. 先根据监控项id构建需要获取的对象名称，形如:gnocchi_01f0658b-f147-482b-bca9-f474a79320dc_none_v3</span><br><span class="line">				从ceph中读取该对象存储的值(是一个字符串)</span><br><span class="line">	2.1. 先解压从步骤0中读取的数据（实际是一个字符串），前面一半为时间，后面一半为时间对应的值</span><br><span class="line">	2.2. 解压的时间由于采用差值，所以累加计算每个时间；</span><br><span class="line">	2.3. 将时间列表，值列表来构建时间序列，然后根据block_size(实际是最大采样间隔)对序列计算出这个时间序列中最后一个数据，</span><br><span class="line">				在一天之前的起始时间，以该时间为基础，对此时间序列进行切片，得到最终需要处理的时间序列</span><br><span class="line">	2.4. 用步骤3的时间序列，block_size等实例化并返回最终需要处理的BoundTimeSerie</span><br><span class="line">步骤3 计算聚合后的时间序列，具体调用ts.set_values方法处理过程如下</span><br><span class="line">	3.1. 对给定的已经合并了待处理数据生成的时间序列和未聚合的时间序列的合并时间序列boundTimeSerie进行如下操作</span><br><span class="line">	3.2. 遍历归档策略，根据采样间隔，聚合方法：</span><br><span class="line">        计算每个boundTimeSerie聚合后的时间序列；</span><br><span class="line">        并对该聚合的时间序列分割，计算分割序列的偏移量和对应序列化的值；</span><br><span class="line">        根据偏移量，将序列化的值写入到对应的ceph对象</span><br><span class="line">        总结：步骤3实现了: 计算聚合后的时间序列，将聚合后的时间序列写入到ceph对象中</span><br><span class="line">步骤4. 更新未聚合的时间序列，具体调用_store_unaggregated_timeserie方法处理过程如下</span><br><span class="line">	4.1. 对时间序列的索引进行numpy.diff的求差值操作，并</span><br><span class="line">				在所求的索引差值列表的最前面加上该时间序列的第一个值，</span><br><span class="line">				得到差值索引列表</span><br><span class="line">	4.2. 对差值索引列表的类型转换为uint64类型</span><br><span class="line">	4.3. 对时间序列的值列表类型转换为浮点型</span><br><span class="line">	4.4 对差值索引列表转换为字节 + 对时间序列的值列表转换为字节，得到字符串</span><br><span class="line">	4.5. 对该字符串调用lz4.dumps进行压缩，返回该压缩后的字符串</span><br><span class="line">	4.6 构建类似gnocchi_01f0658b-f147-482b-bca9-f474a79320dc_none_v3的对象名称，</span><br><span class="line">			向该对象中写入未聚合的时间序列的压缩后的字符串</span><br><span class="line">			该字符串序列化前的前半部分为：时间序列索引，后半部分为时间序列值</span><br></pre></td></tr></table></figure>
<h1 id="基于gnocchi的时间序列算法demo实现"><a href="#基于gnocchi的时间序列算法demo实现" class="headerlink" title="基于gnocchi的时间序列算法demo实现"></a>基于gnocchi的时间序列算法demo实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @File    : scipy_demo.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"> </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">参考: </span></span><br><span class="line"><span class="string">https://github.com/gnocchixyz/gnocchi/tree/3.1.4</span></span><br><span class="line"><span class="string">模拟gnocchi聚合的思路进行聚合的demo</span></span><br><span class="line"><span class="string">gnocchi聚合算法:</span></span><br><span class="line"><span class="string">步骤1:对时间序列ts的索引ts.index用采样间隔进行分组得到indexes</span></span><br><span class="line"><span class="string">步骤2:对分组后的索引indexes通过numpy.unique重计算得到uniqeIndexes</span></span><br><span class="line"><span class="string">步骤3:调用ndimage.mean方法，进行如下操作</span></span><br><span class="line"><span class="string">ndimage.mean(ts.value , labels=indexes, index=uniqueIndexes)</span></span><br><span class="line"><span class="string">即可得到聚合结果aggregatedValues</span></span><br><span class="line"><span class="string">步骤4: 将uniqueIndexes还原为datetime64[ns]类型的numpy数组</span></span><br><span class="line"><span class="string">timestamps</span></span><br><span class="line"><span class="string">步骤5: 重新用步骤3得到的aggregatedValues和步骤4得到的timestamps</span></span><br><span class="line"><span class="string">构建新的时间序列，该时间序列即为最终聚合的时间序列newTimeSerie</span></span><br><span class="line"><span class="string">步骤6：根据需要保存的点的个数n,进行切片处理，获取newTimeSerie[-n:]</span></span><br><span class="line"><span class="string">作为最终保存的时间序列的结果</span></span><br><span class="line"><span class="string">解释:</span></span><br><span class="line"><span class="string">scipy.ndimage.measurements.mean(input, labels=None, index=None)[source]</span></span><br><span class="line"><span class="string">功能：计算数组在labels处的平均值</span></span><br><span class="line"><span class="string">参数: </span></span><br><span class="line"><span class="string">input:数组，</span></span><br><span class="line"><span class="string">labels:类似数组，可选的。对应每个元素有一个标签</span></span><br><span class="line"><span class="string">标签数组的一些性状，或者。</span></span><br><span class="line"><span class="string">所有共享相同label的区域的元素会被用于计算平均值。</span></span><br><span class="line"><span class="string">index:需要计算的区域</span></span><br><span class="line"><span class="string">返回值：列表</span></span><br><span class="line"><span class="string">分析分组的算法:</span></span><br><span class="line"><span class="string"> (a // b) * b:这个操作的含义获取能够被b整除且最接近a的数</span></span><br><span class="line"><span class="string"> (numpy.array(ts.index, 'float') // freq) * freq：</span></span><br><span class="line"><span class="string"> 这里就是对数组中每个元素进行处理，获取能够被freq整除，且最接近该元素的值</span></span><br><span class="line"><span class="string"> 假设:</span></span><br><span class="line"><span class="string"> 1,2,3,4,5,6,7,8,9</span></span><br><span class="line"><span class="string"> freq=3</span></span><br><span class="line"><span class="string"> 那么运算之后的结果是</span></span><br><span class="line"><span class="string"> 0 0 3 3 3 6 6 6 9</span></span><br><span class="line"><span class="string"> 等于变相的是一个分组操作，且以freq的倍数进行划分</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"> </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">ref:</span></span><br><span class="line"><span class="string">https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.ndimage.measurements.mean.html</span></span><br><span class="line"><span class="string">scipy.ndimage.measurements.mean</span></span><br><span class="line"><span class="string">scipy.ndimage.measurements.mean(input, labels=None, index=None)[source]</span></span><br><span class="line"><span class="string">Calculate the mean of the values of an array at labels.</span></span><br><span class="line"><span class="string">Parameters:	</span></span><br><span class="line"><span class="string">input : array_like</span></span><br><span class="line"><span class="string">Array on which to compute the mean of elements over distinct regions.</span></span><br><span class="line"><span class="string">labels : array_like, optional</span></span><br><span class="line"><span class="string">Array of labels of same shape, or broadcastable to the same shape as input. All elements sharing the same label form one region over which the mean of the elements is computed.</span></span><br><span class="line"><span class="string">index : int or sequence of ints, optional</span></span><br><span class="line"><span class="string">Labels of the objects over which the mean is to be computed. Default is None, in which case the mean for all values where label is greater than 0 is calculated.</span></span><br><span class="line"><span class="string">Returns:	</span></span><br><span class="line"><span class="string">out : list</span></span><br><span class="line"><span class="string">Sequence of same length as index, with the mean of the different regions labeled by the labels in index.</span></span><br><span class="line"><span class="string">See also</span></span><br><span class="line"><span class="string">ndimage.variance, ndimage.standard_deviation, ndimage.minimum, ndimage.maximum, ndimage.sum, ndimage.label</span></span><br><span class="line"><span class="string">scipy.ndimage.measurements.mean(input, labels=None, index=None)[source]</span></span><br><span class="line"><span class="string">功能：计算数组在labels处的平均值</span></span><br><span class="line"><span class="string">参数: </span></span><br><span class="line"><span class="string">input:数组，</span></span><br><span class="line"><span class="string">labels:类似数组，可选的。对应每个元素有一个标签</span></span><br><span class="line"><span class="string">标签数组的一些性状，或者。</span></span><br><span class="line"><span class="string">所有共享相同label的区域的元素会被用于计算平均值。</span></span><br><span class="line"><span class="string">index:需要计算的区域</span></span><br><span class="line"><span class="string">返回值：列表</span></span><br><span class="line"><span class="string">Examples</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(25).reshape((5,5))</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>labels = np.zeros_like(a)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>labels[3:5,3:5] = 1</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>index = np.unique(labels)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>labels</span></span><br><span class="line"><span class="string">array([[0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">       [0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">       [0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">       [0, 0, 0, 1, 1],</span></span><br><span class="line"><span class="string">       [0, 0, 0, 1, 1]])</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>index</span></span><br><span class="line"><span class="string">array([0, 1])</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>ndimage.mean(a, labels=labels, index=index)</span></span><br><span class="line"><span class="string">[10.285714285714286, 21.0]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> ndimage</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> ndimage</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aggregateGnocchiTimeSerie</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 步骤0: 构造时间序列数据</span></span><br><span class="line">    dates = pd.DatetimeIndex([<span class="string">'2018-04-18 11:20:30'</span>, <span class="string">'2018-04-18 11:21:30'</span>,</span><br><span class="line">                              <span class="string">'2018-04-18 11:22:30'</span>, <span class="string">'2018-04-18 11:23:30'</span>,</span><br><span class="line">                              <span class="string">'2018-04-18 11:24:30'</span>, <span class="string">'2018-04-18 11:25:30'</span>,</span><br><span class="line">                              <span class="string">'2018-04-18 11:26:30'</span>, <span class="string">'2018-04-18 11:27:30'</span>,</span><br><span class="line">                              <span class="string">'2018-04-18 11:28:30'</span>, <span class="string">'2018-04-18 11:29:30'</span>,</span><br><span class="line">                              <span class="string">'2018-04-18 11:30:30'</span>, <span class="string">'2018-04-18 11:31:30'</span>,])</span><br><span class="line">    <span class="keyword">print</span> dates</span><br><span class="line">    ts = pd.Series(np.arange(<span class="number">12</span>), index = dates)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"step 0 ############ time series:"</span></span><br><span class="line">    <span class="keyword">print</span> ts</span><br><span class="line">    granularity = <span class="number">300.0</span></span><br><span class="line">    freq = granularity * <span class="number">10e8</span></span><br><span class="line">    floatIndexes = numpy.array(ts.index, <span class="string">'float'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"############ float indexes:"</span></span><br><span class="line">    <span class="keyword">print</span> floatIndexes</span><br><span class="line">    <span class="comment"># 步骤1： 根据采样间隔对时间序列的索引进行分组</span></span><br><span class="line">    indexes = (floatIndexes // freq) * freq</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"step 1 ############ group indexes:"</span></span><br><span class="line">    <span class="keyword">print</span> indexes</span><br><span class="line">    <span class="comment"># 步骤2： 对已经分组的索引进行去重</span></span><br><span class="line">    uniqueIndexes, counts = numpy.unique(indexes , return_counts=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"step 2############ unique indexes:"</span></span><br><span class="line">    <span class="keyword">print</span> uniqueIndexes</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"############ values"</span></span><br><span class="line">    <span class="keyword">print</span> ts.values</span><br><span class="line">    <span class="comment"># 步骤3： 根据时间序列的值，分组索引，去重索引计算聚合结果</span></span><br><span class="line">    values = ndimage.mean(ts.values, labels=indexes, index=uniqueIndexes)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"step 3 ############ gnocchi mean aggregated result"</span></span><br><span class="line">    <span class="keyword">print</span> values</span><br><span class="line">    <span class="comment"># 步骤4： 将去重索引还原为原来的时间序列格式</span></span><br><span class="line">    timestamps = numpy.array(uniqueIndexes, <span class="string">'datetime64[ns]'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"step 4 ############ recover unique indexes"</span></span><br><span class="line">    <span class="keyword">print</span> timestamps</span><br><span class="line">    <span class="comment"># 步骤5： 用新的聚合结果和恢复的去重索引构建新的时间序列</span></span><br><span class="line">    timestamps = pd.to_datetime(timestamps)</span><br><span class="line">    <span class="keyword">print</span> timestamps</span><br><span class="line">    newTimeSerie = pd.Series(values, timestamps)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"step 5 ############ get aggregated time serie"</span></span><br><span class="line">    <span class="keyword">print</span> newTimeSerie</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    aggregateGnocchiTimeSerie()</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="https://www.cnblogs.com/zdz8207/p/python-pandas-series.html" target="_blank" rel="external">Python数据分析工具：Pandas之Series</a></p>
<p><a href="https://blog.csdn.net/MsSpark/article/details/83050261" target="_blank" rel="external">Python-Pandas中Series用法总结</a></p>
<p><a href="https://blog.csdn.net/guoyajie1990/article/details/81044929" target="_blank" rel="external">struct 模块详解</a></p>
<p><a href="https://docs.python.org/zh-cn/3/library/struct.html#module-struct" target="_blank" rel="external"><code>struct</code></a> — 将字节串解读为打包的二进制数据</p>
<p>相近文章：</p>
<p><a href="https://blog.csdn.net/MsSpark/article/details/83050000" target="_blank" rel="external">Numpy中Array用法总结</a></p>
<p><a href="https://blog.csdn.net/MsSpark/article/details/83050572" target="_blank" rel="external">Pandas中DataFrame用法总结</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Telemetry </tag>
            
            <tag> Gnocchi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gnocchi 使用原理及源码分析-上]]></title>
      <url>https://magiceses.github.io/2017/10/03/openstack-telemetry-gnocchi%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%90%86%E5%92%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%B8%8A/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">生活的模样很残酷，再苦再累，你都不能放弃，因为无路可退，进一步或许你会看到一方的壮阔苍旻；退一步或许你会万劫不复。你无法选择出生，但你可以选择奋发向上，用自己的辛劳和汗水去创造属于自己的人生，努力让自己过上自己想要过得生活。<br></p>

<h1 id="Gnocchi-介绍"><a href="#Gnocchi-介绍" class="headerlink" title="Gnocchi 介绍"></a>Gnocchi 介绍</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>之前我们已经介绍过了<code>paste</code>、<code>WSGI</code>、<code>pecan</code>等内容，每一个知识点，我们都详细分析了使用方式，<code>pecan</code>还分析了源码，下面我们就结合之前的几个知识点来分析一个项目的启动过程，以 <code>openstack</code> 项目 <code>gnocchi</code> 为例。</p>
<p>Gnocchi是一个能够高效存储海量监控指标（metric）测量值的系统，其设计目标是能够在云环境中提供时序数据库服务（TDBaaS，Time-series Database as a Service），通过对外暴露HTTPREST API来创建和操作各种监控资源的属性和各项监控指标的测量数据，最终实现了监控指标测量值的查询与存储的数据规模无关。Gnocchi最初由Julien Danjou于2014年发起，旨在为Ceilometer项目解决其最初利用传统关系型数据库作为监控数据存储后端时，遇到的扩展性问题，提供存储海量监控数据的服务。</p>
<a id="more"></a>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>Gnocchi的架构实际上并不复杂，主要由三个服务组成：一个HTTP REST API服务（gnocchi-api），一个异步处理监控数据的守护程序（gnocchi-metricd）和一个可选的statsd兼容的守护程序（gnocchi-statsd）负责监听通过TCP或者UDP发送的计量数据。监控数据由HTTP REST API服务和statsd守护程序负责获取，而metricd守护程序则在后台负责对获取的数据进行各种操作，包括测量值的计算和聚合，过期监控指标的清除等。其中，API服务和metricd守护程序都是无状态的，可以轻松的根据负载情况进行扩展。</p>
<p><img src="/images/openstack-telemetry-1.png" alt="img"></p>
<p>从图可以看出Gnocchi的服务主要包含两大服务，API和Metricd服务。同时可以看到有三个存储，Measure Storage、Aggregate Storage和Index。</p>
<p><strong>Measure Storage</strong>：是经过ceilometer-agent-notification服务处理后发送过来的数据，是实际的监控数据，但这些数据还需要经过gnocchi服务处理，处理后就会删除掉。比如这部分数据就可以保存到file中，当然也支持保存到ceph，但这属于临时数据，所以用file保存就可以了。</p>
<p><strong>Aggregate Storage</strong>：Aggreate是总数、合计的意思，gnocchi服务采用的是一种独特的时间序列存储方法，这个存储存放的是按照预定义的策略进行聚合计算后的数据，这样在获取监控数据展示时速度就会很快，因为已经计算过了。用户看到的是这层数据。后端存储包括file、swift、ceph，influxdb，默认使用file。可以保存到ceph中，这样可在任意一个节点上获取，但由于存储的都是大量小文件，大量的小文件对ceph来说并不友好。</p>
<p><strong>Index</strong>：通常是一个关系型数据库（比如MYSQL），是监控数据的元数据，用以索引取出resources和metrics，使得可以快速的从Measure Storage和Aggregate Storage中取出所需要的数据。目前支持4种drivers，PostgreSQL(首选)，MySQL(至少版本是5.6.4)，<br>这些drivers提供了大多数相同的性能和特性，PostgreSQL具有更高的性能并且有一些额外的特性（例如 资源持续时长计算）。</p>
<p><strong>API</strong>：gnocchi-api服务进程，可以托管到httpd服务一起启动，通过Indexer和Storage的driver，提供查询和操作ArchivePolicy，Resource，Metric，Measure的接口，并将新到来的Measure（也就是ceilometer-agent-notification发送到gnocchi-api服务的数据）存入Measure Storage。</p>
<p><strong>Metricd</strong>：gnocchi-metricd服务进程，根据Metric定义的ArchivePolicy规则周期性的从Measure Storage中获取未处理的Measure数据并进行处理，将处理结果保存到Aggregate Storage中，同时也对Aggregate Storage中的数据进行聚合计算和清理过期的数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gnocchi-metricd daemon会测量所有你的CPU功效来最大化CPU使用，当计算metric聚集。你可以使用gnocchi status命令查询HTTP API 获取监控项处理的聚集状态，它将会显示多少个监控项metric正在处理，正如处理存储的gnocchi-metricd。只要积压未办的时请不是持续增长，这意味着gnocchi-metricd能够处理正在被发送的个数的监控项。假如正在处理的measure的数量持续上升，你需要增加gnocchi-metricd daemons。你可以在任意数量的服务器上运行任意数量的metricd-daemon。</span><br></pre></td></tr></table></figure>
<p><strong>API和Metricd服务都是设计成了无状态的服务，可以横向拓展来加快数据的处理。</strong></p>
<h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p>gnocchi 目前支持不同的存储后端：</p>
<p>File(默认)，Ceph(首选)，OpenStack Swift，S3，Redis</p>
<p>这些后端是基于名叫Carbonara的中间件，该中间件是用来处理时间序列的操作，因为上述存储技术无法处理时间序列。Carbonara对于后面上述的支持是比较好的，并且是易于扩展的。Ceph和Sift原本就是比文件driver更具有扩展性的。根据你系统的大小，使用file driver并且存储你在磁盘上的数据一般各哦吟咏了。如果你需要扩展为数台服务器，你可以通过NFS来贡献数据。S3,Ceph和Swift drivers更容易扩展。Ceph提供了更好的一致性，因此推荐用Ceph。</p>
<p>可以在安装时进行指定：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pip install gnocchi</span><br><span class="line">根据系统的架构所需要的drivers和特性，安装时需要携带额外的参数</span><br><span class="line">pip install gnocchi[postgresql,ceph,keystone]</span><br><span class="line">着将会安装postgresql来支持indexer driver,Ceph支持存储，Keystone支持验证和授权。</span><br><span class="line">下面时可用的变量列表:</span><br><span class="line">keystone:</span><br><span class="line">mysql:支持indexer</span><br><span class="line">postgresql:支持indexer</span><br><span class="line">swift:支持storage</span><br><span class="line">s3:支持storage</span><br><span class="line">ceph:支持storage</span><br><span class="line">ceph_recommended_lib:支持Ceph &gt;= 0.80的storage</span><br><span class="line">ceph_alternative_lib:支持Ceph &gt;= 10.1.0的storage</span><br><span class="line">file:提供file driver支持</span><br><span class="line">redis:提供storage支持</span><br><span class="line">doc:文档构建支持</span><br><span class="line">test:单元和功能性测试支持</span><br><span class="line"> </span><br><span class="line">为了从source安装Gnocchi,运行python标准的安装程序</span><br><span class="line">pip install -e.</span><br><span class="line">根据drivers和你想使用的特性，你需要安装额外的变量</span><br><span class="line">pip install -e.[postgresql,ceph,ceph_recommended_lib]</span><br></pre></td></tr></table></figure>
<p>其中如果用ceph作为 back-end的话，需要满足以下要求：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ceph需要一个已经创建的Ceph 用户和一个pool。它们可以被以下的例子来创建</span><br><span class="line">ceph osd pool create metrics 8 8</span><br><span class="line">ceph auth get-or-create client.gnocchi mon &quot;allow r&quot; osd &quot;allow rwx pool=metrics&quot;</span><br><span class="line"></span><br><span class="line">Gnocchi收录了python中的一些特性(omap, async,操作上下文),但是需要python-rados &gt;= 10.1.0【rados是用于控制集群的】。为了处理这种情况，Gnocchi使用cradox python库，使其和相同的API工作相同，但是只需要Ceph &gt;=0.80.0</span><br><span class="line">如果Ceph和python-rados 都&gt;=10.1.0,cradox python库会编程可选的，但仍然推荐这样做。</span><br></pre></td></tr></table></figure>
<h2 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h2><p>Gnocchi中有三层数据，<code>resources</code> -&gt; <code>metric</code> -&gt; <code>measure</code></p>
<p><strong>Resource</strong>：是gnocchi对openstack监控数据的一个大体的划分，比如虚拟机的磁盘的所有监控资源作为一个resource，可用命令gnocchi resource list查看</p>
<p><strong>Metric</strong>：是gnocchi对openstack监控数据的第二层划分，归属于resource，代表一个较具体的资源，比如cpu值，可用命令gnocchi metric list查看</p>
<p><strong>Measure</strong>：是gnocchi对openstack监控数据的第三层划分，归属于metric，表示在某个时间戳对应资源的值，可用命令gnocchi measures show metric_id</p>
<p>在Gnocchi中，一个时间序列是点的集合，在时间序列中的每一个点都有measure或者采样值sample。存储格式会被各种技术压缩，因此计算时间序列的大小在最坏情况下被下面的公式计算：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">点的个数 * 8byte = 时间序列大小</span><br><span class="line">点的各数可以被下面的公式确定</span><br><span class="line">点的个数 = 持续时间 / 粒度</span><br></pre></td></tr></table></figure>
<p>时间序列处理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">metric的measures到Gnocchi，这些值会被动态聚集。着意味着Gnocchi并不存储所有发送的measures，而是在一个时间段聚集它们。</span><br><span class="line">Gnocchi提供了几种不同的内置聚集函数。</span><br><span class="line">一个归档策略被指定的field中调集集合所定义。每一个条目组成了时间跨度并且京都层次需要被提供，决定了至少使用：2个points,granularity和timespan字段。例如，一个条目会被定义为超过1小时的12个点（每个点5分钟），或者针对天的每小时一个点（24个点）。</span><br><span class="line">默认地，新的带有measures的timestamps的可以在聚集的时间段中被处理。上一次聚集时间段的大小是根据归档策略中最大的granularity。为了允许处理比该时间段更旧的measures，back_window 参数可以被用于设置保存粗略的时间段。</span><br><span class="line">back_window:2表示可以收集两个小时之前的数据</span><br><span class="line">具体参见:https://docs.openstack.org/developer/gnocchi/rest.html</span><br><span class="line"></span><br><span class="line">改变聚集方法通过指定聚集参方法列表，在aggregation_methods中修改</span><br><span class="line">删除加上前缀 -max,添加用+, *表示所有</span><br><span class="line">一旦归档策略被创建，会返回所有属性，归档策略的URL</span><br><span class="line">GET /v1/archive_policy/short HTTP/1.1</span><br><span class="line">Content-Length: 0</span><br><span class="line">已经存在的归档策略可以被修改用来保留更多或者更少的数据。归档策略覆盖可以扩展，</span><br></pre></td></tr></table></figure>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="通过resource找metric"><a href="#通过resource找metric" class="headerlink" title="通过resource找metric"></a>通过resource找metric</h4><p><strong>gnocchi resource show resource-id</strong></p>
<p><img src="/images/openstack-telemetry-2.png" alt="img"></p>
<h4 id="查看-metric-属性"><a href="#查看-metric-属性" class="headerlink" title="查看 metric 属性"></a>查看 metric 属性</h4><p><strong>gnocchi metric show metric-id</strong></p>
<p><img src="/images/openstack-telemetry-3.png" alt="img"></p>
<h4 id="通过-metric-找-measures"><a href="#通过-metric-找-measures" class="headerlink" title="通过 metric 找 measures"></a>通过 metric 找 measures</h4><p><img src="/images/openstack-telemetry-4.png" alt="img"></p>
<p>中间那个granularity值表示采集时间间隔，60表示60秒，1800表示30分钟，这个取决于我们自己设定的聚合计算策略，我这边设的策略如下：</p>
<p><img src="/images/openstack-telemetry-5.png" alt="image-20210718160627046"></p>
<h2 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h2><blockquote>
<p>归档策略表示最后数据存储到后端时是什么形态，间隔多少，保存多久</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; gnocchi archive-policy create -d points:60,granularity:0:01:00 -d points:48,granularity:0:30:00 -m mean thin4</span><br><span class="line">&gt; </span><br><span class="line">&gt; points:60,granularity:0:01:00表示只保存60个点，每个点间隔是1分钟，也就是只保存最新1小时的数据</span><br><span class="line">&gt; </span><br><span class="line">&gt; points:48,granularity:0:30:00表示只保存48个点，每个点间隔是30分钟，也就是只保存最新一天的数据</span><br><span class="line">&gt; </span><br><span class="line">&gt; 一些resource type和要计算的metric都定义在/etc/ceilometer/gnocchi_resources.yaml该文件中</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Gnocchi中，归档策略定义是被表示为点的数量。如果你的归档策略定义了一个10各点的策略，粒度是1秒，时间序列归档将会维持10秒(有时会多一点)，每一种表示是对超过1秒的聚集。这意味着时间序列将会最大保留最新到最老10秒的数据。但这并不意味着这是连续的10秒：可能数据中存在不规则的部分。</p>
<p>因此，归档策略和粒度完全依赖于你的使用情况。你可以定义其中归档策略。一个典型的低度使用的方式<br>3600 点，粒度1s ，等于1小时<br>1440点，1分钟，24小时<br>720点，一小时，30天<br>365点，一天，一年<br>这将表示每个聚集方法将花费6125个点 <em> 9 = 54 KB空间。如果你使用<br>8个标准的聚集方法，你的监控项占据的总空间为8 </em> 54KB = 432KB<br>小心定义你的归档策略，它将花费更多的CPU。因此，创建一个归档策略包含两个定义(<br>每天1秒的粒度粒度和针对每个月1分钟的粒度)将会花费两被的CPU比一个定义(例如:每天1秒的粒度)</p>
<p><strong>默认归档策略</strong></p>
<p>默认3个归档策略会在调用 gnocchi-upgrade 的时候被创建：<br>low , medium , high<br>描述了存储空间和CPU使用的需求。它们使用<br>default_arrgegation_methods<br>这是默认被设置为 mean , min, max , sum , std, count<br>一个fourth archive policy叫做bool的也默认被提供了。这仅仅用于存储boolean 值（例如，0和1）.它仅仅为每一秒存储1个data point(使用 最后的聚集方法)，是一年的保留时间。<br>最好的存储大小是被如下假设:除了0和1作为测量值measures被发送。如果其他的值被发送，最坏情况下的最大存储大小会被考虑在内。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Low:</span><br><span class="line">超过30天的5分钟的粒度</span><br><span class="line">使用的聚集函数:默认聚集函数</span><br><span class="line">每个监控项metric最大空间大小:406KB</span><br><span class="line"></span><br><span class="line">Medium:</span><br><span class="line">超过7天的一分钟的粒度</span><br><span class="line">超过365天的1小时粒度</span><br><span class="line">使用的聚集函数：默认聚集函数</span><br><span class="line">每个监控项metric最大空间大小为:887KB</span><br><span class="line"></span><br><span class="line">high:</span><br><span class="line">超过1小时的1秒粒度</span><br><span class="line">超过1星期的一分钟粒度</span><br><span class="line">超过1年的1小时粒度</span><br><span class="line">使用聚集方法：默认聚集方法</span><br><span class="line">每个监控项metric最大空间大小为:1057KB</span><br><span class="line"></span><br><span class="line">超过1年的bool* 1秒的粒度，使用： las*  最好情况小大小为:</span><br><span class="line">1539 KB * 每个监控项最坏情况下大小: 277 172KB</span><br><span class="line">约277MB</span><br></pre></td></tr></table></figure>
<h1 id="Gnocchi-源码"><a href="#Gnocchi-源码" class="headerlink" title="Gnocchi 源码"></a>Gnocchi 源码</h1><p>之前我们分析过了 wsgi 、 pecan 和 paste 的相关知识，今天梳理一下 <code>Gnocchi</code> 的代码，顺便温习一下。</p>
<p>基于O版</p>
<h2 id="api-server"><a href="#api-server" class="headerlink" title="api-server"></a>api-server</h2><p>在源码结构中 rest 目录是api转化为gnocchi可以处理请求的入口类，包含了许多Controller方法。由于gnocchi采用pecan（对象路由web框架来获取资源），这个文件提供的方法就是解析传递过来的url,通过对应方法解析后执行相关命令。</p>
<p><code>__init__.py</code> ：比较重要的方法包括：</p>
<ul>
<li>MetricController(继承自rest.RestController，提供post_measures添加测量值数组，获取某个监控项测量值列表方法get_measures)；</li>
<li>MetricsController(根据监控项id解析得到监控项交给MetricController处理)；</li>
<li>NamedMetricController(可根据监控项名称查询到监控项，根据资源id,类型，监控项列表来更新资源)；</li>
<li>MetricsMeasuresBatchController(重要，监控项测量值批处理控制器，实际上就是遍历每个监控项，将每隔监控项的采样值列表添加到数据库中)。</li>
</ul>
<p><code>app.py</code> ：app.py是pecan应用的入口，包含应用初始化代码。</p>
<ul>
<li>hooks对应的配置是一些Pecan的hook，作用类似于WSGIMiddlewareGnocchiHook类（提供在Pecan尝试将一个请求分发给控制器的之前被调用）的函数on_route）</li>
<li>load_app方法(Paste.Deploy主要是用来载入WSGI中的WebApp使用，其核心函数是loadapp()通过loadapp函数和一个配置文件或者egg包来载入WSGI应用，一个配置文件后缀为ini，内容被分为很多段):实际上是获取storage,indexer数据库驱动器，然后部署生成app并返回。</li>
<li>build_server(): 执行: service.prepare_service(),执行: serving.run_simple</li>
</ul>
<p><code>app.wsgi</code> ：主要调用conf = service.prepare_service()，application = app.load_app(conf)</p>
<p>我在部署 gnocchi-api 的时候使用的是 apache + mod_wsgi ，这种都是需要指定 wsgi 文件的位置，比如，我们可以如下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:8041&gt;</span><br><span class="line">    WSGIDaemonProcess gnocchi processes=2 threads=1 user=gnocchi group=gnocchi display-name=%&#123;GROUP&#125;</span><br><span class="line">    WSGIProcessGroup gnocchi</span><br><span class="line">    WSGIScriptAlias / &quot;/usr/lib/python2.7/site-packages/gnocchi/rest/app.wsgi&quot;</span><br><span class="line">    WSGIApplicationGroup %&#123;GLOBAL&#125;</span><br><span class="line"></span><br><span class="line">    ErrorLog /dev/stderr</span><br><span class="line">    SetEnvIf X-Forwarded-For &quot;^.*\..*\..*\..*&quot; forwarded</span><br><span class="line">    CustomLog /dev/stdout combined env=!forwarded</span><br><span class="line">    CustomLog /dev/stdout proxy env=forwarded</span><br><span class="line"></span><br><span class="line">    &lt;Directory &quot;/usr/lib/python2.7/site-packages/gnocchi/rest&quot;&gt;</span><br><span class="line">          Require all granted</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<p>可以看到第四行指定了wsgi启动的路径，我们看下这个目录：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gnocchi.rest <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line">application = app.build_wsgi_app()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_wsgi_app</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> load_app(service.prepare_service())</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_app</span><span class="params">(conf, indexer=None, storage=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             not_implemented_middleware=True)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> APPCONFIGS</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NOTE(sileht): We load config, storage and indexer,</span></span><br><span class="line">    <span class="comment"># so all</span></span><br><span class="line">    <span class="comment"># 配置 back-ends driver</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> storage:</span><br><span class="line">        storage = gnocchi_storage.get_driver(conf)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> indexer:</span><br><span class="line">        indexer = gnocchi_indexer.get_driver(conf)</span><br><span class="line">        indexer.connect()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Build the WSGI app</span></span><br><span class="line">    <span class="comment"># 这里去加载api-paste.ini文件路径</span></span><br><span class="line">    cfg_path = conf.api.paste_config</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isabs(cfg_path):</span><br><span class="line">        cfg_path = conf.find_file(cfg_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cfg_path <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> <span class="keyword">not</span> os.path.exists(cfg_path):</span><br><span class="line">        <span class="keyword">raise</span> cfg.ConfigFilesNotFoundError([conf.api.paste_config])</span><br><span class="line"></span><br><span class="line">    config = dict(conf=conf, indexer=indexer, storage=storage,</span><br><span class="line">                  not_implemented_middleware=not_implemented_middleware)</span><br><span class="line">    configkey = str(uuid.uuid4())</span><br><span class="line">    APPCONFIGS[configkey] = config</span><br><span class="line"></span><br><span class="line">    LOG.info(<span class="string">"WSGI config used: %s"</span>, cfg_path)</span><br><span class="line">    appname = <span class="string">"gnocchi+"</span> + conf.api.auth_mode</span><br><span class="line">    app = deploy.loadapp(<span class="string">"config:"</span> + cfg_path, name=appname,</span><br><span class="line">                         global_conf=&#123;<span class="string">'configkey'</span>: configkey&#125;)</span><br><span class="line">    <span class="keyword">return</span> cors.CORS(app, conf=conf)</span><br></pre></td></tr></table></figure>
<p>这里启动时，调用了 pasteDeploy 的 loadapp(一个简单的函数)就可以部署WSGI，而且不需要知道WSGI应用的细节。PasteDeploy的工作模式是使用一个配置文件configure.ini去解析URL。gnocchi的配置是api-paste.ini:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[composite:gnocchi+noauth]</span></span><br><span class="line"><span class="attr">use</span> = egg:Paste#urlmap</span><br><span class="line">/ = gnocchiversions_pipeline</span><br><span class="line">/v1 = gnocchiv1+noauth</span><br><span class="line">/healthcheck = healthcheck</span><br><span class="line"></span><br><span class="line"><span class="section">[composite:gnocchi+basic]</span></span><br><span class="line"><span class="attr">use</span> = egg:Paste#urlmap</span><br><span class="line">/ = gnocchiversions_pipeline</span><br><span class="line">/v1 = gnocchiv1+noauth</span><br><span class="line">/healthcheck = healthcheck</span><br><span class="line"></span><br><span class="line"><span class="section">[composite:gnocchi+keystone]</span></span><br><span class="line"><span class="attr">use</span> = egg:Paste#urlmap</span><br><span class="line">/ = gnocchiversions_pipeline</span><br><span class="line">/v1 = gnocchiv1+keystone</span><br><span class="line">/healthcheck = healthcheck</span><br><span class="line"></span><br><span class="line"><span class="section">[pipeline:gnocchiv1+noauth]</span></span><br><span class="line"><span class="attr">pipeline</span> = http_proxy_to_wsgi gnocchiv1</span><br><span class="line"></span><br><span class="line"><span class="section">[pipeline:gnocchiv1+keystone]</span></span><br><span class="line"><span class="attr">pipeline</span> = http_proxy_to_wsgi keystone_authtoken gnocchiv1</span><br><span class="line"></span><br><span class="line"><span class="section">[pipeline:gnocchiversions_pipeline]</span></span><br><span class="line"><span class="attr">pipeline</span> = http_proxy_to_wsgi gnocchiversions</span><br><span class="line"></span><br><span class="line"><span class="section">[app:gnocchiversions]</span></span><br><span class="line">paste.app_factory = gnocchi.rest.app:app_factory</span><br><span class="line"><span class="attr">root</span> = gnocchi.rest.VersionsController</span><br><span class="line"></span><br><span class="line"><span class="section">[app:gnocchiv1]</span></span><br><span class="line">paste.app_factory = gnocchi.rest.app:app_factory</span><br><span class="line"><span class="attr">root</span> = gnocchi.rest.V1Controller</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:keystone_authtoken]</span></span><br><span class="line"><span class="attr">use</span> = egg:keystonemiddleware#auth_token</span><br><span class="line"><span class="attr">oslo_config_project</span> = gnocchi</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:http_proxy_to_wsgi]</span></span><br><span class="line"><span class="attr">use</span> = egg:oslo.middleware#http_proxy_to_wsgi</span><br><span class="line"><span class="attr">oslo_config_project</span> = gnocchi</span><br><span class="line"></span><br><span class="line"><span class="section">[app:healthcheck]</span></span><br><span class="line"><span class="attr">use</span> = egg:oslo.middleware#healthcheck</span><br><span class="line"><span class="attr">oslo_config_project</span> = gnocchi</span><br></pre></td></tr></table></figure>
<p>paste.app_factory 是一个应用的工厂函数，指明import对象的类型；值 gnocchi.rest.app:app_factory 指明具体加载的模块和方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_setup_app</span><span class="params">(root, conf, indexer, storage, not_implemented_middleware)</span>:</span></span><br><span class="line">    app = pecan.make_app(</span><br><span class="line">        root,</span><br><span class="line">        hooks=(GnocchiHook(storage, indexer, conf),),</span><br><span class="line">        guess_content_type_from_ext=<span class="keyword">False</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> not_implemented_middleware:</span><br><span class="line">        app = webob.exc.HTTPExceptionMiddleware(NotImplementedMiddleware(app))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app_factory</span><span class="params">(global_config, **local_conf)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> APPCONFIGS</span><br><span class="line">    appconfig = APPCONFIGS.get(global_config.get(<span class="string">'configkey'</span>))</span><br><span class="line">    <span class="keyword">return</span> _setup_app(root=local_conf.get(<span class="string">'root'</span>), **appconfig)</span><br></pre></td></tr></table></figure>
<p>我们知道，要运行一个python的web服务，需要两个条件：</p>
<ul>
<li>application</li>
<li>wsgi server</li>
</ul>
<p>这里通过加载pecan.make_app ，返回了一个application，并设置 hooks ，加载数据库连接等信息。</p>
<p>这里的 root 就是上面<code>api-paste.ini</code>中的<code>root = gnocchi.rest.V1Controller</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V1Controller</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sub_controllers = &#123;</span><br><span class="line">            <span class="string">"search"</span>: SearchController(),</span><br><span class="line">            <span class="string">"archive_policy"</span>: ArchivePoliciesController(),</span><br><span class="line">            <span class="string">"archive_policy_rule"</span>: ArchivePolicyRulesController(),</span><br><span class="line">            <span class="string">"metric"</span>: MetricsController(),</span><br><span class="line">            <span class="string">"batch"</span>: BatchController(),</span><br><span class="line">            <span class="string">"resource"</span>: ResourcesByTypeController(),</span><br><span class="line">            <span class="string">"resource_type"</span>: ResourceTypesController(),</span><br><span class="line">            <span class="string">"aggregation"</span>: AggregationController(),</span><br><span class="line">            <span class="string">"capabilities"</span>: CapabilityController(),</span><br><span class="line">            <span class="string">"status"</span>: StatusController(),</span><br><span class="line">            <span class="string">"top"</span>: TopController(),</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> name, ctrl <span class="keyword">in</span> self.sub_controllers.items():</span><br><span class="line">            setattr(self, name, ctrl)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @pecan.expose('json')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">"version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">            <span class="string">"links"</span>: [</span><br><span class="line">                &#123;<span class="string">"rel"</span>: <span class="string">"self"</span>,</span><br><span class="line">                 <span class="string">"href"</span>: pecan.request.application_url&#125;</span><br><span class="line">            ] + [</span><br><span class="line">                &#123;<span class="string">"rel"</span>: name,</span><br><span class="line">                 <span class="string">"href"</span>: pecan.request.application_url + <span class="string">"/"</span> + name&#125;</span><br><span class="line">                <span class="keyword">for</span> name <span class="keyword">in</span> sorted(self.sub_controllers)</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>每次请求的路由的入口就是在这里了。具体怎么路由，可以看下之前写的分析pecan源码的文章。</p>
<p>简单看下监控数据存储的接口吧，<code>POST /v1/batch/resources/metrics/measures?create_metrics=True</code></p>
<p>根据上面的路由转发，可以看到路径是<code>V1Controller --&gt; BatchController --&gt; ResourcesBatchController --&gt; ResourcesMetricsBatchController --&gt; ResourcesMetricsMeasuresBatchController.post</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResourcesMetricsMeasuresBatchController</span><span class="params">(rest.RestController)</span>:</span></span><br><span class="line"><span class="meta">    @pecan.expose('json')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, create_metrics=False)</span>:</span></span><br><span class="line">        creator = pecan.request.auth_helper.get_current_user(</span><br><span class="line">            pecan.request.headers)</span><br><span class="line">        MeasuresBatchSchema = voluptuous.Schema(</span><br><span class="line">            &#123;functools.partial(ResourceID, creator=creator):</span><br><span class="line">             &#123;six.text_type: MeasuresListSchema&#125;&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        body = deserialize_and_validate(MeasuresBatchSchema)</span><br><span class="line"></span><br><span class="line">        known_metrics = []</span><br><span class="line">        unknown_metrics = []</span><br><span class="line">        unknown_resources = []</span><br><span class="line">        body_by_rid = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> original_resource_id, resource_id <span class="keyword">in</span> body:</span><br><span class="line">            body_by_rid[resource_id] = body[(original_resource_id,</span><br><span class="line">                                             resource_id)]</span><br><span class="line">            names = body[(original_resource_id, resource_id)].keys()</span><br><span class="line">            <span class="comment">#这里调用indexer从数据库中索引每一个metrics （gnocchi启动时应该会去加载gnocchi_resource...文件下定义的metrics）</span></span><br><span class="line">            metrics = pecan.request.indexer.list_metrics(</span><br><span class="line">                names=names, resource_id=resource_id)</span><br><span class="line"></span><br><span class="line">            known_names = [m.name <span class="keyword">for</span> m <span class="keyword">in</span> metrics]</span><br><span class="line">            <span class="comment"># 创建 metrics </span></span><br><span class="line">            <span class="keyword">if</span> strutils.bool_from_string(create_metrics):</span><br><span class="line">                already_exists_names = []</span><br><span class="line">                <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">                    <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> known_names:</span><br><span class="line">                        metric = MetricsController.MetricSchema(&#123;</span><br><span class="line">                            <span class="string">"name"</span>: name</span><br><span class="line">                        &#125;)</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            m = pecan.request.indexer.create_metric(</span><br><span class="line">                                uuid.uuid4(),</span><br><span class="line">                                creator=creator,</span><br><span class="line">                                resource_id=resource_id,</span><br><span class="line">                                name=metric.get(<span class="string">'name'</span>),</span><br><span class="line">                                unit=metric.get(<span class="string">'unit'</span>),</span><br><span class="line">                                archive_policy_name=metric[</span><br><span class="line">                                    <span class="string">'archive_policy_name'</span>])</span><br><span class="line">                        <span class="keyword">except</span> indexer.NamedMetricAlreadyExists <span class="keyword">as</span> e:</span><br><span class="line">                            already_exists_names.append(e.metric)</span><br><span class="line">                        <span class="keyword">except</span> indexer.NoSuchResource:</span><br><span class="line">                            unknown_resources.append(&#123;</span><br><span class="line">                                <span class="string">'resource_id'</span>: six.text_type(resource_id),</span><br><span class="line">                                <span class="string">'original_resource_id'</span>: original_resource_id&#125;)</span><br><span class="line">                        <span class="keyword">except</span> indexer.IndexerException <span class="keyword">as</span> e:</span><br><span class="line">                            <span class="comment"># This catch NoSuchArchivePolicy, which is unlikely</span></span><br><span class="line">                            <span class="comment"># be still possible</span></span><br><span class="line">                            abort(<span class="number">400</span>, e)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            known_metrics.append(m)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> already_exists_names:</span><br><span class="line">                    <span class="comment"># Add metrics created in the meantime</span></span><br><span class="line">                    known_names.extend(already_exists_names)</span><br><span class="line">                    known_metrics.extend(</span><br><span class="line">                        pecan.request.indexer.list_metrics(</span><br><span class="line">                            names=already_exists_names,</span><br><span class="line">                            resource_id=resource_id)</span><br><span class="line">                    )</span><br><span class="line">						<span class="comment"># 比较数据库中用metric_id查出来的metrics和现实发送过来的metrics是否一致。</span></span><br><span class="line">            <span class="keyword">elif</span> len(names) != len(metrics):</span><br><span class="line">                unknown_metrics.extend(</span><br><span class="line">                    [<span class="string">"%s/%s"</span> % (six.text_type(resource_id), m)</span><br><span class="line">                     <span class="keyword">for</span> m <span class="keyword">in</span> names <span class="keyword">if</span> m <span class="keyword">not</span> <span class="keyword">in</span> known_names])</span><br><span class="line"></span><br><span class="line">            known_metrics.extend(metrics)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> unknown_resources:</span><br><span class="line">            abort(<span class="number">400</span>, &#123;<span class="string">"cause"</span>: <span class="string">"Unknown resources"</span>,</span><br><span class="line">                        <span class="string">"detail"</span>: unknown_resources&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> unknown_metrics:</span><br><span class="line">            abort(<span class="number">400</span>, <span class="string">"Unknown metrics: %s"</span> % <span class="string">", "</span>.join(</span><br><span class="line">                sorted(unknown_metrics)))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 验证policy.yaml</span></span><br><span class="line">        <span class="keyword">for</span> metric <span class="keyword">in</span> known_metrics:</span><br><span class="line">            enforce(<span class="string">"post measures"</span>, metric)</span><br><span class="line">				<span class="comment"># 这里对metric进行储存，存进 incoming storage</span></span><br><span class="line">        storage = pecan.request.storage.incoming</span><br><span class="line">        <span class="keyword">with</span> futures.ThreadPoolExecutor(max_workers=THREADS) <span class="keyword">as</span> executor:</span><br><span class="line">            list(executor.map(<span class="keyword">lambda</span> x: storage.add_measures(*x),</span><br><span class="line">                              ((metric,</span><br><span class="line">                                body_by_rid[metric.resource_id][metric.name])</span><br><span class="line">                               <span class="keyword">for</span> metric <span class="keyword">in</span> known_metrics)))</span><br><span class="line"></span><br><span class="line">        pecan.response.status = <span class="number">202</span></span><br></pre></td></tr></table></figure>
<p>这里主要是将发送过来的监控数据存进了 gnocchi 的 incoming storage</p>
<h2 id="gnocchi-metricd"><a href="#gnocchi-metricd" class="headerlink" title="gnocchi-metricd"></a>gnocchi-metricd</h2><p>gnocchi 的metricd 服务是进行数据聚合，压缩，生成时间序列存储的。</p>
<p>入口：<code>gnocchi/cli.py</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">metricd</span><span class="params">()</span>:</span></span><br><span class="line">    conf = cfg.ConfigOpts()</span><br><span class="line">    conf.register_cli_opts([</span><br><span class="line">        cfg.IntOpt(<span class="string">"stop-after-processing-metrics"</span>,</span><br><span class="line">                   default=<span class="number">0</span>,</span><br><span class="line">                   min=<span class="number">0</span>,</span><br><span class="line">                   help=<span class="string">"Number of metrics to process without workers, "</span></span><br><span class="line">                   <span class="string">"for testing purpose"</span>),</span><br><span class="line">    ])</span><br><span class="line">    conf = service.prepare_service(conf=conf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> conf.stop_after_processing_metrics:</span><br><span class="line">        metricd_tester(conf)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        MetricdServiceManager(conf).run()</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MetricdServiceManager</span><span class="params">(cotyledon.ServiceManager)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, conf)</span>:</span></span><br><span class="line">        super(MetricdServiceManager, self).__init__()</span><br><span class="line">        oslo_config_glue.setup(self, conf)</span><br><span class="line"></span><br><span class="line">        self.conf = conf</span><br><span class="line">        self.queue = multiprocessing.Manager().Queue()</span><br><span class="line"></span><br><span class="line">        self.add(MetricScheduler, args=(self.conf, self.queue))</span><br><span class="line">        self.metric_processor_id = self.add(</span><br><span class="line">            MetricProcessor, args=(self.conf, self.queue),</span><br><span class="line">            workers=conf.metricd.workers)</span><br><span class="line">        <span class="keyword">if</span> self.conf.metricd.metric_reporting_delay &gt;= <span class="number">0</span>:</span><br><span class="line">            self.add(MetricReporting, args=(self.conf,))</span><br><span class="line">        self.add(MetricJanitor, args=(self.conf,))</span><br><span class="line"></span><br><span class="line">        self.register_hooks(on_reload=self.on_reload)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_reload</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># NOTE(sileht): We do not implement reload() in Workers so all workers</span></span><br><span class="line">        <span class="comment"># will received SIGHUP and exit gracefully, then their will be</span></span><br><span class="line">        <span class="comment"># restarted with the new number of workers. This is important because</span></span><br><span class="line">        <span class="comment"># we use the number of worker to declare the capability in tooz and</span></span><br><span class="line">        <span class="comment"># to select the block of metrics to proceed.</span></span><br><span class="line">        self.reconfigure(self.metric_processor_id,</span><br><span class="line">                         workers=self.conf.metricd.workers)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(MetricdServiceManager, self).run()</span><br><span class="line">        self.queue.close()</span><br><span class="line">        </span><br><span class="line"><span class="comment"># MetricScheduler服务用于每隔一定时间从incoming数据库中拉取临时的监控数据，放在多进程队列中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MetricScheduler</span><span class="params">(MetricProcessBase)</span>:</span></span><br><span class="line">  <span class="comment">#...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最重要的服务，数据聚合服务，它从MetricScheduler服务存放在多进程队列中获取需要处理的监控数据进行最终的聚合运算。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MetricProcessor</span><span class="params">(MetricProcessBase)</span>:</span></span><br><span class="line">  <span class="comment">#...</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># MetricReporting服务每隔2分钟统计并以日志形式输出未处理的监控项个数和未处理的measure数目</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MetricReporting</span><span class="params">(MetricProcessBase)</span>:</span></span><br><span class="line">  <span class="comment">#...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MetricJanitor每隔已定时间清理已经删除的metric数据</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MetricJanitor</span><span class="params">(MetricProcessBase)</span>:</span></span><br><span class="line">  <span class="comment">#...</span></span><br></pre></td></tr></table></figure>
<p>这里用到了cotyledon库，不是本文重点，简单说可以看下这四个类 <code>MetricScheduler、MetricProcessor、MetricReporting、MetricJanitor</code> 的 <code>_run_job</code> 方法，这是启动方法。</p>
<h3 id="数据接收"><a href="#数据接收" class="headerlink" title="数据接收"></a>数据接收</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MetricScheduler</span><span class="params">(MetricProcessBase)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_run_job</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      metrics = set(</span><br><span class="line">        self.store.incoming.list_metric_with_measures_to_process(</span><br><span class="line">          self.block_size, self.block_index))</span><br><span class="line">      <span class="keyword">if</span> metrics <span class="keyword">and</span> <span class="keyword">not</span> self.queue.empty():</span><br><span class="line">        <span class="comment"># NOTE(gordc): drop metrics we previously process to avoid</span></span><br><span class="line">        <span class="comment">#              handling twice</span></span><br><span class="line">        number_of_scheduled_metrics = len(metrics)</span><br><span class="line">        metrics = metrics - self.previously_scheduled_metrics</span><br><span class="line">        <span class="keyword">if</span> (float(number_of_scheduled_metrics - len(metrics)) /</span><br><span class="line">            self.block_size &gt; self.MAX_OVERLAP):</span><br><span class="line">          LOG.warning(<span class="string">'Metric processing lagging scheduling rate. '</span></span><br><span class="line">                      <span class="string">'It is recommended to increase the number of '</span></span><br><span class="line">                      <span class="string">'workers or to lengthen processing interval.'</span>)</span><br><span class="line">          metrics = list(metrics)</span><br><span class="line">          <span class="keyword">for</span> i <span class="keyword">in</span> six.moves.range(<span class="number">0</span>, len(metrics), self.BLOCK_SIZE):</span><br><span class="line">            self.queue.put(metrics[i:i + self.BLOCK_SIZE])</span><br><span class="line">            self.previously_scheduled_metrics = set(metrics)</span><br><span class="line">            LOG.debug(<span class="string">"%d metrics scheduled for processing."</span>, len(metrics))</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">              LOG.error(<span class="string">"Unexpected error scheduling metrics for processing"</span>,</span><br><span class="line">                        exc_info=<span class="keyword">True</span>)</span><br><span class="line">              </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisStorage</span><span class="params">(_carbonara.CarbonaraBasedStorage)</span>:</span>              </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list_metric_with_measures_to_process</span><span class="params">(self, size, part, full=False)</span>:</span></span><br><span class="line">        match = redis.SEP.join([self.STORAGE_PREFIX, <span class="string">"*"</span>])</span><br><span class="line">        keys = self._client.scan_iter(match=match, count=<span class="number">1000</span>)</span><br><span class="line">        measures = set([k.decode(<span class="string">'utf8'</span>).split(redis.SEP)[<span class="number">1</span>] <span class="keyword">for</span> k <span class="keyword">in</span> keys])</span><br><span class="line">        <span class="keyword">if</span> full:</span><br><span class="line">            <span class="keyword">return</span> measures</span><br><span class="line">        <span class="keyword">return</span> set(list(measures)[size * part:size * (part + <span class="number">1</span>)])</span><br></pre></td></tr></table></figure>
<p><code>MetricScheduler</code> 进行主要是从 gnocchi 的 incoming storage 去拉取数据，存进 queue，由于我这里用的是redis，所以进到<code>RedisStorage</code>；</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MetricProcessor</span><span class="params">(MetricProcessBase)</span>:</span></span><br><span class="line">    name = <span class="string">"processing"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, worker_id, conf, queue)</span>:</span></span><br><span class="line">        super(MetricProcessor, self).__init__(worker_id, conf, <span class="number">0</span>)</span><br><span class="line">        self.queue = queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_run_job</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">              	<span class="comment"># 从存放监控数据的多进程队列中获取监控数据</span></span><br><span class="line">                metrics = self.queue.get(block=<span class="keyword">True</span>, timeout=<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">except</span> six.moves.queue.Empty:</span><br><span class="line">                <span class="comment"># NOTE(sileht): Allow the process to exit gracefully every</span></span><br><span class="line">                <span class="comment"># 10 seconds</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 然后调用self.store实际就是storage数据库(这里一般使用ceph)</span></span><br><span class="line">            self.store.process_background_tasks(self.index, metrics)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            LOG.error(<span class="string">"Unexpected error during measures processing"</span>,</span><br><span class="line">                      exc_info=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<p>这里从 queue 中拉取数据，通过 process_background_tasks 处理：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gnocchi/storage/__init__.py </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StorageDriver</span><span class="params">(object)</span>:</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">process_background_tasks</span><span class="params">(self, index, metrics, sync=False)</span>:</span></span><br><span class="line">        <span class="string">"""Process background tasks for this storage.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        This calls :func:`process_new_measures` to process new measures</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param index: An indexer to be used for querying metrics</span></span><br><span class="line"><span class="string">        :param block_size: number of metrics to process # 之前这里默认处理128个metrics，现在取消了</span></span><br><span class="line"><span class="string">        :param sync: If True, then process everything synchronously and raise</span></span><br><span class="line"><span class="string">                     on error</span></span><br><span class="line"><span class="string">        :type sync: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        LOG.debug(<span class="string">"Processing new measures"</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.process_new_measures(index, metrics, sync)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">if</span> sync:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            LOG.error(<span class="string">"Unexpected error during measures processing"</span>,</span><br><span class="line">                      exc_info=<span class="keyword">True</span>)</span><br><span class="line">            </span><br><span class="line"><span class="comment"># gnocchi/storage/_carbonara.py </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarbonaraBasedStorage</span><span class="params">(storage.StorageDriver)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_new_measures</span><span class="params">(self, indexer, metrics_to_process,</span></span></span><br><span class="line"><span class="function"><span class="params">                             sync=False)</span>:</span></span><br><span class="line">        <span class="comment"># 从 index 中根据 metric id 查询所有需要处理 metrics</span></span><br><span class="line">        metrics = indexer.list_metrics(ids=metrics_to_process)</span><br><span class="line">        <span class="comment"># 一个 metric 的实例如下</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        (Pdb) metrics[0].__dict__</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            'status': u 'active',</span></span><br><span class="line"><span class="string">            '_sa_instance_state': &lt; sqlalchemy.orm.state.InstanceState object at 0x7ff3011e4790 &gt; ,</span></span><br><span class="line"><span class="string">            'name': u 'memory.usage',</span></span><br><span class="line"><span class="string">            'creator': u '24f0a937351a415d89d499b5a5dae765:21214626fd5240cd87ce0bb5351db684',</span></span><br><span class="line"><span class="string">            'resource_id': UUID('2501d896-75e5-4a1e-b66c-0837f9764bde'),</span></span><br><span class="line"><span class="string">            'archive_policy': &lt; gnocchi.indexer.sqlalchemy_base.ArchivePolicy object at 0x7ff3011e48d0 &gt; ,</span></span><br><span class="line"><span class="string">            'archive_policy_name': u 'frequency_300s',</span></span><br><span class="line"><span class="string">            'id': UUID('31e8105c-70a0-4d58-99c9-92ec32e56fd3'),</span></span><br><span class="line"><span class="string">            'unit': u 'MB'</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># This build the list of deleted metrics, i.e. the metrics we have</span></span><br><span class="line">        <span class="comment"># measures to process for but that are not in the indexer anymore.</span></span><br><span class="line">        <span class="comment"># 删除measures文件下取到的无效metrics</span></span><br><span class="line">        deleted_metrics_id = (set(map(uuid.UUID, metrics_to_process))</span><br><span class="line">                              - set(m.id <span class="keyword">for</span> m <span class="keyword">in</span> metrics))</span><br><span class="line">        <span class="keyword">for</span> metric_id <span class="keyword">in</span> deleted_metrics_id:</span><br><span class="line">            <span class="comment"># NOTE(jd): We need to lock the metric otherwise we might delete</span></span><br><span class="line">            <span class="comment"># measures that another worker might be processing. Deleting</span></span><br><span class="line">            <span class="comment"># measurement files under its feet is not nice!</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> self._lock(metric_id)(blocking=sync):</span><br><span class="line">                    self.incoming.delete_unprocessed_measures_for_metric_id(</span><br><span class="line">                        metric_id)</span><br><span class="line">            <span class="keyword">except</span> coordination.LockAcquireFailed:</span><br><span class="line">                LOG.debug(<span class="string">"Cannot acquire lock for metric %s, postponing "</span></span><br><span class="line">                          <span class="string">"unprocessed measures deletion"</span>, metric_id)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对 metric 逐个处理</span></span><br><span class="line">        <span class="keyword">for</span> metric <span class="keyword">in</span> metrics:</span><br><span class="line">            lock = self._lock(metric.id)</span><br><span class="line">            <span class="comment"># Do not block if we cannot acquire the lock, that means some other</span></span><br><span class="line">            <span class="comment"># worker is doing the job. We'll just ignore this metric and may</span></span><br><span class="line">            <span class="comment"># get back later to it if needed.</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> lock.acquire(blocking=sync):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                locksw = timeutils.StopWatch().start()</span><br><span class="line">                LOG.debug(<span class="string">"Processing measures for %s"</span>, metric)</span><br><span class="line">                <span class="comment"># process_measure_for_metric(self, metric): 返回待处理监控项对应的监控数据列表，</span></span><br><span class="line">                <span class="comment"># 每个元素是时间戳和对应的值，样例：[(Timestamp('2018-04-19 02:29:04.925214'), 4.785732057729687)]</span></span><br><span class="line">                <span class="keyword">with</span> self.incoming.process_measure_for_metric(metric) \</span><br><span class="line">                        <span class="keyword">as</span> measures:</span><br><span class="line">                    self._compute_and_store_timeseries(metric, measures)</span><br><span class="line">                LOG.debug(<span class="string">"Metric %s locked during %.2f seconds"</span>,</span><br><span class="line">                          metric.id, locksw.elapsed())</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                LOG.debug(<span class="string">"Metric %s locked during %.2f seconds"</span>,</span><br><span class="line">                          metric.id, locksw.elapsed())</span><br><span class="line">                <span class="keyword">if</span> sync:</span><br><span class="line">                    <span class="keyword">raise</span></span><br><span class="line">                LOG.error(<span class="string">"Error processing new measures"</span>, exc_info=<span class="keyword">True</span>)</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                lock.release()</span><br></pre></td></tr></table></figure>
<p>这里主要做了几件事：</p>
<ol>
<li>根据待处理的监控项集合，判断如果有已经删除的监控项，则删除对应incoming storage中的监控数据</li>
<li>遍历待处理的监控项列表，获取每个监控项在incoming storage中的监控数据列表，然后根据监控项及其待处理监控数据<br>调用_compute_and_store_timeseries方法来计算并存储时间序列</li>
</ol>
<h3 id="数据聚合"><a href="#数据聚合" class="headerlink" title="数据聚合"></a>数据聚合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_compute_and_store_timeseries</span><span class="params">(self, metric, measures)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(measures) == <span class="number">0</span>:</span><br><span class="line">        LOG.debug(<span class="string">"Skipping %s (already processed)"</span>, metric)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"><span class="comment"># 步骤一：对measures进行排序</span></span><br><span class="line">    measures = sorted(measures, key=operator.itemgetter(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    (Pdb) p metric</span></span><br><span class="line"><span class="string">    &lt;Metric 01f0658b-f147-482b-bca9-f474a79320dc&gt;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    (Pdb) p metric.__dict__</span></span><br><span class="line"><span class="string">    &#123;'status': u'active', '_sa_instance_state': &lt;sqlalchemy.orm.state.InstanceState object at 0x5536b50&gt;, 'name': u'cpu_util', 'creator': u'6a18a77646104fcb93e92cb3daf10c91:55e9bc42c004471b9111ffbb516a9bbe', 'resource_id': UUID('d872305c-94b3-4f35-a2d5-602af219945d'), 'archive_policy': &lt;gnocchi.indexer.sqlalchemy_base.ArchivePolicy object at 0x5536c50&gt;, 'archive_policy_name': u'frequency_300s', 'id': UUID('01f0658b-f147-482b-bca9-f474a79320dc'), 'unit': None&#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    (Pdb) p type(metric)</span></span><br><span class="line"><span class="string">    &lt;class 'gnocchi.indexer.sqlalchemy_base.Metric'&gt;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    (Pdb) p measures</span></span><br><span class="line"><span class="string">    [(Timestamp('2018-04-19 04:21:08.054995'), 4.799075611984741),</span></span><br><span class="line"><span class="string">     (Timestamp('2018-04-19 05:10:10.429245'), 4.574397482330608),</span></span><br><span class="line"><span class="string">     (Timestamp('2018-04-19 04:08:07.438367'), 4.597624310196946)]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    (Pdb) p metric.archive_policy</span></span><br><span class="line"><span class="string">    &lt;gnocchi.indexer.sqlalchemy_base.ArchivePolicy object at 0x5536c50&gt;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    (Pdb) p metric.archive_policy.__dict__</span></span><br><span class="line"><span class="string">    &#123;'back_window': 0, 'definition': [&#123;'points': 300, 'granularity': 300.0, 'timespan': 90000.0&#125;, &#123;'points': 100, 'granularity': 900.0, 'timespan': 90000.0&#125;, &#123;'points': 100, 'granularity': 7200.0, 'timespan': 720000.0&#125;, &#123;'points': 200, 'granularity': 86400.0, 'timespan': 17280000.0&#125;], '_sa_instance_state': &lt;sqlalchemy.orm.state.InstanceState object at 0x5536c90&gt;, 'name': u'frequency_300s', 'aggregation_methods': set([u'count', u'max', u'sum', u'mean', u'min'])&#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    (Pdb) p metric.archive_policy.aggregation_methods</span></span><br><span class="line"><span class="string">    set([u'count', u'max', u'sum', u'mean', u'min'])</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    (Pdb) p metric.archive_policy.max_block_size</span></span><br><span class="line"><span class="string">    86400.0</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    (Pdb) p metric.archive_policy.back_window</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    (Pdb) p metric.archive_policy.definition</span></span><br><span class="line"><span class="string">    [&#123;'points': 300, 'granularity': 300.0, 'timespan': 90000.0&#125;, &#123;'points': 100, 'granularity': 900.0, 'timespan': 90000.0&#125;, &#123;'points': 100, 'granularity': 7200.0, 'timespan': 720000.0&#125;, &#123;'points': 200, 'granularity': 86400.0, 'timespan': 17280000.0&#125;]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    agg_methods = list(metric.archive_policy.aggregation_methods)</span><br><span class="line">    block_size = metric.archive_policy.max_block_size</span><br><span class="line">    back_window = metric.archive_policy.back_window</span><br><span class="line">    definition = metric.archive_policy.definition</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      	<span class="comment"># 步骤二：获取未聚合的时间序列数据进行反序列化，来重新构建为新的时间序列</span></span><br><span class="line">        ts = self._get_unaggregated_timeserie_and_unserialize(</span><br><span class="line">            metric, block_size=block_size, back_window=back_window)</span><br><span class="line">    <span class="keyword">except</span> storage.MetricDoesNotExist:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._create_metric(metric)</span><br><span class="line">        <span class="keyword">except</span> storage.MetricAlreadyExists:</span><br><span class="line">            <span class="comment"># Created in the mean time, do not worry</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        ts = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> CorruptionError <span class="keyword">as</span> e:</span><br><span class="line">        LOG.error(e)</span><br><span class="line">        ts = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ts <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        ts = carbonara.BoundTimeSerie(block_size=block_size,</span><br><span class="line">                                      back_window=back_window)</span><br><span class="line">        current_first_block_timestamp = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        current_first_block_timestamp = ts.first_block_timestamp()</span><br><span class="line"></span><br><span class="line">    computed_points = &#123;<span class="string">"number"</span>: <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_map_add_measures</span><span class="params">(bound_timeserie)</span>:</span></span><br><span class="line">        tstamp = max(bound_timeserie.first, measures[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        new_first_block_timestamp = bound_timeserie.first_block_timestamp()</span><br><span class="line">        computed_points[<span class="string">'number'</span>] = len(bound_timeserie)</span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> definition:</span><br><span class="line">            ts = bound_timeserie.group_serie(</span><br><span class="line">                d.granularity, carbonara.round_timestamp(</span><br><span class="line">                    tstamp, d.granularity * <span class="number">10e8</span>))</span><br><span class="line">            self._map_in_thread(</span><br><span class="line">                self._add_measures,</span><br><span class="line">                ((aggregation, d, metric, ts,</span><br><span class="line">                    current_first_block_timestamp,</span><br><span class="line">                    new_first_block_timestamp)</span><br><span class="line">                    <span class="keyword">for</span> aggregation <span class="keyword">in</span> agg_methods))</span><br><span class="line"><span class="comment"># 步骤三：计算聚合后的时间序列</span></span><br><span class="line">    <span class="keyword">with</span> timeutils.StopWatch() <span class="keyword">as</span> sw:</span><br><span class="line">        ts.set_values(measures,</span><br><span class="line">                      before_truncate_callback=_map_add_measures,</span><br><span class="line">                      ignore_too_old_timestamps=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">        elapsed = sw.elapsed()</span><br><span class="line">        number_of_operations = (len(agg_methods) * len(definition))</span><br><span class="line">        perf = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> elapsed &gt; <span class="number">0</span>:</span><br><span class="line">            perf = <span class="string">" (%d points/s, %d measures/s)"</span> % (</span><br><span class="line">                ((number_of_operations * computed_points[<span class="string">'number'</span>]) /</span><br><span class="line">                    elapsed),</span><br><span class="line">                ((number_of_operations * len(measures)) / elapsed)</span><br><span class="line">            )</span><br><span class="line">        LOG.debug(<span class="string">"Computed new metric %s with %d new measures "</span></span><br><span class="line">                  <span class="string">"in %.2f seconds%s"</span>,</span><br><span class="line">                  metric.id, len(measures), elapsed, perf)</span><br><span class="line"><span class="comment"># 步骤四：更新未聚合的时间序列</span></span><br><span class="line">    self._store_unaggregated_timeserie(metric, ts.serialize())</span><br></pre></td></tr></table></figure>
<ol>
<li><p>步骤1. 对待处理监控数据按照时间从旧到新排序，获取监控项中聚合方法，采样间隔等信息</p>
</li>
<li><p>步骤2. 调用<code>_get_unaggregated_timeserie_and_unserialize</code>方法获取未聚合的时间序列数据进行反序列化，来重新构建为新的时间序列，具体步骤如下<br>2.0. 先根据监控项<code>id</code>构建需要获取的对象名称，形如:<code>gnocchi_01f0658b-f147-482b-bca9-f474a79320dc_none_v3</code><br>从ceph中读取该对象存储的值(是一个字符串)</p>
<p>​        2.1. 先解压从步骤0中读取的数据（实际是一个字符串），前面一半为时间，后面一半为时间对应的值</p>
<p>​        2.2. 解压的时间由于采用差值，所以累加计算每个时间；</p>
<p>​        2.3. 将时间列表，值列表来构建时间序列，然后根据block_size(实际是最大采样间隔)对序列计算出这个时间序列中最后一个数据，在一天之前的起始时间，以该时间为基础，对此时间序列进行切片，得到最终需要处理的时间序列</p>
<p>​        2.4. 用步骤3的时间序列，block_size等实例化并返回最终需要处理的BoundTimeSerie</p>
</li>
<li><p>步骤3 计算聚合后的时间序列，具体调用ts.set_values方法处理过程如下</p>
<p>​        3.1. 对给定的已经合并了待处理数据生成的时间序列和未聚合的时间序列的合并时间序列boundTimeSerie进行如下操作</p>
<p>​        3.2. 遍历归档策略，根据采样间隔，聚合方法：</p>
<p>​                计算每个boundTimeSerie聚合后的时间序列；</p>
<p>​                并对该聚合的时间序列分割，计算分割序列的偏移量和对应序列化的值；</p>
<p>​                根据偏移量，将序列化的值写入到对应的ceph对象</p>
<p>​        总结：步骤3实现了: 计算聚合后的时间序列，将聚合后的时间序列写入到ceph对象中</p>
</li>
<li><p>步骤4. 更新未聚合的时间序列，具体调用_store_unaggregated_timeserie方法处理过程如下</p>
<p>​        4.1. 对时间序列的索引进行numpy.diff的求差值操作，并<br>​        在所求的索引差值列表的最前面加上该时间序列的第一个值，<br>​        得到差值索引列表</p>
<p>​        4.2. 对差值索引列表的类型转换为uint64类型</p>
<p>​        4.3. 对时间序列的值列表类型转换为浮点型</p>
<p>​        4.4 对差值索引列表转换为字节 + 对时间序列的值列表转换为字节，<br>​           得到字符串</p>
<p>​        4.5. 对该字符串调用lz4.dumps进行压缩，返回该压缩后的字符串</p>
<p>​        4.6 构建类似gnocchi_01f0658b-f147-482b-bca9-f474a79320dc_none_v3的对象名称，<br>​           向该对象中写入未聚合的时间序列的压缩后的字符串<br>​           该字符串序列化前的前半部分为：时间序列索引，后半部分为时间序列值</p>
</li>
</ol>
<h4 id="步骤1-对待处理监控数据按照时间从旧到新排序，获取监控项中聚合方法，采样间隔等信息"><a href="#步骤1-对待处理监控数据按照时间从旧到新排序，获取监控项中聚合方法，采样间隔等信息" class="headerlink" title="步骤1. 对待处理监控数据按照时间从旧到新排序，获取监控项中聚合方法，采样间隔等信息"></a>步骤1. 对待处理监控数据按照时间从旧到新排序，获取监控项中聚合方法，采样间隔等信息</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_compute_and_store_timeseries</span><span class="params">(self, metric, measures)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(measures) == <span class="number">0</span>:</span><br><span class="line">        LOG.debug(<span class="string">"Skipping %s (already processed)"</span>, metric)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"><span class="comment"># 对measures进行排序</span></span><br><span class="line">    measures = sorted(measures, key=operator.itemgetter(<span class="number">0</span>))</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>
<h4 id="步骤2-调用-get-unaggregated-timeserie-and-unserialize方法获取未聚合的时间序列数据进行反序列化，来重新构建为新的时间序列，"><a href="#步骤2-调用-get-unaggregated-timeserie-and-unserialize方法获取未聚合的时间序列数据进行反序列化，来重新构建为新的时间序列，" class="headerlink" title="步骤2. 调用_get_unaggregated_timeserie_and_unserialize方法获取未聚合的时间序列数据进行反序列化，来重新构建为新的时间序列，"></a>步骤2. 调用_get_unaggregated_timeserie_and_unserialize方法获取未聚合的时间序列数据进行反序列化，来重新构建为新的时间序列，</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarbonaraBasedStorage</span><span class="params">(storage.StorageDriver)</span>:</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">_get_unaggregated_timeserie_and_unserialize</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            self, metric, block_size, back_window)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        _get_unaggregated_timeserie</span></span><br><span class="line"><span class="string">        	s0. 先根据监控项id构建需要获取的对象名称，形如:gnocchi_01f0658b-f147-482b-bca9-f474a79320dc_none_v3</span></span><br><span class="line"><span class="string">            	从ceph中读取该对象存储的值(是一个字符串)</span></span><br><span class="line"><span class="string">        unserialize</span></span><br><span class="line"><span class="string">          s1. 先解压从步骤0中读取的数据（实际是一个字符串），前面一半为时间，后面一半为时间对应的值</span></span><br><span class="line"><span class="string">          s2. 解压的时间由于采用差值，所以累加计算每个时间；</span></span><br><span class="line"><span class="string">          s3. 将时间列表，值列表来构建时间序列，然后根据block_size对序列计算出这个时间序列中最后一个数据，</span></span><br><span class="line"><span class="string">           在一天之前的起始时间，以该时间为基础，对此时间序列进行切片，得到最终需要处理的时间序列</span></span><br><span class="line"><span class="string">          s4. 用步骤s3的时间序列，block_size等实例化并返回最终需要处理的BoundTimeSerie</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">with</span> timeutils.StopWatch() <span class="keyword">as</span> sw:</span><br><span class="line">            raw_measures = (</span><br><span class="line">                self._get_unaggregated_timeserie(</span><br><span class="line">                    metric)</span><br><span class="line">            )</span><br><span class="line">            LOG.debug(</span><br><span class="line">                <span class="string">"Retrieve unaggregated measures "</span></span><br><span class="line">                <span class="string">"for %s in %.2fs"</span>,</span><br><span class="line">                metric.id, sw.elapsed())</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">          	<span class="comment"># 解压，计算</span></span><br><span class="line">            <span class="keyword">return</span> carbonara.BoundTimeSerie.unserialize(</span><br><span class="line">                raw_measures, block_size, back_window)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">raise</span> CorruptionError(</span><br><span class="line">                <span class="string">"Data corruption detected for %s "</span></span><br><span class="line">                <span class="string">"unaggregated timeserie"</span> % metric.id)</span><br></pre></td></tr></table></figure>
<p>变量分析：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) p metric</span><br><span class="line">&lt;Metric 01f0658b-f147-482b-bca9-f474a79320dc&gt;</span><br><span class="line">(Pdb) p metric.__dict__</span><br><span class="line">&#123;&apos;status&apos;: u&apos;active&apos;, &apos;_sa_instance_state&apos;: &lt;sqlalchemy.orm.state.InstanceState object at 0x5536b50&gt;, &apos;name&apos;: u&apos;cpu_util&apos;, &apos;creator&apos;: u&apos;6a18a77646104fcb93e92cb3daf10c91:55e9bc42c004471b9111ffbb516a9bbe&apos;, &apos;resource_id&apos;: UUID(&apos;d872305c-94b3-4f35-a2d5-602af219945d&apos;), &apos;archive_policy&apos;: &lt;gnocchi.indexer.sqlalchemy_base.ArchivePolicy object at 0x5536c50&gt;, &apos;archive_policy_name&apos;: u&apos;frequency_300s&apos;, &apos;id&apos;: UUID(&apos;01f0658b-f147-482b-bca9-f474a79320dc&apos;), &apos;unit&apos;: None&#125;</span><br><span class="line"></span><br><span class="line">(Pdb) p block_size</span><br><span class="line">86400.0</span><br><span class="line">(Pdb) p back_window</span><br><span class="line">0</span><br><span class="line">(Pdb) p raw_measures</span><br><span class="line">&apos;\xd0\x06\x00\x00\xf5\t\x00T\r\x15\xc4\xc7#\x16\x00XG\xf8\r\x00\x00\x00\x00&quot;\xe23\x0e\x00\x00\x00\x10\x00\x04\x18\x00\x04\x08\x00\x0f \x00-\x04H\x00\x04\x08\x00\x0fP\x00\r\x0f(\x00-\x0f`\x00\r\x04 \x00?\xec|o\xf8\x00\x1a\x048\x00\x0f\xa0\x00\x15\x0c`\x00\x0c@\x00\x04H\x00\x04\x08\x00\x0f \x00\r\x0f(\x00\x1d\x0f0\x00\x1d\x0f\x80\x005\x0fH\x005\x0f\xc0\x00e\x0fx\x00\x05\xf8\x05@Ys\x07\x00\x00\x00\x00\x18\xee\x84\x06\x00\x00\x00\x00\xb0\x8e\xf0\x1b\x18\x001\xe2\x88\xc0\x18\x001v\xbe7(\x00\t\x02\x00#\xf0?\x0f\x00\x12@\x08\x00\x13\x08\x08\x00\x13\x10\x08\x00\x13\x14\x08\x00\x13\x18\x08\x00\x13\x1c\x08\x00\x13 \x08\x00\x13&quot;\x08\x00\x13$\x08\x00\x13&amp;\x08\x00\x13(\x08\x00\x13*\x08\x00\x13,\x08\x00\x13.\x08\x00\x130\x08\x00\x131\x08\x00\x132\x08\x00\x133\x08\x00\x134\x08\x00\x135\x08\x00\x136\x08\x00\x137\x08\x00\x138\x08\x00\x139\x08\x00\x13:\x08\x00\x13;\x08\x00\x13&lt;\x08\x00\x13=\x08\x00\x13&gt;\x08\x00\x13?\x08\x00\x12@\x08\x00\x13\x80\x08\x00#\x00A\x10\x00\x03\x08\x00#\x00B\x10\x00\x03\x08\x00#\x00C\x10\x00\x03\x08\x00#\x00D\x10\x00\x03\x08\x00#\x00E\x10\x00\x03\x08\x00#\x00F\x10\x00\x03\x08\x00#\x00G\x10\x00\x03\x08\x00#\x00H\x10\x00\x03\x08\x00#\x00I\x10\x00\x03\x08\x00#\x00J\x10\x00\x03\x08\x00#\x00K\x10\x00\x03\x08\x00#\x00L\x10\x00\x03\x08\x00#\x00M\x10\x00\x03\x08\x00#\x00N\x10\x00\x03\x08\x00#\x00O\x10\x00\x03\x08\x00&quot;\x00P\x10\x00\x13@\x08\x00\x13\x80\x08\x00\x13\xc0\x08\x00#\x00Q \x00\x03\x08\x00\x13\x80\x08\x00\x13\xc0\x08\x00#\x00R \x00\x03\x08\x00\x13\x80\x08\x00\x13\xc0\x08\x00#\x00S \x00\x03\x08\x00\x13\x80\x08\x00\x13\xc0\x08\x00#\x00T \x00\x03\x08\x00\x13\x80\x08\x00\x13\xc0\x08\x00#\x00U \x00\x03\x08\x00\x13\x80\x08\x00\x13\xc0\x08\x00#\x00V \x00\x03\x08\x00\x13\x80\x08\x00\x13\xc0\x08\x00#\x00W \x00\x03\x08\x00\x13\x80\x08\x00\x13\xc0\x08\x00#\x00X \x00\x03\x08\x00\x13\x80\x08\x00\x13\xc0\x08\x00#\x00Y \x00\x03\x08\x00\x13\x80\x08\x00\x04\x02\x00\x13\xc0\x10\x00&quot;@Z(\x00\x04\x02\x00\xb0\x80Z@\x00\x00\x00\x00\x00\x00\xf0?&apos;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoundTimeSerie</span><span class="params">(TimeSerie)</span>:</span></span><br><span class="line"><span class="meta">		@classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unserialize</span><span class="params">(cls, data, block_size, back_window)</span>:</span></span><br><span class="line">				<span class="string">"""</span></span><br><span class="line"><span class="string">				根据ceph中获得的监控数据(包含时间和值)的字符串，即data:</span></span><br><span class="line"><span class="string">          s1. 先解压数据，前面一半为时间，后面一半为时间对应的值</span></span><br><span class="line"><span class="string">          s2. 解压的时间由于采用差值，所以累加计算每个时间；</span></span><br><span class="line"><span class="string">          s3. 将时间列表，值列表来构建时间序列，然后根据block_size对序列计算出这个时间序列中最后一个数据，</span></span><br><span class="line"><span class="string">          在一天之前的起始时间，以该时间为基础，对此时间序列进行切片，得到最终需要处理的时间序列</span></span><br><span class="line"><span class="string">          s4. 用步骤s3的时间序列，block_size等实例化并返回最终需要处理的BoundTimeSerie</span></span><br><span class="line"><span class="string">				"""</span></span><br><span class="line">        uncompressed = lz4.loads(data)</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">            (Pdb) nb_points</span></span><br><span class="line"><span class="string">            109</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        nb_points = (</span><br><span class="line">            len(uncompressed) // cls._SERIALIZATION_TIMESTAMP_VALUE_LEN</span><br><span class="line">        )</span><br><span class="line">        timestamps_raw = uncompressed[</span><br><span class="line">            :nb_points*cls._SERIALIZATION_TIMESTAMP_LEN]</span><br><span class="line">        timestamps = numpy.frombuffer(timestamps_raw, dtype=<span class="string">'&lt;Q'</span>)</span><br><span class="line">        timestamps = numpy.cumsum(timestamps)</span><br><span class="line">        timestamps = numpy.array(timestamps, dtype=<span class="string">'datetime64[ns]'</span>)</span><br><span class="line">        values_raw = uncompressed[nb_points*cls._SERIALIZATION_TIMESTAMP_LEN:]</span><br><span class="line">        values = numpy.frombuffer(values_raw, dtype=<span class="string">'&lt;d'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cls.from_data(</span><br><span class="line">            pandas.to_datetime(timestamps),</span><br><span class="line">            values,</span><br><span class="line">            block_size=block_size,</span><br><span class="line">            back_window=back_window)</span><br><span class="line">      </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_data</span><span class="params">(cls, timestamps=None, values=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                  block_size=None, back_window=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls(pandas.Series(values, timestamps),</span><br><span class="line">                   block_size=block_size, back_window=back_window)</span><br></pre></td></tr></table></figure>
<h4 id="步骤3-计算聚合后的时间序列，具体调用ts-set-values方法处理过程如下"><a href="#步骤3-计算聚合后的时间序列，具体调用ts-set-values方法处理过程如下" class="headerlink" title="步骤3. 计算聚合后的时间序列，具体调用ts.set_values方法处理过程如下"></a>步骤3. 计算聚合后的时间序列，具体调用ts.set_values方法处理过程如下</h4><p>经过步骤2，我们得到了<code>ts</code>对象：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">(Pdb) ts</span></span><br><span class="line"><span class="string">&lt;gnocchi.carbonara.BoundTimeSerie object at 0x7fbdb91fd5d0&gt;</span></span><br><span class="line"><span class="string">(Pdb) ts.__dict__</span></span><br><span class="line"><span class="string">&#123;'back_window': 0, 'block_size': &lt;86400000000000 * Nanos&gt;,</span></span><br><span class="line"><span class="string"> 'ts':</span></span><br><span class="line"><span class="string">    2020-07-21 13:32:18      0.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:33:18      1.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:34:19      2.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:35:19      3.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:36:19      4.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:37:19      5.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:38:20      6.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:39:20      7.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:40:20      8.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:41:20      9.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:42:21     10.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:43:21     11.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:44:21     12.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:45:21     13.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:46:21     14.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:47:21     15.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:48:22     16.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:49:22     17.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:50:22     18.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:51:22     19.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:52:22     20.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:53:23     21.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:54:23     22.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:55:23     23.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:56:23     24.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:57:23     25.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:58:24     26.0</span></span><br><span class="line"><span class="string">    2020-07-21 13:59:24     27.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:00:25     28.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:01:25     29.0</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">    2020-07-21 14:51:40     79.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:52:40     80.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:53:41     81.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:54:41     82.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:55:41     83.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:56:41     84.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:57:41     85.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:58:42     86.0</span></span><br><span class="line"><span class="string">    2020-07-21 14:59:42     87.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:00:42     88.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:01:42     89.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:02:42     90.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:03:43     91.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:04:43     92.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:05:43     93.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:06:43     94.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:07:43     95.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:08:44     96.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:09:44     97.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:10:44     98.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:11:44     99.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:12:44    100.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:13:45    101.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:14:45    102.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:15:17      0.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:15:45    103.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:17:45    105.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:18:17      0.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:18:46    106.0</span></span><br><span class="line"><span class="string">    2020-07-21 15:19:17      1.0</span></span><br><span class="line"><span class="string">Length: 109, dtype: float64&#125;</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoundTimeSerie</span><span class="params">(TimeSerie)</span>:</span></span><br><span class="line">		<span class="string">"""</span></span><br><span class="line"><span class="string">    1. 从未聚合的时间序列最后一个时间lastTime为基点，找出能够被最大采样间隔(例如86400)整除且最接近lasTtime</span></span><br><span class="line"><span class="string">       的时间作为最近的起始时间firstTime</span></span><br><span class="line"><span class="string">    2. 然后从待处理监控数据列表中过滤出时间 &gt;= firstTime的待处理监控数据</span></span><br><span class="line"><span class="string">    3. 将待处理的监控数据(有时间，值的元组组成的列表)，构建为待处理时间序列，并检查</span></span><br><span class="line"><span class="string">       重复和是否是单调的，然后用原来未聚合的时间序列和当前待处理时间序列进行合并操作，</span></span><br><span class="line"><span class="string">       得到新生成的时间序列</span></span><br><span class="line"><span class="string">		"""</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">set_values</span><span class="params">(self, values, before_truncate_callback=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                   ignore_too_old_timestamps=False)</span>:</span></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> values must be sorted when passed in.</span></span><br><span class="line">        <span class="string">""""""</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        (Pdb) a</span></span><br><span class="line"><span class="string">        self = &lt;gnocchi.carbonara.BoundTimeSerie object at 0x7fbdb91fd5d0&gt;</span></span><br><span class="line"><span class="string">        values = [(Timestamp('2020-07-21 15:19:46'), 107.0)]</span></span><br><span class="line"><span class="string">        before_truncate_callback = &lt;function _map_add_measures at 0x7fbdb91f6f50&gt;</span></span><br><span class="line"><span class="string">        ignore_too_old_timestamps = True</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.block_size <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> <span class="keyword">not</span> self.ts.empty:</span><br><span class="line">            first_block_timestamp = self.first_block_timestamp()</span><br><span class="line">            <span class="keyword">if</span> ignore_too_old_timestamps:</span><br><span class="line">                <span class="keyword">for</span> index, (timestamp, value) <span class="keyword">in</span> enumerate(values):</span><br><span class="line">                    <span class="keyword">if</span> timestamp &gt;= first_block_timestamp:</span><br><span class="line">                        values = values[index:]</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    values = []</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># Check that the smallest timestamp does not go too much back</span></span><br><span class="line">                <span class="comment"># in time.</span></span><br><span class="line">                smallest_timestamp = values[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> smallest_timestamp &lt; first_block_timestamp:</span><br><span class="line">                    <span class="keyword">raise</span> NoDeloreanAvailable(first_block_timestamp,</span><br><span class="line">                                              smallest_timestamp)</span><br><span class="line">        super(BoundTimeSerie, self).set_values(values)</span><br><span class="line">        <span class="comment"># before_truncate_callback = &lt;function _map_add_measures at 0x7fbdb91f6f50&gt;</span></span><br><span class="line">        <span class="keyword">if</span> before_truncate_callback:</span><br><span class="line">            before_truncate_callback(self)</span><br><span class="line">        self._truncate()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarbonaraBasedStorage</span><span class="params">(storage.StorageDriver)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, conf, incoming)</span>:</span></span><br><span class="line">      	...</span><br><span class="line">        self._map_in_thread = self._map_no_thread</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_map_no_thread</span><span class="params">(method, list_of_args)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> list(itertools.starmap(method, list_of_args))</span><br><span class="line">      </span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    _map_add_measures(bound_timeserie):</span></span><br><span class="line"><span class="string">    1. 对给定的已经合并了待处理数据生成的时间序列和未聚合的时间序列的合并时间序列boundTimeSerie进行如下操作</span></span><br><span class="line"><span class="string">    2. 遍历归档策略，根据采样间隔，聚合方法：</span></span><br><span class="line"><span class="string">       计算每个boundTimeSerie聚合后的时间序列；</span></span><br><span class="line"><span class="string">       并对该聚合的时间序列分割，计算分割序列的偏移量和对应序列化的值；</span></span><br><span class="line"><span class="string">       根据偏移量，将序列化的值写入到对应的ceph对象</span></span><br><span class="line"><span class="string">    总结：这个函数实现了: 计算聚合后的时间序列，将聚合后的时间序列写入到ceph对象中</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">_map_add_measures</span><span class="params">(bound_timeserie)</span>:</span></span><br><span class="line">        <span class="string">""""""</span></span><br><span class="line">        <span class="comment"># NOTE (gordc): bound_timeserie is entire set of</span></span><br><span class="line">        <span class="comment"># unaggregated measures matching largest</span></span><br><span class="line">        <span class="comment"># granularity. the following takes only the points</span></span><br><span class="line">        <span class="comment"># affected by new measures for specific granularity</span></span><br><span class="line">        tstamp = max(bound_timeserie.first, measures[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        new_first_block_timestamp = bound_timeserie.first_block_timestamp()</span><br><span class="line">        computed_points[<span class="string">'number'</span>] = len(bound_timeserie)</span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> definition:</span><br><span class="line">          <span class="string">'''</span></span><br><span class="line"><span class="string">          group_serie(self, granularity, start=0):</span></span><br><span class="line"><span class="string">          1.根据给定的时间开始时间，计算过滤后的时间序列，按照采样间隔计算分组后的时间索引列表</span></span><br><span class="line"><span class="string">          2.对分组后的时间序列索引列表赋值，对时间序列的索引按照采样间隔做去重处理，得到新的索引列表和次数列表</span></span><br><span class="line"><span class="string">          '''</span></span><br><span class="line">          ts = bound_timeserie.group_serie(</span><br><span class="line">            d.granularity, carbonara.round_timestamp(</span><br><span class="line">              tstamp, d.granularity * <span class="number">10e8</span>))</span><br><span class="line"></span><br><span class="line">          self._map_in_thread(</span><br><span class="line">            self._add_measures,</span><br><span class="line">            ((aggregation, d, metric, ts,</span><br><span class="line">              current_first_block_timestamp,</span><br><span class="line">              new_first_block_timestamp)</span><br><span class="line">             <span class="keyword">for</span> aggregation <span class="keyword">in</span> agg_methods))</span><br><span class="line">           </span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    根据给定的聚合方法，归档策略等信息，以及已经分组的时间序列，计算聚合后的时间序列，</span></span><br><span class="line"><span class="string">    并将聚合后的时间序列写入到ceph的对象中</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    1. 根据给定的聚合方法，对已经索引分组的时间序列等先计算得到聚合后的时间序列</span></span><br><span class="line"><span class="string">    2. 对时间序列做截断操作，得到截断后的时间序列，最终用这些参数初始化AggregatedTimeSerie对象</span></span><br><span class="line"><span class="string">    3. 对已经计算好的时间序列进行分割(例如每个时间序列最多保存3600个点)，对每个分割后的时间序列</span></span><br><span class="line"><span class="string">       计算写入到对象的偏移量值，以及对应序列化的值，然后写入ceph对象；</span></span><br><span class="line"><span class="string">    4. 重复步骤3，直到所有被分割的时间序列都写入到了ceph对象</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_add_measures</span><span class="params">(self, aggregation, archive_policy_def,</span></span></span><br><span class="line"><span class="function"><span class="params">                      metric, grouped_serie,</span></span></span><br><span class="line"><span class="function"><span class="params">                      previous_oldest_mutable_timestamp,</span></span></span><br><span class="line"><span class="function"><span class="params">                      oldest_mutable_timestamp)</span>:</span></span><br><span class="line">      </span><br><span class="line">        ts = carbonara.AggregatedTimeSerie.from_grouped_serie(</span><br><span class="line">            grouped_serie, archive_policy_def.granularity,</span><br><span class="line">            aggregation, max_size=archive_policy_def.points)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Don't do anything if the timeserie is empty</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ts:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># We only need to check for rewrite if driver is not in WRITE_FULL mode</span></span><br><span class="line">        <span class="comment"># and if we already stored splits once</span></span><br><span class="line">        need_rewrite = (</span><br><span class="line">            <span class="keyword">not</span> self.WRITE_FULL</span><br><span class="line">            <span class="keyword">and</span> previous_oldest_mutable_timestamp <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> archive_policy_def.timespan <span class="keyword">or</span> need_rewrite:</span><br><span class="line">            existing_keys = self._list_split_keys_for_metric(</span><br><span class="line">                metric, aggregation, archive_policy_def.granularity)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># First delete old splits</span></span><br><span class="line">        <span class="keyword">if</span> archive_policy_def.timespan:</span><br><span class="line">            oldest_point_to_keep = ts.last - datetime.timedelta(</span><br><span class="line">                seconds=archive_policy_def.timespan)</span><br><span class="line">            oldest_key_to_keep = ts.get_split_key(oldest_point_to_keep)</span><br><span class="line">            oldest_key_to_keep_s = str(oldest_key_to_keep)</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> list(existing_keys):</span><br><span class="line">                <span class="comment"># NOTE(jd) Only delete if the key is strictly inferior to</span></span><br><span class="line">                <span class="comment"># the timestamp; we don't delete any timeserie split that</span></span><br><span class="line">                <span class="comment"># contains our timestamp, so we prefer to keep a bit more</span></span><br><span class="line">                <span class="comment"># than deleting too much</span></span><br><span class="line">                <span class="keyword">if</span> key &lt; oldest_key_to_keep_s:</span><br><span class="line">                    self._delete_metric_measures(</span><br><span class="line">                        metric, key, aggregation,</span><br><span class="line">                        archive_policy_def.granularity)</span><br><span class="line">                    existing_keys.remove(key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            oldest_key_to_keep = carbonara.SplitKey(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Rewrite all read-only splits just for fun (and compression). This</span></span><br><span class="line">        <span class="comment"># only happens if `previous_oldest_mutable_timestamp' exists, which</span></span><br><span class="line">        <span class="comment"># means we already wrote some splits at some point – so this is not the</span></span><br><span class="line">        <span class="comment"># first time we treat this timeserie.</span></span><br><span class="line">        <span class="keyword">if</span> need_rewrite:</span><br><span class="line">            previous_oldest_mutable_key = str(ts.get_split_key(</span><br><span class="line">                previous_oldest_mutable_timestamp))</span><br><span class="line">            oldest_mutable_key = str(ts.get_split_key(</span><br><span class="line">                oldest_mutable_timestamp))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> previous_oldest_mutable_key != oldest_mutable_key:</span><br><span class="line">                <span class="keyword">for</span> key <span class="keyword">in</span> existing_keys:</span><br><span class="line">                    <span class="keyword">if</span> previous_oldest_mutable_key &lt;= key &lt; oldest_mutable_key:</span><br><span class="line">                        LOG.debug(</span><br><span class="line">                            <span class="string">"Compressing previous split %s (%s) for metric %s"</span>,</span><br><span class="line">                            key, aggregation, metric)</span><br><span class="line">                        <span class="comment"># NOTE(jd) Rewrite it entirely for fun (and later for</span></span><br><span class="line">                        <span class="comment"># compression). For that, we just pass None as split.</span></span><br><span class="line">                        self._store_timeserie_split(</span><br><span class="line">                            metric, carbonara.SplitKey(</span><br><span class="line">                                float(key), archive_policy_def.granularity),</span><br><span class="line">                            <span class="keyword">None</span>, aggregation, archive_policy_def,</span><br><span class="line">                            oldest_mutable_timestamp)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> key, split <span class="keyword">in</span> ts.split():</span><br><span class="line">            <span class="keyword">if</span> key &gt;= oldest_key_to_keep:</span><br><span class="line">                LOG.debug(</span><br><span class="line">                    <span class="string">"Storing split %s (%s) for metric %s"</span>,</span><br><span class="line">                    key, aggregation, metric)</span><br><span class="line">                self._store_timeserie_split(</span><br><span class="line">                    metric, key, split, aggregation, archive_policy_def,</span><br><span class="line">                    oldest_mutable_timestamp)</span><br></pre></td></tr></table></figure>
<h4 id="步骤4-更新未聚合的时间序列，具体调用-store-unaggregated-timeserie方法处理过程如下"><a href="#步骤4-更新未聚合的时间序列，具体调用-store-unaggregated-timeserie方法处理过程如下" class="headerlink" title="步骤4. 更新未聚合的时间序列，具体调用_store_unaggregated_timeserie方法处理过程如下"></a>步骤4. 更新未聚合的时间序列，具体调用_store_unaggregated_timeserie方法处理过程如下</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_compute_and_store_timeseries</span><span class="params">(self, metric, measures)</span>:</span></span><br><span class="line">  	...</span><br><span class="line">		self._store_unaggregated_timeserie(metric, ts.serialize())</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ts.serialize()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoundTimeSerie</span><span class="params">(TimeSerie)</span>:</span></span><br><span class="line">  	<span class="string">"""</span></span><br><span class="line"><span class="string">  	1. 对时间序列的索引进行numpy.diff的求差值操作，并</span></span><br><span class="line"><span class="string">       在所求的索引差值列表的最前面加上该时间序列的第一个值，</span></span><br><span class="line"><span class="string">       得到差值索引列表</span></span><br><span class="line"><span class="string">    2. 对差值索引列表的类型转换为uint64类型</span></span><br><span class="line"><span class="string">    3. 对时间序列的值列表类型转换为浮点型</span></span><br><span class="line"><span class="string">    4. 对差值索引列表转换为字节 + 对时间序列的值列表转换为字节，</span></span><br><span class="line"><span class="string">       得到字符串</span></span><br><span class="line"><span class="string">    5. 对该字符串调用lz4.dumps进行压缩，返回该压缩后的字符串</span></span><br><span class="line"><span class="string">  	"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># NOTE(jd) Use a double delta encoding for timestamps</span></span><br><span class="line">        timestamps = numpy.insert(numpy.diff(self.ts.index),</span><br><span class="line">                                  <span class="number">0</span>, self.first.value)</span><br><span class="line">        timestamps = numpy.array(timestamps, dtype=<span class="string">'&lt;Q'</span>)</span><br><span class="line">        values = numpy.array(self.ts.values, dtype=<span class="string">'&lt;d'</span>)</span><br><span class="line">        payload = (timestamps.tobytes() + values.tobytes())</span><br><span class="line">        <span class="keyword">return</span> lz4.dumps(payload)</span><br><span class="line">      </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CephStorage</span><span class="params">(_carbonara.CarbonaraBasedStorage)</span>:</span></span><br><span class="line">  	......</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    构建类似gnocchi_01f0658b-f147-482b-bca9-f474a79320dc_none_v3的对象名称，向</span></span><br><span class="line"><span class="string">    该对象中写入未聚合的时间序列的压缩后的字符串</span></span><br><span class="line"><span class="string">    该字符串前半部分为：时间序列索引，后半部分为时间序列值</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_store_unaggregated_timeserie</span><span class="params">(self, metric, data, version=<span class="number">3</span>)</span>:</span></span><br><span class="line">        self.ioctx.write_full(</span><br><span class="line">            self._build_unaggregated_timeserie_path(metric, version), data)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_build_unaggregated_timeserie_path</span><span class="params">(metric, version)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ((<span class="string">'gnocchi_%s_none'</span> % metric.id)</span><br><span class="line">                + (<span class="string">"_v%s"</span> % version <span class="keyword">if</span> version <span class="keyword">else</span> <span class="string">""</span>))</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="https://pecan.readthedocs.io/en/latest/deployment.html" target="_blank" rel="external">pecan 文档</a></p>
<p><a href="https://blog.csdn.net/allison_ywt/article/details/54140730" target="_blank" rel="external">pecan</a></p>
<p><a href="https://so.csdn.net/so/search?q=gnocchi&amp;t=blog&amp;u=qingyuanluofeng" target="_blank" rel="external">Gnocchi 总览</a></p>
<p><a href="https://blog.csdn.net/qingyuanluofeng/article/details/68961093?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162659176016780262578824%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162659176016780262578824&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-7-68961093.pc_v2_rank_blog_default&amp;utm_term=gnocchi&amp;spm=1018.2226.3001.4450" target="_blank" rel="external">Gnocchi: 2 、Gnocchi架构及其基础</a></p>
<p><a href="https://blog.csdn.net/qingyuanluofeng/article/details/70245763?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162659176016780262578824%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162659176016780262578824&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-70245763.pc_v2_rank_blog_default&amp;utm_term=gnocchi&amp;spm=1018.2226.3001.4450" target="_blank" rel="external">Gnocchi: 3、Gnocchi命令行使用</a></p>
<p><a href="https://blog.csdn.net/hxpjava1/article/details/86802175" target="_blank" rel="external">OpenStack实践分享：OpenStack Gnocchi项目</a></p>
<p><a href="https://www.cnblogs.com/luohaixian/p/11145939.html" target="_blank" rel="external">Ceilometer和Gnocchi的监控架构解析</a></p>
<p><a href="https://blog.csdn.net/qingyuanluofeng/article/details/106770291?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162659176016780262578824%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=162659176016780262578824&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-106770291.pc_v2_rank_blog_default&amp;utm_term=gnocchi&amp;spm=1018.2226.3001.4450" target="_blank" rel="external">Gnocchi 9、gnocchi聚合算法分析</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Telemetry </tag>
            
            <tag> Gnocchi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[openstack之taskflow的使用]]></title>
      <url>https://magiceses.github.io/2017/10/02/openstack-taskflow%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">自己强，比什么都强，要知道，寻找一棵大树好乘凉，不如自栽自养自乘凉，别人给的，随时有可能收回去，只有自己创造的才会留下来。<br></p>

<p>taskflow是oslo中用于为OpenStack项目和其他Python项目实现一个高可用的，易于理解的，声明式的执行工作、任务、流等的库。这个库让任务执行更加容易、一致和可靠。本文将详细介绍taskflow的实现原理与使用方式。</p>
<h2 id="taskflow的实现原理"><a href="#taskflow的实现原理" class="headerlink" title="taskflow的实现原理"></a>taskflow的实现原理</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>taskflow库在oslo项目中是一个实现比较复杂的项目，要弄清楚其实现原理，首先需要对其中的相关概念有所了解。所以，本文首先总结了taskflow中常用的一些基本概念，这些概念主要包括如下几个：</p>
<a id="more"></a>
<ul>
<li>Atom：Atom类是taskflow的最小单位，taskflow中其他类，包括Task等都需要继承这个类。一个Atom对象是一个命名对象，通过操作输入数据以执行一些促进整个流程发展的动作，或者产生一个处理结果等。它是一个抽象类，提供了两个抽象方法：execute()用于执行一个动作，revert()用于根据execute()执行结果和失败信息还原到任务执行之前的状态；除此之外，还分别为这两个方法提供了pre_execute()/post_execute()、pre_revert()/post_revert()方法用于定义在执行execute或revert操作前后执行的操作；</li>
<li>Task：Task类是一个拥有执行和回滚操作的最小工作单元，表示一个任务流中的某一个任务。它是一个继承自Atom类的表示一个任务的父类，开发者可以执行定义一个继承自Task类的任务类，并重写execute()和revert()方法分别表示执行和回滚的操作；</li>
<li>Flow：Flow类是一个用来关联所有相关Task类，并规定这些Task类的执行和回滚顺序的抽象类。而oslo中为Flow提供了三种实现方式：graph_flow表示图流，linear_flow表示线性流，unordered_flow表示无序流。关于这三种类型的流实现会在之后进行详细分析；</li>
<li>Retry：Retry类也是一个继承自Atom的抽象类，它主要定义了当有错误发生时，如何进行重试操作。其也包含也不同的类型，将会在接下来的部分进行详细介绍；</li>
<li>Engine：Engine类是一个表示真正运行Atom对象的抽象类，它的实现类主要用于载入（load）一个Flow对象，然后驱动这个Flow对象的Task对象开始运行。Engine的实现也有多种不同的形式，这也会在接下来的部分进行详细介绍。</li>
</ul>
<p>以上的这些基本概念是理解和使用taskflow库的最重要的概念，当然在taskflow中还有一些其他的概念，在这里就不详细介绍了。接下来，将分别从这些基本概念展开介绍oslo项目中taskflow的实现原理。</p>
<h3 id="Flow的类型"><a href="#Flow的类型" class="headerlink" title="Flow的类型"></a>Flow的类型</h3><p>在介绍taskflow的基本概念时说到Flow类分为三种类型，本小节将详细介绍oslo自定义的Flow的三种类型。oslo自定义的Flow的类型都放在taskflow.patterns包中，在这个包中，定义了三个模块：graph_flow、linear_flow和unordered_flow，在这三个模块中都定义了各自的Flow类。接下来，将分别介绍这三种类型：</p>
<ul>
<li>linear_flow：线性流，该类型的Flow对象将按照Task/Flow加入的顺序来依次执行，按照加入的倒序依次回滚；</li>
<li>graph_flow：图流，该类型的Flow对象会按照给加入的Task/Flow显示指定的依赖关系或通过其间的provides/requires属性隐含的依赖关系执行和回滚；</li>
<li>unordered_flow：无序流，该类型的Flow对象所加入的Task/Flow会按照任意顺序执行或回滚；</li>
</ul>
<p>要弄清楚这三种类型的Flow对象，首先需要了解oslo定义的Flow基类的构成。在oslo定义的Flow基类中，主要包含以下几个重要的属性和方法：</p>
<ul>
<li>name：表示初始化Flow对象时，为其指定的名称，并不能唯一表示一个Flow对象；</li>
<li>retry：表示与该Flow对象关联的重试控制器；</li>
<li>provides：表示该Flow对象提供的一组符号名称；</li>
<li>requires：表示该Flow对象所需要的一组”unsatisfied”符号名称；</li>
<li>add(*items)：该方法用于为该Flow对象添加一个或一组Task/Flow对象；</li>
<li>iter_links()：迭代Flow对象的子节点之间的依赖关系链接。例如在迭代一个三元组(A, B, meta)时，就是迭代一个从子节点A（一个Atom对象或一个Subflow）指向子节点B（一个Atom对象或一个Subflow）的链接；换句话说，也就代表了子流B依赖于子流A，或者子流B需要子流A；而meta代表了这个依赖关系链接的元数据，是一个字典；</li>
<li>iter_nodes()：迭代Flow对象中的所有节点。例如在迭代一个二元组（A, meta）时，A（一个Atom对象或一个Subflow）是当前Flow对象的子流或子任务；meta同样代表了这个链接的元数据，是一个字典。</li>
</ul>
<p>以上所介绍的Flow类中的属性和方法都是实现taskflow执行和回滚顺序的关键。上文说到Flow类有三种实现，而在每一种实现的Flow类中，各实现类还定义了一个非常重要的属性：</p>
<ul>
<li>Graph：一个拥有taskflow实用功能的networkx.Graph的子类，主要为taskflow中的图定义了一些工具方法，包括保持图不变形的freeze()方法，将图导出为点格式的export_to_dot()方法（依赖于pydot库），以及将图格式化为一个字符串的pformat()方法等；</li>
<li>DiGraph：一个拥有taskflow实用功能的networkx.Graph的子类，代表了一个有向图；</li>
<li>OrderedGraph：该类也是一个拥有taskflow实用功能的networkx.Graph的子类，但该类保留了节点、边、迭代顺序和插入顺序（以便迭代顺序可以匹配插入顺序）；</li>
<li>OrderedDiGraph：该类也是一个拥有taskflow实用功能的networkx.Graph的子类，代表的是一个有向图，但该类保留了节点、边、迭代顺序和插入顺序（以便迭代顺序可以匹配插入顺序）。</li>
</ul>
<p>除了实现了taskflow所需要的Graph子类外，taskflow.types.graph模块还定义了merge_graphs(graph, <em>graphs, *</em>kwargs)方法将两个或多个图进行合并。</p>
<p>有了上述图的实现，三种不同类型的Flow类实现便通过上述这些图来具体实现，即在实现add()、requires()、provides()等方法时，通过获取对应图对象的节点或向对应图对象添加节点实现。其中，linear_flow使用的实际上就是OrderedDiGraph对象，graph_flow则使用的是DiGraph对象，unordered_flow使用的是Graph对象。对于这些操作的具体实现，由于不同的Flow类型实现差异很大，且篇幅有限，这里便不一一详解。在此以linear_flow为例解释一下其实现方案：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flow</span><span class="params">(flow.Flow)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, retry=None)</span>:</span></span><br><span class="line">        super(Flow, self).__init__(name, retry)</span><br><span class="line">        self._graph = gr.OrderedDiGraph(name=name)</span><br><span class="line">        self._last_item = self._no_last_item</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, *items)</span>:</span></span><br><span class="line">        <span class="string">"""Adds a given task/tasks/flow/flows to this flow."""</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self._graph.has_node(item):</span><br><span class="line">                self._graph.add_node(item)</span><br><span class="line">                <span class="keyword">if</span> self._last_item <span class="keyword">is</span> <span class="keyword">not</span> self._no_last_item:</span><br><span class="line">                    self._graph.add_edge(self._last_item, item,</span><br><span class="line">                                         attr_dict=&#123;flow.LINK_INVARIANT: <span class="keyword">True</span>&#125;)</span><br><span class="line">                self._last_item = item</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self._graph)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self._graph.nodes_iter():</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">requires</span><span class="params">(self)</span>:</span></span><br><span class="line">        requires = set()</span><br><span class="line">        prior_provides = set()</span><br><span class="line">        <span class="keyword">if</span> self._retry <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            requires.update(self._retry.requires)</span><br><span class="line">            prior_provides.update(self._retry.provides)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self:</span><br><span class="line">            requires.update(item.requires - prior_provides)</span><br><span class="line">            prior_provides.update(item.provides)</span><br><span class="line">        <span class="keyword">return</span> frozenset(requires)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">iter_nodes</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> (n, n_data) <span class="keyword">in</span> self._graph.nodes_iter(data=<span class="keyword">True</span>):</span><br><span class="line">            <span class="keyword">yield</span> (n, n_data)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">iter_links</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> (u, v, e_data) <span class="keyword">in</span> self._graph.edges_iter(data=<span class="keyword">True</span>):</span><br><span class="line">            <span class="keyword">yield</span> (u, v, e_data)</span><br></pre></td></tr></table></figure>
<p>上述代码便是linear_flow的具体实现，可以看到，初始化对象时将OrderedDiGraph对象赋值给<code>_graph</code>属性，在添加Task/Flow，也就是调用add(*items)方法时，首先就是遍历整个有序图，如果图中没有添加给定的Task/Flow对象，则向该图添加一个节点并保存相应的Task/Flow对象。而在调用iter_nodes()和iter_links()方法时，其实就是遍历图的所有节点或所有边。另外，由于linear_flow是按照插入顺序来进行执行和回滚操作的，所以requires和provides属性的设置和遍历不涉及到相关图的遍历；而如果是graph_flow则还需要考虑到requires和provides的相关影响。</p>
<h3 id="taskflow重试机制"><a href="#taskflow重试机制" class="headerlink" title="taskflow重试机制"></a>taskflow重试机制</h3><p>上面介绍到，在taskflow执行过程中，如果发生错误，可以通过Retry对象进行重试。Retry是一个抽象类，它继承自Atom类，因此，Retry的子类可以覆写execute()和revert()方法。除此之外，Retry对象还定义了一个on_failure(history, <em>args, *</em>kwargs)方法，这个方法在Task/Flow执行或回滚发生错误时，通常会使用以前异常的信息（如果这个历史失败信息不可用或未保存，则提供的History对象为空），即一个History对象。而这个History对象是一个为了简化与重试历史内容交互的帮助类，其包含两个重要属性：_failure表示发生的异常，_contents表示相关异常的重试内容。当taskflow执行失败时，on_failure()方法会结合传入的History对象获取重试的策略。</p>
<p>关于重试的策略，taskflow通过一个枚举类型的Decision定义了三种策略：</p>
<ul>
<li>REVERT：仅回滚失败Flow对象周围或关联的子流Flow对象。该策略在回滚子流Flow对象之前，会首先咨询其父Atom对象以确定父Atom对象是否使用不同的重试策略。该策略允许安全的嵌套具有不同重试策略的Flow对象。如果父Atom对象中没有定义重试策略，则默认只回滚关联子流Flow对象中的Atom对象。当然，你可以通过defer_revert参数改变默认行为，当其设置为True，表示REVERT策略将继承父Atom的策略，如果父Atom对象没有重试策略，则它也将被回滚；</li>
<li>REVERT_ALL：不管失败Flow对象的父Atom对象的策略如何，都将回滚整个流程；</li>
<li>RETRY：重试该失败的Flow/Task对象。</li>
</ul>
<p>根据上述重试策略，taskflow为Retry抽象类又定义了多个实现类，这些实现主要包括如下几种：</p>
<ul>
<li>AlwaysRevert：该类表示当遇到Flow/Task失败时，总是回滚其子流Flow对象；</li>
<li>AlwaysRevertAll：该类表示当遇到Flow/Task失败时，总是回滚整个流程；</li>
<li>Times：该类表示当遇到Flow/Task失败时，重试指定操作指定的次数，而每次执行则会返回已重试次数；</li>
<li>ForEach：该类表示当遇到Flow/Task失败时，会应用给定的一组静态重试策略。该类在执行重试时，从一个数据结构中获取一组重试策略，然后在每一次重试操作后返回集合的下一个策略元素供下次重试使用；</li>
<li>ParameterizedForEach：该类表示当遇到Flow/Task失败时，会应用给定的一组静态重试策略。该类在执行重试时，接收来自前驱或存储的一组重试策略作为参数，然后在每一次重试操作后返回集合的下一个策略元素供重试使用。</li>
</ul>
<h3 id="Engine的实现"><a href="#Engine的实现" class="headerlink" title="Engine的实现"></a>Engine的实现</h3><p>在文章上述几节中分别从基本概念、Flow的类型和重试策略详细介绍了taskflow提供给开发者实现任务流管理的接口的实现，本小节则将详细介绍taskflow内部实现任务流管理的具体实现方式，即Engine的具体实现。</p>
<p>上文介绍到taskflow在具体实现Task/Flow管理时，首先定义了一个Engine抽象类，所有实现都需要继承这个抽象类。这个抽象类定义了如下重要属性和方法：</p>
<ul>
<li>notifier：一个通知对象，它会分发与Engine对象中包含的Flow对象相关的事件通知；</li>
<li>atom_notifier：一个通知对象，它会分发与Engine对象中包含的Atom对象相关的事件通知；</li>
<li>options：相关数据结构传递给Engine对象的选项；</li>
<li>storage：Engine对象的存储单元；</li>
<li>statistics：Engine对象收集的运行时统计数据字典。当Engine没有运行时，这个值为空；在Engine正在运行时或已经运行之前，它可能会存储一些对正在运行或运行完成时有用的或包含信息的键值对；</li>
<li>compile()：该方法可以将Engine对象中包含的Flow对象编译成Engine对象内部表示形式。这个内部表示形式就是Engine对象实际用于运行的流的形式；</li>
<li>reset()：将Engine对象重置为PENDING状态。如果一个Flow以FAILURE、SUCCESS、REVERTED状态结束运行（即调用Engine对象的run()方法之后），或由于某种状态使得其处于某种中间状态，此时可以调用reset()方法进行重置，然后进行重试操作；</li>
<li>prepare()：在Engine对象编译完所有包含的Flow对象之后，且在Flow运行之前执行该方法，为流程的执行进行一些准备操作；</li>
<li>validate()：在Engine对象编译完所有包含的Flow对象之后，且在Flow运行之前执行该方法，为流程的执行进行一些验证操作；</li>
<li>run()：运行Engine对象中的Flow流程；</li>
<li>suspend()：该方法尝试暂停Engine对象。如果一个Engine对象正在执行某个Atom对象，则执行该方法会将这个Atom对象之后的所有正要运行的工作都暂停，并将这个Engine对象的状态变为暂停状态，以便之后进行恢复操作。</li>
</ul>
<p>taskflow在具体实现Engine时，都需要给上述属性和方法重新赋值或进行覆写操作，以实现一个完整的管理流程Flow/Task对象的Engine类。在taskflow中，目前实现了三种策略的Engine类，而在这三种策略中，有两种是面向行为的action_egine类：SerialActionEngine、ParallelActionEngine；另一种是面向多进程的worker_base类：WorkerBaseActionEngine。这三种类型的Engine类的异同点如下所示：</p>
<ul>
<li>SerialActionEngine：这是一个以串行方式运行任务的Engine类，也就是说所有的任务都会在调用engine.run()方法的线程中顺序执行；</li>
<li>ParallelActionEngine：这是一个以并行方式运行任务的Engine类，即可以在多个线程中运行Engine对象中的任务。在这种策略中，taskflow定义了对应的多个ParallelThreadTaskExecutor创建运行任务的线程；</li>
<li>WorkerBaseActionEngine：这是一个可以将任务调度到不同worker（即进程）中执行的Engine类。</li>
</ul>
<p>这三种不同类型的Engine类在初始化对象时，都需要指定对应的后端（backend）实现其对流程的管理。关于这方面内容，由于涉及较广，本人水平有限且实际使用中并不涉及，因此暂不做分析，感兴趣的朋友可以直接阅读源码。</p>
<h2 id="taskflow的使用方法"><a href="#taskflow的使用方法" class="headerlink" title="taskflow的使用方法"></a>taskflow的使用方法</h2><p>OpenStack中有很多项目都可以用到taskflow对整个执行流程进行管理，当然我们也可以在自己的Python项目中使用taskflow库管理流程。这里，以cinder项目为例详细介绍taskflow的使用方法。</p>
<p>使用taskflow时，首先需要根据需要创建表示一个任务Task或流程Flow的类，如cinder在创建硬盘时，定义了如下的Task/Flow类：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> oslo_log <span class="keyword">import</span> log <span class="keyword">as</span> logging</span><br><span class="line"><span class="keyword">from</span> oslo_utils <span class="keyword">import</span> excutils</span><br><span class="line"><span class="keyword">import</span> taskflow.engines</span><br><span class="line"><span class="keyword">from</span> taskflow.patterns <span class="keyword">import</span> linear_flow</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> cinder <span class="keyword">import</span> exception</span><br><span class="line"><span class="keyword">from</span> cinder <span class="keyword">import</span> flow_utils</span><br><span class="line"><span class="keyword">from</span> cinder.message <span class="keyword">import</span> api <span class="keyword">as</span> message_api</span><br><span class="line"><span class="keyword">from</span> cinder.message <span class="keyword">import</span> message_field</span><br><span class="line"><span class="keyword">from</span> cinder <span class="keyword">import</span> rpc</span><br><span class="line"><span class="keyword">from</span> cinder <span class="keyword">import</span> utils</span><br><span class="line"><span class="keyword">from</span> cinder.volume.flows <span class="keyword">import</span> common</span><br><span class="line"> </span><br><span class="line">LOG = logging.getLogger(__name__)</span><br><span class="line"> </span><br><span class="line">ACTION = <span class="string">'volume:create'</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtractSchedulerSpecTask</span><span class="params">(flow_utils.CinderTask)</span>:</span></span><br><span class="line">    <span class="string">"""Extracts a spec object from a partial and/or incomplete request spec.</span></span><br><span class="line"><span class="string">    Reversion strategy: N/A</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"> </span><br><span class="line">    default_provides = set([<span class="string">'request_spec'</span>])</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        super(ExtractSchedulerSpecTask, self).__init__(addons=[ACTION],</span><br><span class="line">                                                       **kwargs)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_populate_request_spec</span><span class="params">(self, volume, snapshot_id, image_id, backup_id)</span>:</span></span><br><span class="line">        <span class="comment"># Create the full request spec using the volume object.</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># NOTE(dulek): At this point, a volume can be deleted before it gets</span></span><br><span class="line">        <span class="comment"># scheduled.  If a delete API call is made, the volume gets instantly</span></span><br><span class="line">        <span class="comment"># delete and scheduling will fail when it tries to update the DB entry</span></span><br><span class="line">        <span class="comment"># (with the host) in ScheduleCreateVolumeTask below.</span></span><br><span class="line">        volume_type_id = volume.volume_type_id</span><br><span class="line">        vol_type = volume.volume_type</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'volume_id'</span>: volume.id,</span><br><span class="line">            <span class="string">'snapshot_id'</span>: snapshot_id,</span><br><span class="line">            <span class="string">'image_id'</span>: image_id,</span><br><span class="line">            <span class="string">'backup_id'</span>: backup_id,</span><br><span class="line">            <span class="string">'volume_properties'</span>: &#123;</span><br><span class="line">                <span class="string">'size'</span>: utils.as_int(volume.size, quiet=<span class="keyword">False</span>),</span><br><span class="line">                <span class="string">'availability_zone'</span>: volume.availability_zone,</span><br><span class="line">                <span class="string">'volume_type_id'</span>: volume_type_id,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'volume_type'</span>: list(dict(vol_type).items()),</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self, context, request_spec, volume, snapshot_id,</span></span></span><br><span class="line"><span class="function"><span class="params">                image_id, backup_id)</span>:</span></span><br><span class="line">        <span class="comment"># For RPC version &lt; 1.2 backward compatibility</span></span><br><span class="line">        <span class="keyword">if</span> request_spec <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            request_spec = self._populate_request_spec(volume,</span><br><span class="line">                                                       snapshot_id, image_id,</span><br><span class="line">                                                       backup_id)</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'request_spec'</span>: request_spec,</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScheduleCreateVolumeTask</span><span class="params">(flow_utils.CinderTask)</span>:</span></span><br><span class="line">    <span class="string">"""Activates a scheduler driver and handles any subsequent failures.</span></span><br><span class="line"><span class="string">    Notification strategy: on failure the scheduler rpc notifier will be</span></span><br><span class="line"><span class="string">    activated and a notification will be emitted indicating what errored,</span></span><br><span class="line"><span class="string">    the reason, and the request (and misc. other data) that caused the error</span></span><br><span class="line"><span class="string">    to be triggered.</span></span><br><span class="line"><span class="string">    Reversion strategy: N/A</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    FAILURE_TOPIC = <span class="string">"scheduler.create_volume"</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, driver_api, **kwargs)</span>:</span></span><br><span class="line">        super(ScheduleCreateVolumeTask, self).__init__(addons=[ACTION],</span><br><span class="line">                                                       **kwargs)</span><br><span class="line">        self.driver_api = driver_api</span><br><span class="line">        self.message_api = message_api.API()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_handle_failure</span><span class="params">(self, context, request_spec, cause)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._notify_failure(context, request_spec, cause)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            LOG.error(<span class="string">"Failed to run task %(name)s: %(cause)s"</span>,</span><br><span class="line">                      &#123;<span class="string">'cause'</span>: cause, <span class="string">'name'</span>: self.name&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @utils.if_notifications_enabled</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_notify_failure</span><span class="params">(self, context, request_spec, cause)</span>:</span></span><br><span class="line">        <span class="string">"""When scheduling fails send out an event that it failed."""</span></span><br><span class="line">        payload = &#123;</span><br><span class="line">            <span class="string">'request_spec'</span>: request_spec,</span><br><span class="line">            <span class="string">'volume_properties'</span>: request_spec.get(<span class="string">'volume_properties'</span>, &#123;&#125;),</span><br><span class="line">            <span class="string">'volume_id'</span>: request_spec[<span class="string">'volume_id'</span>],</span><br><span class="line">            <span class="string">'state'</span>: <span class="string">'error'</span>,</span><br><span class="line">            <span class="string">'method'</span>: <span class="string">'create_volume'</span>,</span><br><span class="line">            <span class="string">'reason'</span>: cause,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            rpc.get_notifier(<span class="string">'scheduler'</span>).error(context, self.FAILURE_TOPIC,</span><br><span class="line">                                                payload)</span><br><span class="line">        <span class="keyword">except</span> exception.CinderException:</span><br><span class="line">            LOG.exception(<span class="string">"Failed notifying on %(topic)s "</span></span><br><span class="line">                          <span class="string">"payload %(payload)s"</span>,</span><br><span class="line">                          &#123;<span class="string">'topic'</span>: self.FAILURE_TOPIC, <span class="string">'payload'</span>: payload&#125;)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self, context, request_spec, filter_properties, volume)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.driver_api.schedule_create_volume(context, request_spec,</span><br><span class="line">                                                   filter_properties)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            self.message_api.create(</span><br><span class="line">                context,</span><br><span class="line">                message_field.Action.SCHEDULE_ALLOCATE_VOLUME,</span><br><span class="line">                resource_uuid=request_spec[<span class="string">'volume_id'</span>],</span><br><span class="line">                exception=e)</span><br><span class="line">            <span class="comment"># An error happened, notify on the scheduler queue and log that</span></span><br><span class="line">            <span class="comment"># this happened and set the volume to errored out and reraise the</span></span><br><span class="line">            <span class="comment"># error *if* exception caught isn't NoValidBackend. Otherwise *do</span></span><br><span class="line">            <span class="comment"># not* reraise (since what's the point?)</span></span><br><span class="line">            <span class="keyword">with</span> excutils.save_and_reraise_exception(</span><br><span class="line">                    reraise=<span class="keyword">not</span> isinstance(e, exception.NoValidBackend)):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    self._handle_failure(context, request_spec, e)</span><br><span class="line">                <span class="keyword">finally</span>:</span><br><span class="line">                    common.error_out(volume, reason=e)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flow</span><span class="params">(context, driver_api, request_spec=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             filter_properties=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             volume=None, snapshot_id=None, image_id=None, backup_id=None)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="string">"""Constructs and returns the scheduler entrypoint flow.</span></span><br><span class="line"><span class="string">    This flow will do the following:</span></span><br><span class="line"><span class="string">    1. Inject keys &amp; values for dependent tasks.</span></span><br><span class="line"><span class="string">    2. Extract a scheduler specification from the provided inputs.</span></span><br><span class="line"><span class="string">    3. Use provided scheduler driver to select host and pass volume creation</span></span><br><span class="line"><span class="string">       request further.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    create_what = &#123;</span><br><span class="line">        <span class="string">'context'</span>: context,</span><br><span class="line">        <span class="string">'raw_request_spec'</span>: request_spec,</span><br><span class="line">        <span class="string">'filter_properties'</span>: filter_properties,</span><br><span class="line">        <span class="string">'volume'</span>: volume,</span><br><span class="line">        <span class="string">'snapshot_id'</span>: snapshot_id,</span><br><span class="line">        <span class="string">'image_id'</span>: image_id,</span><br><span class="line">        <span class="string">'backup_id'</span>: backup_id,</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    flow_name = ACTION.replace(<span class="string">":"</span>, <span class="string">"_"</span>) + <span class="string">"_scheduler"</span></span><br><span class="line">    scheduler_flow = linear_flow.Flow(flow_name)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># This will extract and clean the spec from the starting values.</span></span><br><span class="line">    scheduler_flow.add(ExtractSchedulerSpecTask(</span><br><span class="line">        rebind=&#123;<span class="string">'request_spec'</span>: <span class="string">'raw_request_spec'</span>&#125;))</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># This will activate the desired scheduler driver (and handle any</span></span><br><span class="line">    <span class="comment"># driver related failures appropriately).</span></span><br><span class="line">    scheduler_flow.add(ScheduleCreateVolumeTask(driver_api))</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Now load (but do not run) the flow using the provided initial data.</span></span><br><span class="line">    <span class="keyword">return</span> taskflow.engines.load(scheduler_flow, store=create_what)</span><br></pre></td></tr></table></figure>
<p>由于cinder创建硬盘的功能步骤繁多，操作复杂，且容易出错，因此在api和scheduler服务中都使用了taskflow对创建硬盘过程中的多个任务进行了管理，上面的代码是scheduler服务中创建硬盘时定义的两个任务Task类：ExtractSchedulerSpecTask和ScheduleCreateVolumeTask。接着，cinder-scheduler服务定义了get_flow()方法获取一个Engine对象。这个方法中，首先定义了一个linear_flow类型的Flow对象，然后调用Flow对象的add()方法将上述两个Task添加到Flow对象中，接着根据Flow对象加载一个Engine对象用来执行实际的流程操作。</p>
<p>在执行流程时只需要调用get_flow()方法首先获得一个Engine对象，然后调用这个Engine对象的run()方法即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@objects.Volume.set_workers</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_volume</span><span class="params">(self, context, volume, snapshot_id=None, image_id=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                  request_spec=None, filter_properties=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                  backup_id=None)</span>:</span></span><br><span class="line">    self._wait_for_scheduler()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        flow_engine = create_volume.get_flow(context,</span><br><span class="line">                                             self.driver,</span><br><span class="line">                                             request_spec,</span><br><span class="line">                                             filter_properties,</span><br><span class="line">                                             volume,</span><br><span class="line">                                             snapshot_id,</span><br><span class="line">                                             image_id,</span><br><span class="line">                                             backup_id)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        msg = _(<span class="string">"Failed to create scheduler manager volume flow"</span>)</span><br><span class="line">        LOG.exception(msg)</span><br><span class="line">        <span class="keyword">raise</span> exception.CinderException(msg)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">with</span> flow_utils.DynamicLogListener(flow_engine, logger=LOG):</span><br><span class="line">        flow_engine.run()</span><br></pre></td></tr></table></figure>
<p>如这个例子中，就是调用cinder-scheduler服务中定义的get_flow()方法获取一个Engine对象flow_engine，然后调用flow_engine.run()方法即可执行定义的流程。</p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[openstack之stevedore的使用]]></title>
      <url>https://magiceses.github.io/2017/10/02/openstack-stevedore%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">你所浪费的今天，是昨天死去的人奢望的明天。你所厌恶的现在，是未来的你回不去的曾经。<br></p>

<p>stevedore库是oslo项目中为OpenStack其他项目提供动态加载功能的公共组件库。stevedore利用python的特性，使得动态加载代码变得更加容易，其也允许你在运行时通过发现和加载扩展插件来配置和扩展你的应用程序。stevedore库基于setuptools的entry points来定义和加载扩展插件，stevedore提供了manager类来实现动态加载扩展插件的通用模式。本文将详细分析stevedore的实现原理以及使用方式。</p>
<h2 id="stevedore的实现"><a href="#stevedore的实现" class="headerlink" title="stevedore的实现"></a>stevedore的实现</h2><h3 id="管理基类"><a href="#管理基类" class="headerlink" title="管理基类"></a>管理基类</h3><p>本文开头介绍到stevedore通过提供manager类来实现动态加载扩展插件的管理，因此在实现stevedore时，首先为其他父类定义了一个manager基类ExtensionManager类。ExtensionManager类是一个所有其他manager类的基类，其主要的属性和方法如下：</p>
<a id="more"></a>
<ul>
<li>namespace：string类型，命名空间，表示entry points的命名空间；</li>
<li>invoke_on_load：bool类型，表示是否自动加载扩展插件；</li>
<li>invoke_args：tuple类型，表示自动加载extension时传入的参数；</li>
<li>invoke_kwds：dict类型，表示自动加载extension时传入的参数；</li>
<li>propagate_map_exceptions：bool类型，表示使用map调用时，是否向上传递调用信息；</li>
<li>on_load_failure_callback：func类型，表示加载失败时调用的方法；</li>
<li>verify_requirements：bool类型，表示是否使用setuptools安装插件所需要的依赖；</li>
<li>map(func, <em>args, *</em>kwds)：为每一个extension触发func()函数；</li>
<li>map_method(method_name, <em>args, *</em>kwds)：为每一个extension触发method_name指定的函数；</li>
<li>names()：获取所有发现的extension名称；</li>
<li>entry_points_names()：返回所有entry_points的名称列表，每个列表元素是一个有entry points的名称和entry points列表的map对象；</li>
<li>list_entry_points()：某个命名空间的所有entry points列表。</li>
</ul>
<p>stevedore中其他所有manager类都需要继承ExtensionManager类，而ExtensionManager类初始化时便会通过namespace等加载所有extension，并对插件进行初始化。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, namespace,</span></span></span><br><span class="line"><span class="function"><span class="params">             invoke_on_load=False,</span></span></span><br><span class="line"><span class="function"><span class="params">             invoke_args=<span class="params">()</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             invoke_kwds=&#123;&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">             propagate_map_exceptions=False,</span></span></span><br><span class="line"><span class="function"><span class="params">             on_load_failure_callback=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             verify_requirements=False)</span>:</span></span><br><span class="line">    self._init_attributes(</span><br><span class="line">        namespace,</span><br><span class="line">        propagate_map_exceptions=propagate_map_exceptions,</span><br><span class="line">        on_load_failure_callback=on_load_failure_callback)</span><br><span class="line">    extensions = self._load_plugins(invoke_on_load,</span><br><span class="line">                                    invoke_args,</span><br><span class="line">                                    invoke_kwds,</span><br><span class="line">                                    verify_requirements)</span><br><span class="line">    self._init_plugins(extensions)</span><br></pre></td></tr></table></figure>
<p>在ExtensionManager实例化对象时，首先调用_init_attributes()方法初始化namespace等参数，然后会调用_load_plugins()方法加载所有的extension插件；最后会调用_init_plugins()方法设置对象的属性。</p>
<p>在定义ExtensionManager时，还涉及到一个重要的类Extension，该类表示一个extension，该类主要包含如下属性：</p>
<ul>
<li>name：表示一个entry point的名称；</li>
<li>entry_point：表示从pkg_resources获得的一个EntryPoint对象；</li>
<li>plugin：通过调用entry_point.load()方法返回的plugin类；</li>
<li>obj：extension被manager类加载时，会调用plugin(<em>args, *</em>kwds)返回一个plugin对象。</li>
</ul>
<p>在ExtensionManager的map()方法中，为每一个entry point调用func()函数，而func()函数的第一个参数即为Extension对象。</p>
<h2 id="加载插件的方式"><a href="#加载插件的方式" class="headerlink" title="加载插件的方式"></a>加载插件的方式</h2><p>根据entry points配置的不同，stevedore提供了三种加载插件的方式：ExtensionManager、DriverManager、HookManager。下面将分别介绍这三种加载插件的方式：</p>
<ul>
<li>ExtensionManager：一种通用的加载方式。这种方式下，对于给定的命名空间，会加载该命名空间下的所有插件，同时也允许同一个命名空间下的插件拥有相同的名称，其实现即为stevedore.extension.ExtensionManager类；</li>
<li>HookManager：在这种加载方式下，对于给定的命名空间，允许同一个命名空间下的插件拥有相同的名称，程序可以根据给定的命名空间和名称加载该名称对应的多个插件，其实现为stevedore.hook.HookManager类；</li>
<li>DriverManager：在这种加载方式下，对于给定的命名空间，一个名字只能对应一个entry point，对于同一类资源有多个不同插件的情况，只能选择一个进行注册；这样，在使用时就可以根据命名空间和名称定位到某一个插件，其实现为stevedore.driver.DriverManager类。</li>
</ul>
<p>在实现这些加载方式的类时，stevedore还定义了多个其他类型的辅助manager类，这些manager类之间的关系如图1所示。</p>
<p><img src="/images/openstack-3.png" alt="img"></p>
<p>由图可知，ExtensionManager类时所有stevedore的manager类的父类，DriverManager类和HookManager类是ExtensionManager子类NamedExtensionManager类的子类。而NamedExtensionManager类中增加了一个属性names，所以DriverManager类和HookManager类在加载对应插件时，只加载names属性所包含的名称的entry point插件。除了这几个类之外，stevedore还定义了其他三个辅助的manager类：</p>
<ul>
<li>EnabledExtensionManager类：该类在ExtensionManager类的基础上添加了一个check_func属性，表示一个验证方法，因此在加载时只加载通过check_func()方法验证的extension插件；</li>
<li>DispatchExtensionManager类：该类继承自EnabledExtensionManager类，该类重写了ExtensionManger类中定义的map()和map_method()方法，其为这两个方法添加了filter_func参数，表示只对通过filter_func()方法过滤的extension才会执行func()函数；</li>
<li>NameDispatcherExtensionManager类：该类继承自DispathExtensionManager类，该类也定义了一个names属性，在使用时，只有names包含的名称的extension执行map()和map_method()方法时才会执行对应的func()方法。</li>
</ul>
<h2 id="stevedore的使用"><a href="#stevedore的使用" class="headerlink" title="stevedore的使用"></a>stevedore的使用</h2><p>有了stevedore，OpenStack其他项目加载一个扩展插件就要方便的多了。下面通过nova中的加载扩展插件为例详细介绍stevedore的使用方法。在使用stevedore时，nova首先定义了相关的插件，如nova-scheduler服务实现了多种调度方法，这些调度方法便是通过stevedore来进行动态加载的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> six</span><br><span class="line"><span class="keyword">from</span> stevedore <span class="keyword">import</span> driver</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> nova.conf</span><br><span class="line"><span class="keyword">from</span> nova <span class="keyword">import</span> objects</span><br><span class="line"><span class="keyword">from</span> nova <span class="keyword">import</span> servicegroup</span><br><span class="line"> </span><br><span class="line">CONF = nova.conf.CONF</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@six.add_metaclass(abc.ABCMeta)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scheduler</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""The base class that all Scheduler classes should inherit from."""</span></span><br><span class="line"> </span><br><span class="line">    USES_ALLOCATION_CANDIDATES = <span class="keyword">True</span></span><br><span class="line">    <span class="string">"""Indicates that the scheduler driver calls the Placement API for</span></span><br><span class="line"><span class="string">    allocation candidates and uses those allocation candidates in its</span></span><br><span class="line"><span class="string">    decision-making.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.host_manager = driver.DriverManager(</span><br><span class="line">                <span class="string">"nova.scheduler.host_manager"</span>,</span><br><span class="line">                CONF.scheduler.host_manager,</span><br><span class="line">                invoke_on_load=<span class="keyword">True</span>).driver</span><br><span class="line">        self.servicegroup_api = servicegroup.API()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_periodic_tasks</span><span class="params">(self, context)</span>:</span></span><br><span class="line">        <span class="string">"""Manager calls this so drivers can perform periodic tasks."""</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hosts_up</span><span class="params">(self, context, topic)</span>:</span></span><br><span class="line">        <span class="string">"""Return the list of hosts that have a running service for topic."""</span></span><br><span class="line"> </span><br><span class="line">        services = objects.ServiceList.get_by_topic(context, topic)</span><br><span class="line">        <span class="keyword">return</span> [service.host</span><br><span class="line">                <span class="keyword">for</span> service <span class="keyword">in</span> services</span><br><span class="line">                <span class="keyword">if</span> self.servicegroup_api.service_is_up(service)]</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select_destinations</span><span class="params">(self, context, spec_obj, instance_uuids,</span></span></span><br><span class="line"><span class="function"><span class="params">            provider_summaries)</span>:</span></span><br><span class="line">        <span class="string">"""Returns a list of HostState objects that have been chosen by the</span></span><br><span class="line"><span class="string">        scheduler driver, one for each requested instance</span></span><br><span class="line"><span class="string">        (spec_obj.num_instances)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>
<p>nova-scheduler首先通过abc定义了一个抽象类Scheduler，用来定义所有调度方法的抽象类，并定义了一个select_destinations()的抽象方法，这个方法即为调度方法，需要具体实现的调度类来实现。接着，nova-scheduler分别实现了FilterScheduler、CachingScheduler、ChanceScheduler、FakeScheduler类来实现具体的调度方法，这里仅以FilterScheduler为例。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> oslo_log <span class="keyword">import</span> log <span class="keyword">as</span> logging</span><br><span class="line"><span class="keyword">from</span> six.moves <span class="keyword">import</span> range</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> nova.conf</span><br><span class="line"><span class="keyword">from</span> nova <span class="keyword">import</span> exception</span><br><span class="line"><span class="keyword">from</span> nova.i18n <span class="keyword">import</span> _</span><br><span class="line"><span class="keyword">from</span> nova <span class="keyword">import</span> rpc</span><br><span class="line"><span class="keyword">from</span> nova.scheduler <span class="keyword">import</span> client</span><br><span class="line"><span class="keyword">from</span> nova.scheduler <span class="keyword">import</span> driver</span><br><span class="line"> </span><br><span class="line">CONF = nova.conf.CONF</span><br><span class="line">LOG = logging.getLogger(__name__)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterScheduler</span><span class="params">(driver.Scheduler)</span>:</span></span><br><span class="line">    <span class="string">"""Scheduler that can be used for filtering and weighing."""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super(FilterScheduler, self).__init__(*args, **kwargs)</span><br><span class="line">        self.notifier = rpc.get_notifier(<span class="string">'scheduler'</span>)</span><br><span class="line">        scheduler_client = client.SchedulerClient()</span><br><span class="line">        self.placement_client = scheduler_client.reportclient</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select_destinations</span><span class="params">(self, context, spec_obj, instance_uuids,</span></span></span><br><span class="line"><span class="function"><span class="params">            alloc_reqs_by_rp_uuid, provider_summaries)</span>:</span></span><br><span class="line">        <span class="string">"""Returns a list of sorted lists of HostState objects (1 for each</span></span><br><span class="line"><span class="string">        instance) that would satisfy the supplied request_spec. Each of those</span></span><br><span class="line"><span class="string">        lists consist of [chosen_host, alternate1, ..., alternateN], where the</span></span><br><span class="line"><span class="string">        'chosen_host' has already had its resources claimed in Placement,</span></span><br><span class="line"><span class="string">        followed by zero or more alternates. The alternates are hosts that can</span></span><br><span class="line"><span class="string">        satisfy the request, and are included so that if the build for the</span></span><br><span class="line"><span class="string">        chosen host fails, the cell conductor can retry.</span></span><br><span class="line"><span class="string">        :param context: The RequestContext object</span></span><br><span class="line"><span class="string">        :param spec_obj: The RequestSpec object</span></span><br><span class="line"><span class="string">        :param instance_uuids: List of UUIDs, one for each value of the spec</span></span><br><span class="line"><span class="string">                               object's num_instances attribute</span></span><br><span class="line"><span class="string">        :param alloc_reqs_by_rp_uuid: Optional dict, keyed by resource provider</span></span><br><span class="line"><span class="string">                                      UUID, of the allocation_requests that may</span></span><br><span class="line"><span class="string">                                      be used to claim resources against</span></span><br><span class="line"><span class="string">                                      matched hosts. If None, indicates either</span></span><br><span class="line"><span class="string">                                      the placement API wasn't reachable or</span></span><br><span class="line"><span class="string">                                      that there were no allocation_requests</span></span><br><span class="line"><span class="string">                                      returned by the placement API. If the</span></span><br><span class="line"><span class="string">                                      latter, the provider_summaries will be an</span></span><br><span class="line"><span class="string">                                      empty dict, not None.</span></span><br><span class="line"><span class="string">        :param provider_summaries: Optional dict, keyed by resource provider</span></span><br><span class="line"><span class="string">                                   UUID, of information that will be used by</span></span><br><span class="line"><span class="string">                                   the filters/weighers in selecting matching</span></span><br><span class="line"><span class="string">                                   hosts for a request. If None, indicates that</span></span><br><span class="line"><span class="string">                                   the scheduler driver should grab all compute</span></span><br><span class="line"><span class="string">                                   node information locally and that the</span></span><br><span class="line"><span class="string">                                   Placement API is not used. If an empty dict,</span></span><br><span class="line"><span class="string">                                   indicates the Placement API returned no</span></span><br><span class="line"><span class="string">                                   potential matches for the requested</span></span><br><span class="line"><span class="string">                                   resources.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.notifier.info(</span><br><span class="line">            context, <span class="string">'scheduler.select_destinations.start'</span>,</span><br><span class="line">            dict(request_spec=spec_obj.to_legacy_request_spec_dict()))</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># NOTE(sbauza): The RequestSpec.num_instances field contains the number</span></span><br><span class="line">        <span class="comment"># of instances created when the RequestSpec was used to first boot some</span></span><br><span class="line">        <span class="comment"># instances. This is incorrect when doing a move or resize operation,</span></span><br><span class="line">        <span class="comment"># so prefer the length of instance_uuids unless it is None.</span></span><br><span class="line">        num_instances = (len(instance_uuids) <span class="keyword">if</span> instance_uuids</span><br><span class="line">                         <span class="keyword">else</span> spec_obj.num_instances)</span><br><span class="line">        selected_host_lists = self._schedule(context, spec_obj, instance_uuids,</span><br><span class="line">            alloc_reqs_by_rp_uuid, provider_summaries)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># Couldn't fulfill the request_spec</span></span><br><span class="line">        <span class="keyword">if</span> len(selected_host_lists) &lt; num_instances:</span><br><span class="line">            <span class="comment"># NOTE(Rui Chen): If multiple creates failed, set the updated time</span></span><br><span class="line">            <span class="comment"># of selected HostState to None so that these HostStates are</span></span><br><span class="line">            <span class="comment"># refreshed according to database in next schedule, and release</span></span><br><span class="line">            <span class="comment"># the resource consumed by instance in the process of selecting</span></span><br><span class="line">            <span class="comment"># host.</span></span><br><span class="line">            <span class="keyword">for</span> host_list <span class="keyword">in</span> selected_host_lists:</span><br><span class="line">                host_list[<span class="number">0</span>].updated = <span class="keyword">None</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment"># Log the details but don't put those into the reason since</span></span><br><span class="line">            <span class="comment"># we don't want to give away too much information about our</span></span><br><span class="line">            <span class="comment"># actual environment.</span></span><br><span class="line">            LOG.debug(<span class="string">'There are %(hosts)d hosts available but '</span></span><br><span class="line">                      <span class="string">'%(num_instances)d instances requested to build.'</span>,</span><br><span class="line">                      &#123;<span class="string">'hosts'</span>: len(selected_host_lists),</span><br><span class="line">                       <span class="string">'num_instances'</span>: num_instances&#125;)</span><br><span class="line"> </span><br><span class="line">            reason = _(<span class="string">'There are not enough hosts available.'</span>)</span><br><span class="line">            <span class="keyword">raise</span> exception.NoValidHost(reason=reason)</span><br><span class="line"> </span><br><span class="line">        self.notifier.info(</span><br><span class="line">            context, <span class="string">'scheduler.select_destinations.end'</span>,</span><br><span class="line">            dict(request_spec=spec_obj.to_legacy_request_spec_dict()))</span><br><span class="line">        <span class="comment"># NOTE(edleafe) - In this patch we only create the lists of [chosen,</span></span><br><span class="line">        <span class="comment"># alt1, alt2, etc.]. In a later patch we will change what we return, so</span></span><br><span class="line">        <span class="comment"># for this patch just return the selected hosts.</span></span><br><span class="line">        selected_hosts = [sel_host[<span class="number">0</span>] <span class="keyword">for</span> sel_host <span class="keyword">in</span> selected_host_lists]</span><br><span class="line">        <span class="keyword">return</span> selected_hosts</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_schedule</span><span class="params">(self, context, spec_obj, instance_uuids,</span></span></span><br><span class="line"><span class="function"><span class="params">            alloc_reqs_by_rp_uuid, provider_summaries)</span>:</span></span><br><span class="line">        <span class="string">"""Returns a list of hosts that meet the required specs, ordered by</span></span><br><span class="line"><span class="string">        their fitness.</span></span><br><span class="line"><span class="string">        These hosts will have already had their resources claimed in Placement.</span></span><br><span class="line"><span class="string">        :param context: The RequestContext object</span></span><br><span class="line"><span class="string">        :param spec_obj: The RequestSpec object</span></span><br><span class="line"><span class="string">        :param instance_uuids: List of instance UUIDs to place or move.</span></span><br><span class="line"><span class="string">        :param alloc_reqs_by_rp_uuid: Optional dict, keyed by resource provider</span></span><br><span class="line"><span class="string">                                      UUID, of the allocation_requests that may</span></span><br><span class="line"><span class="string">                                      be used to claim resources against</span></span><br><span class="line"><span class="string">                                      matched hosts. If None, indicates either</span></span><br><span class="line"><span class="string">                                      the placement API wasn't reachable or</span></span><br><span class="line"><span class="string">                                      that there were no allocation_requests</span></span><br><span class="line"><span class="string">                                      returned by the placement API. If the</span></span><br><span class="line"><span class="string">                                      latter, the provider_summaries will be an</span></span><br><span class="line"><span class="string">                                      empty dict, not None.</span></span><br><span class="line"><span class="string">        :param provider_summaries: Optional dict, keyed by resource provider</span></span><br><span class="line"><span class="string">                                   UUID, of information that will be used by</span></span><br><span class="line"><span class="string">                                   the filters/weighers in selecting matching</span></span><br><span class="line"><span class="string">                                   hosts for a request. If None, indicates that</span></span><br><span class="line"><span class="string">                                   the scheduler driver should grab all compute</span></span><br><span class="line"><span class="string">                                   node information locally and that the</span></span><br><span class="line"><span class="string">                                   Placement API is not used. If an empty dict,</span></span><br><span class="line"><span class="string">                                   indicates the Placement API returned no</span></span><br><span class="line"><span class="string">                                   potential matches for the requested</span></span><br><span class="line"><span class="string">                                   resources.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        elevated = context.elevated()</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># Find our local list of acceptable hosts by repeatedly</span></span><br><span class="line">        <span class="comment"># filtering and weighing our options. Each time we choose a</span></span><br><span class="line">        <span class="comment"># host, we virtually consume resources on it so subsequent</span></span><br><span class="line">        <span class="comment"># selections can adjust accordingly.</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># Note: remember, we are using an iterator here. So only</span></span><br><span class="line">        <span class="comment"># traverse this list once. This can bite you if the hosts</span></span><br><span class="line">        <span class="comment"># are being scanned in a filter or weighing function.</span></span><br><span class="line">        hosts = self._get_all_host_states(elevated, spec_obj,</span><br><span class="line">            provider_summaries)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># NOTE(sbauza): The RequestSpec.num_instances field contains the number</span></span><br><span class="line">        <span class="comment"># of instances created when the RequestSpec was used to first boot some</span></span><br><span class="line">        <span class="comment"># instances. This is incorrect when doing a move or resize operation,</span></span><br><span class="line">        <span class="comment"># so prefer the length of instance_uuids unless it is None.</span></span><br><span class="line">        num_instances = (len(instance_uuids) <span class="keyword">if</span> instance_uuids</span><br><span class="line">                         <span class="keyword">else</span> spec_obj.num_instances)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># For each requested instance, we want to return a host whose resources</span></span><br><span class="line">        <span class="comment"># for the instance have been claimed, along with zero or more</span></span><br><span class="line">        <span class="comment"># alternates. These alternates will be passed to the cell that the</span></span><br><span class="line">        <span class="comment"># selected host is in, so that if for some reason the build fails, the</span></span><br><span class="line">        <span class="comment"># cell conductor can retry building the instance on one of these</span></span><br><span class="line">        <span class="comment"># alternates instead of having to simply fail. The number of alternates</span></span><br><span class="line">        <span class="comment"># is based on CONF.scheduler.max_attempts; note that if there are not</span></span><br><span class="line">        <span class="comment"># enough filtered hosts to provide the full number of alternates, the</span></span><br><span class="line">        <span class="comment"># list of hosts may be shorter than this amount.</span></span><br><span class="line">        num_to_return = CONF.scheduler.max_attempts</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (instance_uuids <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span></span><br><span class="line">                <span class="keyword">not</span> self.USES_ALLOCATION_CANDIDATES <span class="keyword">or</span></span><br><span class="line">                alloc_reqs_by_rp_uuid <span class="keyword">is</span> <span class="keyword">None</span>):</span><br><span class="line">            <span class="comment"># We need to support the caching scheduler, which doesn't use the</span></span><br><span class="line">            <span class="comment"># placement API (and has USES_ALLOCATION_CANDIDATE = False) and</span></span><br><span class="line">            <span class="comment"># therefore we skip all the claiming logic for that scheduler</span></span><br><span class="line">            <span class="comment"># driver. Also, if there was a problem communicating with the</span></span><br><span class="line">            <span class="comment"># placement API, alloc_reqs_by_rp_uuid will be None, so we skip</span></span><br><span class="line">            <span class="comment"># claiming in that case as well. In the case where instance_uuids</span></span><br><span class="line">            <span class="comment"># is None, that indicates an older conductor, so we need to return</span></span><br><span class="line">            <span class="comment"># the older-style HostState objects without alternates.</span></span><br><span class="line">            <span class="comment"># NOTE(edleafe): moving this logic into a separate method, as this</span></span><br><span class="line">            <span class="comment"># method is already way too long. It will also make it easier to</span></span><br><span class="line">            <span class="comment"># clean up once we no longer have to worry about older conductors.</span></span><br><span class="line">            include_alternates = (instance_uuids <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>)</span><br><span class="line">            <span class="keyword">return</span> self._legacy_find_hosts(num_instances, spec_obj, hosts,</span><br><span class="line">                    num_to_return, include_alternates)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># A list of the instance UUIDs that were successfully claimed against</span></span><br><span class="line">        <span class="comment"># in the placement API. If we are not able to successfully claim for</span></span><br><span class="line">        <span class="comment"># all involved instances, we use this list to remove those allocations</span></span><br><span class="line">        <span class="comment"># before returning</span></span><br><span class="line">        claimed_instance_uuids = []</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># The list of hosts that have been selected (and claimed).</span></span><br><span class="line">        claimed_hosts = []</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> range(num_instances):</span><br><span class="line">            hosts = self._get_sorted_hosts(spec_obj, hosts, num)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> hosts:</span><br><span class="line">                <span class="comment"># NOTE(jaypipes): If we get here, that means not all instances</span></span><br><span class="line">                <span class="comment"># in instance_uuids were able to be matched to a selected host.</span></span><br><span class="line">                <span class="comment"># So, let's clean up any already-claimed allocations here</span></span><br><span class="line">                <span class="comment"># before breaking and returning</span></span><br><span class="line">                self._cleanup_allocations(claimed_instance_uuids)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">            instance_uuid = instance_uuids[num]</span><br><span class="line">            <span class="comment"># Attempt to claim the resources against one or more resource</span></span><br><span class="line">            <span class="comment"># providers, looping over the sorted list of possible hosts</span></span><br><span class="line">            <span class="comment"># looking for an allocation_request that contains that host's</span></span><br><span class="line">            <span class="comment"># resource provider UUID</span></span><br><span class="line">            claimed_host = <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">for</span> host <span class="keyword">in</span> hosts:</span><br><span class="line">                cn_uuid = host.uuid</span><br><span class="line">                <span class="keyword">if</span> cn_uuid <span class="keyword">not</span> <span class="keyword">in</span> alloc_reqs_by_rp_uuid:</span><br><span class="line">                    LOG.debug(<span class="string">"Found host state %s that wasn't in "</span></span><br><span class="line">                              <span class="string">"allocation_requests. Skipping."</span>, cn_uuid)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line">                alloc_reqs = alloc_reqs_by_rp_uuid[cn_uuid]</span><br><span class="line">                <span class="keyword">if</span> self._claim_resources(elevated, spec_obj, instance_uuid,</span><br><span class="line">                        alloc_reqs):</span><br><span class="line">                    claimed_host = host</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> claimed_host <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="comment"># We weren't able to claim resources in the placement API</span></span><br><span class="line">                <span class="comment"># for any of the sorted hosts identified. So, clean up any</span></span><br><span class="line">                <span class="comment"># successfully-claimed resources for prior instances in</span></span><br><span class="line">                <span class="comment"># this request and return an empty list which will cause</span></span><br><span class="line">                <span class="comment"># select_destinations() to raise NoValidHost</span></span><br><span class="line">                LOG.debug(<span class="string">"Unable to successfully claim against any host."</span>)</span><br><span class="line">                self._cleanup_allocations(claimed_instance_uuids)</span><br><span class="line">                <span class="keyword">return</span> []</span><br><span class="line"> </span><br><span class="line">            claimed_instance_uuids.append(instance_uuid)</span><br><span class="line">            claimed_hosts.append(claimed_host)</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># Now consume the resources so the filter/weights will change for</span></span><br><span class="line">            <span class="comment"># the next instance.</span></span><br><span class="line">            self._consume_selected_host(claimed_host, spec_obj)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># We have selected and claimed hosts for each instance. Now we need to</span></span><br><span class="line">        <span class="comment"># find alternates for each host.</span></span><br><span class="line">        selections_to_return = self._get_alternate_hosts(</span><br><span class="line">            claimed_hosts, spec_obj, hosts, num, num_to_return)</span><br><span class="line">        <span class="keyword">return</span> selections_to_return</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_cleanup_allocations</span><span class="params">(self, instance_uuids)</span>:</span></span><br><span class="line">        <span class="string">"""Removes allocations for the supplied instance UUIDs."""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance_uuids:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        LOG.debug(<span class="string">"Cleaning up allocations for %s"</span>, instance_uuids)</span><br><span class="line">        <span class="keyword">for</span> uuid <span class="keyword">in</span> instance_uuids:</span><br><span class="line">            self.placement_client.delete_allocation_for_instance(uuid)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_claim_resources</span><span class="params">(self, ctx, spec_obj, instance_uuid, alloc_reqs)</span>:</span></span><br><span class="line">        <span class="string">"""Given an instance UUID (representing the consumer of resources), the</span></span><br><span class="line"><span class="string">        HostState object for the host that was chosen for the instance, and a</span></span><br><span class="line"><span class="string">        list of allocation_request JSON objects, attempt to claim resources for</span></span><br><span class="line"><span class="string">        the instance in the placement API. Returns True if the claim process</span></span><br><span class="line"><span class="string">        was successful, False otherwise.</span></span><br><span class="line"><span class="string">        :param ctx: The RequestContext object</span></span><br><span class="line"><span class="string">        :param spec_obj: The RequestSpec object</span></span><br><span class="line"><span class="string">        :param instance_uuid: The UUID of the consuming instance</span></span><br><span class="line"><span class="string">        :param cn_uuid: UUID of the host to allocate against</span></span><br><span class="line"><span class="string">        :param alloc_reqs: A list of allocation_request JSON objects that</span></span><br><span class="line"><span class="string">                           allocate against (at least) the compute host</span></span><br><span class="line"><span class="string">                           selected by the _schedule() method. These</span></span><br><span class="line"><span class="string">                           allocation_requests were constructed from a call to</span></span><br><span class="line"><span class="string">                           the GET /allocation_candidates placement API call.</span></span><br><span class="line"><span class="string">                           Each allocation_request satisfies the original</span></span><br><span class="line"><span class="string">                           request for resources and can be supplied as-is</span></span><br><span class="line"><span class="string">                           (along with the project and user ID to the placement</span></span><br><span class="line"><span class="string">                           API's PUT /allocations/&#123;consumer_uuid&#125; call to claim</span></span><br><span class="line"><span class="string">                           resources for the instance</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        LOG.debug(<span class="string">"Attempting to claim resources in the placement API for "</span></span><br><span class="line">                  <span class="string">"instance %s"</span>, instance_uuid)</span><br><span class="line"> </span><br><span class="line">        project_id = spec_obj.project_id</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># NOTE(jaypipes): So, the RequestSpec doesn't store the user_id,</span></span><br><span class="line">        <span class="comment"># only the project_id, so we need to grab the user information from</span></span><br><span class="line">        <span class="comment"># the context. Perhaps we should consider putting the user ID in</span></span><br><span class="line">        <span class="comment"># the spec object?</span></span><br><span class="line">        user_id = ctx.user_id</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># TODO(jaypipes): Loop through all allocation_requests instead of just</span></span><br><span class="line">        <span class="comment"># trying the first one. For now, since we'll likely want to order the</span></span><br><span class="line">        <span class="comment"># allocation_requests in the future based on information in the</span></span><br><span class="line">        <span class="comment"># provider summaries, we'll just try to claim resources using the first</span></span><br><span class="line">        <span class="comment"># allocation_request</span></span><br><span class="line">        alloc_req = alloc_reqs[<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> self.placement_client.claim_resources(instance_uuid,</span><br><span class="line">            alloc_req, project_id, user_id)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_legacy_find_hosts</span><span class="params">(self, num_instances, spec_obj, hosts,</span></span></span><br><span class="line"><span class="function"><span class="params">            num_to_return, include_alternates)</span>:</span></span><br><span class="line">        <span class="string">"""Some schedulers do not do claiming, or we can sometimes not be able</span></span><br><span class="line"><span class="string">        to if the Placement service is not reachable. Additionally, we may be</span></span><br><span class="line"><span class="string">        working with older conductors that don't pass in instance_uuids.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># The list of hosts selected for each instance</span></span><br><span class="line">        selected_hosts = []</span><br><span class="line">        <span class="comment"># This the overall list of values to be returned. There will be one</span></span><br><span class="line">        <span class="comment"># item per instance, and when 'include_alternates' is True, that item</span></span><br><span class="line">        <span class="comment"># will be a list of HostState objects representing the selected host</span></span><br><span class="line">        <span class="comment"># along with alternates from the same cell. When 'include_alternates'</span></span><br><span class="line">        <span class="comment"># is False, the return value will be a list of HostState objects, with</span></span><br><span class="line">        <span class="comment"># one per requested instance.</span></span><br><span class="line">        selections_to_return = []</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> range(num_instances):</span><br><span class="line">            hosts = self._get_sorted_hosts(spec_obj, hosts, num)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> hosts:</span><br><span class="line">                <span class="keyword">return</span> []</span><br><span class="line">            selected_host = hosts[<span class="number">0</span>]</span><br><span class="line">            selected_hosts.append(selected_host)</span><br><span class="line">            self._consume_selected_host(selected_host, spec_obj)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> include_alternates:</span><br><span class="line">            selections_to_return = self._get_alternate_hosts(</span><br><span class="line">                selected_hosts, spec_obj, hosts, num, num_to_return)</span><br><span class="line">            <span class="keyword">return</span> selections_to_return</span><br><span class="line">        <span class="keyword">return</span> selected_hosts</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_consume_selected_host</span><span class="params">(selected_host, spec_obj)</span>:</span></span><br><span class="line">        LOG.debug(<span class="string">"Selected host: %(host)s"</span>, &#123;<span class="string">'host'</span>: selected_host&#125;)</span><br><span class="line">        selected_host.consume_from_request(spec_obj)</span><br><span class="line">        <span class="keyword">if</span> spec_obj.instance_group <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            spec_obj.instance_group.hosts.append(selected_host.host)</span><br><span class="line">            <span class="comment"># hosts has to be not part of the updates when saving</span></span><br><span class="line">            spec_obj.instance_group.obj_reset_changes([<span class="string">'hosts'</span>])</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_alternate_hosts</span><span class="params">(self, selected_hosts, spec_obj, hosts, index,</span></span></span><br><span class="line"><span class="function"><span class="params">                             num_to_return)</span>:</span></span><br><span class="line">        <span class="comment"># We only need to filter/weigh the hosts again if we're dealing with</span></span><br><span class="line">        <span class="comment"># more than one instance since the single selected host will get</span></span><br><span class="line">        <span class="comment"># filtered out of the list of alternates below.</span></span><br><span class="line">        <span class="keyword">if</span> index &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># The selected_hosts have all had resources 'claimed' via</span></span><br><span class="line">            <span class="comment"># _consume_selected_host, so we need to filter/weigh and sort the</span></span><br><span class="line">            <span class="comment"># hosts again to get an accurate count for alternates.</span></span><br><span class="line">            hosts = self._get_sorted_hosts(spec_obj, hosts, index)</span><br><span class="line">        <span class="comment"># This is the overall list of values to be returned. There will be one</span></span><br><span class="line">        <span class="comment"># item per instance, and that item will be a list of HostState objects</span></span><br><span class="line">        <span class="comment"># representing the selected host along with alternates from the same</span></span><br><span class="line">        <span class="comment"># cell.</span></span><br><span class="line">        selections_to_return = []</span><br><span class="line">        <span class="keyword">for</span> selected_host <span class="keyword">in</span> selected_hosts:</span><br><span class="line">            <span class="comment"># This is the list of hosts for one particular instance.</span></span><br><span class="line">            selected_plus_alts = [selected_host]</span><br><span class="line">            cell_uuid = selected_host.cell_uuid</span><br><span class="line">            <span class="comment"># This will populate the alternates with many of the same unclaimed</span></span><br><span class="line">            <span class="comment"># hosts. This is OK, as it should be rare for a build to fail. And</span></span><br><span class="line">            <span class="comment"># if there are not enough hosts to fully populate the alternates,</span></span><br><span class="line">            <span class="comment"># it's fine to return fewer than we'd like. Note that we exclude</span></span><br><span class="line">            <span class="comment"># any claimed host from consideration as an alternate because it</span></span><br><span class="line">            <span class="comment"># will have had its resources reduced and will have a much lower</span></span><br><span class="line">            <span class="comment"># chance of being able to fit another instance on it.</span></span><br><span class="line">            <span class="keyword">for</span> host <span class="keyword">in</span> hosts:</span><br><span class="line">                <span class="keyword">if</span> len(selected_plus_alts) &gt;= num_to_return:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> host.cell_uuid == cell_uuid <span class="keyword">and</span> host <span class="keyword">not</span> <span class="keyword">in</span> selected_hosts:</span><br><span class="line">                    selected_plus_alts.append(host)</span><br><span class="line">            selections_to_return.append(selected_plus_alts)</span><br><span class="line">        <span class="keyword">return</span> selections_to_return</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_sorted_hosts</span><span class="params">(self, spec_obj, host_states, index)</span>:</span></span><br><span class="line">        <span class="string">"""Returns a list of HostState objects that match the required</span></span><br><span class="line"><span class="string">        scheduling constraints for the request spec object and have been sorted</span></span><br><span class="line"><span class="string">        according to the weighers.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        filtered_hosts = self.host_manager.get_filtered_hosts(host_states,</span><br><span class="line">            spec_obj, index)</span><br><span class="line"> </span><br><span class="line">        LOG.debug(<span class="string">"Filtered %(hosts)s"</span>, &#123;<span class="string">'hosts'</span>: filtered_hosts&#125;)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> filtered_hosts:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"> </span><br><span class="line">        weighed_hosts = self.host_manager.get_weighed_hosts(filtered_hosts,</span><br><span class="line">            spec_obj)</span><br><span class="line">        <span class="comment"># Strip off the WeighedHost wrapper class...</span></span><br><span class="line">        weighed_hosts = [h.obj <span class="keyword">for</span> h <span class="keyword">in</span> weighed_hosts]</span><br><span class="line"> </span><br><span class="line">        LOG.debug(<span class="string">"Weighed %(hosts)s"</span>, &#123;<span class="string">'hosts'</span>: weighed_hosts&#125;)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># We randomize the first element in the returned list to alleviate</span></span><br><span class="line">        <span class="comment"># congestion where the same host is consistently selected among</span></span><br><span class="line">        <span class="comment"># numerous potential hosts for similar request specs.</span></span><br><span class="line">        host_subset_size = CONF.filter_scheduler.host_subset_size</span><br><span class="line">        <span class="keyword">if</span> host_subset_size &lt; len(weighed_hosts):</span><br><span class="line">            weighed_subset = weighed_hosts[<span class="number">0</span>:host_subset_size]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            weighed_subset = weighed_hosts</span><br><span class="line">        chosen_host = random.choice(weighed_subset)</span><br><span class="line">        weighed_hosts.remove(chosen_host)</span><br><span class="line">        <span class="keyword">return</span> [chosen_host] + weighed_hosts</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_all_host_states</span><span class="params">(self, context, spec_obj, provider_summaries)</span>:</span></span><br><span class="line">        <span class="string">"""Template method, so a subclass can implement caching."""</span></span><br><span class="line">        <span class="comment"># NOTE(jaypipes): provider_summaries being None is treated differently</span></span><br><span class="line">        <span class="comment"># from an empty dict. provider_summaries is None when we want to grab</span></span><br><span class="line">        <span class="comment"># all compute nodes, for instance when using the caching scheduler.</span></span><br><span class="line">        <span class="comment"># The provider_summaries variable will be an empty dict when the</span></span><br><span class="line">        <span class="comment"># Placement API found no providers that match the requested</span></span><br><span class="line">        <span class="comment"># constraints, which in turn makes compute_uuids an empty list and</span></span><br><span class="line">        <span class="comment"># get_host_states_by_uuids will return an empty tuple also, which will</span></span><br><span class="line">        <span class="comment"># eventually result in a NoValidHost error.</span></span><br><span class="line">        compute_uuids = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> provider_summaries <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            compute_uuids = list(provider_summaries.keys())</span><br><span class="line">        <span class="keyword">return</span> self.host_manager.get_host_states_by_uuids(context,</span><br><span class="line">                                                          compute_uuids,</span><br><span class="line">                                                          spec_obj)</span><br></pre></td></tr></table></figure>
<p>FilterScheduler类首先继承了nova定义的Scheduler抽象类，然后实现了select_destinations()方法来实现具体的调度方法。</p>
<p>定义了各种调度策略之后，接下来就需要将这些不同的调度类作为entry point配置到setup.cfg文件中，nova的调度策略配置信息如下所示：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[entry_points]</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">nova.scheduler.driver =</span><br><span class="line">    filter_scheduler = nova.scheduler.filter_scheduler:FilterScheduler</span><br><span class="line">    caching_scheduler = nova.scheduler.caching_scheduler:CachingScheduler</span><br><span class="line">    chance_scheduler = nova.scheduler.chance:ChanceScheduler</span><br><span class="line">    fake_scheduler = nova.tests.unit.scheduler.fakes:FakeScheduler</span><br></pre></td></tr></table></figure>
<p>通过以上配置信息可以看出，针对nova-scheduler服务定义的调度策略，nova在setup.cfg配置文件中为调度策略定义了nova.scheduler.driver作为entry points的命名空间，并在这个命名空间下配置了四种不同的调度策略。</p>
<p>最后，nova便可以在需要使用调度策略的地方载入不同的调度策略插件。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchedulerManager</span><span class="params">(manager.Manager)</span>:</span></span><br><span class="line">    <span class="string">"""Chooses a host to run instances on."""</span></span><br><span class="line"> </span><br><span class="line">    target = messaging.Target(version=<span class="string">'4.4'</span>)</span><br><span class="line"> </span><br><span class="line">    _sentinel = object()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, scheduler_driver=None, *args, **kwargs)</span>:</span></span><br><span class="line">        client = scheduler_client.SchedulerClient()</span><br><span class="line">        self.placement_client = client.reportclient</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> scheduler_driver:</span><br><span class="line">            scheduler_driver = CONF.scheduler.driver</span><br><span class="line">        self.driver = driver.DriverManager(</span><br><span class="line">                <span class="string">"nova.scheduler.driver"</span>,</span><br><span class="line">                scheduler_driver,</span><br><span class="line">                invoke_on_load=<span class="keyword">True</span>).driver</span><br><span class="line">        super(SchedulerManager, self).__init__(service_name=<span class="string">'scheduler'</span>,</span><br><span class="line">                                               *args, **kwargs)</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @periodic_task.periodic_task(</span></span><br><span class="line">        spacing=CONF.scheduler.discover_hosts_in_cells_interval,</span><br><span class="line">        run_immediately=<span class="keyword">True</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_discover_hosts_in_cells</span><span class="params">(self, context)</span>:</span></span><br><span class="line">        host_mappings = host_mapping_obj.discover_hosts(context)</span><br><span class="line">        <span class="keyword">if</span> host_mappings:</span><br><span class="line">            LOG.info(_LI(<span class="string">'Discovered %(count)i new hosts: %(hosts)s'</span>),</span><br><span class="line">                     &#123;<span class="string">'count'</span>: len(host_mappings),</span><br><span class="line">                      <span class="string">'hosts'</span>: <span class="string">','</span>.join([<span class="string">'%s:%s'</span> % (hm.cell_mapping.name,</span><br><span class="line">                                                    hm.host)</span><br><span class="line">                                         <span class="keyword">for</span> hm <span class="keyword">in</span> host_mappings])&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @periodic_task.periodic_task(spacing=CONF.scheduler.periodic_task_interval,</span></span><br><span class="line">                                 run_immediately=<span class="keyword">True</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_run_periodic_tasks</span><span class="params">(self, context)</span>:</span></span><br><span class="line">        self.driver.run_periodic_tasks(context)</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @messaging.expected_exceptions(exception.NoValidHost)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select_destinations</span><span class="params">(self, ctxt,</span></span></span><br><span class="line"><span class="function"><span class="params">                            request_spec=None, filter_properties=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                            spec_obj=_sentinel, instance_uuids=None)</span>:</span></span><br><span class="line">        <span class="string">"""Returns destinations(s) best suited for this RequestSpec.</span></span><br><span class="line"><span class="string">        The result should be a list of dicts with 'host', 'nodename' and</span></span><br><span class="line"><span class="string">        'limits' as keys.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        LOG.debug(<span class="string">"Starting to schedule for instances: %s"</span>, instance_uuids)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># TODO(sbauza): Change the method signature to only accept a spec_obj</span></span><br><span class="line">        <span class="comment"># argument once API v5 is provided.</span></span><br><span class="line">        <span class="keyword">if</span> spec_obj <span class="keyword">is</span> self._sentinel:</span><br><span class="line">            spec_obj = objects.RequestSpec.from_primitives(ctxt,</span><br><span class="line">                                                           request_spec,</span><br><span class="line">                                                           filter_properties)</span><br><span class="line">        resources = utils.resources_from_request_spec(spec_obj)</span><br><span class="line">        alloc_reqs_by_rp_uuid, provider_summaries = <span class="keyword">None</span>, <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> self.driver.USES_ALLOCATION_CANDIDATES:</span><br><span class="line">            res = self.placement_client.get_allocation_candidates(resources)</span><br><span class="line">            <span class="keyword">if</span> res <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="comment"># We have to handle the case that we failed to connect to the</span></span><br><span class="line">                <span class="comment"># Placement service and the safe_connect decorator on</span></span><br><span class="line">                <span class="comment"># get_allocation_candidates returns None.</span></span><br><span class="line">                alloc_reqs, provider_summaries = <span class="keyword">None</span>, <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                alloc_reqs, provider_summaries = res</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> alloc_reqs:</span><br><span class="line">                LOG.debug(<span class="string">"Got no allocation candidates from the Placement "</span></span><br><span class="line">                          <span class="string">"API. This may be a temporary occurrence as compute "</span></span><br><span class="line">                          <span class="string">"nodes start up and begin reporting inventory to "</span></span><br><span class="line">                          <span class="string">"the Placement service."</span>)</span><br><span class="line">                <span class="keyword">raise</span> exception.NoValidHost(reason=<span class="string">""</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># Build a dict of lists of allocation requests, keyed by</span></span><br><span class="line">                <span class="comment"># provider UUID, so that when we attempt to claim resources for</span></span><br><span class="line">                <span class="comment"># a host, we can grab an allocation request easily</span></span><br><span class="line">                alloc_reqs_by_rp_uuid = collections.defaultdict(list)</span><br><span class="line">                <span class="keyword">for</span> ar <span class="keyword">in</span> alloc_reqs:</span><br><span class="line">                    <span class="keyword">for</span> rr <span class="keyword">in</span> ar[<span class="string">'allocations'</span>]:</span><br><span class="line">                        rp_uuid = rr[<span class="string">'resource_provider'</span>][<span class="string">'uuid'</span>]</span><br><span class="line">                        alloc_reqs_by_rp_uuid[rp_uuid].append(ar)</span><br><span class="line"> </span><br><span class="line">        dests = self.driver.select_destinations(ctxt, spec_obj, instance_uuids,</span><br><span class="line">            alloc_reqs_by_rp_uuid, provider_summaries)</span><br><span class="line">        dest_dicts = [_host_state_obj_to_dict(d) <span class="keyword">for</span> d <span class="keyword">in</span> dests]</span><br><span class="line">        <span class="keyword">return</span> jsonutils.to_primitive(dest_dicts)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_aggregates</span><span class="params">(self, ctxt, aggregates)</span>:</span></span><br><span class="line">        <span class="string">"""Updates HostManager internal aggregates information.</span></span><br><span class="line"><span class="string">        :param aggregates: Aggregate(s) to update</span></span><br><span class="line"><span class="string">        :type aggregates: :class:`nova.objects.Aggregate`</span></span><br><span class="line"><span class="string">                          or :class:`nova.objects.AggregateList`</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># NOTE(sbauza): We're dropping the user context now as we don't need it</span></span><br><span class="line">        self.driver.host_manager.update_aggregates(aggregates)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_aggregate</span><span class="params">(self, ctxt, aggregate)</span>:</span></span><br><span class="line">        <span class="string">"""Deletes HostManager internal information about a specific aggregate.</span></span><br><span class="line"><span class="string">        :param aggregate: Aggregate to delete</span></span><br><span class="line"><span class="string">        :type aggregate: :class:`nova.objects.Aggregate`</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># NOTE(sbauza): We're dropping the user context now as we don't need it</span></span><br><span class="line">        self.driver.host_manager.delete_aggregate(aggregate)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_instance_info</span><span class="params">(self, context, host_name, instance_info)</span>:</span></span><br><span class="line">        <span class="string">"""Receives information about changes to a host's instances, and</span></span><br><span class="line"><span class="string">        updates the driver's HostManager with that information.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.driver.host_manager.update_instance_info(context, host_name,</span><br><span class="line">                                                      instance_info)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_instance_info</span><span class="params">(self, context, host_name, instance_uuid)</span>:</span></span><br><span class="line">        <span class="string">"""Receives information about the deletion of one of a host's</span></span><br><span class="line"><span class="string">        instances, and updates the driver's HostManager with that information.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.driver.host_manager.delete_instance_info(context, host_name,</span><br><span class="line">                                                      instance_uuid)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sync_instance_info</span><span class="params">(self, context, host_name, instance_uuids)</span>:</span></span><br><span class="line">        <span class="string">"""Receives a sync request from a host, and passes it on to the</span></span><br><span class="line"><span class="string">        driver's HostManager.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.driver.host_manager.sync_instance_info(context, host_name,</span><br><span class="line">                                                    instance_uuids)</span><br></pre></td></tr></table></figure>
<p>针对nova的调度策略，nova定义了SchedulerManager类专门用于管理调度方法的实现，在这个类中包含了一个driver属性，而在初始化SchedulerManager对象时，这个driver属性会被赋值，由于nova的调度方法的entry points都是名称和调度方法一一对应的，因此driver属性会被赋值为一个DriverManager对象，也就是说每个SchedulerManager对象只能加载一种调度方法进行操作。</p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[openstack之keystone学习总结]]></title>
      <url>https://magiceses.github.io/2017/10/01/openstack-keystone-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">有人在奔跑，有人在睡觉，有人在感恩，有人在报怨，有目标的睡不着，没目标的人睡不醒，努力才是人生的应有态度，睁开眼就是新的开始。<br></p>

<p>在了解 keystone 之前，我们来简单介绍下用户身份校验大概有几种方式</p>
<h2 id="广义认证方式简介"><a href="#广义认证方式简介" class="headerlink" title="广义认证方式简介"></a>广义认证方式简介</h2><p>广义上讲，用户身份认证并不仅限于领域。广义上的身份识别技术有如下几种：静态密码、动态密码（短信密码、动态口令牌）、令牌、USB KEY、数字证书、生物识别技术。</p>
<p>在以上几种认证方式中，我们IT人员在数据中心通常能够遇到的是：静态密码、动态口令牌、数字证书、令牌认证（token）。</p>
<a id="more"></a>
<h3 id="静态密码"><a href="#静态密码" class="headerlink" title="静态密码"></a>静态密码</h3><p>在四种认证方式中，最常见的就是静态密码。如果要加强动态密码的安全性，通常是通过增加密码的复杂度，设置密码过期时间的方法。大多数linux操作系统默认也是禁止root用户的ssh或telnet权限的。</p>
<p>如下图，在Linux中设置密码策略（/etc/login.defs）</p>
<p><img src="/images/openstack-keystone-1.png" alt="image-20200823150021719"></p>
<h3 id="动态口令牌"><a href="#动态口令牌" class="headerlink" title="动态口令牌"></a>动态口令牌</h3><p>动态口令牌也是一种认证方式，如最著名的RSA就是一种，通过输入个人的PIN Code，生成随机密码。</p>
<h3 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h3><p>数字证书认证方式也是我们常见的。“数字证书就是互联网通讯中标志通讯各方身份信息的一串数字，提供了一种在Internet上验证通信实体身份的方式，数字证书不是数字身份证，而是身份认证机构盖在数字身份证上的一个章或印（或者说加在数字身份证上的一个签名）。它是由权威机构——CA机构，又称为证书授权（CertificateAuthority）中心发行的，人们可以在网上用它来识别对方的身份。”</p>
<p>如果想了解证书认证，就需要了解两种加密方式：</p>
<p>对称加密和非对称加密。对称加密是最快速、最简单的一种加密方式，加密（encryption）与解密（decryption）用的是同样的密钥（secret key）。对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。</p>
<p><img src="/images/openstack-keystone-2.png" alt="image-20200823150235255"></p>
<p>非对称加密为数据的加密与解密提供了一个非常安全的方法，它使用了一对密钥，公钥（public key）和私钥（private key）。私钥只能由一方安全保管，不能外泄，而公钥则可以发给任何请求它的人。</p>
<p><img src="/images/openstack-keystone-3.png" alt="image-20200823150252496"></p>
<p>我们经常用到的ssh就是非对称加密。</p>
<p>本小节提到的数字证书（又称数字签名）通常是基于对称对加密的。由此，我们引入一个新的名词，CA。</p>
<p>数字证书认证中心（CertficateAuthority,CA）是整个网上电子交易安全的关键环节。它主要负责产生、分配并管理所有参与网上交易的实体所需的身份认证数字证书。每一份数字证书都与上一级的数字签名证书相关联，最终通过安全链追溯到一个已知的并被广泛认为是安全、权威、足以信赖的机构。CA必须是各行业各部门及公众共同信任的、认可的、权威的、不参与交易的第三方网上身份认证机构。</p>
<p>CA服务器可以是第三方权威机构的，也可以是企业内部自行搭建的。比如：VeriSign公司，就是著名的CA权威机构。另外一个著名的证书认证机构就是—微软，通过Windows AD域实现。AD的功能十分强大，有三个功能：AD = Ldap + kerberos + CA。</p>
<p>如果一个企业的证书，想被权威机构认证，是需要支付一定费用的。被认证的好处是，当客户通过网页访问该金融机构时，该网址是可信的。否则，在互联网应用中，如何确认彼此的身份？</p>
<p><img src="/images/openstack-keystone-4.png" alt="image-20200823150407445"></p>
<p>在数据中心内部，我们通常采取自签名的方式，也就是自己认证自己。</p>
<p>数字证书的颁发原理：</p>
<p>用户首先产生自己的密钥对，并将公共密钥及部分个人身份信息传送给认证中心。认证中心在核实身份后，将执行一些必要的步骤，以确信请求确实由用户发送而来，然后，认证中心将发给用户一个数字证书，该证书内包含用户的个人信息和他的公钥信息，同时还附有认证中心的签名信息。用户就可以使用自己的数字证书进行相关的各种活动。同时，这个被认证中心认证的公钥信息，通常被主流浏览器默认加载，这样一般客户上网访问这个网址的时候，就不会被提示为不被信任的网站。</p>
<p>我们可以查看IE默认信任的证书：</p>
<p><img src="/images/openstack-keystone-5.png" alt="image-20200823150454674"></p>
<p>所以从中我们也可以看出，正是由于微软在操作系统领域中占有垄断地位，因此，在浏览器市场也处于垄断地位。与浏览器先关的互联网应用，想被认证，就必须要得到IE的认可。</p>
<p>新装好的vcenter，我们通过webclient访问：</p>
<p><img src="/images/openstack-keystone-6.png" alt="image-20200823150515354"></p>
<p>如果想继续访问，我们必须要选择添加例外，然后获取证书，再确认安全例外：</p>
<p><img src="/images/openstack-keystone-7.png" alt="image-20200823150533935"></p>
<p>这个过程，实际上我们就把vcenter的根证书下载到本地，并装在到浏览器中，然后，就可以正常访问了：</p>
<p><img src="/images/openstack-keystone-8.png" alt="image-20200823150552813"></p>
<p>而在这个过程中，我们导入的就是VC的公钥。</p>
<p>谈到这个问题，我举个很有意思的例子：大家一定有过通过12306网站买票的经历，那么下面的图片就一定不会陌生：</p>
<p><img src="/images/openstack-keystone-9.png" alt="image-20200823150611428"></p>
<p>首页提示“为了保障您的顺畅购票，请下载安装根证书”。</p>
<p>然后，我们会点击安装：</p>
<p><img src="/images/openstack-keystone-10.png" alt="image-20200823150626637"></p>
<p>然后导入证书：</p>
<p><img src="/images/openstack-keystone-11.png" alt="image-20200823150647555"></p>
<p>那么大家有没有想过，为什么访问12306需要倒入其根证书，而访问ICBC的网页不会呢？</p>
<p>原因就在于，12306的根证书没有被CA权威机构所认证，当用户通过终端访问该网站时，如果不倒入该证书，那么这个网站将会被标示成不被信任的网站。</p>
<p>而对于金融机构的网站，如果被标示该网址不会信任，请问大家还敢访问并进行金融交易么？</p>
<h3 id="令牌认证"><a href="#令牌认证" class="headerlink" title="令牌认证"></a>令牌认证</h3><p>令牌是一种能够控制站点占有媒体的特殊帧，以区别数据帧及其他控制帧。token其实说的更通俗点可以叫暗号，在一些数据传输之前，要先进行暗号的核对，不同的暗号被授权不同的数据操作。</p>
<p>接下来，我看看看Openstack的内部组件的认证方式。</p>
<p>先看一下OpenStack的架构：</p>
<p><img src="/images/openstack-keystone-12.png" alt="image-20200823150823335"></p>
<p>在这个架构中“keystone”就是负责用户认证的。可以说是Openstack的灵魂。手工用命令行安装过openstack组件（不是用packstack自动应答脚本）的朋友一定知道：在安装单独安装openstack所有组件的时候，都需keystone创建对应组件的用户，每个模块都必须与keystone进行通讯。</p>
<p>例如，安装openstack中neutron的部分步骤如下：</p>
<p><em>keystone user-create –name neutron –pass xxxx</em></p>
<p><em>keystone user-role-add –user neutron –role admin–tenant services</em></p>
<p><em>yum install openvswitch openstack-neutronopenstack-neutron-ml2 openstack-neutron-openvswitch</em></p>
<p><strong>Openstack每个组件的认证，默认是通过token认证的（当然也可以通过密码）</strong>。因此，手工安装keystone的步骤中，会有这么一步：</p>
<p><em>export SERVICE_TOKEN=$(openssl rand -hex 10)</em></p>
<p><em>exportSERVICE_ENDPOINT=<a href="http://${HOSTNAME}:35357/v2.0" target="_blank" rel="external">http://${HOSTNAME}:35357/v2.0</a></em></p>
<p><em>echo$SERVICE_TOKEN &gt; /root/ks_admin_token</em></p>
<p><em># cat /root/ks_admin_token</em></p>
<p><em>6f438ff88435dab284a9</em></p>
<p>而“6f438ff88435dab284a9“这串数字，实际上就是token，它用于认证admin用户。我们可以把它添加到keystonerc_admin配置文件中，这样我们souce这个配置文件，就可以访问keystone的服务了：</p>
<p><em>source /root/keystonerc_admin</em></p>
<p>在openstack中，还有一个非常重要的概念：AMQP, AdvancedMessageQueuingProtocol,即高级消息队列协议.Openstack各个组件之间的通讯，是通过AMQP实现的。这样做的好处，可以使各个组件之间是松耦合的关系。比如说，搭建一个openstack，只搭建必要的keystone，nova等，不搭建swift，这是没问题的。</p>
<p>而AMQP与各个组件（各个组件作为AMQP的client），之间的认证，是通过CA进行认证的，也就是自签名认证。目前AMQP使用的数据库是rabbit MQ，下面截取部分命令：</p>
<p>产生证书数据库（AMQP Server）：</p>
<p><em># certutil -N -d/etc/pki/tls/qpid/ -f /etc/qpid/qpid.pass</em></p>
<p><em># certutil -S -d /etc/pki/tls/qpid/ -n $HOSTNAME -s”CN=$HOSTNAME” -t “CT,,” -x -f /etc/qpid/qpid.pass -z/usr/bin/certutil</em></p>
<p><em>S:签发证书 -d 证书文件目录</em></p>
<p><em>-s subject -t 设置信任证书的属性</em></p>
<p><em>-x 自签发证书</em></p>
<p>下面几条命令是获取CA配置文件并进行签名：</p>
<p><em>#wget openssl.cnf ## CA configrationfile</em></p>
<p><em>#openssl req -x509 -config openssl.cnf -newkey rsa:2048-days 365 -out cacert.pem -outform PEM -subj /CN=MyTestCA/ -nodes ## CA ‘spublic key and private key</em></p>
<p><em>#openssl x509 -in cacert.pem -out cacert.cer -outformDER</em></p>
<p>该证书被签发以后，就可以分发给AMQP client，用于组件之间的通讯了。</p>
<h2 id="Keystone-简介"><a href="#Keystone-简介" class="headerlink" title="Keystone 简介"></a>Keystone 简介</h2><h3 id="Keystone-基本概念和理解"><a href="#Keystone-基本概念和理解" class="headerlink" title="Keystone 基本概念和理解"></a>Keystone 基本概念和理解</h3><p>Keystone（OpenStack Identity Service）是 OpenStack 框架中负责管理身份验证、服务访问规则和服务令牌功能的组件。用户访问资源需要验证用户的身份与权限，服务执行操作也需要进行权限检测，这些都需要通过 Keystone 来处理。Keystone 类似一个服务总线， 或者说是整个 Openstack 框架的注册表，OpenStack 服务通过 Keystone 来注册其 Endpoint（服务访问的URL），任何服务之间的相互调用，都需要先经过 Keystone 的身份验证，获得目标服务的 Endpoint ，然后再调用。</p>
<p>Keystone 的主要功能如下：</p>
<ul>
<li>管理用户及其权限；</li>
<li>维护 OpenStack 服务的 Endpoint；</li>
<li>Authentication（认证）和 Authorization（鉴权）</li>
</ul>
<p>keystone的相关概念可以以一个城市的酒店服务来举例说明：</p>
<p>​    酒店就类似于project项目，酒店提供住宿的服务service，user相当于客人，endpoint相当于客人住酒店时的询问的酒店的地址，role为角色，如客人定了个豪华套房，name他就是贵宾，定了标间，他就是普通客人，credentials相当于入住酒店时提供的身份证，酒店前台利用身份证获取身份信息并提供房间，这个过程相当于authentication，办理入住后拿到的房卡相当于token，利用token就可以刷开房间门进行住宿这项service。</p>
<p>先看下 keystone 在 openstack 中基本位置，以创建虚拟机为例：</p>
<p><img src="/images/openstack-keystone-13.png" alt="image-20200822232009075"></p>
<p>Keystone 的结构如下：</p>
<p><img src="/images/openstack-keystone-14.png" alt="image-20200822220154883"></p>
<p>学习之前，我们先理解一下下面的几个概念：</p>
<p><strong>1. User</strong></p>
<p>User 指代任何使用 OpenStack 的实体，可以是真正的用户，其他系统或者服务。当 User 请求访问 OpenStack 时，Keystone 会对其进行验证。</p>
<p>Horizon 在 “身份管理-&gt;用户” 管理 User：</p>
<p>​    admin：openstack平台的超级管理员，负责openstack服务的管理和访问权限</p>
<p>除了 admin 和 demo，OpenStack 也为 nova、cinder、glance、neutron 等服务创建了相应的 User。 admin 也可以管理这些 User。</p>
<p><strong>2. Credentials</strong></p>
<p>Credentials 是 User 用来证明自己身份的信息，可以是：</p>
<p>用户名/密码</p>
<p>Token</p>
<p>API Key</p>
<p>其他高级方式</p>
<p><strong>3. Authentication</strong></p>
<p>Authentication 是 Keystone 验证 User 身份的过程。User 访问 OpenStack 时向 Keystone 提交用户名和密码形式的 Credentials，Keystone 验证通过后会给 User 签发一个 Token 作为后续访问的 Credential。</p>
<p><strong>4. Token</strong></p>
<p>Token 是由数字和字母组成的字符串，User 成功 Authentication 后由 Keystone 分配给 User。Token 用做访问 Service 的 Credential，Service 会通过 Keystone 验证 Token 的有效性。Token 还有 scope 的概念，表明这个 Token 作用在什么范围内的资源，例如某个 Project 范围或者某个 Domain 范围，Token 只能用于认证用户对指定范围内资源的操作。Token 的有效期默认是 24 小时。</p>
<p>Keystone 提供如下几种 Token，可以根据需要配置使用某种 Token：</p>
<p>UUID token：服务 API 收到带有 UUID token 的请求时，必须到 Keystone 进行验证token 的合法性，验证通过之后才能响应用户请求。随着集群规模的扩大，Keystone 需处理大量验证 UUID token 的请求，在高并发下容易出现性能问题。</p>
<p>PKI token：携带更多用户信息并附上了数字签名，服务 API收 到 PKI token 时无需再去Keystone 验证，但是 PKI token 所携带可能随着 OpenStack Region 增多而变得非常长，很容易超出 HTTP Server 允许的最大 HTTP Header（默认为 8 KB），导致 HTTP 请求失败。</p>
<p>PKIZ token：PKI token 的压缩版，但压缩效果有限，无法良好的处理 token 长度过大问题。</p>
<p>Fernet token：携带了少量的用户信息，大小约为 255 Byte，采用了对称加密，无需存于数据库中。前三种 token 都会持久性存于数据库，与日俱增积累的大量 token 引起数据库性能下降，所以用户需经常清理数据库的 token；Fernet token没有这样的需要。</p>
<p><strong>注：在Ocata版本中 Fernet 成为默认的 Token Provider。 PKI 和 PKIz token provider 被移除 。</strong></p>
<p><strong>5. Project</strong></p>
<p>Project 用于将 OpenStack 的资源（计算、存储和网络）进行分组和隔离。在企业私有云中，Project 可以是一个部门或者项目组，和公有云的 VPC（虚拟私有网络）概念类似。资源的所有权是属于 Project 的，而不是 User。每个 User（包括 admin）必须挂在 Project 里才能访问该 Project 的资源，一个 User 可以属于多个 Project。</p>
<p>Horizon 在 “身份管理-&gt;项目” 中管理 Project：<br>可以通过 “管理成员” 将 User 添加到 Project 中。</p>
<p><strong>6. Service</strong></p>
<p>OpenStack 的 Service 包括 Compute (Nova)、Block Storage (Cinder)、Object Storage (Swift)、Image Service (Glance) 、Networking Service (Neutron) 等。每个 Service 都会提供若干个 Endpoint，User 通过 Endpoint 访问资源和执行操作。</p>
<p><strong>7. Endpoint</strong></p>
<p>Endpoint 是一个网络上可访问的地址，通常是一个 URL。Service 通过 Endpoint 暴露自己的 API。Keystone 负责管理和维护每个 Service 的 Endpoint。</p>
<p><strong>8. Role</strong></p>
<p>安全包含两部分：Authentication（认证）和 Authorization（鉴权）。Authentication 解决的是“你是谁？”的问题， Authorization 解决的是“你能干什么？”的问题。Keystone 是借助 Role 来实现 Authorization 的。Role 是全局（global）的，因此在一个 keystone 管辖范围内其名称必须唯一。</p>
<p>Horizon 在 “身份管理-&gt;角色” 中管理 Role：<br>可以为 User 分配一个或多个 Role。</p>
<p>Service 决定每个 Role 能做什么事情。Service 通过各自的 policy.json 文件对 Role 进行访问控制。Role 的名称没有意义，其意义在于 policy.json 文件根据 role 的名称所指定的允许进行的操作。</p>
<p><strong>9. Group</strong></p>
<p>Group 是一个 domain 部分 user 的集合，其目的是为了方便分配 role。给一个 group 分配 role，结果会给 group 内的所有 users 分配这个 role。</p>
<p>Horizon 在 “身份管理-&gt;组” 中管理 Group：</p>
<p><strong>10. Domain</strong></p>
<p>Domain 表示 Project、Group 和 User 的集合，在公有云或者私有云中常常表示一个客户，和 VDC（虚拟机数据中心）的概念类似。Domain 可以看做一个命名空间，就像域名一样，全局唯一。在一个 Domain 内，Project、Group、User 的名称不可以重复，但是在两个不同的 Domain 内，它们的名称可以重复。因此，在确定这些元素时，需要同时使用它们的名称和它们的 Domain 的 id 或者 name。</p>
<p>下图表示了 Domain、Project、User、Group、Role 之间的关系：</p>
<p><img src="/images/openstack-keystone-15.png" alt="image-20200822222609744"></p>
<p>下面是一个整体关系图：</p>
<p><img src="/images/openstack-keystone-16.png" alt="image-20200822222653198"></p>
<h3 id="keystone管理这些概念的方法"><a href="#keystone管理这些概念的方法" class="headerlink" title="keystone管理这些概念的方法"></a>keystone管理这些概念的方法</h3><table>
<thead>
<tr>
<th><strong>组件名称</strong></th>
<th><strong>管理对象</strong></th>
<th><strong>生成方法</strong></th>
<th><strong>保存方式</strong></th>
<th><strong>配置项</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>identity</td>
<td>user，以及 user group</td>
<td>-</td>
<td><strong>sql</strong>, ldap.core</td>
<td>[identity]driver = keystone.identity.backends.[<strong>sql</strong>\</td>
<td>ldap.core].Identity</td>
</tr>
<tr>
<td>token</td>
<td>用户的临时 token</td>
<td>pki，pkiz，uuid</td>
<td>sql, kvs,memcached</td>
<td>[token]driver = keystone.token.persistence.backends.[<strong>sql</strong>\</td>
<td>kvs\</td>
<td>memcache\</td>
<td>memcache_pool].Tokenprovider=keystone.token.providers.[pkiz\</td>
<td>pki\</td>
<td><strong>uuid</strong>].Provider</td>
</tr>
<tr>
<td>credential</td>
<td>EC2 credential</td>
<td></td>
<td><strong>sql</strong></td>
<td>[credential]driver = keystone.credential.backends.sql.Credentialprovider=keystone.token.providers.[core\</td>
<td>fernet].Provider</td>
</tr>
<tr>
<td>catalog</td>
<td>region,service,endpoint</td>
<td></td>
<td><strong>sql</strong>\</td>
<td>templated</td>
<td>[catalog]driver = keystone.catalog.backends.[<strong>sql</strong>\</td>
<td>templated].Catalog</td>
</tr>
<tr>
<td>assignment</td>
<td>tenant，domain，role 以及它们与 user 之间的关系</td>
<td>external, password, token</td>
<td>sql</td>
<td>[assignment]methods = external, password, tokenpassword = keystone.auth.plugins.password.Password</td>
</tr>
<tr>
<td>trust</td>
<td>trust</td>
<td><strong>sql</strong></td>
<td></td>
<td>[trust]driver = keystone.trust.backends.[<strong>sql</strong>].Trust</td>
</tr>
<tr>
<td>policy</td>
<td>Keystone service 的用户鉴权策略</td>
<td></td>
<td>ruels\</td>
<td>sql</td>
<td>[default]policy_file = policy.json[policy]driver = keystone.policy.backends.[ruels\</td>
<td><strong>sql]</strong>.Policy</td>
</tr>
</tbody>
</table>
<h2 id="keystone-与各组件交互流程"><a href="#keystone-与各组件交互流程" class="headerlink" title="keystone 与各组件交互流程"></a>keystone 与各组件交互流程</h2><p>（该章节内容皆来自：<a href="https://blog.csdn.net/dylloveyou/article/details/80329732）" target="_blank" rel="external">https://blog.csdn.net/dylloveyou/article/details/80329732）</a></p>
<p>Keystone 与 OpenStack 其他服务交互流程如下：</p>
<p><img src="/images/openstack-keystone-17.png" alt="image-20200822231400386"></p>
<p>首先用户向 Keystone 提供自己的身份验证信息，如用户名和密码。Keystone 会从数据库中读取数据对其验证，如验证通过，会向用户返回一个 token，此后用户所有的请求都会使用该 token 进行身份验证。如用户向 Nova 申请虚拟机服务，nova 会将用户提供的 token 发给 Keystone 进行验证，Keystone 会根据 token 判断用户是否拥有进行此项操作的权限，若验证通过那么 nova 会向其提供相对应的服务。其它组件和 Keystone 的交互也是如此。</p>
<p>下面通过 “查询可用 image” 这个实际操作示例让大家对相关概念及交互流程建立更加感性的认识。</p>
<p>示例 ：User admin 要查看 Project 中的 image。<br>第一步，登陆</p>
<p><img src="/images/openstack-keystone-18.png" alt="image-20200823145159028"></p>
<p>输入用户名密码后，点击“连接”按钮，OpenStack 内部发生了哪些事情？</p>
<p><img src="/images/openstack-keystone-19.png" alt="image-20200823145114999"></p>
<p>返回的 token 中包含了 User 的 Role 信息。</p>
<p>第二步，显示操作界面。</p>
<p><img src="/images/openstack-keystone-20.png" alt="image-20200823145213198"></p>
<p>请注意，顶部显示 admin 可访问的 Project 为 “admin” 和 “demo”。<br>其实在此之前发生了一些事情：</p>
<p><img src="/images/openstack-keystone-21.png" alt="image-20200823145230924"></p>
<p>同时，admin 可以访问 “实例”， “卷”，“映像” 等服务：</p>
<p><img src="/images/openstack-keystone-22.png" alt="image-20200823145251069"></p>
<p>这是因为 admin 已经从 Keystone 拿到了各 Service 的 Endpoints：</p>
<p><img src="/images/openstack-keystone-23.png" alt="image-20200823145309848"></p>
<p>第三步，显示 Image 列表。<br>点击“映像”，会显示映像列表：</p>
<p><img src="/images/openstack-keystone-24.png" alt="image-20200823145328912"></p>
<p>背后发生了这些事：<br>首先，admin 将请求发送到 Glance 的 Endpoint：</p>
<p><img src="/images/openstack-keystone-25.png" alt="image-20200823145345587"></p>
<p>Glance 向 Keystone 询问 admin 身份的有效性：</p>
<p><img src="/images/openstack-keystone-26.png" alt="image-20200823145401818"></p>
<p>接下来 Glance 会查看 <code>/etc/glance/policy.json</code>，判断 admin 是否有查看 image 的权限。</p>
<p><img src="/images/openstack-keystone-27.png" alt="image-20200823145419552"></p>
<p>权限判定通过，Glance 将 image 列表发给 admin。</p>
<h2 id="Keystone-获取-token-方式"><a href="#Keystone-获取-token-方式" class="headerlink" title="Keystone 获取 token 方式"></a>Keystone 获取 token 方式</h2><p>上面的示例是在界面操作完成的，我们也可以通过调用 REST API 来实现。</p>
<p>要想拿到token, 必须知道用户的相关信息，其中用户名和密码是必须的，如果还想取得更多的信息，例如用户对各种服务包括glance, keystond的访问endpoint, 还需要提供用户的tenant信息。实际上，对于终端用户来说，因为用户名，密码以及tenant名更为直观，所以很少会直接用token进行操作，但对于自动化测试来说，因为要直接和相关api打交道，取得token就相当有必要了。</p>
<h3 id="方法一：使用-api-获取"><a href="#方法一：使用-api-获取" class="headerlink" title="方法一：使用 api 获取"></a>方法一：使用 api 获取</h3><p>命令行取得用户token的命令为：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:5000/v2.0/tokens -d '&#123;"auth":&#123;"passwordCredentials":&#123;"username": "username", "password":"password"&#125;&#125;&#125;' -H "Content-type: application/json"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其中localhost:5000是openstack keystone服务的endpoint, 如果没有特殊的设置，5000就是keystone服务进程的端口号。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> /v2.0/token 是openstack api里定义的取得token的URI， 请求方式为POST，这个可以从openstack.org里查到。</span></span><br></pre></td></tr></table></figure>
<p>​    后面json结构的数据‘auth’是提供给keystone服务用户信息，包括用户名和密码。下面看一下输出：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"access"</span>: &#123;</span><br><span class="line">		<span class="attr">"token"</span>: &#123;</span><br><span class="line">			<span class="attr">"expires"</span>: <span class="string">"2013-06-04T03:06:23Z"</span>,</span><br><span class="line">			<span class="attr">"id"</span>: <span class="string">"5fcf748e0d5d4a02ae3465e0dd301f40"</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="attr">"serviceCatalog"</span>: &#123;&#125;,</span><br><span class="line">		<span class="attr">"user"</span>: &#123;</span><br><span class="line">			<span class="attr">"username"</span>: <span class="string">"username"</span>,</span><br><span class="line">			<span class="attr">"roles_links"</span>: [],</span><br><span class="line">			<span class="attr">"id"</span>: <span class="string">"ce205b61760c463cb46e41909de8495f"</span>,</span><br><span class="line">			<span class="attr">"roles"</span>: [],</span><br><span class="line">			<span class="attr">"name"</span>: <span class="string">"username"</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; &#123;</span><br><span class="line">	<span class="attr">"message_id"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="attr">"event_type"</span>: <span class="string">"user.login"</span>,</span><br><span class="line">	<span class="attr">"generated"</span>: <span class="string">"2021-08-21T12:22:00"</span>,</span><br><span class="line">	<span class="attr">"traits"</span>: [&#123;</span><br><span class="line">		<span class="attr">"type"</span>: <span class="string">"1"</span>,</span><br><span class="line">		<span class="attr">"name"</span>: <span class="string">"user_id"</span>,</span><br><span class="line">		<span class="attr">"value"</span>: <span class="string">"653ecae8465b4e3b8988960d19f2a168"</span></span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		<span class="attr">"type"</span>: <span class="string">"1"</span>,</span><br><span class="line">		<span class="attr">"name"</span>: <span class="string">"project_id"</span>,</span><br><span class="line">		<span class="attr">"value"</span>: <span class="string">"afa072073107491b83ea511d6bb538d8"</span></span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		<span class="attr">"type"</span>: <span class="string">"1"</span>,</span><br><span class="line">		<span class="attr">"name"</span>: <span class="string">"browser"</span>,</span><br><span class="line">		<span class="attr">"value"</span>: <span class="string">"chrome"</span></span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		<span class="attr">"type"</span>: <span class="string">"1"</span>,</span><br><span class="line">		<span class="attr">"name"</span>: <span class="string">"site_ip"</span>,</span><br><span class="line">		<span class="attr">"value"</span>: <span class="string">"192.168.2.3"</span></span><br><span class="line">	&#125;, &#123;</span><br><span class="line">		<span class="attr">"type"</span>: <span class="string">"1"</span>,</span><br><span class="line">		<span class="attr">"name"</span>: <span class="string">"task_result"</span>,</span><br><span class="line">		<span class="attr">"value"</span>: <span class="string">"success"</span></span><br><span class="line">	&#125;],</span><br><span class="line">	<span class="attr">"raw"</span>: <span class="string">"&#123;&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是openstack/essex版本下的token输出，其中[‘token’][‘id’]就是我们得到的用户token。对于openstack/grizzly版本, 用户的token比这个要长得多，但基本结构是一样的。</p>
<p>下面看一下使用tenant的情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:5000/v2.0/tokens -d &apos;&#123;&quot;auth&quot;:&#123;&quot;passwordCredentials&quot;:&#123;&quot;username&quot;: &quot;admin&quot;, &quot;password&quot;:&quot;crowbar&quot;&#125;, &quot;tenantName&quot;:&quot;tenantname&quot;&#125;&#125;&apos; -H &quot;Content-type: application/json&quot;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"access"</span>: &#123;</span><br><span class="line">		<span class="attr">"token"</span>: &#123;</span><br><span class="line">			<span class="attr">"expires"</span>: <span class="string">"2013-06-04T03:14:12Z"</span>,</span><br><span class="line">			<span class="attr">"id"</span>: <span class="string">"fc3e38a93e95462da5028b1fb3a688c0"</span>,</span><br><span class="line">			<span class="attr">"tenant"</span>: &#123;</span><br><span class="line">				<span class="attr">"description"</span>: <span class="string">"description"</span>,</span><br><span class="line">				<span class="attr">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">				<span class="attr">"id"</span>: <span class="string">"4e14ab2a2df045f1a6f02081a46deb2c"</span>,</span><br><span class="line">				<span class="attr">"name"</span>: <span class="string">"tenantname"</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="attr">"serviceCatalog"</span>: [&#123;</span><br><span class="line">			<span class="attr">"endpoints"</span>: [&#123;</span><br><span class="line">				<span class="attr">"adminURL"</span>: <span class="string">"http://localhost:8776/v1/4e14ab2a2df045f1a6f02081a46deb2c"</span>,</span><br><span class="line">				<span class="attr">"region"</span>: <span class="string">"RegionOne"</span>,</span><br><span class="line">				<span class="attr">"internalURL"</span>: <span class="string">"http://localhost:8776/v1/4e14ab2a2df045f1a6f02081a46deb2c"</span>,</span><br><span class="line">				<span class="attr">"publicURL"</span>: <span class="string">"http://localhost:8776/v1/4e14ab2a2df045f1a6f02081a46deb2c"</span></span><br><span class="line">			&#125;],</span><br><span class="line">			<span class="attr">"endpoints_links"</span>: [],</span><br><span class="line">			<span class="attr">"type"</span>: <span class="string">"volume"</span>,</span><br><span class="line">			<span class="attr">"name"</span>: <span class="string">"nova-volume"</span></span><br><span class="line">		&#125;, &#123;</span><br><span class="line">			<span class="attr">"endpoints"</span>: [&#123;</span><br><span class="line">				<span class="attr">"adminURL"</span>: <span class="string">"http://localhost:9292/v1"</span>,</span><br><span class="line">				<span class="attr">"region"</span>: <span class="string">"RegionOne"</span>,</span><br><span class="line">				<span class="attr">"internalURL"</span>: <span class="string">"http://localhost:9292/v1"</span>,</span><br><span class="line">				<span class="attr">"publicURL"</span>: <span class="string">"http://localhost:9292/v1"</span></span><br><span class="line">			&#125;],</span><br><span class="line">			<span class="attr">"endpoints_links"</span>: [],</span><br><span class="line">			<span class="attr">"type"</span>: <span class="string">"image"</span>,</span><br><span class="line">			<span class="attr">"name"</span>: <span class="string">"glance"</span></span><br><span class="line">		&#125;, &#123;</span><br><span class="line">			<span class="attr">"endpoints"</span>: [&#123;</span><br><span class="line">				<span class="attr">"adminURL"</span>: <span class="string">"http://localhost:8774/v2/4e14ab2a2df045f1a6f02081a46deb2c"</span>,</span><br><span class="line">				<span class="attr">"region"</span>: <span class="string">"RegionOne"</span>,</span><br><span class="line">				<span class="attr">"internalURL"</span>: <span class="string">"http://localhost:8774/v2/4e14ab2a2df045f1a6f02081a46deb2c"</span>,</span><br><span class="line">				<span class="attr">"publicURL"</span>: <span class="string">"http://localhost:8774/v2/4e14ab2a2df045f1a6f02081a46deb2c"</span></span><br><span class="line">			&#125;],</span><br><span class="line">			<span class="attr">"endpoints_links"</span>: [],</span><br><span class="line">			<span class="attr">"type"</span>: <span class="string">"compute"</span>,</span><br><span class="line">			<span class="attr">"name"</span>: <span class="string">"nova"</span></span><br><span class="line">		&#125;, &#123;</span><br><span class="line">			<span class="attr">"endpoints"</span>: [&#123;</span><br><span class="line">				<span class="attr">"adminURL"</span>: <span class="string">"http://localhost:8773/services/Admin"</span>,</span><br><span class="line">				<span class="attr">"region"</span>: <span class="string">"RegionOne"</span>,</span><br><span class="line">				<span class="attr">"internalURL"</span>: <span class="string">"http://localhost:8773/services/Cloud"</span>,</span><br><span class="line">				<span class="attr">"publicURL"</span>: <span class="string">"http://localhost:8773/services/Cloud"</span></span><br><span class="line">			&#125;],</span><br><span class="line">			<span class="attr">"endpoints_links"</span>: [],</span><br><span class="line">			<span class="attr">"type"</span>: <span class="string">"ec2"</span>,</span><br><span class="line">			<span class="attr">"name"</span>: <span class="string">"ec2"</span></span><br><span class="line">		&#125;, &#123;</span><br><span class="line">			<span class="attr">"endpoints"</span>: [&#123;</span><br><span class="line">				<span class="attr">"adminURL"</span>: <span class="string">"http://localhost:35357/v2.0"</span>,</span><br><span class="line">				<span class="attr">"region"</span>: <span class="string">"RegionOne"</span>,</span><br><span class="line">				<span class="attr">"internalURL"</span>: <span class="string">"http://localhost:5000/v2.0"</span>,</span><br><span class="line">				<span class="attr">"publicURL"</span>: <span class="string">"http://localhost:5000/v2.0"</span></span><br><span class="line">			&#125;],</span><br><span class="line">			<span class="attr">"endpoints_links"</span>: [],</span><br><span class="line">			<span class="attr">"type"</span>: <span class="string">"identity"</span>,</span><br><span class="line">			<span class="attr">"name"</span>: <span class="string">"keystone"</span></span><br><span class="line">		&#125;],</span><br><span class="line">		<span class="attr">"user"</span>: &#123;</span><br><span class="line">			<span class="attr">"username"</span>: <span class="string">"admin"</span>,</span><br><span class="line">			<span class="attr">"roles_links"</span>: [],</span><br><span class="line">			<span class="attr">"id"</span>: <span class="string">"ce205b61760c463cb46e41909de8495f"</span>,</span><br><span class="line">			<span class="attr">"roles"</span>: [&#123;</span><br><span class="line">				<span class="attr">"id"</span>: <span class="string">"454cb6cbddaf41f2af6f87e68ce58d64"</span>,</span><br><span class="line">				<span class="attr">"name"</span>: <span class="string">"KeystoneAdmin"</span></span><br><span class="line">			&#125;, &#123;</span><br><span class="line">				<span class="attr">"id"</span>: <span class="string">"5a80a5b5d4244f48ac7d3079d56555c6"</span>,</span><br><span class="line">				<span class="attr">"name"</span>: <span class="string">"KeystoneServiceAdmin"</span></span><br><span class="line">			&#125;, &#123;</span><br><span class="line">				<span class="attr">"id"</span>: <span class="string">"c5a190185ea7434eb2c35bbd1bb52051"</span>,</span><br><span class="line">				<span class="attr">"name"</span>: <span class="string">"username"</span></span><br><span class="line">			&#125;],</span><br><span class="line">			<span class="attr">"name"</span>: <span class="string">"tenentname"</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，如果在请求token的时候同时提供了tenant信息，则可以额外获取用户相关的endpoints信息。这样，有了token和相关endpoints, 就能够对openstack的api进行相关的访问和操作了。顺便说明，上述提供的tenant的信息也可以是tenant的id， 格式为”tenantId”:”<tenantid>“。</tenantid></p>
<p>用户每次发出一次请求，就会生成一个token, 同时会在glance数据库的token表内生成一个记录。每个token的有效时间缺省为24个小时。</p>
<p>使用编程实现也是可以的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> httplib2</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">http_obj = httplib2.Http()</span><br><span class="line">headers = &#123;&#125;</span><br><span class="line">body = &#123;</span><br><span class="line">    <span class="string">"auth"</span>: &#123;</span><br><span class="line">            <span class="string">"passwordCredentials"</span>:&#123;</span><br><span class="line">                <span class="string">"username"</span>: <span class="string">'username'</span>,</span><br><span class="line">                <span class="string">"password"</span>: <span class="string">'password'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"tenantName"</span>: <span class="string">'tenantname'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">req_url = <span class="string">"http://localhost:5000/v2.0/tokens"</span></span><br><span class="line">method = <span class="string">"POST"</span></span><br><span class="line"></span><br><span class="line">headers[<span class="string">'Content-Type'</span>] = <span class="string">'application/json'</span></span><br><span class="line">headers[<span class="string">'Accept'</span>] = <span class="string">'application/json'</span></span><br><span class="line"></span><br><span class="line">resp, token = http_obj.request(req_url, method,</span><br><span class="line">                               headers=headers, body=json.dumps(body))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> resp</span><br><span class="line"><span class="keyword">print</span> token</span><br></pre></td></tr></table></figure>
<p>如果在body里不提供tenantName或tenantId的数据，则返回的是上述command line命令不包括endpoints的输出。</p>
<h3 id="方法二：使用-openstack-命令获取"><a href="#方法二：使用-openstack-命令获取" class="headerlink" title="方法二：使用 openstack 命令获取"></a>方法二：使用 openstack 命令获取</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# openstack token issue</span><br><span class="line">+------------+----------------------------------------------------------------------------------------+</span><br><span class="line">| Field      | Value                                                                                  |</span><br><span class="line">+------------+----------------------------------------------------------------------------------------+</span><br><span class="line">| expires    | 2019-05-16T09:20:34.284984Z                                                            |</span><br><span class="line">| id         | gAAAAABc3R1SjOCqsvEg3eem30gGaW3ogfR-                                                   |</span><br><span class="line">|            | nu0sISozNnPoCZJ8a61yeNvrdtVnHzMLxD4R2bz1lhFk0ErnBMGp-k_FfRpU-v3Lwy-                    |</span><br><span class="line">|            | J4htqFoTrpAdfqpYFivjrhjuHE3z3AyxZGjCi5EySJUJchVKwroxjyiekBL2uQQ6iIxvD_F8Ew4pMQN8       |</span><br><span class="line">| project_id | fda820529c814812a7ab5fdcb878b291                                                       |</span><br><span class="line">| user_id    | 840931be05dc4e36945bc8d1a6d0fe1c                                                       |</span><br><span class="line">+------------+----------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<p>其中的 id 行就是 token</p>
<p>token 生成之后，就可以使用该值放在请求头 X-Auth-Token 字段，访问 openstack 的其余 api 了。</p>
<h2 id="Keystone-源码分析"><a href="#Keystone-源码分析" class="headerlink" title="Keystone 源码分析"></a>Keystone 源码分析</h2><p>我们从源码角度分析一下 keystone 相关的服务</p>
<p><img src="/images/openstack-keystone-28.png" alt="image-20200823153812186"></p>
<p>首先给一张基本架构图，基本架构分为 Keystone Api，Router，Services，Backend Driver</p>
<h3 id="Keystone-Api"><a href="#Keystone-Api" class="headerlink" title="Keystone Api"></a>Keystone Api</h3><p>Keystone API与Openstack其他服务的API类似，也是基于ReSTFul HTTP实现的。</p>
<p>Keystone API划分为Admin API和Public API：</p>
<ul>
<li>Public API不仅实现获取版本以及相应扩展信息的操作，同时包括获取Token以及Token租户信息的操作；</li>
<li>Admin API主要提供服务开发者使用，不仅可以完成Public API的操作，同时对User、Tenant、Role和Service Endpoint进行管理操作。</li>
</ul>
<h3 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h3><p>Keystone Router主要实现上层API和底层服务的映射和转换功能，包括四种Router类型。<br>（1） AdminRouter<br>负责将Admin API请求映射为相应的行为操作并转发至底层相应的服务执行；<br>（2） PublicRouter<br>与AdminRouter类似；<br>（3） PublicVersionRouter<br>对系统版本的请求API进行映射操作；<br>（4） AdminVersionRouter<br>与PublicVersionRouter类似。</p>
<h3 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h3><p>Keystone Service接收上层不同Router发来的操作请求，并根据不同后端驱动完成相应操作</p>
<p>主要包括四种驱动类型Kvs.Token，Memcache.Token，Memcache_pool.Token,Sql.Token；</p>
<p><strong>Identity Service</strong></p>
<p>Identity Service提供关于用户和用户组的授权认证及相关数据，即users和groups。</p>
<p>Keystone-10.0.0支持ldap.core.Identity,Sql.Identity两种后端驱动，系统默认的是Sql.Identity；</p>
<p><strong>Resource Service</strong></p>
<p>Resouse服务提供关于projects和domains的数据</p>
<p><strong>Assignment Service</strong></p>
<p>Assignment Service提供role及role assignments的数据，即 roles和role assignments</p>
<p><strong>Token Service</strong></p>
<p>Token Service提供认证和管理令牌token的功能，用户的credentials认证通过后就得到token</p>
<p>Keystone-10.0.0对于Token Service<br>支持Kvs.Token，Memcache.Token，Memcache_pool.Token,Sql.Token四种后端驱动，系统默认的是kvs.Token</p>
<p><strong>Catalog Service</strong></p>
<p>Catalog Service提供service和Endpoint相关的管理操作（service即openstack所有服务，endpont即访问每个服务的url）</p>
<p>keystone-10.0.0对Catalog Service支持两种后端驱动：Sql.Catalog、Templated.Catalog两种后端驱动，系统默认的是templated.Catalog；</p>
<p><strong>Policy Service</strong></p>
<p>Policy Service提供一个基于规则的授权驱动和规则管理</p>
<p>keystone-10.0.0对Policy Service支持两种后端驱动：rules.Policy,sql.Policy，默认使用sql.Policy</p>
<h3 id="Backend-Driver"><a href="#Backend-Driver" class="headerlink" title="Backend Driver"></a>Backend Driver</h3><p>Backend Driver具有多种类型，不同的Service选择不同的Backend Driver。</p>
<h1 id="Keystone-服务启动"><a href="#Keystone-服务启动" class="headerlink" title="Keystone 服务启动"></a>Keystone 服务启动</h1><p>/usr/bin/keystone-all 会启动 keystone 的两个service：admin and main，它们分别对应 /etc/keystone/keystone-paste.ini 文件中的两个composite：main 和 admin</p>
<p>可见 admin service 提供给administrator 使用；main 提供给 public 使用。它们分别都有 V2.0 和 V3 版本，只是目前的 keystone Cli 只支持 V2.0.比较下 admin 和 public：</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>middlewares</strong></th>
<th><strong>factory</strong></th>
<th><strong>功能区别</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>admin</td>
<td>比 public 多 s3_extension</td>
<td>keystone.service:public_app_factory</td>
<td>从 factory 函数来看， admin service 比 public service 多了 identity 管理功能， 以及 assignment 的admin/public 区别：1. admin 多了对 GET /users/{user_id} 的支持，多了 get_all_projects， get_project，get_user_roles 等功能2. keystone 对 admin service 提供 admin extensions, 比如 <a href="http://docs.rackspace.com/openstack-extensions/auth/OS-KSADM-admin-devguide/content/Admin_API_Service_Developer_Operations-d1e1357.html" target="_blank" rel="external">OS-KSADM</a> 等；对 public service 提供 public extensions。<strong>简单总结一下， public service 主要提供了身份验证和目录服务功能；admin service 增加了 tenant、user、role、user group 的管理功能。</strong></td>
</tr>
<tr>
<td>public</td>
<td>sizelimit url_normalize build_auth_context token_auth admin_token_auth xml_body_v2json_body ec2_extension user_crud_extension</td>
<td>keystone.service:admin_app_factory</td>
<td>从 factory 函数来看， admin service 比 public service 多了 identity 管理功能， 以及 assignment 的admin/public 区别：1. admin 多了对 GET /users/{user_id} 的支持，多了 get_all_projects， get_project，get_user_roles 等功能2. keystone 对 admin service 提供 admin extensions, 比如 <a href="http://docs.rackspace.com/openstack-extensions/auth/OS-KSADM-admin-devguide/content/Admin_API_Service_Developer_Operations-d1e1357.html" target="_blank" rel="external">OS-KSADM</a> 等；对 public service 提供 public extensions。<strong>简单总结一下， public service 主要提供了身份验证和目录服务功能；admin service 增加了 tenant、user、role、user group 的管理功能。</strong></td>
</tr>
</tbody>
</table>
<p>/usr/bin/keystone-all 会启动 admin 和 public 两个 service，分别绑定不同 host 和 端口。默认的话，绑定host 都是 0.0.0.0； admin 的绑定端口是 35357 （admin_port）， public 的绑定端口是 5000 （public_port）。因此，给 admin 使用的 OS_AUTH_URL 为 <a href="http://controller:35357/v2.0，" target="_blank" rel="external">http://controller:35357/v2.0，</a> 给 public 使用的 OS_AUTH_URL=<a href="http://controller:5000/v2.0" target="_blank" rel="external">http://controller:5000/v2.0</a></p>
<p>进程说明</p>
<p>WSGI server的父进程(50511号进程)开启两个socket去分别监听本环境的5000和35357号端口，<br>其中5000号端口是为main的WSGI server提供的，35357号端口为admin的WSGI server提供的。<br>即WSGI server的父进程接收到5000号端口的HTTP请求时，则将把该请求转发给为main开启的WSGI server去处理，<br>而WSGI server的父进程接收到35357号端口的HTTP请求时，则将把该请求转发给为admin开启的WSGI server去处理。</p>
<h1 id="keystoneauth组件介绍"><a href="#keystoneauth组件介绍" class="headerlink" title="keystoneauth组件介绍"></a>keystoneauth组件介绍</h1><p>与openstack api交互有多种方法</p>
<ol>
<li>可以自己开发client直接调用api</li>
<li>可以直接使用openstack提供的封装sdk项目 <a href="https://docs.openstack.org/openstacksdk/latest/" target="_blank" rel="external">openstacksdk</a></li>
<li>可以使用python-xxxclient等项目，比如 <code>python-novaclient</code> ， <code>python-neutronclient</code></li>
<li>可以直接使用命令行工具 <code>nova</code> ， <code>neutron</code> ， <code>openstack</code> 等</li>
</ol>
<p>首先本文中client指那些与openstack api交互的项目，比如python-xxxclient或openstacksdk，这些client封装了具体的api请求过程，提供给用户更友好的操作方式， 比如nova命令来自 <code>python-novaclieent</code> ，neutron命令来自 <code>python-neutronclient</code> ，openstack命令来自 <code>python-openstackclient</code> 。</p>
<p>这些client的共性是他们都需要认证和发起请求，因此认证和请求这部分可以独立出来实现，各个client就不需要都自己实现一套认证请求流程了，这就是keystoneauth的作用，各个client可以专注于自己的功能实现</p>
<p>keystoneauth是一个相对独立的组件，它在整个openstack生态中提供统一认证和服务请求，因此client中不再需要处理token/headers/api地址这些信息，client需要做的只是import keystoneauth，提供必要的参数(region/用户凭据/api版本等)并调用keystoneauth中的接口，keystoneauth负责管理token和组装完整的api url(根据catalog和api的path)并最终发出api请求，client可以对返回值做友好处理后返回给用户</p>
<p>keystoneauth中实现认证和服务请求的是 <code>keystoneauth1.session.Session</code> 类，我们可以用它来初始化一个Session对象，此对象可以存储用户凭据(用户名密码)和连接信息(比如token)，使用同一个Session对象的各个client之间会共享认证和请求信息。 我们先来看看如何初始化一个Session对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[root@controller openstack]# cat ses.py</span></span><br><span class="line"><span class="comment">#----</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> keystoneauth1.identity <span class="keyword">import</span> v3</span><br><span class="line"><span class="keyword">from</span> keystoneauth1 <span class="keyword">import</span> session</span><br><span class="line"></span><br><span class="line">auth = v3.Password(username=<span class="string">'admin'</span>,</span><br><span class="line">                   password=<span class="string">'admin'</span>,</span><br><span class="line">                   project_name=<span class="string">'admin'</span>,</span><br><span class="line">                   user_domain_name=<span class="string">'Default'</span>,</span><br><span class="line">                   project_domain_name=<span class="string">'Default'</span>,</span><br><span class="line">                   auth_url=<span class="string">'http://controller:35357/v3'</span>)</span><br><span class="line">sess = session.Session(auth=auth)</span><br><span class="line"><span class="comment">#----</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化一个Session对象    </span></span><br><span class="line">[root@controller openstack]<span class="comment"># python</span></span><br><span class="line">Python <span class="number">2.7</span><span class="number">.5</span> (default, Nov  <span class="number">6</span> <span class="number">2016</span>, <span class="number">00</span>:<span class="number">28</span>:<span class="number">07</span>)</span><br><span class="line">[GCC <span class="number">4.8</span><span class="number">.5</span> <span class="number">20150623</span> (Red Hat <span class="number">4.8</span><span class="number">.5</span><span class="number">-11</span>)] on linux2</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> ses <span class="keyword">import</span> sess</span><br></pre></td></tr></table></figure>
<p>如上，我们初始化了一个Session类的实例对象 <code>sess</code> ，初始化Session需要提供必要的参数，我们在使用命令行之前需要source的环境变量( <code>OS_PROJECT_NAME</code> , <code>OS_USERNAME</code> , <code>OS_PASSWORD</code> ,…)其实最后也是传递给了keystoneauth。现在来看看能用这个对象做什么</p>
<h2 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sess.auth</span><br><span class="line">&lt;keystoneauth1.identity.v3.password.Password object at 0x3c17750&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; sess.get_token()</span><br><span class="line">&apos;gAAAAABbWX72UZT-RJnHtuFXpqecNuGFIhEAke_Rira3gfUesIuyvM5w2sEV6bnXC_uyo7rOn5RmYbZwADn2eT6AuvHXkRGHVoE25A6bkkXr6vWGZAd8fXHITK751UBrg8obFBGGNWoZpPhG87qFtmZ1yuLM3uebFFB4lfCTXoJ70D0my0X1GRc&apos;      </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; sess.get_auth_headers()</span><br><span class="line">&#123;&apos;X-Auth-Token&apos;: &apos;gAAAAABbWX72UZT-RJnHtuFXpqecNuGFIhEAke_Rira3gfUesIuyvM5w2sEV6bnXC_uyo7rOn5RmYbZwADn2eT6AuvHXkRGHVoE25A6bkkXr6vWGZAd8fXHITK751UBrg8obFBGGNWoZpPhG87qFtmZ1yuLM3uebFFB4lfCTXoJ70D0my0X1GRc&apos;&#125;</span><br></pre></td></tr></table></figure>
<p>如上，当执行 <code>get_token()</code> 后，使用 <code>sess.auth</code> 里保存的用户凭证向keystone api提交POST请求( <code>POST http://controller:35357/v3/auth/tokens</code> )获取一个token</p>
<p>此Token可以被多个使用此sess对象的client共享，这样各个client就不需要都走一边完整的获取token流程</p>
<h2 id="过滤endpoint地址"><a href="#过滤endpoint地址" class="headerlink" title="过滤endpoint地址"></a>过滤endpoint地址</h2><p>我们平常在使用openstack命令时并没有指定具体的api地址，实际上，组装出完整的api地址也是keystoneauth的责任，那么Session对象是如何知道完整的api地址呢</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#指定endpoint过滤条件</span><br><span class="line">&gt;&gt;&gt; identity_endpoint_filter=&#123;&apos;service_type&apos;: &apos;identity&apos;,</span><br><span class="line">... &apos;interface&apos;: &apos;admin&apos;,</span><br><span class="line">... &apos;region_name&apos;: &apos;bjff-1&apos;,</span><br><span class="line">... &apos;min_version&apos;: &apos;2.0&apos;,</span><br><span class="line">... &apos;max_version&apos;: &apos;3.4&apos;,&#125;</span><br><span class="line"></span><br><span class="line">#根据endpoint_filter获取对应的endpoint url</span><br><span class="line">&gt;&gt;&gt; sess.get_endpoint(sess.auth, **identity_endpoint_filter)</span><br><span class="line">u&apos;http://controller:35357/v3/&apos;</span><br><span class="line"></span><br><span class="line">#service_type改为compute，再获取endpoint url</span><br><span class="line">&gt;&gt;&gt; identity_endpoint_filter[&apos;service_type&apos;] = &apos;compute&apos;</span><br><span class="line">&gt;&gt;&gt; sess.get_endpoint(sess.auth, **identity_endpoint_filter)</span><br><span class="line">u&apos;http://controller:8774/v2.1/1987639927c94519ab8aaf3413a68df9&apos;</span><br></pre></td></tr></table></figure>
<p>openstack中的各个服务在安装时都要向endpoint注册( <code>openstack endpoint list</code> 可以看到当前openstack中已注册的所有服务)， <code>identity_endpoint_filter</code> 过滤参数作用就是在openstack endpoint中找出匹配项的url，当然，我们这里是手动指定的 <code>identity_endpoint_filter</code> 参数，实际上的过滤参数是client根据用户输入的命令所属的服务类型以及环境变量生成的</p>
<p>简单说下过滤参数含义：</p>
<ul>
<li>service_type： 服务类型，比如 <code>identity</code> , <code>compute</code> , <code>volume</code> 等(openstack endpoint list中可以看到)</li>
<li>min_version,max_version: 用于过滤在其范围内的api主版本，openstack中各个服务都有其主版本，比如目前keystone是v3版本，nova是v2版本，注意不是microversion</li>
</ul>
<p>上面也提到，组装出完整的api地址是keystoneauth的责任，client只需要提供必要的endpoint过滤参数以及访问路径(比如 <code>/users</code> )，最终完整api url就是endpoint url + ‘/users’</p>
<h2 id="直接发送api请求"><a href="#直接发送api请求" class="headerlink" title="直接发送api请求"></a>直接发送api请求</h2><p>事实上，我们可以直接用sess对象发起api请求，其它client的api请求最终也是调用的sess对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#确认下endpoint_filter</span><br><span class="line">&gt;&gt;&gt; identity_endpoint_filter</span><br><span class="line">&#123;&apos;service_type&apos;: &apos;identity&apos;, &apos;interface&apos;: &apos;admin&apos;, &apos;min_version&apos;: &apos;2.0&apos;, &apos;max_version&apos;: &apos;3.4&apos;, &apos;region_name&apos;: &apos;bjff-1&apos;&#125;</span><br><span class="line">#获取所有user(user list)</span><br><span class="line">&gt;&gt;&gt; response = sess.get(&apos;/users&apos;,endpoint_filter=identity_endpoint_filter)</span><br><span class="line">&gt;&gt;&gt; response.json()</span><br><span class="line">&#123;u&apos;users&apos;: [&#123;u&apos;password_expires_at&apos;: None, u&apos;links&apos;: &#123;u&apos;self&apos;: u&apos;http://controller:35357/v3/users/006cbddb9dde423695d00d94e68f1b19&apos;&#125;, u&apos;enabled&apos;: True, u&apos;id&apos;: u&apos;006cbddb9dde423695d00d94e68f1b19... &#125;</span><br><span class="line"></span><br><span class="line">#service type改为compute</span><br><span class="line">&gt;&gt;&gt; compute_endpoint_filter[&apos;service_type&apos;] = &apos;compute&apos;</span><br><span class="line">&gt;&gt;&gt; compute_endpoint_filter</span><br><span class="line">&#123;&apos;service_type&apos;: &apos;compute&apos;, &apos;interface&apos;: &apos;admin&apos;, &apos;min_version&apos;: &apos;2.0&apos;, &apos;max_version&apos;: &apos;3.4&apos;, &apos;region_name&apos;: &apos;bjff-1&apos;&#125;</span><br><span class="line">#获取所有虚拟机(server list)</span><br><span class="line">&gt;&gt;&gt; response = sess.get(&apos;/servers&apos;,endpoint_filter=compute_endpoint_filter)</span><br><span class="line">&gt;&gt;&gt; response.json()</span><br><span class="line">&#123;u&apos;servers&apos;: [&#123;u&apos;id&apos;: u&apos;0a57d543-1e8f-49c3-a731-c9198dd3ecb7&apos;, u&apos;links&apos;: [&#123;u&apos;href&apos;: u&apos;http://controller:8774/v2.1/1987639927c94519ab8aaf3413a68df9/servers/0a57d543-1e8f-49c3-a731-c9198dd3ecb7&apos;, u&apos;rel&apos;: u&apos;self&apos;&#125;, &#123;u&apos;href&apos;: ...&#125;</span><br><span class="line"></span><br><span class="line">#当然还可以获取所有虚拟机详细信息  </span><br><span class="line">response = sess.get(&apos;/servers/detail&apos;,endpoint_filter=compute_endpoint_filter)</span><br></pre></td></tr></table></figure>
<p>简单说下 <code>sess.get(&#39;/servers&#39;,endpoint_filter=compute_endpoint_filter)</code> 处理过程如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compute_endpoint_filter</span><br><span class="line">http://controller:8774/v2.1/1987639927c94519ab8aaf3413a68df9/servers</span><br></pre></td></tr></table></figure>
<h2 id="配合client"><a href="#配合client" class="headerlink" title="配合client"></a>配合client</h2><p>上面那种直接调用Session对象发送api还是太麻烦，client对此有更高层次的封装</p>
<p>比如平常使用的 <code>nova list</code> 命令来自 <code>python-novaclient</code> 项目，下面演示了 <code>python-novaclient</code> 中是如何使用Session对象</p>
<p>列出所有镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from glanceclient import Client as gsclient</span><br><span class="line">&gt;&gt;&gt; glance_client = gsclient(&apos;2&apos;, session=sess)</span><br><span class="line">&gt;&gt;&gt; glance_client.images.list()</span><br><span class="line">&lt;generator object list at 0x32b2c80&gt;</span><br></pre></td></tr></table></figure>
<p>列出所有虚拟机</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from novaclient import client as noclient</span><br><span class="line">&gt;&gt;&gt; nova_client = noclient.Client(&apos;2&apos;, session=sess)</span><br><span class="line">&gt;&gt;&gt; nova_client.servers.list()</span><br><span class="line">[&lt;Server: bjff-nginx02&gt;, &lt;Server: bjff-nginx03&gt;, &lt;Server: bjff-nginx01&gt;]</span><br><span class="line"></span><br><span class="line">#当然，也可以创建虚拟机</span><br><span class="line">&gt;&gt;&gt; nova_client.servers.create(&apos;instance1&apos;,</span><br><span class="line">... image=&apos;a88fe8b1-15ed-41af-898a-162447ca8d66&apos;,</span><br><span class="line">... flavor=&apos;82f7cfad-d792-4d39-bde1-e89369c36244&apos;,</span><br><span class="line">... nics=[&#123;&apos;net-id&apos;: &apos;2bcb3404-9f7c-4bb9-9bac-521c97be19e2&apos;&#125;],</span><br><span class="line">... min_count=1,max_count=1)</span><br><span class="line">&lt;Server: instance1&gt;</span><br></pre></td></tr></table></figure>
<h1 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h1><h2 id="ini-文件几个属性记录"><a href="#ini-文件几个属性记录" class="headerlink" title="*.ini 文件几个属性记录"></a>*.ini 文件几个属性记录</h2><p>vim /etc/keystone/keystone-paste.ini # 为例</p>
<p>(1) type = composite</p>
<p>这个类型的section会把URL请求分发到对应的Application，use表明具体的分发方式，比如”egg:Paste#urlmap”表示使用Paste包中的urlmap模块，这个section里的其他形式如”key = value”的行是使用urlmap进行分发时的参数。</p>
<p>(2) type = app</p>
<p>一个app就是一个具体的WSGI Application。</p>
<p>(3) type = filter-app</p>
<p>接收一个请求后，会首先调用filter-app中的use所指定的app进行过滤，如果这个请求没有被过滤，就会转发到next所指定的app进行下一步的处理。</p>
<p>(4) type = filter</p>
<p>与filter-app类型的区别只是没有next。</p>
<p>(5) type = pipeline</p>
<p>pipeline由一系列filter组成。这个filter链条的末尾是一个app。pipeline类型主要是对filter-app进行了简化，<br>否则，如果多个filter，就需要多个filter-app，然后使用next进行连接。OpenStack的paste的deploy的配置文件主要采用的pipeline的方式。<br>因为url为<a href="http://192.168.118.1:5000/v2.0/tokens，因为基本url的后面接的信息为/v2.0，所以将到public_api的section作相应操作。" target="_blank" rel="external">http://192.168.118.1:5000/v2.0/tokens，因为基本url的后面接的信息为/v2.0，所以将到public_api的section作相应操作。</a></p>
<h2 id="Keystone-V3-API-新特性"><a href="#Keystone-V3-API-新特性" class="headerlink" title="Keystone V3 API 新特性"></a>Keystone V3 API 新特性</h2><p>在 Keystone V3 之前，用户的权限管理以每一个用户为单位，需要对每一个用户进行角色分配，并不存在一种对一组用户进行统一管理的方案，这给系统管理员带来了额外的工作和不便。此外，Keystone V3 之前的版本中，资源分配是以 Tenant 为单位的，这不太符合现实世界中的层级关系。如一个公司在 Openstack 中拥有两个不同的项目，他需要管理两个 Tenant 来分别对应这两个项目，并对这两个 Tenant 中的用户分别分配角色。由于在 Tenant 之上并不存在一个更高层的概念，无法对 Tenant 进行统一的管理，所以这给多 Tenant 的用户带来了不便。为了解决这些问题，Keystone V3 提出了新的概念 Domain 和 Group。</p>
<p>Keystone V3 做出了许多变化和改进，我们选取其中较为重要的进行阐述：</p>
<ul>
<li>将 Tenant 改称为 Project</li>
<li>引入 Domain 的概念</li>
<li>引入 Group 的概念</li>
</ul>
<p>将 Tenant 改为 Project 并在其上添加 Domain 的概念，这更加符合现实世界和云服务的映射。</p>
<p>V3 利用 Domain 实现真正的多租户（multi-tenancy）架构，Domain 担任 Project 的高层容器。云服务的客户是 Domain 的所有者，他们可以在自己的 Domain 中创建多个 Projects、Users、Groups 和 Roles。通过引入 Domain，云服务客户可以对其拥有的多个 Project 进行统一管理，而不必再向过去那样对每一个 Project 进行单独管理。</p>
<p>Group 是一组 Users 的容器，可以向 Group 中添加用户，并直接给 Group 分配角色，那么在这个 Group 中的所有用户就都拥有了 Group 所拥有的角色权限。通过引入 Group 的概念，Keystone V3 实现了对用户组的管理，达到了同时管理一组用户权限的目的。这与 V2 中直接向 User/Project 指定 Role 不同，使得对云服务进行管理更加便捷。</p>
<h2 id="client-SDK使用"><a href="#client-SDK使用" class="headerlink" title="client SDK使用"></a>client SDK使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">1. 使用</span><br><span class="line">&gt;&gt;&gt; from keystoneclient.v2_0 import client</span><br><span class="line">&gt;&gt;&gt; keystone = client.Client(...)</span><br><span class="line">&gt;&gt;&gt; keystone.tenants.list() # List tenants</span><br><span class="line"></span><br><span class="line">2. 获得权限</span><br><span class="line">&gt;&gt;&gt; from keystoneclient.v2_0 import client</span><br><span class="line">&gt;&gt;&gt; username=&apos;adminUser&apos;</span><br><span class="line">&gt;&gt;&gt; password=&apos;secreetword&apos;</span><br><span class="line">&gt;&gt;&gt; tenant_name=&apos;openstackDemo&apos;</span><br><span class="line">&gt;&gt;&gt; auth_url=&apos;http://192.168.206.130:5000/v2.0&apos;</span><br><span class="line">&gt;&gt;&gt; keystone = client.Client(username=username, password=password,</span><br><span class="line">...                          tenant_name=tenant_name, auth_url=auth_url)</span><br><span class="line"></span><br><span class="line">3. 建立租户  </span><br><span class="line">&gt;&gt;&gt; from keystoneclient.v2_0 import client</span><br><span class="line">&gt;&gt;&gt; keystone = client.Client(...)</span><br><span class="line">&gt;&gt;&gt; keystone.tenants.create(tenant_name=&quot;openstackDemo&quot;,</span><br><span class="line">...                         description=&quot;Default Tenant&quot;, enabled=True)</span><br><span class="line"></span><br><span class="line">4. 建立用户 </span><br><span class="line">&gt;&gt;&gt; from keystoneclient.v2_0 import client</span><br><span class="line">&gt;&gt;&gt; keystone = client.Client(...)</span><br><span class="line">&gt;&gt;&gt; tenants = keystone.tenants.list()</span><br><span class="line">&gt;&gt;&gt; my_tenant = [x for x in tenants if x.name==&apos;openstackDemo&apos;][0]</span><br><span class="line">&gt;&gt;&gt; my_user = keystone.users.create(name=&quot;adminUser&quot;,</span><br><span class="line">...                                 password=&quot;secretword&quot;,</span><br><span class="line">...                                 tenant_id=my_tenant.id)</span><br><span class="line"></span><br><span class="line">5. 建立角色和增加用户</span><br><span class="line">&gt;&gt;&gt; from keystoneclient.v2_0 import client</span><br><span class="line">&gt;&gt;&gt; keystone = client.Client(...)</span><br><span class="line">&gt;&gt;&gt; role = keystone.roles.create(&apos;admin&apos;)</span><br><span class="line">&gt;&gt;&gt; my_tenant = ...</span><br><span class="line">&gt;&gt;&gt; my_user = ...</span><br><span class="line">&gt;&gt;&gt; keystone.roles.add_user_role(my_user, role, my_tenant)</span><br><span class="line"></span><br><span class="line">6. 建立服务和endpoints</span><br><span class="line">&gt;&gt;&gt; from keystoneclient.v2_0 import client</span><br><span class="line">&gt;&gt;&gt; keystone = client.Client(...)</span><br><span class="line">&gt;&gt;&gt; service = keystone.services.create(name=&quot;nova&quot;, service_type=&quot;compute&quot;,</span><br><span class="line">...                                    description=&quot;Nova Compute Service&quot;)</span><br><span class="line">&gt;&gt;&gt; keystone.endpoints.create(</span><br><span class="line">...     region=&quot;RegionOne&quot;, service_id=service.id,</span><br><span class="line">...     publicurl=&quot;http://192.168.206.130:8774/v2/%(tenant_id)s&quot;,</span><br><span class="line">...     adminurl=&quot;http://192.168.206.130:8774/v2/%(tenant_id)s&quot;,</span><br><span class="line">...     internalurl=&quot;http://192.168.206.130:8774/v2/%(tenant_id)s&quot;)</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="https://blog.csdn.net/dylloveyou/article/details/80329732" target="_blank" rel="external">https://blog.csdn.net/dylloveyou/article/details/80329732</a></p>
<p><a href="https://www.tinymind.net.cn/articles/f439532f8b1a63" target="_blank" rel="external">https://www.tinymind.net.cn/articles/f439532f8b1a63</a></p>
<p><a href="https://blog.csdn.net/jiajiastudy/article/details/9011407" target="_blank" rel="external">https://blog.csdn.net/jiajiastudy/article/details/9011407</a></p>
<p><a href="https://blog.csdn.net/weixin_34268753/article/details/85847424" target="_blank" rel="external">https://blog.csdn.net/weixin_34268753/article/details/85847424</a></p>
<p><a href="https://www.cnblogs.com/hustlijian/p/3603992.html" target="_blank" rel="external">https://www.cnblogs.com/hustlijian/p/3603992.html</a></p>
<p><a href="https://www.codercto.com/a/19667.html" target="_blank" rel="external">https://www.codercto.com/a/19667.html</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
            <tag> Keystone </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[openstack之pbr的使用]]></title>
      <url>https://magiceses.github.io/2017/10/01/openstack-pbr%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">努力和上进，不是为了做给别人看，是为了不辜负自己，不辜负此生。<br></p>

<p>pbr库是一个使用统一方式管理setuptools包的库。pbr库通过一个setup钩子函数读取并过滤setup.cfg中的数据，以填充默认值并提供更多合理的操作；然后将结果作为参数返回给setup.py。因此，处理Python包安装的大量繁重工作仍然交给setuptools包处理，pbr只为setuptools读取和过滤所需要的参数即可。需要注意的是，pbr并不支持setuptools的easy_install功能，尽管pbr依赖setup_requires，但对于install_requires还是需要手动或使用pip进行安装。本文将详细分析pbr的实现原理和使用方法。</p>
<h2 id="pbr的使用场景"><a href="#pbr的使用场景" class="headerlink" title="pbr的使用场景"></a>pbr的使用场景</h2><p>目前，pbr可以实现很多功能，主要包括以下几个方面：</p>
<a id="more"></a>
<ul>
<li>version：基于git的修订版本和标签来管理版本号；</li>
<li>AUTHORS：从git log命令生成AUTHORS文件；</li>
<li>ChangeLog：从git log命令生成ChangeLog文件；</li>
<li>Manifest：从git文件和一些标准文件中生成一个合理的Manifest清单；</li>
<li>Sphinx Autodoc：为整个模块生成autodoc存根文件；</li>
<li>Requirements：将依赖库保存在一个pip的requirements文件中；</li>
<li>long_description：使用README文件作为一个库的描述信息；</li>
<li>Smart find_packages：在根目录下智能找到相应的软件包。</li>
</ul>
<h2 id="pbr的实现原理"><a href="#pbr的实现原理" class="headerlink" title="pbr的实现原理"></a>pbr的实现原理</h2><h3 id="hook的实现"><a href="#hook的实现" class="headerlink" title="hook的实现"></a>hook的实现</h3><p>本文开始介绍pbr会通过一个setup钩子函数读取并过滤setup.cfg文件中的数据，因此本文首先就来介绍一下pbr的hook函数的实现。pbr的hook函数的实现都放在pbr.hooks中，首先pbr创建了一个配置基类BaseConfig，该类中首先定义了一个钩子方法hook()的空实现，然后定义了一个save()方法保存配置信息，最后定义了一个模板方法run()。在这个模板方法中，首先调用hook()方法过滤读取到的配置信息，然后调用save()方法保存过滤后的配置信息。因此，在实现具体的配置实体时，需要重写hook()和save()方法。而pbr的hook函数的实现主要包括以下几个：</p>
<ul>
<li>MetadataConfig类：该类获取setup.cfg文件中section为metadata的配置信息，即获取待安装的包的元数据，包括其名称、版本、描述等信息；</li>
<li>CommandsConfig类：该类获取setup.cfg文件中section为global的配置信息，即获取一些安装命令对应的程序；</li>
<li>FilesConfig类：该类获取setup.cfg文件中section为files的配置信息，即获取对应的包与配置文件路径等；</li>
<li>BackwardsCompatConfig类：该类获取setup.cfg文件中section为backwards_compat的配置信息，即获取依赖相关的配置信息。</li>
</ul>
<p>为了使用这些钩子函数获取对应的配置信息，pbr在pbr.hooks模块下定义了setup_hooks()方法调用了上述这些钩子函数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pbr.hooks <span class="keyword">import</span> backwards</span><br><span class="line"><span class="keyword">from</span> pbr.hooks <span class="keyword">import</span> commands</span><br><span class="line"><span class="keyword">from</span> pbr.hooks <span class="keyword">import</span> files</span><br><span class="line"><span class="keyword">from</span> pbr.hooks <span class="keyword">import</span> metadata</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_hook</span><span class="params">(config)</span>:</span></span><br><span class="line">    <span class="string">"""Filter config parsed from a setup.cfg to inject our defaults."""</span></span><br><span class="line">    metadata_config = metadata.MetadataConfig(config)</span><br><span class="line">    metadata_config.run()</span><br><span class="line">    backwards.BackwardsCompatConfig(config).run()</span><br><span class="line">    commands.CommandsConfig(config).run()</span><br><span class="line">    files.FilesConfig(config, metadata_config.get_name()).run()</span><br></pre></td></tr></table></figure>
<h3 id="pbr的实现"><a href="#pbr的实现" class="headerlink" title="pbr的实现"></a>pbr的实现</h3><p>上面介绍了pbr中定义的钩子函数，接下来将会结合钩子函数讨论pbr的实现。使用pbr安装包的实现主要放在pbr.core模块中，在该模块中主要定义了一个pbr(dist, attr, value)方法来获取安装时所需要的参数。在使用中，除了setup_requires外，pbr方法应该是setup()方法的唯一参数。该方法首先获取setup.cfg文件的路径，然后会调用pbr.util模块中的cfg_to_args(path=’setup.cfg’, script_args=())方法获取setuptools所需的配置参数。</p>
<p>cfg_to_args(path=’setup.cfg’, script_args=())方法则是通过配置的setup_hooks()方法读取setup.cfg文件中的配置信息，除了使用hook函数外，该方法还对一些可选配置项进行了读取，如entry_endpoints等，然后将结果作为参数返回给setup()方法进行软件包安装操作。</p>
<p>当然，除了实现pbr功能外，针对第1节中提到的使用场景，pbr库都有相应的实现，在此不再作过多分析，感兴趣的朋友可以参考 <a href="https://docs.openstack.org/pbr/latest/" target="_blank" rel="external">pbr官方文档</a>。</p>
<h2 id="pbr的使用"><a href="#pbr的使用" class="headerlink" title="pbr的使用"></a>pbr的使用</h2><p>pbr的实现非常简单，这里以nova组件的setup为例简单介绍一下pbr的使用。通过上述分析，我们知道使用pbr，首先需要一个setup.cfg配置文件，nova组件的setup.cfg配置文件内容如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">[metadata]</span><br><span class="line">name = nova</span><br><span class="line">summary = Cloud computing fabric controller</span><br><span class="line">description-file =</span><br><span class="line">    README.rst</span><br><span class="line">author = OpenStack</span><br><span class="line">author-email = openstack-dev@lists.openstack.org</span><br><span class="line">home-page = https://docs.openstack.org/nova/latest/</span><br><span class="line">classifier =</span><br><span class="line">    Environment :: OpenStack</span><br><span class="line">    Intended Audience :: Information Technology</span><br><span class="line">    Intended Audience :: System Administrators</span><br><span class="line">    License :: OSI Approved :: Apache Software License</span><br><span class="line">    Operating System :: POSIX :: Linux</span><br><span class="line">    Programming Language :: Python</span><br><span class="line">    Programming Language :: Python :: 2</span><br><span class="line">    Programming Language :: Python :: 2.7</span><br><span class="line">    Programming Language :: Python :: 3</span><br><span class="line">    Programming Language :: Python :: 3.5</span><br><span class="line"> </span><br><span class="line">[global]</span><br><span class="line">setup-hooks =</span><br><span class="line">    pbr.hooks.setup_hook</span><br><span class="line"> </span><br><span class="line">[files]</span><br><span class="line">data_files =</span><br><span class="line">    etc/nova =</span><br><span class="line">        etc/nova/api-paste.ini</span><br><span class="line">        etc/nova/rootwrap.conf</span><br><span class="line">    etc/nova/rootwrap.d = etc/nova/rootwrap.d/*</span><br><span class="line">packages =</span><br><span class="line">    nova</span><br><span class="line"> </span><br><span class="line">[entry_points]</span><br><span class="line">oslo.config.opts =</span><br><span class="line">    nova.conf = nova.conf.opts:list_opts</span><br><span class="line"> </span><br><span class="line">oslo.config.opts.defaults =</span><br><span class="line">    nova.conf = nova.common.config:set_middleware_defaults</span><br><span class="line"> </span><br><span class="line">oslo.policy.enforcer =</span><br><span class="line">    nova = nova.policy:get_enforcer</span><br><span class="line"> </span><br><span class="line">oslo.policy.policies =</span><br><span class="line">    # The sample policies will be ordered by entry point and then by list</span><br><span class="line">    # returned from that entry point. If more control is desired split out each</span><br><span class="line">    # list_rules method into a separate entry point rather than using the</span><br><span class="line">    # aggregate method.</span><br><span class="line">    nova = nova.policies:list_rules</span><br><span class="line"> </span><br><span class="line">nova.compute.monitors.cpu =</span><br><span class="line">    virt_driver = nova.compute.monitors.cpu.virt_driver:Monitor</span><br><span class="line"> </span><br><span class="line">console_scripts =</span><br><span class="line">    nova-api = nova.cmd.api:main</span><br><span class="line">    nova-api-metadata = nova.cmd.api_metadata:main</span><br><span class="line">    nova-api-os-compute = nova.cmd.api_os_compute:main</span><br><span class="line">    nova-cells = nova.cmd.cells:main</span><br><span class="line">    nova-compute = nova.cmd.compute:main</span><br><span class="line">    nova-conductor = nova.cmd.conductor:main</span><br><span class="line">    nova-console = nova.cmd.console:main</span><br><span class="line">    nova-consoleauth = nova.cmd.consoleauth:main</span><br><span class="line">    nova-dhcpbridge = nova.cmd.dhcpbridge:main</span><br><span class="line">    nova-manage = nova.cmd.manage:main</span><br><span class="line">    nova-network = nova.cmd.network:main</span><br><span class="line">    nova-novncproxy = nova.cmd.novncproxy:main</span><br><span class="line">    nova-policy = nova.cmd.policy_check:main</span><br><span class="line">    nova-rootwrap = oslo_rootwrap.cmd:main</span><br><span class="line">    nova-rootwrap-daemon = oslo_rootwrap.cmd:daemon</span><br><span class="line">    nova-scheduler = nova.cmd.scheduler:main</span><br><span class="line">    nova-serialproxy = nova.cmd.serialproxy:main</span><br><span class="line">    nova-spicehtml5proxy = nova.cmd.spicehtml5proxy:main</span><br><span class="line">    nova-status = nova.cmd.status:main</span><br><span class="line">    nova-xvpvncproxy = nova.cmd.xvpvncproxy:main</span><br><span class="line">wsgi_scripts =</span><br><span class="line">    nova-placement-api = nova.api.openstack.placement.wsgi:init_application</span><br><span class="line">    nova-api-wsgi = nova.api.openstack.compute.wsgi:init_application</span><br><span class="line">    nova-metadata-wsgi = nova.api.metadata.wsgi:init_application</span><br><span class="line"> </span><br><span class="line">nova.ipv6_backend =</span><br><span class="line">    rfc2462 = nova.ipv6.rfc2462</span><br><span class="line">    account_identifier = nova.ipv6.account_identifier</span><br><span class="line"> </span><br><span class="line">nova.scheduler.host_manager =</span><br><span class="line">    host_manager = nova.scheduler.host_manager:HostManager</span><br><span class="line">    ironic_host_manager = nova.scheduler.ironic_host_manager:IronicHostManager</span><br><span class="line"> </span><br><span class="line">nova.scheduler.driver =</span><br><span class="line">    filter_scheduler = nova.scheduler.filter_scheduler:FilterScheduler</span><br><span class="line">    caching_scheduler = nova.scheduler.caching_scheduler:CachingScheduler</span><br><span class="line">    chance_scheduler = nova.scheduler.chance:ChanceScheduler</span><br><span class="line">    fake_scheduler = nova.tests.unit.scheduler.fakes:FakeScheduler</span><br><span class="line"> </span><br><span class="line">[build_sphinx]</span><br><span class="line">all_files = 1</span><br><span class="line">build-dir = doc/build</span><br><span class="line">source-dir = doc/source</span><br><span class="line">warning-is-error = 1</span><br><span class="line"> </span><br><span class="line">[build_apiguide]</span><br><span class="line">all_files = 1</span><br><span class="line">build-dir = api-guide/build</span><br><span class="line">source-dir = api-guide/source</span><br><span class="line"> </span><br><span class="line">[egg_info]</span><br><span class="line">tag_build =</span><br><span class="line">tag_date = 0</span><br><span class="line">tag_svn_revision = 0</span><br><span class="line"> </span><br><span class="line">[compile_catalog]</span><br><span class="line">directory = nova/locale</span><br><span class="line">domain = nova</span><br><span class="line"> </span><br><span class="line">[update_catalog]</span><br><span class="line">domain = nova</span><br><span class="line">output_dir = nova/locale</span><br><span class="line">input_file = nova/locale/nova.pot</span><br><span class="line"> </span><br><span class="line">[extract_messages]</span><br><span class="line">keywords = _ gettext ngettext l_ lazy_gettext</span><br><span class="line">mapping_file = babel.cfg</span><br><span class="line">output_file = nova/locale/nova.pot</span><br><span class="line"> </span><br><span class="line">[wheel]</span><br><span class="line">universal = 1</span><br><span class="line"> </span><br><span class="line">[extras]</span><br><span class="line">osprofiler =</span><br><span class="line">  osprofiler&gt;=1.4.0 # Apache-2.0</span><br></pre></td></tr></table></figure>
<p>接下来，只需要添加一个setup.py安装脚本即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"> </span><br><span class="line"><span class="comment"># In python &lt; 2.7.4, a lazy loading of package `pbr` will break</span></span><br><span class="line"><span class="comment"># setuptools if some other modules registered functions in `atexit`.</span></span><br><span class="line"><span class="comment"># solution from: http://bugs.python.org/issue15881#msg170215</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> multiprocessing  <span class="comment"># noqa</span></span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">setuptools.setup(</span><br><span class="line">    setup_requires=[<span class="string">'pbr&gt;=2.0.0'</span>],</span><br><span class="line">    pbr=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<p>在这个脚本中，主要调用了setuptools.setup()方法，需要注意的是，在这个方法中，设置了pbr=True的参数，这就是说在使用setuptools进行安装时，会调用pbr.pbr()方法通过hook函数获取setup.cfg中的配置参数。</p>
<p>最后执行如下命令就可以执行安装了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟化技术各个专有名词和概念总结]]></title>
      <url>https://magiceses.github.io/2017/10/01/openstack-%E8%99%9A%E6%8B%9F%E5%8C%96%E5%90%8D%E8%AF%8D/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">不是每一次努力都会有收获，但是每一次收获都必须努力，这是不可逆转的。<br></p>

<h1 id="虚拟化技术各个专有名词和概念总结"><a href="#虚拟化技术各个专有名词和概念总结" class="headerlink" title="虚拟化技术各个专有名词和概念总结"></a>虚拟化技术各个专有名词和概念总结</h1><h2 id="虚拟化定义"><a href="#虚拟化定义" class="headerlink" title="虚拟化定义"></a>虚拟化定义</h2><p>虚拟化主要指的是特殊的技术，通过隐藏特定计算平台的实际物理特性，为用户提供抽象的、统一的、模拟的计算环境（称为虚拟机）(IBM定义)。虚拟化为有效利用大型机的资源提供了技术支持。虚拟机技术也是多种多样，而可以虚拟的层次或者可虚拟的方面也是遍布从硬件到应用层整个计算机系统。如图片所示：</p>
<a id="more"></a>
<p><img src="/images/openstack-1.jpeg" alt="img"></p>
<h2 id="虚拟机分类"><a href="#虚拟机分类" class="headerlink" title="虚拟机分类"></a>虚拟机分类</h2><p>虚拟机的分类也是多种多样。可以通过是否在裸机上部署来分为面向主机的的虚拟机和面向裸机的虚拟机。面向主机的虚拟机是指的在一台已经安装操作系统的主机上安装虚拟机管理(VMM)程序，而面向裸机的是指在裸机上直接安装虚拟机管理程序，所有的虚拟机调用都是直接由虚拟机管理程序来负责，没有了操作系统这一步，所以这种方式在效率上要高于面向主机的。不过，比较流行的技术比如vmware，xen都是面向主机的。</p>
<p>然后根据上面的图去分类的话，可以分为对硬件的虚拟和对操作系统或者对软件的虚拟。在硬件虚拟化这个层面，又有三种不同的技术：</p>
<p>1）Full Virtualization（全虚拟化），几乎是完整地模拟一套真实的硬件设备。大部分操作系统无须进行任何修改即可直接运行在全虚拟化环境中。像kvm等技术是全虚拟化。</p>
<p>2）Partial Virtualization（部分虚拟化），仅仅提供了对关键性计算组件或者指令集的模拟。操作系统可能需要做某些修改才能够运行在部分虚拟化环境中。</p>
<p>3）Paravirtualization（半虚拟化），不对硬件设备进行模拟，虚拟机拥有独立的运行环境，通过虚拟机管理程序共享底层的硬件资源。大部分操作系统需要进行修改才能够运行在半虚拟化环境中。它的性能要稍微高于全虚拟化。像Xen。因为需要改动托管系统的内核，所以xen是不支持win虚拟机的。</p>
<p>另外还有像硬件辅助虚拟化，就是宿主机的硬件架构在一定程度上提供对虚拟化的支持。像Intel-VT与AMD-V都提供了这等架构支持，请参考给出的参考资料。</p>
<p>软件层面的虚拟化，往往是指在同一个操作系统实例的基础上提供多个隔离的虚拟运行环境，也常常被称为容器技术。LXC（Linux Container）则是采用了这种技术，它主要是采用了linux本身提供的技术，在一定程度上模拟虚拟化。软件虚拟化也可以理解成进程级虚拟机，其他虚拟化成为系统级虚拟机。在进程级虚拟机中负责虚拟化的软件成为运行时软件，而系统级虚拟机中负责虚拟化的软件成为VMM(Virtual Machine Monitor)</p>
<p>对于硬件与软件虚拟化两种技术，都是存在优点和缺点。对于硬件虚拟化，我们讨论全虚拟化和部分虚拟化。因为现在大部分的虚拟化技术Xen、kvm都支持这两种。硬件虚拟化基本上就是在一台宿主机上虚拟了整个系统，各台虚拟机之间相互不可见。这会很明显导致很多重复的线程和重复的内存页出现，性能上肯定会有影响。所以采用这种技术，一台宿主机上虚拟机的个数肯定会有一定限制。</p>
<p>对于软件虚拟化，我们讨论LXC，因为只有这一种我用过。LXC是通过cgroup对线程进行隔离，对资源进行限制；通过Namespace对调用系统提供的系统调用来进行资源隔离。<a href="http://lxc.sourceforge.net/" target="_blank" rel="external">LXC介绍</a>。通过此也可以看出，它所有虚拟化出来的虚拟机都是运行在宿主机本身上的，它的线程和资源对宿主机都是可见的。这就不存在很多重复的线程和内存也的问题，所以一台宿主机上可以通过此技术虚拟出更多的虚拟机。</p>
<p>最近非常流行的Docker也是软件虚拟化的一种，它的原理也是使用了linux提供的namespace对资源进行隔离，不过它提供了比LXC更强大的功能实现。</p>
<h2 id="Hypervisor"><a href="#Hypervisor" class="headerlink" title="Hypervisor"></a>Hypervisor</h2><h3 id="Hypervisor是什么？"><a href="#Hypervisor是什么？" class="headerlink" title="Hypervisor是什么？"></a>Hypervisor是什么？</h3><p>Hypervisor 是一种运行在物理服务器和操作系统之间的中间软件层（可以是软件程序，也可以是固件程序），可允许多个操作系统和应用共享一套基础物理硬件，因此也可以看作是虚拟环境中的“元”操作系统，它可以协调访问服务器上的所有物理设备和虚拟机，也叫虚拟机监视器VMM（Virtual Machine Monitor）。</p>
<p>Hypervisor是所有虚拟化技术的核心。非中断地支持多工作负载迁移的能力是Hypervisor的基本功能。当服务器启动并执行Hypervisor时，它会给每一台虚拟机分配适量的内存、CPU、网络和磁盘，并加载所有虚拟机的客户操作系统。</p>
<p>Hypervisor 翻译过来就是超级监督者，被引申用为超级管理程序、超多功能管理器、虚拟机管理器、VMM。</p>
<h3 id="Hypervisor分类"><a href="#Hypervisor分类" class="headerlink" title="Hypervisor分类"></a>Hypervisor分类</h3><p>I型：虚拟机直接运行在系统硬件上，创建硬件全仿真实例，被称为“裸机”型。—全虚拟化<br>裸机型在虚拟化中Hypervisor直接管理调用硬件资源，不需要底层操作系统，也可以将Hypervisor看作一个很薄的操作系统。这种方案的性能处于主机虚拟化与操作系统虚拟化之间。</p>
<ul>
<li>举例</li>
</ul>
<ol>
<li><a href="https://zh.wikipedia.org/wiki/VMware" target="_blank" rel="external">VMware</a>5.5及以后版本</li>
<li><a href="https://zh.wikipedia.org/wiki/Xen" target="_blank" rel="external">Xen</a>3.0以后版本</li>
<li><a href="https://zh.wikipedia.org/wiki/Virtual_PC" target="_blank" rel="external">Virtual PC</a> 2005</li>
<li><a href="https://zh.wikipedia.org/wiki/Kernel-based_Virtual_Machine" target="_blank" rel="external">KVM</a></li>
</ol>
<p>II型：虚拟机运行在传统操作系统上，同样创建的是硬件全仿真实例，被称为“托管（宿主）”型。托管型/主机型Hypervisor运行在基础操作系统上，构建出一整套虚拟硬件平台（CPU/Memory/Storage/Adapter），使用者根据需要安装新的操作系统和应用软件，底层和上层的操作系统可以完全无关化，如Windows运行Linux操作系统。主机虚拟化中VM的应用程序调用硬件资源时需要经过:VM内核-&gt;Hypervisor-&gt;主机内核，因此相对来说，性能是三种虚拟化技术中最差的。—半虚拟化</p>
<ul>
<li>举例</li>
</ul>
<ol>
<li>VMware5.5以前版本</li>
<li>Xen3.0以前版本</li>
<li>Virtual PC 2004</li>
</ol>
<p>Ⅲ型：虚拟机运行在传统操作系统上，创建一个独立的虚拟化实例（容器），指向底层托管操作系统，被称为“操作系统虚拟化”。操作系统虚拟化是在操作系统中模拟出运行应用程序的容器，所有虚拟机共享内核空间，性能最好，耗费资源最<br>少。但是缺点是底层和上层必须使用同一种操作系统，如底层操作系统运行的是Windows系统，则VPS/VE就必须运行Windows。</p>
<h2 id="KVM"><a href="#KVM" class="headerlink" title="KVM"></a>KVM</h2><p>对于kvm来说，其是一款支持虚拟机技术，而且是linux内核中的一个功能模块。它在linux2.6.20之后的任何linux分支中都被支持。它还有一个条件，对硬件要求的条件，必须达到一定标准的硬件架构。对于Intel-VT与AMD-V都是支持的。对于是否支持也可以通过命令行查看：egrep ‘(vmx|svm)’ –color=always /proc/cpuinfo。如果有任何内容则说明当期硬件架构是支持kvm的，否则就不支持。另外，就算支持，但是在bios中是默认设置不打开该功能的，所以你还要去bios设置其为enable。当设置成功之后，还需要关机一次，注意是关机而不是重启。否则该设置的更改就不起效。kvm安装请google。</p>
<h2 id="QEMU"><a href="#QEMU" class="headerlink" title="QEMU"></a>QEMU</h2><p>说明：个人理解，KVM是内核虚拟化技术，而内核是不能使用在界面上使用的，那么此时QEMU提供了用户级别的使用界面，相互辅助。当然，单独使用QEMU也是可以实现一整套虚拟机，不过QEMU+KVM基本是标配Linux虚拟机管理工具。</p>
<p>qemu是什么那。其实它也是一款虚拟化技术，就算不使用kvm，单传的qemu也可以完全实现一个虚拟机。那为何还会有qemu-kvm这个名词那。是因为虽然kvm的技术已经相当成熟而且可以对很多东西进行隔离，但是在某些方面还是无法虚拟出真实的机器。比如对网卡的虚拟，那这个时候就需要另外的技术来做补充，而qemu-kvm则是这样一种技术。它补充了kvm技术的不足，而且在性能上对kvm进行了优化。</p>
<h2 id="libvirt"><a href="#libvirt" class="headerlink" title="libvirt"></a>libvirt</h2><p>libvirt又是个什么东东。它是一系列提供出来的库函数，用以其他技术调用，来管理机器上的虚拟机。包括各种虚拟机技术，kvm、xen与lxc等，都可以调用libvirt提供的api对虚拟机进行管理。有这么多的虚拟机技术，它为何能提供这么多的管理功能那。是因为它的设计理念，它是面向驱动的架构设计。对任何一种虚拟机技术都开发设计相对于该技术的驱动。这样不同虚拟机技术就可以使用不同驱动，而且相互直接不会影响，方便扩展。而且libvirt提供了多种语言的编程接口，可以直接通过编程，调用libvirt提供的对外接口实现对虚拟机的操作。如今流行的云计算中的IaaS是与该库联系相当密切的。通过下图可以看出它的架构设计思想。</p>
<p>从该图可以看出，在libvirt api之上会有很多个driver，对于每一种虚拟机技术都会有一种driver，用来充当该虚拟机技术与libvirt之间的包装接口。如此设计就可以避免libvirt需要设计各种针对不同虚拟机技术的接口，它主要关注底层的实现，提供对外接口调用，而不同的虚拟机技术通过调用libvirt提供的接口来完成自己所需要的功能。</p>
<p><img src="/images/openstack-2.gif" alt="img"></p>
<p>参考：</p>
<p><a href="https://blog.csdn.net/zwan0518/article/details/10613481" target="_blank" rel="external">https://blog.csdn.net/zwan0518/article/details/10613481</a></p>
]]></content>
      
        <categories>
            
            <category> Openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Openstack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决 Cannot assign requested address]]></title>
      <url>https://magiceses.github.io/2017/06/25/python-web-%E6%9C%89%E5%85%B3TCP%E7%9A%84%E9%97%AE%E9%A2%98%E8%B0%83%E6%9F%A5/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">有一种底气，叫做你能行！有一种豪气，叫做你可以！有一种霸气，叫做你最棒！不要总是瞻前顾后，想做的事，就大胆地做。只有迈出脚下那一步，人生才会与众不同。<br></p>

<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>问题场景：</p>
<p>容器内访问出现以下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to establish a new connection: [Errno 99] Cannot assign requested address</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>网上找了下原因，大致上是由于客户端频繁的连服务器，由于每次连接都在很短的时间内结束，导致很多的TIME_WAIT，以至于用光了可用的端 口号，所以新的连接没办法绑定端口，但是使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i | grep -E <span class="string">"TIME_WAIT"</span></span><br></pre></td></tr></table></figure>
<p>没有发现有残留，但是</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i | grep -E <span class="string">"CLOSE_WAIT"</span></span><br></pre></td></tr></table></figure>
<p>处于 close_wait 状态的连接却是很多，高达两万多条</p>
<blockquote>
<p>通过下述命令也可以查看当前端口占用及分类</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">netstat -n | awk &apos;/^tcp/ &#123;++state[$NF]&#125; END &#123;for(key in state) print key,&quot;\t&quot;,state[key]&#125;&apos;</span><br><span class="line"></span><br><span class="line">CLOSE_WAIT       27352</span><br><span class="line">SYN_SENT         4</span><br><span class="line">ESTABLISHED      58</span><br><span class="line">TIME_WAIT				 4</span><br></pre></td></tr></table></figure>
<p>先看下端口状态的大致说明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">CLOSED: 这个没什么好说的了，表示初始状态。</span><br><span class="line"></span><br><span class="line">LISTEN: 这个也是非常容易理解的一个状态，表示服务器端的某个SOCKET处于监听状态，可以接受连接了。</span><br><span class="line"></span><br><span class="line">SYN_RCVD: 这个状态表示接受到了SYN报文，在正常情况下，这个状态是服务器端的SOCKET在建立TCP连接时的三次握手会话过程中的一个中间状态，很短暂，基本上用netstat你是很难看到这种状态的，除非你特意写了一个客户端测试程序，故意将三次TCP握手过程中最后一个ACK报文不予发送。因此这种状态时，当收到客户端的ACK报文后，它会进入到ESTABLISHED状态。</span><br><span class="line"></span><br><span class="line">SYN_SENT: 这个状态与SYN_RCVD遥想呼应，当客户端SOCKET执行CONNECT连接时，它首先发送SYN报文，因此也随即它会进入到了SYN_SENT状态，并等待服务端的发送三次握手中的第2个报文。SYN_SENT状态表示客户端已发送SYN报文。</span><br><span class="line"></span><br><span class="line">ESTABLISHED：这个容易理解了，表示连接已经建立了。</span><br><span class="line"></span><br><span class="line">FIN_WAIT_1: 这个状态要好好解释一下，其实FIN_WAIT_1和FIN_WAIT_2状态的真正含义都是表示等待对方的FIN报文。而这两种状态的区别是：FIN_WAIT_1状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET即进入到FIN_WAIT_1状态。而当对方回应ACK报文后，则进入到FIN_WAIT_2状态，当然在实际的正常情况下，无论对方何种情况下，都应该马上回应ACK报文，所以FIN_WAIT_1状态一般是比较难见到的，而FIN_WAIT_2状态还有时常常可以用netstat看到。</span><br><span class="line"></span><br><span class="line">FIN_WAIT_2：上面已经详细解释了这种状态，实际上FIN_WAIT_2状态下的SOCKET，表示半连接，也即有一方要求close连接，但另外还告诉对方，我暂时还有点数据需要传送给你，稍后再关闭连接。</span><br><span class="line"></span><br><span class="line">TIME_WAIT: 表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。如果FIN_WAIT_1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。</span><br><span class="line"></span><br><span class="line">CLOSING: 这种状态比较特殊，实际情况中应该是很少见，属于一种比较罕见的例外状态。正常情况下，当你发送FIN报文后，按理来说是应该先收到（或同时收到）对方的ACK报文，再收到对方的FIN报文。但是CLOSING状态表示你发送FIN报文后，并没有收到对方的ACK报文，反而却也收到了对方的FIN报文。什么情况下会出现此种情况呢？其实细想一下，也不难得出结论：那就是如果双方几乎在同时close一个SOCKET的话，那么就出现了双方同时发送FIN报文的情况，也即会出现CLOSING状态，表示双方都正在关闭SOCKET连接。</span><br><span class="line"></span><br><span class="line">CLOSE_WAIT: 这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是察看你是否还有数据发送给对方，如果没有的话，那么你也就可以close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。</span><br><span class="line"></span><br><span class="line">LAST_ACK: 这个状态还是比较容易好理解的，它是被动关闭一方在发送FIN报文后，最后等待对方的ACK报文。当收到ACK报文后，也即可以进入到CLOSED可用状态了。</span><br></pre></td></tr></table></figure>
<p>要详细了解端口状态，需要从TCP的状态转换说起。</p>
<h1 id="TCP协议解析"><a href="#TCP协议解析" class="headerlink" title="TCP协议解析"></a>TCP协议解析</h1><h2 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h2><p><img src="/images/python-tcp-1.png" alt="在这里插入图片描述"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">16 位源端口，16 位目的端口：</span><br><span class="line">数据从何而来，去向何方。</span><br><span class="line"></span><br><span class="line">32 位序号，32 位确认序号：</span><br><span class="line">和 TCP 的 ACK 机制有关，发送端给数据进行编号，接收端收到数据后确认收到哪些编号的数据。</span><br><span class="line"></span><br><span class="line">4 位报头长度：</span><br><span class="line">表示 TCP 的首部占用多少个 4 字节。</span><br><span class="line"></span><br><span class="line">6 个标志位：</span><br><span class="line">SYN：简写为S，同步标志位，用于建立会话连接，同步序列号；</span><br><span class="line">ACK：简写为.，确认标志位，对已接收的数据包进行确认；</span><br><span class="line">FIN：简写为F，完成标志位，表示我已经没有数据要发送了，即将关闭连接；</span><br><span class="line">PSH：简写为P，推送标志位，表示该数据包被对方接收后应立即交给上层应用，而不在缓冲区排队；</span><br><span class="line">RST：简写为R，重置标志位，用于连接复位、拒绝错误和非法的数据包；</span><br><span class="line">URG：简写为U，紧急标志位，表示数据包的紧急指针域有效，用来保证连接不被阻断，并督促中间设备尽快处理；</span><br><span class="line"></span><br><span class="line">16 位窗口大小：</span><br><span class="line">和 TCP 滑动窗口相关，在下文。</span><br><span class="line"></span><br><span class="line">16 位校验和：</span><br><span class="line">发送端填充，CRC 校验，接收端校验不通过，则认为数据有问题。此处的检验和不光包含TCP首部，也包含TCP数据部分。</span><br><span class="line"></span><br><span class="line">16 位紧急指针：</span><br><span class="line">标识哪部分数据是紧急数据。</span><br></pre></td></tr></table></figure>
<p>上面是对<code>tcp</code>发送的报文做一个简单介绍，没兴趣的可以跳过</p>
<h2 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h2><p>先放个总图</p>
<p><img src="/images/python-tcp-2.png" alt="img"></p>
<h3 id="建立连接，三次握手"><a href="#建立连接，三次握手" class="headerlink" title="建立连接，三次握手"></a>建立连接，三次握手</h3><p><img src="/images/python-tcp-3.png" alt="三次握手"></p>
<p><strong>服务端</strong>：通过 socket，bind 和 listen 完成了被动套接字的准备工作，被动的意思就是等着别人来连接，然后调用 accept，就会阻塞在这里，等待客户端的连接来临；</p>
<p><strong>客户端</strong>：通过调用 socket 和 connect 函数之后，也会阻塞。接下来的事情是由操作系统内核完成的，更具体一点的说，是操作系统内核网络协议栈在工作。</p>
<p><strong>流程</strong>：</p>
<ol>
<li>客户端的协议栈向服务器端发送了 SYN 包，并告诉服务器端当前发送序列号 j，客户端进入 SYNC_SENT 状态；</li>
<li>服务器端的协议栈收到这个包之后，和客户端进行 ACK 应答，应答的值为 j+1，表示对 SYN 包 j 的确认，同时服务器也发送一个 SYN 包，告诉客户端当前我的发送序列号为 k，服务器端进入 SYNC_RCVD 状态；</li>
<li>客户端协议栈收到 ACK 之后，使得应用程序从 connect 调用返回，表示客户端到服务器端的单向连接建立成功，客户端的状态为 ESTABLISHED，同时客户端协议栈也会对服务器端的 SYN 包进行应答，应答数据为 k+1；</li>
<li>应答包到达服务器端后，服务器端协议栈使得 accept 阻塞调用返回，这个时候服务器端到客户端的单向连接也建立成功，服务器端也进入 ESTABLISHED 状态。</li>
</ol>
<p><strong>客户端状态变化</strong></p>
<ul>
<li>客户端调用 socket() 后，进入 CLOSED 状态。</li>
<li>客户端调用 connect()，发送 SYN 报文，进入 SYN_SENT 状态。</li>
<li>客户端在收到刚刚 SYN 报文的 ACK 后，进入 ESTABLISHED 状态，从 connect() 返回。</li>
</ul>
<p><strong>服务端状态变化</strong></p>
<ul>
<li>服务器调用 socket() 后，进入 CLOSED 状态。</li>
<li>服务器调用 bind(), listen() 后进入 LISTEN 状态，等待客户端连接，阻塞在 accept()。</li>
<li>收到 SYN 报文后进入 SYN_RCVD 状态，就将该连接放入内核等待队列中，返回 SYN + ACK 报文。</li>
<li>在客户端收到后，发送 ACK 报文，服务器从 accept() 返回，进入 ESTABLISHED 状态。</li>
<li>至此连接建立完成，客户端、服务端都进入了 已连接 状态，即 ESTABLISHED。</li>
</ul>
<p><strong>抓包数据</strong></p>
<p><code>tcpdump -i eth0 -S</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">07:37:06.157597 IP 192.168.1.10.945 &gt; 192.168.1.141.nfs: Flags [S], seq 2084759064, win 14600, options [mss 1460,sackOK,TS val 223408 ecr 0,nop,wscale 2], length 0</span><br><span class="line">07:37:06.157660 IP 192.168.1.141.nfs &gt; 192.168.1.10.945: Flags [S.], seq 2467243379, ack 2084759065, win 28960, options [mss 1460,sackOK,TS val 91684817 ecr 223408,nop,wscale 7], length 0</span><br><span class="line">07:37:06.158889 IP 192.168.1.10.945 &gt; 192.168.1.141.nfs: Flags [.], ack 2467243380, win 3650, options [nop,nop,TS val 223408 ecr 91684817], length 0</span><br></pre></td></tr></table></figure>
<ul>
<li>客户端–&gt;服务器： seq 2084759064,</li>
<li>服务器–&gt;客户端： seq 2467243379, ack 2084759065 //ack等于 客户端2084759064+1</li>
<li>客户端–&gt;服务器： ack 2467243380</li>
</ul>
<h3 id="断开连接，四次挥手"><a href="#断开连接，四次挥手" class="headerlink" title="断开连接，四次挥手"></a>断开连接，四次挥手</h3><p><img src="/images/python-tcp-4.png" alt="在这里插入图片描述"></p>
<p><strong>流程：</strong></p>
<p>挥手请求可以是Client端，也可以是Server端发起的，我们假设是Client端发起(主机1为client)</p>
<ol>
<li>第一次：Client端发起挥手请求，向Server端发送标志位是FIN报文段，设置序列号seq，此时，Client端进入FIN_WAIT_1状态，这表示Client端没有数据要发送给Server端了。</li>
<li>第二次：Server端收到了Client端发送的FIN报文段，向Client端返回一个标志位是ACK的报文段，ack设为seq加1，Client端进入FIN_WAIT_2状态，Server端告诉Client端，我确认并同意你的关闭请求。</li>
<li>第三次：Server端向Client端发送标志位是FIN的报文段，请求关闭连接，同时Client端进入LAST_ACK状态。</li>
<li>第四次：Client端收到Server端发送的FIN报文段，向Server端发送标志位是ACK的报文段，然后Client端进入TIME_WAIT状态。Server端收到Client端的ACK报文段以后，就关闭连接。此时，Client端等待2MSL的时间后依然没有收到回复，则证明Server端已正常关闭，那好，Client端也可以关闭连接了。</li>
</ol>
<p><strong>抓包分析</strong></p>
<p><strong>挥手包4条</strong></p>
<blockquote>
<p>说明：localhost.45788是客户端，localhost.ssh是服务器</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">23:13:14.956630 IP localhost.45788 &gt; localhost.ssh: Flags [F.], seq 3349160669, ack 377690074, win 342, options [nop,nop,TS val 1927014999 ecr 1927003705], length 0</span><br><span class="line">23:13:14.956738 IP localhost.ssh &gt; localhost.45788: Flags [.], ack 3349160670, win 342, options [nop,nop,TS val 1927015000 ecr 1927014999], length 0</span><br><span class="line">23:13:14.959316 IP localhost.ssh &gt; localhost.45788: Flags [F.], seq 377690074, ack 3349160670, win 342, options [nop,nop,TS val 1927015002 ecr 1927014999], length 0</span><br><span class="line">23:13:14.959328 IP localhost.45788 &gt; localhost.ssh: Flags [.], ack 377690075, win 342, options [nop,nop,TS val 1927015002 ecr 1927015002], length 0</span><br></pre></td></tr></table></figure>
<p><img src="/images/python-tcp-5.png" alt="在这里插入图片描述"></p>
<p><strong>客户端、服务器状态变化</strong></p>
<ul>
<li>客户端调用 close() ,发送一个FIN报文给服务器，客户端进入 FIN_WAIT_1 状态；</li>
<li>服务器收到 FIN 报文，响应一个ACK，也进入CLOSE_WAIT状态。</li>
<li>服务器 read() 获取到了EOF，则执行 close() ，发送FIN报文，此时进入 LAST_ACK 状态；</li>
<li>客户端收到服务器关于FIN的ACK报文，进入FIN_WAIT_2状态；</li>
<li>客户端收到服务器的FIN报文，进入 TIME_WAIT 状态，发送FIN的响应ACK给服务器；</li>
<li>客户端会在 TIME_WAIT 状态等待2MSL，然后进入CLOSE状态；</li>
</ul>
<p><strong>挥手包3条</strong></p>
<blockquote>
<p>说明：192.168.1.10.32823是客户端，192.168.1.141.9090是服务器</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11:34:53.378185 IP 192.168.1.10.32823 &gt; 192.168.1.141.9090: Flags [F.], seq 187740589, ack 2824594749, win 3650, options [nop,nop,TS val 79322 ecr 92901547], length 0</span><br><span class="line">11:34:53.378331 IP 192.168.1.141.9090 &gt; 192.168.1.10.32823: Flags [F.], seq 2824594749, ack 187740590, win 227, options [nop,nop,TS val 92904590 ecr 79322], length 0</span><br><span class="line">11:34:53.379595 IP 192.168.1.10.32823 &gt; 192.168.1.141.9090: Flags [.], ack 2824594750, win 3650, options [nop,nop,TS val 79322 ecr 92904590], length 0</span><br></pre></td></tr></table></figure>
<p><img src="/images/python-tcp-6.png" alt="在这里插入图片描述"></p>
<p><strong>出现的原因：这是TCP的捎带ACK机制，服务器将FIN的ACK和自己的FIN包一起发给了客户端</strong></p>
<h3 id="问题思考"><a href="#问题思考" class="headerlink" title="问题思考"></a>问题思考</h3><p>问题1：为什么客户端在TIME-WAIT状态必须等待2MSL的时间？</p>
<p>答：MSL最长报文段寿命Maximum Segment Lifetime，MSL=2</p>
<p>两个理由：1）保证A发送的最后一个ACK报文段能够到达B。2）防止“已失效的连接请求报文段”出现在本连接中。</p>
<ul>
<li>1）这个ACK报文段有可能丢失，使得处于LAST-ACK状态的B收不到对已发送的FIN+ACK报文段的确认，B超时重传FIN+ACK报文段，而A能在2MSL时间内收到这个重传的FIN+ACK报文段，接着A重传一次确认，重新启动2MSL计时器，最后A和B都进入到CLOSED状态，<strong>若A在TIME-WAIT状态不等待一段时间，而是发送完ACK报文段后立即释放连接，则无法收到B重传的FIN+ACK报文段，所以不会再发送一次确认报文段，则B无法正常进入到CLOSED状态。</strong></li>
<li>2）A在发送完最后一个ACK报文段后，再经过2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失，使下一个新的连接中不会出现这种旧的连接请求报文段。</li>
</ul>
<p>问题2：为什么连接的时候是三次握手，关闭的时候却是四次握手？</p>
<p>答：因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p>
<p>问题3：为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？</p>
<p>答：虽然按道理，四个报文都发送完毕，我们可以直接进入CLOSE状态了，但是我们必须假象网络是不可靠的，有可以最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。</p>
<p>根据上面的知识，我们再看下两种状态，而且一般来说，如果服务器出了异常，百分之八九十都是下面两种情况：</p>
<ul>
<li>服务器保持了大量TIME_WAIT状态</li>
<li>服务器保持了大量CLOSE_WAIT状态</li>
</ul>
<p>因为linux分配给一个用户的文件句柄是有限的，而TIME_WAIT和CLOSE_WAIT两种状态如果一直被保持，那么意味着对应数目的通道就一直被占着，而我们上面的背景中问题就是因为出现太多的CLOSE_WAIT。</p>
<p>下面来讨论下这两种情况的处理方法，网上有很多资料把这两种情况的处理方法混为一谈，以为优化系统内核参数就可以解决问题，其实是不恰当的，优化系统内核参数解决TIME_WAIT可能很容易，但是应对CLOSE_WAIT的情况还是需要从程序本身出发。现在来分别说说这两种情况的处理方法</p>
<h3 id="TIME-WAIT-状态"><a href="#TIME-WAIT-状态" class="headerlink" title="TIME_WAIT 状态"></a>TIME_WAIT 状态</h3><blockquote>
<p>TIME_WAIT: 表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。如果FIN_WAIT_1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。</p>
</blockquote>
<p><strong>服务器保持了大量TIME_WAIT状态</strong></p>
<p>这种情况比较常见，一些爬虫服务器或者WEB服务器（如果网管在安装的时候没有做内核参数优化的话）上经常会遇到这个问题，这个问题是怎么产生的呢？</p>
<p>TIME_WAIT是主动关闭连接的一方保持的状态，对于爬虫服务器来说他本身就是“客户端”，在完成一个爬取任务之后，他就会发起主动关闭连接，从而进入TIME_WAIT的状态，然后在保持这个状态2MSL（max segment lifetime）时间之后，彻底关闭回收资源。至于为啥要等，上面已经说过。</p>
<p><strong>如何来解决这个问题</strong></p>
<p>解决思路很简单，就是不要让处于TIME_WAIT的端口占满所有本地端口，导致没有新的本地端口用来创建新的客户端。</p>
<p><strong>1. 别让客户端的速率太快</strong></p>
<p>将客户端请求的速率降下来就可以避免端时间占用大量的端口，吞吐量限制就是470tps或者235tps，具体根据系统TIME_WAIT默认时长决定，如果考虑到其他服务正常运行这个值还要保守一些才行；此外还需要注意，如果客户端和服务端增加了一层NAT或者L7负载均衡，那么这个限制可能会在负载均衡器上面；</p>
<p><strong>2. 客户端改成长连接的形式</strong></p>
<p>长连接效率高又不会产生大量TIME_WAIT端口。目前对我们来说还是不太现实的，虽然HTTP支持长连接，但是CGI调用应该是不可能的了，除非用之前的介绍的方式将CGI的请求转换成HTTP服务来实现。对于一般socket直连的程序来说，短连接改成长连接就需要额外的封装来标识完整请求在整个字节流中的起始位置，需要做一些额外的工作；</p>
<p><strong>3. SO_LINGER选项</strong></p>
<p>通常我们关闭socket的时候，即使该连接的缓冲区有数据要发送，close调用也会立即返回，TCP本身会尝试发送这些未发送出去的数据，只不过应用程序不知道也无法知道是否发送成功过了。如果我们将套接字设置SO_LINGER这个选项，并填写linger结构设置参数，就可以控制这种行为：<br>如果linger结构的l_onoff==0，则linger选项就被关闭，其行为就和默认的close相同；如果打开，那么具体行为依据另外一个成员l_linger的值来确定：如果l_linger!=0，则内核会将当前close调用挂起，直到数据都发送完毕，或者设置的逗留时间超时返回，前者调用会返回0并且正常进入TIME_WAIT状态，后者调用会返回EWOULDBLOCK，所有未发送出去的数据可能会丢失（此处可能会向对端发送一个RST而快速关闭连接）；如果l_linger==0，则直接将缓冲区中未发送的数据丢弃，且向对等实体发送一个RST，自己不经过TIME_WAIT状态立即关闭连接。<br>我们都认为TIME_WAIT是TCP机制的正常组成部分，应用程序中不应该依赖设置l_linger=0这种机制避免TIME_WAIT。</p>
<p><strong>4. 修改系统参数</strong></p>
<ul>
<li><p>增加本地端口范围，修改net.ipv4.ip_local_port_range，虽然不能解决根本问题但情况可以得到一定的缓解；</p>
</li>
<li><p>缩短TIME_WAIT的时间。这个时长在书中描述到RFC推荐是2min，而BSD实现通常是30s，也就说明这个值是可以减小的，尤其我们用在内网通信的环境，数据包甚至都流不出路由器，所以根本不需要设置那么长的TIME_WAIT。这个很多资料说不允许修改，因为是写死在内核中的；也有说可以修改netfilter.ip_conntrack_tcp_timeout_time_wait(新版本nf_conntrack_tcp_timeout_time_wait)的，他们依赖于加载nf_conntract_ipv4模块，不过我试了一下好像不起作用。</p>
</li>
<li><p>像之前在项目中推荐的，做出如下调整：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_timestamps=1</span><br><span class="line">net.ipv4.tcp_tw_recycle=1</span><br></pre></td></tr></table></figure>
<p>很多文献说这种设置是不安全的，所以在测试环境以外就别尝试了，因为这些选项还涉及到timestamp特性，我还不清楚什么回事，后面有时间再看什么吧。</p>
<p>我们在开发服务端的时候，通常都会设置SO_REUSEADDR这个选项。其实像上面描述到的，该选项也牵涉到侦听socket端口处于TIME_WAIT的情况，设置这个选项将允许处于TIME_WAIT的端口进行绑定</p>
<h3 id="CLOSE-WAIT-状态"><a href="#CLOSE-WAIT-状态" class="headerlink" title="CLOSE_WAIT 状态"></a>CLOSE_WAIT 状态</h3><blockquote>
<p>CLOSE_WAIT: 这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是察看你是否还有数据发送给对方，如果没有的话，那么你也就可以close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。</p>
</blockquote>
<p>TIME_WAIT状态可以通过优化服务器参数得到解决，因为发生TIME_WAIT的情况是服务器自己可控的，要么就是对方连接的异常，要么就是自己没有迅速回收资源，总之不是由于自己程序错误导致的。</p>
<p>但是CLOSE_WAIT就不一样了，从上面的图可以看出来，如果一直保持在CLOSE_WAIT状态，那么只有一种情况，就是在对方关闭连接之后服务器程序自己没有进一步发出ack信号。换句话说，就是在对方连接关闭之后，程序里没有检测到，或者程序压根就忘记了这个时候需要关闭连接，于是这个资源就一直被程序占着。个人觉得这种情况，通过服务器内核参数也没办法解决，服务器对于程序抢占的资源没有主动回收的权利，除非终止程序运行。</p>
<p>所以如果将大量CLOSE_WAIT的解决办法总结为一句话那就是：查代码。因为问题出在服务器程序里头啊。</p>
<h3 id="两种状态区别"><a href="#两种状态区别" class="headerlink" title="两种状态区别"></a>两种状态区别</h3><p>场景说明：服务器A是一台爬虫服务器，它使用简单的HttpClient去请求资源服务器B上面的apache获取文件资源，正常情况下，如果请求成功，那么在抓取完资源后，服务器A会主动发出关闭连接的请求，这个时候就是主动关闭连接，服务器A的连接状态我们可以看到是TIME_WAIT。如果一旦发生异常呢？假设请求的资源服务器B上并不存在，那么这个时候就会由服务器B发出关闭连接的请求，服务器A就是被动的关闭了连接，如果服务器A被动关闭连接之后程序员忘了让HttpClient释放连接，那就会造成CLOSE_WAIT的状态了。</p>
<h1 id="解决方案分析"><a href="#解决方案分析" class="headerlink" title="解决方案分析"></a>解决方案分析</h1><h2 id="解决思路-1"><a href="#解决思路-1" class="headerlink" title="解决思路-1"></a>解决思路-1</h2><p>上面我们已经知道了连接处于 CLOSE_WAIT 状态是怎么回事了，一句话总结一下，就是 CLOSE_WAIT是被动关闭连接是形成的，即服务端主动断开了连接。那么问题来了，服务端为什么会主动断开连接，而不是客户端去处理？再有，我们知道，客户端断开连接会正常进行四次挥手的过程，那么服务端主动断开的话，会出现什么情况？</p>
<h3 id="TCP-两端分别主动断开连接分析"><a href="#TCP-两端分别主动断开连接分析" class="headerlink" title="TCP 两端分别主动断开连接分析"></a>TCP 两端分别主动断开连接分析</h3><h4 id="正常退出情况"><a href="#正常退出情况" class="headerlink" title="正常退出情况"></a>正常退出情况</h4><p>首先我们来看看一次服务器和客户端正常通信的情况。</p>
<p><img src="/images/python-tcp-7.png" alt="这里写图片描述"></p>
<p>当我们只打开服务端时，此时由于客户端没有向服务端发出连接请求，所以服务端此时处在<strong>LISTEN</strong>状态，这个状态称为监听状态，表示服务端在等待客户端的连接请求报文。</p>
<p><img src="/images/python-tcp-8.png" alt="这里写图片描述"></p>
<p>这次我们打开客户端，并且通过客户端向服务端发送数据，服务端页正常接收到了数据，此时服务端和客户端都处于ESTABLISHED状态，表示连接已经建立完成，即此时三次握手这个过程已经完毕，但是大家应该清楚，中间还有两次状态的切换客户端的SYN-SENT 以及 服务端的SYN-RCV.由于我们是手动监视，所以我们不能显示的看到这两个状态。</p>
<p><img src="/images/python-tcp-9.png" alt="这里写图片描述"></p>
<p>上图中，客户端在数据通信完成后想要结束掉与服务端的连接状态，我们直接通过按Ctrl + C 键向客户端发送了信号将客户端终止,此时，服务端应该也会向客户端发送ACK 字段的报文 相当于我们完成了四次挥手过程中的前两次挥手，通过指令的查看，我们发现结果确实也是那样，随后我们在Ctrl + C 掉服务端，完成了后两次挥手，整个通信过程也就完成了。</p>
<h4 id="异常终止的情况"><a href="#异常终止的情况" class="headerlink" title="异常终止的情况"></a>异常终止的情况</h4><p>上面的正常过程中，我们是让客户端比服务端先退出，这样满足了四次挥手过程的要求；现在我们让服务器在客户端前面退出，我们来看看这个过程发生了什么。<br>由于我们研究的情况是连接的异常终止情况，所以三次握手状态我们就不关心了，这里我们这研究连接的异常终止情况。</p>
<p><img src="/images/python-tcp-10.png" alt="这里写图片描述"></p>
<p>上图中，我们让服务端先退出，然后我们用<strong>netstat</strong>观察端口的状态，此时我们发现<strong>四次挥手过程中服务器和客户端的状态颠倒了</strong>， 也就是说，服务端和客户端的进程那个先向对方发送<strong>FIN 字段</strong>报文，那么哪个就先进入<strong>FIN_WAIT2</strong>状态。</p>
<p><img src="/images/python-tcp-11.png" alt="这里写图片描述"></p>
<p>上图发生的原因是这样的，当服务器进程被终止时，会关闭其打开的所有文件描述符，此时就会向客户端发送一个FIN 的报文,客户端则响应一个ACK 报文,但是这样只完成了“四次挥手”的前两次挥手，也就是说这样只实现了半关闭，客户端仍然可以向服务器写入数据。<br>但是当客户端向服务器写入数据时，由于服务器端的套接字进程已经终止，此时连接的状态已经异常了，所以服务端进程不会向客户端发送ACK 报文，而是发送了一个RST 报文请求将处于异常状态的连接复位； 如果客户端此时还要向服务端发送数据，将诱发服务端TCP向客户端发送SIGPIPE信号，因为向接收到RST的套接口写数据都会收到此信号. 所以说，这就是为什么我们主动关闭服务端后，用客户端向服务端写数据，还必须是写两次后连接才会关闭的原因。</p>
<p>大家可以在自己的Linux系统实验一下，用tcpdump去抓包效果会更好。</p>
<h2 id="解决思路-2"><a href="#解决思路-2" class="headerlink" title="解决思路-2"></a>解决思路-2</h2><p>上面我们已经知道了当 server 端主动断开的时候，也会正常完成四次挥手的过程，但是需要客户端主动关闭，或者直接程序结束，由 language 的 gc 机制来回收资源，那么上面的问题就很明朗了，要么就是 client 没有进行回收，要么进程没结束。这个需要具体看下代码才能知道，下面看下对我的解决方案。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>由于我用的是 python 的 requests 库来进行 api 请求，所以简单说下两个方案：</p>
<ol>
<li>客户端调用 close 强制回收；</li>
<li>客户端打开 Socket 的 keepalive 机制，通过类似心跳的功能解决。</li>
</ol>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>调用 close 方案不用说，直接调用类似 <code>request.Session().close()</code> 即可；</p>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>修改 socket 的 keepalive 属性，在 python 的 requests 库中这个属性是默认没有配置的（在linux中默认值是0，即<a href="https://blog.csdn.net/weixin_39540568/article/details/87889811" target="_blank" rel="external">关闭</a>），在该库中对 socket 的设置的默认值只有一个 <code>(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)</code> ，这个是用来控制是否开启Nagle算法，该算法是为了提高较慢的广域网传输效率，减小小分组的报文个数，完整描述：</p>
<blockquote>
<p>该算法要求一个TCP连接上最多只能有一个未被确认的小分组，在该小分组的确认到来之前，不能发送其他小分组。</p>
</blockquote>
<p>这里的小分组指的是报文长度小于MSS(Max Segment Size)长度的分组（MSS是在TCP握手的时候在报文选项里面进行通告的大小，主要是用来限制另一端发送数据的长度，防止IP数据包被分段，提高效率，一般是链路层的传输最大传输单元大小减去IP首部与TCP首部大小）。</p>
<p>如果小分组的确认ACK一直没有回来，那么就可能会触发TCP超时重传的定时器。</p>
<p>下面是一个简单的示意图，开启了Nagle算法与没有开启：</p>
<p><img src="/images/python-tcp-12.png" alt="img"></p>
<p>这也是为什么 linux 的 <code>/proc/sys/net/ipv4/tcp_keepalive_time</code> 没有生效的原因，由于没有给socket带上keepalive的标签，linux在该socket异常以后并不会对其进行回收。</p>
<p>偏题了，回来一下，那么怎么修改 socket 值呢，具体代码不便贴上，给个思路：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">    adapter = TCPKeepAliveAdapter(</span><br><span class="line">        socket_options=[(socket.SOL_SOCKET, socket.SO_KEEPALIVE,<span class="number">1</span>), </span><br><span class="line">                        (socket.IPPROTO_TCP, socket.TCP_KEEPIDLE,<span class="number">30</span>),</span><br><span class="line">                        (socket.IPPROTO_TCP, socket.TCP_KEEPINTVL,<span class="number">3</span>)])</span><br><span class="line">    s = requests.session()</span><br><span class="line">    s.mount(<span class="string">"http://"</span>, adapter)</span><br><span class="line">    s.mount(<span class="string">"https://"</span>, adapter)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TCPKeepAliveAdapter</span><span class="params">(requests.adapters.HTTPAdapter)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        self.socket_options = kwargs.pop(<span class="string">"socket_options"</span>, <span class="keyword">None</span>)</span><br><span class="line">        super(TCPKeepAliveAdapter, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_poolmanager</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.socket_options <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            kwargs[<span class="string">"socket_options"</span>] = self.socket_options</span><br><span class="line">        super(TCPKeepAliveAdapter,</span><br><span class="line">              self).init_poolmanager(*args, **kwargs)</span><br></pre></td></tr></table></figure>
<p>通过实现 <code>requests.adapters.HTTPAdapter</code> 的 <code>init_poolmanager</code> 方法给 <code>socket_options</code> 赋值来修改 <code>socket</code> 的属性。</p>
<p>是否有人会感到疑惑，在python库requests给服务端发请求的时候，明明已经在<code>Header</code>设置了 <code>&#39;Connection&#39;: &#39;keep-alive&#39;</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Session</span><span class="params">(SessionRedirectMixin)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">		self.headers = default_headers()</span><br><span class="line">    ...</span><br><span class="line">  ...  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">default_headers</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :rtype: requests.structures.CaseInsensitiveDict</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> CaseInsensitiveDict(&#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: default_user_agent(),</span><br><span class="line">        <span class="string">'Accept-Encoding'</span>: <span class="string">', '</span>.join((<span class="string">'gzip'</span>, <span class="string">'deflate'</span>)),</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'*/*'</span>,</span><br><span class="line">        <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<p>为什么没有生效呢？</p>
<h1 id="HTTP-keep-alive-和-TCP-keepalive-原理和区别"><a href="#HTTP-keep-alive-和-TCP-keepalive-原理和区别" class="headerlink" title="HTTP keep-alive 和 TCP keepalive 原理和区别"></a>HTTP keep-alive 和 TCP keepalive 原理和区别</h1><p>不管是在OSI七层网络模型还是在TCP/IP五层网络模型中，<strong>TCP是传输层的一种协议，而HTTP是应用层的一种协议</strong>。</p>
<p><img src="/images/python-tcp-13.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>HTTP中是keep-alive，TCP中是keepalive，HTTP中是带中划线的。大小写无所谓</p>
</blockquote>
<h2 id="TCP-Keepalive"><a href="#TCP-Keepalive" class="headerlink" title="TCP Keepalive"></a>TCP Keepalive</h2><p><strong>起源</strong></p>
<p>双方建立交互的连接，但是并不是一直存在数据交互，有些连接会在数据交互完毕后，主动释放连接，而有些不会，那么在长时间无数据交互的时间段内，交互双方都有可能出现掉电、死机、异常重启等各种意外，当这些意外发生之后，这些TCP连接并未来得及正常释放，那么，连接的另一方并不知道对端的情况，它会一直维护这个连接，长时间的积累会导致非常多的半打开连接，造成端系统资源的消耗和浪费，为了解决这个问题，在传输层可以利用TCP的保活报文来实现。</p>
<p><strong>存在的作用</strong></p>
<ol>
<li>探测连接的对端是否存活</li>
</ol>
<p>在应用交互的过程中，可能存在以下几种情况：</p>
<p>(1) 客户端或服务端意外断电，死机，崩溃，重启。</p>
<p>(2) 中间网络已经中断，而客户端与服务器并不知道。</p>
<p>利用保活探测功能，可以探知这种对端的意外情况，从而保证在意外发生时，可以释放半打开的TCP连接。</p>
<ol>
<li>防止中间设备因超时删除连接相关的连接表</li>
</ol>
<p>中间设备如防火墙等，会为经过它的数据报文建立相关的连接信息表，并未其设置一个超时时间的定时器，如果超出预定时间，某连接无任何报文交互的话，中间设备会将该连接信息从表中删除，在删除后，再有应用报文过来时，中间设备将丢弃该报文，从而导致应用出现异常，这个交互的过程大致如下图所示:</p>
<p><img src="/images/python-tcp-14.png" alt="img"></p>
<p>这种情况在有防火墙的应用环境下非常常见，这会给某些长时间无数据交互但是又要长时间维持连接的应用(如数据库)带来很大的影响，为了解决这个问题，应用本身或TCP可以通过保活报文来维持中间设备中该连接的信息，(也可以在中间设备上开启长连接属性或调高连接表的释放时间来解决，但是，这个影响可能较大，有机会再针对这个做详细的描述，在此不多说)。</p>
<p>TCP保活的交互过程大致如下图所示:</p>
<p><img src="/images/python-tcp-15.png" alt="img"></p>
<p>TCP保活可能带来的问题</p>
<ol>
<li>中间设备因大量保活连接，导致其连接表满</li>
</ol>
<p>网关设备由于保活问题，导致其连接表满，无法新建连接(XX局网闸故障案例)或性能下降严重</p>
<ol>
<li>正常连接被释放</li>
</ol>
<p>当连接一端在发送保活探测报文时，中间网络正好由于各种异常(如链路中断、中间设备重启等)而无法将保活探测报文正确转发至对端时，可能会导致探测的一方释放本来正常的连接，但是这种可能情况发生的概率较小，另外，一般也可以增加保活探测报文发生的次数来减少这种情况发生的概率和影响。</p>
<h2 id="HTTP-Keep-alive"><a href="#HTTP-Keep-alive" class="headerlink" title="HTTP Keep-alive"></a>HTTP Keep-alive</h2><p>Httpd守护进程，一般都提供了keep-alive timeout时间设置参数。比如nginx的keepalive_timeout,和Apache的KeepAliveTimeout。</p>
<p>这个keepalive_timeout时间值意味着:一个http产生的tcp连接在传送完最后一个响应后，还需要hold住keepalive_timeout秒后，才开始关闭这个连接。</p>
<p>当httpd守护进程发送完一个响应后，理应马上主动关闭响应的tcp连接，设置keepalive_timeout后，httpd守护进程会想说:”再等等吧,看看浏览器还有没有请求过来”,这一等，便是keepalive_timeout时间。如果守护进程在这个等待的时间里，一直没有收到浏览器发过来http请求，则关闭这个http连接。</p>
<blockquote>
<ol>
<li><p>在没有设置keepalive_timeout情况下，一个socket资源从建立到真正释放需要经过的时间是:建立tcp连接+传送http请求+php脚本执行+传送http响应+关闭tcp连接。</p>
</li>
<li><p>设置了keepalive_timeout时间情况下，一个socket建立到释放需要的时间是多了keepalive_timeout时间。</p>
</li>
</ol>
</blockquote>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>http keep-alive与tcp keep-alive，不是同一回事，意图不一样。http keep-alive是为了让tcp活的更久一点，以便在同一个连接上传送多个http，提高socket的效率。而tcp keep-alive是TCP的一种检测TCP连接状况的保险机制。tcp keep-alive保险定时器，支持三个系统内核配置参数:</p>
<blockquote>
<p>echo 1800 &gt; /proc/sys/net/ipv4/tcp_keepalive_time</p>
<p>echo 15 &gt; /proc/sys/net/ipv4/tcp_keepalive_intvl</p>
<p>echo 5 &gt; /proc/sys/net/ipv4/tcp_keepalive_probes</p>
</blockquote>
<p>keepalive是TCP保鲜定时器，当网路两端建立了TCP连接之后，闲置idle(双方没有任何数据发送往来)了tcp_keepalive_time后，服务器内核就会尝试向客户端发送侦测包，来判断TCP连接状况(有可能客户端崩溃、强制关闭了应用、主机不可达等等)。如果没有收到对方的回答(ack包),则会在tcp_keepalive_intvl后再次尝试发送侦测包，直到收到对方的ack，如果一直没有收到对方的ack，一共会尝试tcp_keepalive_probes次，每次的间隔时间在这里分别是15s、30s、45s、60s、75s。如果尝试tcp_keepalive_probes,依然没有收到对方的ack包，则会丢弃该TCP连接。</p>
<p>TCP连接默认闲置时间是2小时，一般设置为30分钟足够了。也就是说，仅当nginx的keepalive_timeout值设置高于tcp_keepalive_time,并且距此tcp连接传输的最后一个http响应，经过了tcp_keepalive_time时间之后，操作系统才会发送侦测包来决定是否要丢弃这个TCP连接。一般不会出现这种情况，除非你需要这样做。</p>
<p>同时，还记得我们上面说的 TIME_WAIT 状态的连接吗，大量这样的连接可能会导致服务不可用，使用http keep-alive,可以减少服务端TIME_WAIT数量(因为由服务端httpd守护进程主动关闭连接)。道理很简单，相较而言，启用keep-alive,建立的tcp连接更少了，自然要被关闭的tcp连接也相应更少了。</p>
<p>下面再介绍个抓包工具</p>
<h1 id="tcpdump-抓包工具"><a href="#tcpdump-抓包工具" class="headerlink" title="tcpdump 抓包工具"></a>tcpdump 抓包工具</h1><p>写不动了，介绍两篇文章吧</p>
<p><a href="https://www.cnblogs.com/f-ck-need-u/p/7064286.html" target="_blank" rel="external">抓包工具tcpdump用法说明</a></p>
<p><a href="https://www.cnblogs.com/lvdongjie/p/10911564.html" target="_blank" rel="external">最全的tcpdump使用详解</a></p>
<p><br> </p>
<p>参考：</p>
<p><a href="https://blog.csdn.net/yanghangwww/article/details/106456584" target="_blank" rel="external">TCP协议解析、tcpdump抓包分析三次握手和四次挥手</a></p>
<p><a href="https://www.cnblogs.com/Andya/p/7272462.html" target="_blank" rel="external">TCP三次握手和四次挥手过程</a></p>
<p><a href="https://blog.csdn.net/zzhongcy/article/details/38851271?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-4.baidujs&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-4.baidujs" target="_blank" rel="external">端口状态 LISTENING、ESTABLISHED、TIME_WAIT及CLOSE_WAIT详解，以及三次握手，滑动窗口</a></p>
<p><a href="https://blog.csdn.net/yucdsn/article/details/81092679?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&amp;spm=1001.2101.3001.4242" target="_blank" rel="external">服务器出现TIME_WAIT和CLOSE_WAIT的原因以及解决方法</a></p>
<p><a href="https://blog.csdn.net/mingwulipo/article/details/89378276" target="_blank" rel="external">TIME_WAIT和CLOSE_WAIT的区别</a></p>
<p><a href="https://www.jianshu.com/p/ccafdeda0b95" target="_blank" rel="external">详解Socket编程—TCP_NODELAY选项</a></p>
<p><a href="https://blog.csdn.net/weixin_39610085/article/details/110966721?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&amp;spm=1001.2101.3001.4242" target="_blank" rel="external">requests.adapters.HTTPAdapter.init_poolmanager某些字段含义</a></p>
<p><a href="https://blog.csdn.net/zhangge3663/article/details/88714037?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&amp;spm=1001.2101.3001.4242" target="_blank" rel="external">Tcp Keepalive和HTTP Keepalive详解</a></p>
<p><a href="https://blog.csdn.net/lpf463061655/article/details/108460311?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-6&amp;spm=1001.2101.3001.4242" target="_blank" rel="external">HTTP keep-alive和TCP keepalive测试试验</a></p>
<p><a href="https://blog.csdn.net/niejiangshuai/article/details/88525909?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-1&amp;spm=1001.2101.3001.4242" target="_blank" rel="external">Apache 开启和关闭 Keep-Alive 解决访问长连接问题</a></p>
<p><a href="https://blog.csdn.net/pmt123456/article/details/58233999" target="_blank" rel="external">TCP协议的KeepAlive机制</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> PythonWeb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python pip的安装与使用]]></title>
      <url>https://magiceses.github.io/2017/03/20/python-pip%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">与其每天担心未来，不如努力现在。别对自己丧失信心，成长的路上，只有奋斗才能给你最大的安全感。<br></p>

<p>pip 是 Python 包管理工具，该工具提供了对Python 包的查找、下载、安装、卸载的功能。<br>目前如果你在 <a href="https://www.python.org/" target="_blank" rel="external">python.org</a> 下载最新版本的安装包，则是已经自带了该工具。<br>Python 2.7.9 + 或 Python 3.4+ 以上版本都自带 pip 工具。<br>pip 官网：<a href="https://pypi.org/project/pip/" target="_blank" rel="external">https://pypi.org/project/pip/</a></p>
<a id="more"></a>
<p>你可以通过以下命令来判断是否已安装：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip --version     <span class="comment"># Python2.x 版本命令</span></span><br><span class="line">pip3 --version    <span class="comment"># Python3.x 版本命令</span></span><br></pre></td></tr></table></figure></p>
<p>如果你还未安装，则可以使用以下方法来安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python2.7</span></span><br><span class="line">$ curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py   <span class="comment"># 下载安装脚本</span></span><br><span class="line"><span class="comment"># 最新版本</span></span><br><span class="line">$ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py   <span class="comment"># 下载安装脚本</span></span><br><span class="line"></span><br><span class="line">$ sudo python get-pip.py    <span class="comment"># 运行安装脚本</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>用哪个版本的 Python 运行安装脚本，pip 就被关联到哪个版本，如果是 Python3 则执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; $ sudo python3 get-pip.py    <span class="comment"># 运行安装脚本。</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<p>一般情况 pip 对应的是 Python 2.7，pip3 对应的是 Python 3.x。</p>
</blockquote>
<p>部分 Linux 发行版可直接用包管理器安装 pip，如 Debian 和 Ubuntu：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure></p>
<p>简单使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">pip install 安装的包名 <span class="comment"># 安装包</span></span><br><span class="line"></span><br><span class="line">pip show --files 安装包名 <span class="comment"># 查看包是否安装</span></span><br><span class="line"></span><br><span class="line">pip list --outdated <span class="comment"># 检查哪些包需要更新</span></span><br><span class="line"></span><br><span class="line">pip install --upgrade 要升级的包名 <span class="comment"># 升级</span></span><br><span class="line"></span><br><span class="line">pip uninstall 要卸载的包名 <span class="comment"># 卸载包</span></span><br><span class="line"></span><br><span class="line">pip search SomePackage <span class="comment"># 搜索包</span></span><br><span class="line"></span><br><span class="line">pip show  <span class="comment"># 显示安装包信息</span></span><br><span class="line"></span><br><span class="line">pip show -f SomePackage <span class="comment"># 查看指定包的详细信息</span></span><br><span class="line"></span><br><span class="line">pip list <span class="comment"># 列出已安装的包</span></span><br><span class="line"></span><br><span class="line">pip list -o <span class="comment"># 查看可升级的包</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 阿里源</span></span><br><span class="line">pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 腾讯源</span></span><br><span class="line">pip install -i https://mirrors.tencent.com/pypi/simple/ --upgrade tencentcloud-sdk-python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 豆瓣</span></span><br><span class="line">pip install -r requirements.txt -i https://pypi.douban.com/simple/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清华大学</span></span><br><span class="line">pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure></p>
<p>注意事项<br>如果 Python2 和 Python3 同时有 pip，则使用方法如下：<br>Python2：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 -m pip install XXX</span><br></pre></td></tr></table></figure></p>
<p>Python3:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install XXX</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python with语句和上下文管理器对象]]></title>
      <url>https://magiceses.github.io/2017/03/07/python-with%E8%AF%AD%E5%8F%A5%E5%92%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">纠结过去，担心未来，都不如抓住当下。过去是梦，未来是影，现在才是真真切的人生。<br></p>

<p>我们平时编程时尽量使用with自动关闭资源，这里就有个上下文管理器对象的概念，然后查找资料，对with的解释如下:with的有一些任务，可能事先需要设置，事后做清理工作。对于这种场景，Python的with语句提供了一种非常方便的处理方式。一个很好的例子是文件处理，需要获取一个文件句柄，从文件中读取数据，然后关闭文件句柄。下面就讲下with语句以及上下文管理器对象，希望对你有帮助。</p>
<a id="more"></a>
<h2 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h2><p>对于文件操作完成后，应该要关闭它，这是一个常识，因为打开的文件不仅占用了系统资源，而且可能影响其它程序或进程的操作，甚至会导致用户期望与实际操作结果不一样。with语句得语法为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with  表达式  [as 目标]:</span><br><span class="line">		代码块</span><br></pre></td></tr></table></figure>
<p>with语句支持嵌套，支持多个with子句，它们两者可以相互转换。”with expr1 as e1,expr2 as e2”与下面的嵌套形式等价</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> expr1 <span class="keyword">as</span> e1:</span><br><span class="line">    <span class="keyword">with</span> expr2 <span class="keyword">as</span> e2:</span><br></pre></td></tr></table></figure>
<p>with语句使用比较简单。如下面例子不使用with的时候代码如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'test.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">f.write(<span class="string">"hello"</span>)</span><br><span class="line">f.close()<span class="comment">#这句很容易被忘记，这也是为什么推荐使用with</span></span><br></pre></td></tr></table></figure>
<p>使用with语句代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure>
<p>with语句可以在代码块执行完毕后，还原到进入该代码块时的现场（这句话要仔细理解，也就是说with里的代码块执行完后，会返回到刚刚进入with时的现场）。with语句代码块执行过程如下：</p>
<ul>
<li>计算表达式的值，返回一个<strong>上下文管理器对象</strong>；</li>
<li>加载上下文管理器对象的<code>__exit__()</code>方法以备后用；</li>
<li>调用上下文管理器对象的<code>__enter__()</code>方法；</li>
<li>如果with语句中设置了目标对象，则将<code>__enter__()</code>方法的返回值赋值给目标对象（比如上面的f）；</li>
<li>执行with里的代码块；</li>
<li>如果步骤（5）代码正常结束，调用上下文管理器对象的<code>__exit__()</code>方法，返回值直接忽略；</li>
<li>如果步骤(5)中代码异常，调用上下文管理器对象的<code>__exit__()</code>,并将异常类型、值以及traceback信息作为参数传递给<code>__exit__()</code>方法。如果<code>__exit__()</code>返回值为false，则异常会被重新抛出；如果返回的是true,异常被挂起，程序继续执行；</li>
</ul>
<p>使用with的好处是无论程序以何种方式跳出with块，总能保证资源被正确关闭。下面介绍一下上下文管理器对象。</p>
<h2 id="上下文管理器对象"><a href="#上下文管理器对象" class="headerlink" title="上下文管理器对象"></a>上下文管理器对象</h2><p>with的神奇之处得益于一个成为上下文管理器的（context manager)的东西，它用来创建一个这样的对象：它定义程序运行时需要建立的上下文，处理程序的进入和退出，实现上下文管理协议，即在对象中定义<code>__enter__()</code>和<code>__exit__()</code>方法（这两个方法可以重载，这就说明，我们可以自定义属于自己的上下文管理器，待会儿再介绍），其中：</p>
<ul>
<li><p><code>__enter__(self)</code></p>
<blockquote>
<p>进入运行时的上下文，也就是进入上下文管理器时调用该函数，返回运行时的上下文对象，with语句中会将这个返回值绑定到目标对象上（上面的例子就是绑定到f上）。顺便说下上下文表达式（Context Expression），上下文表达式指with 语句中跟在关键字 with 之后的表达式，该表达式要返回一个上下文管理器对象，该对象就被赋值给了目标对象。</p>
</blockquote>
</li>
<li><p><code>__exit__(self，exception_type,exception_value,traceback)</code></p>
<blockquote>
<p>退出运行时的上下文，定义在块执行（或终止）之后上下文管理器应该做什么。它可以处理异常、清理现场或者处理with块中语句执行完成后需要处理的动作。exception_type,exception_value,traceback三个参数代表的意思分别是异常的类型、值和追踪信息。如果没有异常，3个参数均设为None。此方法返回值为True或者False，分别指示被引发的异常得到了还是没有得到处理。如果返回False，引发的异常会被传递出上下文。这个在前面简单的提到过，希望你能结合上下文仔细理解这些东西。</p>
</blockquote>
</li>
</ul>
<p>实际上任何实现了上下文协议的对象都可以称为一个上下文管理器，文件也是实现了这个协议的上下文管理器，它们都能够与with语句兼容。文件对象的<code>__enter__()</code>和<code>__exit__()</code>属性如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;f.__enter__</span><br><span class="line">&lt;built-<span class="keyword">in</span> method __enter__ of file object at <span class="number">0x029F0700</span>&gt;</span><br><span class="line">&gt;&gt;&gt;f.__exit__</span><br><span class="line">&lt;built-<span class="keyword">in</span> method __exit__ of file object at <span class="number">0x029F0700</span>&gt;</span><br></pre></td></tr></table></figure>
<p>当然我们也可以定义自己的上下文管理器，只要实现了上下文协议便可以和with语句一起使用。如下面例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpenFile</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,filename,mode)</span>:</span></span><br><span class="line">        self.filename=filename</span><br><span class="line">        self.mode=mode</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.f=open(self.filename,self.mode)</span><br><span class="line">        <span class="keyword">return</span> self.f  <span class="comment">#作为as说明符指定的变量的值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self，exception_type,exception_value,traceback)</span>：</span></span><br><span class="line"><span class="function">        <span class="title">if</span> <span class="title">exception_type</span> <span class="title">is</span> <span class="title">None</span>:</span><span class="comment">#如果没有异常，正常关闭资源</span></span><br><span class="line">            self.f.close()</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">else</span>:<span class="comment">#有异常发生</span></span><br><span class="line">            <span class="keyword">print</span> exception_value</span><br><span class="line">            <span class="keyword">print</span> traceback</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span><span class="comment">#返回false则异常会被重新抛出</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">with</span> OpenFile(<span class="string">'my_file.txt'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'Hello'</span>)</span><br><span class="line">    f.write(<span class="string">'World'</span>)</span><br></pre></td></tr></table></figure>
<p>上下文管理器主要作用于资源共享，因此在实际应用中<code>__enter__()</code>和<code>__exit__()</code>方法基本用于资源分配以及释放相关的工作，如打开/关闭文件、异常处理、断开流的连接、锁分配等。为了更好的辅助上下文管理器，Python还提供了contextlib模块，这个下次有机会再讲。</p>
<p>原文：<a href="https://blog.51cto.com/u_11026142/1845862" target="_blank" rel="external">with语句和上下文管理器对象</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PasteDeploy 模块学习总结]]></title>
      <url>https://magiceses.github.io/2017/01/18/python-web-pasteDeploy%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">人生在世，有得就有失，有付出就有回报，鱼和熊掌不能兼得。有时你的付出不一定能得到回报，但自己要想明白一些，不要太苛求自己，生命总有它的轮回，上帝是公平的，它对每个人都是一样的垂青。人生苦短，就好好的潇洒走一回。<br></p>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>官方文档把PasteDeploy介绍为一个发现并配置WSGI应用和服务的一个系统，通过loadapp(一个简单的函数)就可以部署WSGI，而且不需要知道WSGI应用的细节。</p>
<p>我们先来看下，在WSGI简单的模型中，如果有多个URL，一般是怎么做的呢？直接在代码判断请求方和请求路径的然后分别处理不同的URL。<br><a id="more"></a></p>
<p>处理函数 app.py</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    method = environ[<span class="string">'REQUEST_METHOD'</span>]  <span class="comment">#从环境变量中提取请求方法</span></span><br><span class="line">    path = environ[<span class="string">'PATH_INFO'</span>]         <span class="comment">#从环境变量中提取请求路径</span></span><br><span class="line">    <span class="keyword">if</span> method==<span class="string">'GET'</span> <span class="keyword">and</span> path==<span class="string">'/'</span>:     <span class="comment">#通过判断的方法来确定处理的函数</span></span><br><span class="line">        return &lt;h1&gt;path = /&lt;/h1&gt; #该函数对应的URL是 "/"</span><br><span class="line">    <span class="keyword">if</span> method==<span class="string">'POST'</span> <span class="keyword">and</span> path=<span class="string">'/signin'</span>:</span><br><span class="line">        return &lt;h1&gt;path = /signin &lt;/h1&gt; #该函数对应URL的是 "/sigin"</span><br></pre></td></tr></table></figure>
<p>服务器函数 server.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从wsgiref模块导入:</span></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"><span class="comment"># 导入我们自己编写的application函数:</span></span><br><span class="line"><span class="keyword">from</span> hello <span class="keyword">import</span> application</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个服务器，IP地址为空，端口是8000，处理函数是application:</span></span><br><span class="line">httpd = make_server(<span class="string">''</span>, <span class="number">8000</span>, application)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Serving HTTP on port 8000..."</span></span><br><span class="line"><span class="comment"># 开始监听HTTP请求:</span></span><br><span class="line">httpd.serve_forever()</span><br></pre></td></tr></table></figure>
<p>这种方法是简单，直接的，但也是可重复性差，不可维护的。一个restful中有可能50个以上的URL路径，如果这么写下去，那维护的人要抓狂。</p>
<p>所以要以一种简单清晰，可维护性好的方式去解析URL，这种方式便是使用PasteDeploy模型。</p>
<p>PasteDeploy的工作模式是使用一个配置文件configure.ini去解析URL。</p>
<h1 id="paste-配置分析"><a href="#paste-配置分析" class="headerlink" title="paste 配置分析"></a>paste 配置分析</h1><p>PasteDeploy配置文件由若干section组成，section的声明格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[type:name]</span><br></pre></td></tr></table></figure>
<p>其中，方括号括起的section声明一个新section的开始，section的声明由两部分组成，section的类型（type）和section的名称（name），如：[app:main]等。section的type可以有：app、composite、filter、pipeline、filter-app等。</p>
<p>每个section中具体配置项的格式就是基本的ini格式：key = value，此外，PasteDeploy的配置文件中使用“#”标注注释。</p>
<p>在基本了解PasteDeploy配置文件的书写格式后，我们不妨看一个实例，来具体了解不同type的section。</p>
<p>先从一个PasteDeploy的配置文件(config.ini)入手分析</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[composite:main]</span></span><br><span class="line"><span class="attr">use</span> = egg:Paste#urlmap</span><br><span class="line">/ = home</span><br><span class="line">/blog = blog</span><br><span class="line">/wiki = wiki</span><br><span class="line">/cms = config:cms.ini</span><br><span class="line"></span><br><span class="line"><span class="section">[app:home]</span></span><br><span class="line"><span class="attr">use</span> = egg:Paste#static</span><br><span class="line"><span class="attr">document_root</span> = %(here)s/htdocs</span><br><span class="line"></span><br><span class="line"><span class="section">[filter-app:blog]</span></span><br><span class="line"><span class="attr">use</span> = egg:Authentication#auth</span><br><span class="line"><span class="attr">next</span> = blogapp</span><br><span class="line"><span class="attr">roles</span> = admin</span><br><span class="line"><span class="attr">htpasswd</span> = /home/me/users.htpasswd</span><br><span class="line"></span><br><span class="line"><span class="section">[app:blogapp]</span></span><br><span class="line"><span class="attr">use</span> = egg:BlogApp</span><br><span class="line"><span class="attr">database</span> = sqlite:/home/me/blog.db</span><br><span class="line"></span><br><span class="line"><span class="section">[app:wiki]</span></span><br><span class="line"><span class="attr">use</span> = call:mywiki.main:application</span><br><span class="line"><span class="attr">database</span> = sqlite:/home/me/wiki.db</span><br></pre></td></tr></table></figure>
<p>上面的示例文件列出了若干不同type的section示意，下面就一一探讨PasteDeploy可定义的section type。</p>
<h2 id="Type-composite（组合应用）"><a href="#Type-composite（组合应用）" class="headerlink" title="Type = composite（组合应用）"></a>Type = composite（组合应用）</h2><p>顾名思义，组合应用由若干WSGI应用组成，composite为这些应用提供更高一层的分配工作。</p>
<p>我们具体分析示例1中的如下部分：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[composite:main]</span></span><br><span class="line"><span class="attr">use</span> = egg:Paste#urlmap</span><br><span class="line">/ = home</span><br><span class="line">/blog = blog</span><br><span class="line">/wiki = wiki</span><br><span class="line">/cms = config:cms.ini</span><br></pre></td></tr></table></figure>
<p>该段配置文件定义了一个名为main、类型为composite的section，方括号的声明以下是该section的具体配置，遵循 key = value 的统一格式。</p>
<p>Composite类型的section将URL请求分配给其他的WSGI应用。</p>
<p>use = egg:Paste#urlmap 意味着使用 Paste 包中的 urlmap 应用。urlmap是Paste提供的一套通用的composite应用，作用就是根据用户请求的URL前缀，将用户请求映射到对应的WSGI应用上去。这里的WSGI应用有：“home”, “blog”, “wiki” 和 “config:cms.ini”。</p>
<p>最后一项仅仅是参考了同一个目录中的另一个文件”cms.ini”。</p>
<h2 id="Type-app（WSGI应用）"><a href="#Type-app（WSGI应用）" class="headerlink" title="Type = app（WSGI应用）"></a>Type = app（WSGI应用）</h2><p>回到示例1中的下一部分：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[app:home]</span></span><br><span class="line"><span class="attr">use</span> = egg:Paste#static</span><br><span class="line"><span class="attr">document_root</span> = %(here)s/htdocs</span><br><span class="line"></span><br><span class="line"><span class="section">[app:wiki]</span> </span><br><span class="line"><span class="attr">use</span> = call:mywiki.main:application </span><br><span class="line"><span class="attr">database</span> = sqlite:/home/me/wiki.db</span><br></pre></td></tr></table></figure>
<p>app类型的section声明一个具体的WSGI应用。调用哪个python module中的app代码则由的use后的值指定。</p>
<p>这里的 egg:Paste#static 是另一个简单应用，作用仅仅是呈现静态页面。它接收了一个配置项： document_root ，后面的值可以从全局配置<a href="https://blog.csdn.net/gyshun/article/details/大小写敏感" target="_blank" rel="external">DEFAULT</a>中提取，提取方法s是使用变量替换：比如 %(var_name)s 的形式。</p>
<p>这里 %(here)s 的意思是这个示例配置文件所在的目录，因为相对路径在不同服务器中的解释方法不同，出于移植性的考虑，官方文档上推荐当前这种写法。</p>
<p>示例中定义了多个app类型的section，因为PasteDeploy的配置文件中允许定义多个app类型的section，同时要求每个WSGI应用也都应该拥有自己的section。这样，每一个WSGI应用在配置文件中都有一个app类型的section与之对应，默认地，”main”应用对应于 app:main 或 app 。</p>
<p>应用的具体实现要在section中配置，有两种方法专门用于指出应用对应的代码：使用URI（用use标识）或 直接指向实现代码（用protocol标识）。</p>
<h3 id="使用另一个URI"><a href="#使用另一个URI" class="headerlink" title="使用另一个URI"></a>使用另一个URI</h3><p>采用该方法的特点是指出应用的实现代码的那一条 key = value 配置项采用”use”作为键，该方法也有许多变种，官方的示例中给出了一些介绍：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[app:myapp]</span></span><br><span class="line"><span class="attr">use</span> = config:another_config_file.ini#app_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或任意URI:</span></span><br><span class="line"><span class="section">[app:myotherapp]</span></span><br><span class="line"><span class="attr">use</span> = egg:MyApp</span><br><span class="line"><span class="comment"># 或指明某个模块中的可调用:</span></span><br><span class="line"><span class="section">[app:mythirdapp]</span></span><br><span class="line"><span class="attr">use</span> = call:my.project:myapplication</span><br><span class="line"><span class="comment"># 甚至是其他的section:</span></span><br><span class="line"><span class="section">[app:mylastapp]</span></span><br><span class="line"><span class="attr">use</span> = myotherapp</span><br></pre></td></tr></table></figure>
<p>最后指向其他的section的那个例子，看起来似乎没有什么意义，似乎只是两个相同的WSGI应用。但是这样的定义允许我们在 [app:mylastapp] 这个应用中定义一些局部的配置项，从而在重用代码的同时覆写它引用的应用配置。</p>
<h3 id="直接指向应用的实现代码"><a href="#直接指向应用的实现代码" class="headerlink" title="直接指向应用的实现代码"></a>直接指向应用的实现代码</h3><p>采用该方法的特点是指出实现代码的那一条 key = value 配置项采用“协议”作为键，所谓“协议”即protocol，告诉PasteDeploy即将加载的对象类型，如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[app:myapp]</span></span><br><span class="line">paste.app_factory = myapp.modulename:app_factory</span><br></pre></td></tr></table></figure>
<p>该例的protocol paste.app_factory 是一个应用的工厂函数，指明import对象的类型；值 myapp.modulename:app_factory 指明具体加载的模块和方法。</p>
<p>除了app_factory外还有composite_facory，fliter_factory， fliter_app_factory，server_factory，server_runner等，后面跟上myapp.modulename模块下的app_factory类，不同协议其app_factory也不一样。</p>
<p>那么这几种工厂模式，配置了之后在代码中怎么使用呢？</p>
<h3 id="实现factory"><a href="#实现factory" class="headerlink" title="实现factory"></a>实现factory</h3><h4 id="app-factory"><a href="#app-factory" class="headerlink" title="app_factory"></a>app_factory</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app_factory</span><span class="params">(global_config, **local_conf)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> wsgi_app</span><br></pre></td></tr></table></figure>
<p>global_config传入的是字典参数，local_conf传入的是key-value参数，返回一个wsgi application</p>
<h4 id="composite-factory"><a href="#composite-factory" class="headerlink" title="composite_factory"></a>composite_factory</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">composite_factory</span><span class="params">(loader, global_config, **local_conf)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> wsgi_app</span><br></pre></td></tr></table></figure>
<p>loader调用一些特殊函数， get_app(name_or_uri, global_conf=None) return a WSGI application with the given name. get_filter and get_server work the same way。如下使用方案：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pipeline_factory</span><span class="params">(loader, global_config, pipeline)</span>:</span></span><br><span class="line">    <span class="comment"># space-separated list of filter and app names:</span></span><br><span class="line">    pipeline = pipeline.split()</span><br><span class="line">    filters = [loader.get_filter(n) <span class="keyword">for</span> n <span class="keyword">in</span> pipeline[:<span class="number">-1</span>]]</span><br><span class="line">    app = loader.get_app(pipeline[<span class="number">-1</span>])</span><br><span class="line">    filters.reverse() <span class="comment"># apply in reverse order!</span></span><br><span class="line">    <span class="keyword">for</span> filter <span class="keyword">in</span> filters:</span><br><span class="line">        app = filter(app)</span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[composite:main]</span></span><br><span class="line"><span class="attr">use</span> = &lt;pipeline_factory_uri&gt;</span><br><span class="line"><span class="attr">pipeline</span> = egg:Paste#printdebug session myapp</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:session]</span></span><br><span class="line"><span class="attr">use</span> = egg:Paste#session</span><br><span class="line"><span class="attr">store</span> = memory</span><br><span class="line"></span><br><span class="line"><span class="section">[app:myapp]</span></span><br><span class="line"><span class="attr">use</span> = egg:MyApp</span><br></pre></td></tr></table></figure>
<p>将数据读取传入，将filter printdebug,session读入并付给filter,读取app为pipeline参数的最后一个myapp,翻转filter先运行session(myapp)，再运行egg:Paste#printdebug(myapp)。</p>
<h4 id="fliter-factory"><a href="#fliter-factory" class="headerlink" title="fliter_factory"></a>fliter_factory</h4><p>类似app_factroy但返回的是filter对象，而且仅仅接受WSGI application为唯一的参数，如下所示</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_filter_factory</span><span class="params">(global_conf, req_usernames)</span>:</span></span><br><span class="line">    <span class="comment"># space-separated list of usernames:</span></span><br><span class="line">    req_usernames = req_usernames.split()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter</span><span class="params">(app)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> AuthFilter(app, req_usernames)</span><br><span class="line">    <span class="keyword">return</span> filter</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthFilter</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, req_usernames)</span>:</span></span><br><span class="line">        self.app = app</span><br><span class="line">        self.req_usernames = req_usernames</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> environ.get(<span class="string">'REMOTE_USER'</span>) <span class="keyword">in</span> self.req_usernames:</span><br><span class="line">            <span class="keyword">return</span> self.app(environ, start_response)</span><br><span class="line">        start_response(</span><br><span class="line">            <span class="string">'403 Forbidden'</span>, [(<span class="string">'Content-type'</span>, <span class="string">'text/html'</span>)])</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'You are forbidden to view this resource'</span>]</span><br></pre></td></tr></table></figure>
<p>定义了AuthFilter对象实现请求变量’REMOTE_USER’下的变量和req_usernames是否一致，filter(app)调用唯一对象app，再里面再做处理并返回信息，通过<strong>call</strong>把类像函数一样调用。</p>
<h4 id="fliter-app-factory"><a href="#fliter-app-factory" class="headerlink" title="fliter_app_factory"></a>fliter_app_factory</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthFilter</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, global_conf, req_usernames)</span>:</span></span><br><span class="line">        ....</span><br></pre></td></tr></table></figure>
<p>除了参数包括app，返回对象为WSGI application外，其他不变。</p>
<h4 id="server-factory"><a href="#server-factory" class="headerlink" title="server_factory"></a>server_factory</h4><p>一个参数 wsgi_app，返回serve</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_factory</span><span class="params">(global_conf, host, port)</span>:</span></span><br><span class="line">    port = int(port)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve</span><span class="params">(app)</span>:</span></span><br><span class="line">        s = Server(app, host=host, port=port)</span><br><span class="line">        s.serve_forever()</span><br><span class="line">    <span class="keyword">return</span> serve</span><br></pre></td></tr></table></figure>
<h4 id="server-runner"><a href="#server-runner" class="headerlink" title="server_runner"></a>server_runner</h4><p>官方文档说不传wsgi_app，其他和server_factory一样，没给例子</p>
<h2 id="Type-filter-（过滤器）"><a href="#Type-filter-（过滤器）" class="headerlink" title="Type = filter*（过滤器）"></a>Type = filter*（过滤器）</h2><p>filter是作用于WSGI应用上的函数或方法，以app为唯一的参数，并返回一个“过滤”后的app。归功于WSGI接口的规范，不同的filter可以依次“过滤”某一app，事实上多个filter处理一个app也就是下文中提到的管道（pipeline）。</p>
<p>主要有三种方法进行filter，第一种是fliter-with,第二种是filter-app,第三种是pipeline,多说一句，openstack用的最多的是pipeline。</p>
<h3 id="Type-filter（过滤器）"><a href="#Type-filter（过滤器）" class="headerlink" title="Type = filter（过滤器）"></a>Type = filter（过滤器）</h3><p>第一种，通过fliter-with指向下一个fliter应用</p>
<p>在PasteDeploy的配置文件中有多种方法来“过滤”应用，比如示例1中：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[app:main]</span></span><br><span class="line"><span class="attr">use</span> = egg:MyEgg</span><br><span class="line"><span class="attr">filter-with</span> = printdebug</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:printdebug]</span> </span><br><span class="line"><span class="attr">use</span> = egg:Paste#printdebug</span><br><span class="line"><span class="comment"># and you could have another filter-with here, and so on...</span></span><br></pre></td></tr></table></figure>
<p>在 [app:main] 的 filter-with 字段指明用来处理该应用的filter，就指定了名为”printdebug”的filter来处理应用”main”。在 [filter:printdebug] 中还可以定义新的 filter-with 字段，从而将处理关系延续下去。</p>
<h3 id="Type-filter-app"><a href="#Type-filter-app" class="headerlink" title="Type = filter-app"></a>Type = filter-app</h3><p>第二种，通过next配置指向下一个filter应用</p>
<p>同样是处理应用，在PasteDeploy配置文件中可以有着不同的写法，比如示例1中的下面部分，就是使用filter-app类型的section来声明一个filter：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[filter-app:blog]</span> </span><br><span class="line"><span class="attr">use</span> = egg:Authentication#auth </span><br><span class="line"><span class="attr">next</span> = blogapp </span><br><span class="line"><span class="attr">roles</span> = admin </span><br><span class="line"><span class="attr">htpasswd</span> = /home/me/users.htpasswd </span><br><span class="line"></span><br><span class="line"><span class="section">[app:blogapp]</span></span><br><span class="line"><span class="attr">use</span> = egg:BlogApp</span><br><span class="line"><span class="attr">database</span> = sqlite:/home/me/blog.db</span><br></pre></td></tr></table></figure>
<p>该部分采用了[filter-app:NAME]类型的section声明了一个filter，指定使用的代码，以及要处理的应用： next 字段的值。从而PasteDeploy会自动地将过滤器”blog”作用在应用”blogapp”上。</p>
<h3 id="Type-pipeline"><a href="#Type-pipeline" class="headerlink" title="Type = pipeline"></a>Type = pipeline</h3><p>第三种，pipeline依次列出filter即可</p>
<p>pipeline便于对一个应用添加多个过滤器，比如示例1中：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[pipeline:main]</span></span><br><span class="line"><span class="attr">pipeline</span> = filter1 egg:FilterEgg#filter2 filter3 app</span><br><span class="line"></span><br><span class="line"><span class="section">[filter:filter1]</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>就指定了在app上施加三个filter进行处理。</p>
<p>总结起来，想要在某个应用前添加多个filter，共有 [filter-app:…] [pipeline：…] 和 [app:…] filter-with = … 等方法。</p>
<blockquote>
<p>egg模式，通过setuptools打包python源文件，类似java jar的格式;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; setup(</span><br><span class="line">&gt;     name=&apos;MyApp&apos;,</span><br><span class="line">&gt;     ...</span><br><span class="line">&gt;     entry_points=&#123;</span><br><span class="line">&gt;         &apos;paste.app_factory&apos;: [</span><br><span class="line">&gt;             &apos;main=myapp.mymodule:app_factory&apos;,</span><br><span class="line">&gt;             &apos;ob2=myapp.mymodule:ob_factory&apos;],</span><br><span class="line">&gt;         &#125;,</span><br><span class="line">&gt;     )</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>通过上面配置安装egg，use=egg:MyApp#main或者use=egg:MyApp#ob2,可以分别找到myapp.mymodule下的app_factory对象和ob_factory对象</p>
</blockquote>
<h1 id="局部配置与全局配置"><a href="#局部配置与全局配置" class="headerlink" title="局部配置与全局配置"></a>局部配置与全局配置</h1><h2 id="局部配置与全局配置的格式"><a href="#局部配置与全局配置的格式" class="headerlink" title="局部配置与全局配置的格式"></a>局部配置与全局配置的格式</h2><p>PasteDeploy配置文件的所有配置项均使用 key = value 格式，但是局部配置项和全局配置项定义的位置不同。如：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[app:blog]</span></span><br><span class="line"><span class="attr">use</span> = egg:MyBlog</span><br><span class="line"><span class="attr">database</span> = mysql://localhost/blogdb</span><br><span class="line"><span class="attr">blogname</span> = This Is My Blog!</span><br><span class="line"></span><br><span class="line"><span class="section">[app:otherblog]</span></span><br><span class="line"><span class="attr">use</span> = blog</span><br><span class="line"><span class="attr">blogname</span> = The other face of my blog</span><br></pre></td></tr></table></figure>
<p>每一个section内设置具体的键值关系，构成这些section自己的局部配置。</p>
<p>为了便于不同的应用读取某些固定的系统信息，PasteDeploy允许设置全局配置变量，所有的全局配置必须放在[DEFAULT]字段下设置，如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="attr">admin_email</span> = webmaster@example.com</span><br><span class="line"></span><br><span class="line"><span class="section">[app:main]</span></span><br><span class="line"><span class="attr">use</span> = ...</span><br><span class="line">set admin_email = bob@example.com</span><br></pre></td></tr></table></figure>
<p>注意[DEFAULT]段名是大小写敏感的，因此必须严格大写。</p>
<h2 id="局部配置和全局配置的覆写"><a href="#局部配置和全局配置的覆写" class="headerlink" title="局部配置和全局配置的覆写"></a>局部配置和全局配置的覆写</h2><p>上面的两个例子，实际上展示了局部配置和全局配置的覆写，这里详细介绍，首先看局部配置的覆写：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[app:blog]</span></span><br><span class="line"><span class="attr">use</span> = egg:MyBlog</span><br><span class="line"><span class="attr">database</span> = mysql://localhost/blogdb</span><br><span class="line"><span class="attr">blogname</span> = This Is My Blog!</span><br><span class="line"></span><br><span class="line"><span class="section">[app:otherblog]</span></span><br><span class="line"><span class="attr">use</span> = blog</span><br><span class="line"><span class="attr">blogname</span> = The other face of my blog</span><br></pre></td></tr></table></figure>
<p>已经知道，一些section可以直接复用其他section的代码，并定制配置信息，这里 [app:otherblog] 就采用了 [app:blog] 的代码，同时将配置项 blogname 改为自己特定的。</p>
<p>另一方面，应用在本地可以修改全局配置项的值：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="attr">admin_email</span> = webmaster@example.com</span><br><span class="line"></span><br><span class="line"><span class="section">[app:main]</span></span><br><span class="line"><span class="attr">use</span> = ...</span><br><span class="line">set admin_email = bob@example.com</span><br></pre></td></tr></table></figure>
<p>只需要在要覆写的键前加 set 即可。</p>
<p>至于为什么要探讨局部配置与全局配置，是因为二者在传递给不同类型的factory function时对应的参数不同，这些将在下文详细探讨。</p>
<h1 id="paste-使用"><a href="#paste-使用" class="headerlink" title="paste 使用"></a>paste 使用</h1><h2 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例 1"></a>使用示例 1</h2><p>借鉴一个例子来讲解，原文 <a href="http://blog.csdn.net/li_101357/article/details/52755367" target="_blank" rel="external">http://blog.csdn.net/li_101357/article/details/52755367</a></p>
<p>在家里水系统的模型大概如下图,以及对应的模拟路径：</p>
<p><img src="/images/python-web-pastedeploy-1.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">总开关      /main</span><br><span class="line">淋浴器      /main/boiler/shower</span><br><span class="line">水龙头      /main/tap</span><br></pre></td></tr></table></figure>
<p>PasteDeploy模型中大致可分部件，分别是：</p>
<p><img src="/images/python-web-pastedeploy-2.png" alt="img"><img src="/images/python-web-pastedeploy-3.png" alt="img"></p>
<p><img src="/images/python-web-pastedeploy-4.png" alt="img"><img src="/images/python-web-pastedeploy-5.png" alt="img"></p>
<p>对应到上例：</p>
<ol>
<li>app       水龙头 淋浴器</li>
<li>filter       热水器</li>
<li>pipeline   热水器 + 淋浴器</li>
<li>composite 总开关</li>
</ol>
<p>确定了对应的URL之后，使用PasteDeploy组件来构造解析文件configure.ini：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[composite:main]</span></span><br><span class="line"><span class="attr">use</span> = egg:Paste#urlmap</span><br><span class="line">/main/tap = tap</span><br><span class="line">/main/boil/shower = pip_to_shower</span><br><span class="line"> </span><br><span class="line"><span class="section">[app:tap]</span></span><br><span class="line">paste.app_factory = tap:app_factory</span><br><span class="line"><span class="attr">in_arg</span> = water</span><br><span class="line"> </span><br><span class="line"><span class="section">[pipeline:pip_to_shower]</span></span><br><span class="line"><span class="attr">pipeline</span> = boiler shower</span><br><span class="line"> </span><br><span class="line"><span class="section">[filter:boiler]</span></span><br><span class="line">paste.filter_app_factory = boiler:filter_app_factory</span><br><span class="line"><span class="attr">in_arg</span> = water</span><br><span class="line"> </span><br><span class="line"><span class="section">[app:shower]</span></span><br><span class="line">paste.app_factory = shower:app_factory</span><br><span class="line"><span class="attr">in_arg</span> = hot_water</span><br></pre></td></tr></table></figure>
<p>我们再一一分析下，顺便复习一下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[composite:main]</span></span><br><span class="line"><span class="attr">use</span> = egg:Paste#urlmap</span><br><span class="line">/main/tap = tap</span><br><span class="line">/main/boil/shower = pip_to_shower</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Paste#urlmap 表示，默认使用Paste.urlmap。</p>
<p>use = egg:Paste#urlmap 意味着直接使用来自于Paste包的urlmap的composite应用。 urlmap是特别常见的composite应用——它使用路径前缀来映射将你的请求与其他应用对应起来。</p>
<p>基本含义就是说，这是Paste已经提供好的一个composite，如果你想自定义就需要另外写一个composite_factory了。</p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[app:tap]</span></span><br><span class="line">paste.app_factory = tap:app_factory</span><br><span class="line"><span class="attr">in_arg</span> = water</span><br></pre></td></tr></table></figure>
<blockquote>
<p>表示路径”/tap”的处理方法paste.app_factory存在于tap.py文件的的app_factory中，这是一个方法。</p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[pipeline:pip_to_shower]</span></span><br><span class="line"><span class="attr">pipeline</span> = boiler shower</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>pipeline</strong> 主要起到组合的作用，将filter(过滤器)和app(应用)组合起来，形成一条管道。</p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[filter:boiler]</span></span><br><span class="line">paste.filter_app_factory = boiler:filter_app_factory</span><br><span class="line"><span class="attr">in_arg</span> = water</span><br></pre></td></tr></table></figure>
<blockquote>
<p>filter类似app，只不过换成了paste.filter_app_factory，filter首先执行过滤功能，然后执行app。</p>
</blockquote>
<p>配置文件中将路径的处理都配置好：</p>
<p><code>/main/tap</code> 路径对应的处理函数 tap ，tap是文件tap.py的app_factory方法。</p>
<p><code>/main/boil/shower</code> 路径对应的处理函数是管道 pip_to_shower 。管道由过滤器 boiler和应用shower组成。首次经过boiler的过滤，然后调用shower函数处理。</p>
<p>下面完成tap、shower和filter文件：</p>
<p>tap.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tap</span><span class="params">(object)</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_arg)</span>:</span> </span><br><span class="line">        self.in_arg = in_arg </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span> </span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Tap'</span> </span><br><span class="line">        start_response(<span class="string">'200 ok'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>)]) </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;h1&gt; Tap! &lt;/h1&gt;"</span></span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app_factory</span><span class="params">(global_config, in_arg)</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> Tap(in_arg)</span><br></pre></td></tr></table></figure>
<p>app_factory是tap对应的处理方法，返回时调用了Tap方法，Tap对应的是类Tap的<strong>call</strong>方法，在该方法中打印一个”Tap”，然后发送报文头，最后返回一个字符串。</p>
<p>shower.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shower</span><span class="params">(object)</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_arg)</span>:</span> </span><br><span class="line">        self.in_arg = in_arg </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span> </span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Shower'</span> </span><br><span class="line">        start_response(<span class="string">'200 ok'</span>, [(<span class="string">'Content Type'</span>, <span class="string">'text/html'</span>)]) </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;h1&gt; Shower! &lt;/h1&gt;"</span> </span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app_factory</span><span class="params">(global_config, in_arg)</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> Shower(in_arg)</span><br></pre></td></tr></table></figure>
<p>shower的分析同上</p>
<p>boiler.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boiler</span><span class="params">(object)</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, in_arg)</span>:</span> </span><br><span class="line">        self.app = app </span><br><span class="line">        self.in_arg = in_arg </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span> </span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Boiler'</span> </span><br><span class="line">        <span class="keyword">return</span> self.app(environ, start_response) </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter_app_factory</span><span class="params">(app, global_config, in_arg)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Boiler(app, in_arg)</span><br></pre></td></tr></table></figure>
<p>filter_app_factory是boiler对应的处理方法，其中传入的参数中有一个app，返回时调用了Boiler,并传入参数app。</p>
<p>Boiler是类Boiler的<strong>call</strong>方法，首先打印了字符串”Boiler”，然后返回时调用了函数app。这个app具体到本例就是调用了shower</p>
<p>所有的文件都准备齐全了，接下来开启WSGI服务，让程序跑起来。</p>
<p>server.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server </span><br><span class="line"><span class="keyword">from</span> paste <span class="keyword">import</span> httpserver </span><br><span class="line"><span class="keyword">from</span> paste.deploy <span class="keyword">import</span> loadapp </span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>: </span><br><span class="line">    configfile = <span class="string">'configure.ini'</span> <span class="comment">#定义配置文件</span></span><br><span class="line">    appname = <span class="string">'main'</span>             <span class="comment">#composite的名称</span></span><br><span class="line">    wsgi_app = loadapp(<span class="string">'config:%s'</span> % os.path.abspath(configfile), appname) <span class="comment">#载入配置文件 </span></span><br><span class="line">    　　　　　<span class="keyword">print</span> <span class="string">"start the server listening on 8080"</span></span><br><span class="line">    server = make_server(<span class="string">'0.0.0.0'</span>, <span class="number">8080</span>, wsgi_app) </span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>运行server程序。</p>
<p><img src="/images/python-web-pastedeploy-6.png" alt="img"></p>
<p>在浏览器中请求URL <a href="http://[ip" target="_blank" rel="external">http://[ip</a> ]:8080/main/tap</p>
<p><img src="/images/python-web-pastedeploy-7.png" alt="img"></p>
<p>在浏览器中请求URL <a href="http://[ip" target="_blank" rel="external">http://[ip</a> ]:8080/main/boiler/shower</p>
<p><img src="/images/python-web-pastedeploy-8.png" alt="img"></p>
<h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结 1"></a>小结 1</h2><p>使用PasteDeploy模块将URL解析从判断的方式转变到文件配置的方式。</p>
<p>使用configuer.ini文件配置了URL /main/tap 对应处理函数 app_factory和/main/boiler/shower 对应处理函数 shower.py中的app_factory。</p>
<p>这个案例讲的就是使用PasteDeploy模块去配置WSGI解析URL。在openstack源码中就是基于这样的模型去完成restful 的解析，处理等。当一条restful的请求如：<a href="http://192.168.252.177:5000/v2.0/token" target="_blank" rel="external">http://192.168.252.177:5000/v2.0/token</a></p>
<p>到达服务器时，服务器处理的流程就是如上，通过配置文件查找URL处理函数，然后调用处理函数返回处理结果。</p>
<h2 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例 2"></a>使用示例 2</h2><p>paste.ini</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[composite:main]</span></span><br><span class="line"><span class="attr">use</span> = egg:Paste#urlmap</span><br><span class="line">/blog = blog</span><br><span class="line">/wiki = wiki</span><br><span class="line"></span><br><span class="line"><span class="section">[app:blog]</span></span><br><span class="line">paste.app_factory = example:Blog.factory</span><br><span class="line"></span><br><span class="line"><span class="section">[app:wiki]</span></span><br><span class="line">paste.app_factory = example:Wiki.factory</span><br></pre></td></tr></table></figure>
<p>wsgi_server.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> paste <span class="keyword">import</span> deploy</span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Init Blog."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        status_code = <span class="string">"200 OK"</span></span><br><span class="line">        response_headers = [(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>)]</span><br><span class="line">        response_body = <span class="string">"This is Blog's response body."</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">        start_response(status_code, response_headers)</span><br><span class="line">        <span class="keyword">return</span> [response_body]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">factory</span><span class="params">(cls, global_conf, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"Blog factory."</span>)</span><br><span class="line">        <span class="keyword">return</span> Blog()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wiki</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Init Wiki."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        status_code = <span class="string">"200 OK"</span></span><br><span class="line">        response_headers = [(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>)]</span><br><span class="line">        response_body = <span class="string">"This is Wiki's response body."</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">        start_response(status_code, response_headers)</span><br><span class="line">        <span class="keyword">return</span> [response_body]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">factory</span><span class="params">(cls, global_conf, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"Wiki factory."</span>)</span><br><span class="line">        <span class="keyword">return</span> Wiki()</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = <span class="string">"main"</span></span><br><span class="line">    port = <span class="number">22800</span></span><br><span class="line">    conf_path = os.path.abspath(<span class="string">'paste.ini'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载 app</span></span><br><span class="line">    applications = deploy.loadapp(<span class="string">"config:&#123;&#125;"</span>.format(conf_path) , app)</span><br><span class="line">    server = make_server(<span class="string">"localhost"</span>, port, applications)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'Started web server at port &#123;&#125;'</span>.format(port))</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>一切都准备好后，在终端执行 <code>python wsgi_server.py</code>来启动 web server</p>
<p>如果像上图一样一切正常，那么打开浏览器</p>
<ul>
<li>访问<a href="http://127.0.0.1:8000/blog，应该显示：This" target="_blank" rel="external">http://127.0.0.1:8000/blog，应该显示：This</a> is Blog’s response body.</li>
<li>访问<a href="http://127.0.0.1:8000/wiki，应该显示：This" target="_blank" rel="external">http://127.0.0.1:8000/wiki，应该显示：This</a> is Wiki’s response body.。</li>
</ul>
<p>注意：urlmap对url的大小写是敏感的，例如如果访问<a href="http://127.0.0.1:8000/BLOG，在url映射中未能找到大写的BLOG。" target="_blank" rel="external">http://127.0.0.1:8000/BLOG，在url映射中未能找到大写的BLOG。</a></p>
<h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结 2"></a>小结 2</h2><p>掌握 PasteDeploy ，你只要按照以下三个步骤逐个完成即可。</p>
<p>1、配置 PasteDeploy使用的ini文件；</p>
<p>2、定义WSGI应用；</p>
<p>3、通过loadapp函数加载WSGI应用；</p>
<p><br><br>参考：</p>
<p><a href="https://www.cnblogs.com/Security-Darren/p/4087587.html" target="_blank" rel="external">详解Paste deploy</a></p>
<p><a href="https://my.oschina.net/crooner/blog/606895" target="_blank" rel="external">Paste模块的世界</a></p>
<p><a href="https://www.cnblogs.com/goldsunshine/p/7756153.html" target="_blank" rel="external">PasteDeploy分析</a></p>
<p><a href="https://blog.csdn.net/bluefire1991/article/details/13289485" target="_blank" rel="external">Openstack源代码分析之paste.deploy</a></p>
<p><a href="https://blog.csdn.net/gyshun/article/details/85055173" target="_blank" rel="external">paste deploy 解说和使用</a></p>
<p><a href="https://blog.csdn.net/tantexian/article/details/37739363?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&amp;spm=1001.2101.3001.4242" target="_blank" rel="external">Python.Paste指南之Deploy-概念</a></p>
<p><a href="https://blog.csdn.net/meisanggou/article/details/88179254?utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.baidujs&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.baidujs" target="_blank" rel="external">python Paste Deployment PasteDeploy模块介绍 中文翻译版</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> PythonWeb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python virtualenv的安装与使用]]></title>
      <url>https://magiceses.github.io/2016/11/18/python-virtualenv%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">人最大的对手，往往不是别人，而是自己的懒惰。别指望撞大运，运气不可能永远在你身上，任何时候都要靠本事吃饭。你必须拼尽全力，才有资格说自己的运气不好。<br></p>

<p>pip, virtualenv, fabric通称为pythoner的三大神器</p>
<p>virtualenv</p>
<p>virtualenv——用来建立一个虚拟的python环境，一个专属于项目的python环境。用virtualenv 来保持一个干净的环境非常有用</p>
<a id="more"></a>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>通过pip安装virtualenv：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure>
<p>测试安装:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --version</span><br></pre></td></tr></table></figure>
<p>为一个工程项目搭建一个虚拟环境:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd my_project</span><br><span class="line">virtualenv my_project_env</span><br></pre></td></tr></table></figure>
<p>另外，如果存在多个python解释器，可以选择指定一个Python解释器（比如<code>python2.7</code>），没有指定则由系统默认的解释器来搭建：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv -p /usr/bin/python2.7 my_project_env</span><br></pre></td></tr></table></figure>
<p>将会在当前的目录中创建一个名my_project_env的文件夹，这是一个独立的python运行环境，包含了Python可执行文件， 以及 <code>pip</code> 库的一份拷贝，这样就能安装其他包了，不过已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境来。</p>
<p>要开始使用虚拟环境，其需要被激活：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source my_project_env/bin/activate</span><br></pre></td></tr></table></figure>
<p>停用虚拟环境：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>
<p>停用后将回到系统默认的Python解释器</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>用pip freeze查看当前安装版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze</span><br></pre></td></tr></table></figure>
<p>另外：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>
<p>这将会创建一个 <code>requirements.txt</code> 文件，其中包含了当前环境中所有包及 各自的版本的简单列表。您可以使用 “pip list”在不产生requirements文件的情况下， 查看已安装包的列表。这将会使另一个不同的开发者（或者是您，如果您需要重新创建这样的环境） 在以后安装相同版本的相同包变得容易。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>这能帮助确保安装、部署和开发者之间的一致性。</p>
<h2 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h2><p>提供了一系列命令使得和虚拟环境工作变得愉快许多。它把您所有的虚拟环境都放在一个地方。</p>
<ol>
<li>将您的所有虚拟环境在一个地方。</li>
<li>包装用于管理虚拟环境（创建，删除，复制）。</li>
<li>使用一个命令来环境之间进行切换。</li>
</ol>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装（确保 <strong>virtualenv</strong> 已经安装了）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper</span><br><span class="line">export WORKON_HOME=~/Envs  #设置环境变量</span><br><span class="line">mkdir -p $WORKON_HOME #创建虚拟环境管理目录</span><br><span class="line">find / -name virtualenvwrapper.sh #找到virtualenvwrapper.sh的路径</span><br><span class="line">source 路径 #激活virtualenvwrapper.sh</span><br></pre></td></tr></table></figure>
<p>默认virtualenvwrapper安装在下面python解释器中的site-packages，实际上需要运行virtualenvwrapper.sh文件才行；所以需要先进行配置一下：</p>
<ul>
<li><code>找到virtualenvwrapper.sh的路径：find / -name virtualenvwrapper.sh</code></li>
<li>运行virtualenvwrapper.sh文件：source 路径</li>
</ul>
<p><strong>ps：每次要想使用virtualenvwrapper 工具时，都必须先激活virtualenvwrapper.sh,另外，如果创建前要将即将的环境保存到Envs中，就要先设置一下环境变量：</strong>export WORKON_HOME=~/Envs，再搭建</p>
<p>对于Windows，您可以使用 virtualenvwrapper-win</p>
<p>安装（确保 <strong>virtualenv</strong> 已经安装了）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper-win</span><br><span class="line">在Windows中，WORKON_HOME默认的路径是 %USERPROFILE%Envs 。</span><br></pre></td></tr></table></figure>
<h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><p>1、创建一个虚拟环境：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv project_env</span><br></pre></td></tr></table></figure>
<p><code>这会在Envs</code> 中创建 project_env虚拟环境</p>
<p>选择一个python解释器来搭建：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv env  --python=python2.7</span><br></pre></td></tr></table></figure>
<p>2、在虚拟环境上工作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon project_env</span><br></pre></td></tr></table></figure>
<p>或者，您可以创建一个项目，它会创建虚拟环境，并在 <code>$WORKON_HOME</code> 中创建一个项目目录。 当您使用 <code>workon</code>project_env 时，会 <code>cd</code> -ed 到项目目录中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv project_env</span><br></pre></td></tr></table></figure>
<p><strong>virtualenvwrapper</strong> 提供环境名字的tab补全功能。当您有很多环境， 并且很难记住它们的名字时，这就显得很有用。</p>
<p><code>workon</code> 也能停止您当前所在的环境，所以您可以在环境之间快速的切换。</p>
<p>3、停止虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>
<p>4、删除：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmvirtualenv project_env</span><br></pre></td></tr></table></figure>
<h3 id="其他有用的命令"><a href="#其他有用的命令" class="headerlink" title="其他有用的命令"></a>其他有用的命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lsvirtualenv    #列举所有的环境。</span><br><span class="line"></span><br><span class="line">cdvirtualenv    #导航到当前激活的虚拟环境的目录中，比如说这样您就能够浏览它的 site-packages。</span><br><span class="line"></span><br><span class="line">cdsitepackages   # 和上面的类似，但是是直接进入到 site-packages 目录中。</span><br><span class="line"></span><br><span class="line">lssitepackages     #显示 site-packages 目录中的内容。</span><br></pre></td></tr></table></figure>
<p><a href="https://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html" target="_blank" rel="external">virtualenvwrapper 命令的完全列表</a> 。</p>
<!-- <br /> -->
<p>原文： <a href="https://www.cnblogs.com/freely/p/8022923.html" target="_blank" rel="external">https://www.cnblogs.com/freely/p/8022923.html</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django 框架使用及源码分析]]></title>
      <url>https://magiceses.github.io/2016/10/16/python-web-django%20%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">任何事情，你想做就有方法，不想做就有借口，你有选择的自由，也有承担后果的义务。不要明天再努力，只有努力过完今天的人才有明天。<br></p>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Django 是用 Python 开发的一个免费开源的 Web 框架，几乎囊括了 Web 应用的方方面面，可以用于快速搭建高性能、优雅的网站，Django 提供了许多网站后台开发经常用到的模块，使开发者能够专注于业务部分。</p>
<p>Django 提供了通用 Web 开发模式的高度抽象，为频繁进行的编程作业提供了快速解决方法，并为“如何解决问题”提供了清晰明了的约定。Django 通过 DRY（Don’t Repeat Yourself，不要重复自己）的理念来鼓励快速开发。<br><a id="more"></a><br>Django 框架支持主流的操作系统平台包括 Windows，Linux，MacOS 等。Python Django 框架是一款全能型框架，它内置了许多模块，极大的方便了 Web 开发者，也正是由于它的“全面性”，会在学习 Django 的时候感到不知该如何处下手。</p>
<p>Django 的基本使用就不说了，不是这篇文档的重点，这里附个<a href="https://docs.djangoproject.com/zh-hans/2.1/" target="_blank" rel="external">中文文档</a>，有需要的可以看下，下面主要简单分析下django的源码，基于1.8.14。</p>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="命令行解析"><a href="#命令行解析" class="headerlink" title="命令行解析"></a>命令行解析</h2><p>我们都知道，启动一个django工程用的是python manage.py runserver命令，所以manage.py文件无疑就是启动django项目的入口文件，这里我将通过从入口文件出发，一步一步阅读跟django项目启动相关的源码，看看在这个过程中都做了些什么，同时给出我自己的解释。</p>
<p>入口文件<code>django/conf/project_template/manage.py</code>：核心代码如下，前面根据配置设置一下环境，然后导包（判断是否安装django package），然后真正有用的就只有最后一句，也就是根据命令行的命令做相应的执行。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"&#123;&#123; project_name &#125;&#125;.settings"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> django.core.management <span class="keyword">import</span> execute_from_command_line</span><br><span class="line"></span><br><span class="line">    execute_from_command_line(sys.argv)</span><br></pre></td></tr></table></figure>
<p>execute_from_command_line函数：核心代码如下，基本流程就是先实例化一个管理工具类对象，然后调用相应的执行函数。在执行函数中，首先接收来自命令行的命令，然后进行校验和判断，如果是runserver，则调用django.setup()函数（该函数是关键），其他的基本都是一些意外的处理。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django/core/management/__init__.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_from_command_line</span><span class="params">(argv=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A simple method that runs a ManagementUtility.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    utility = ManagementUtility(argv)</span><br><span class="line">    utility.execute()</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManagementUtility</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Encapsulates the logic of the django-admin and manage.py utilities.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A ManagementUtility has a number of commands, which can be manipulated</span></span><br><span class="line"><span class="string">    by editing the self.commands dictionary.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 初始化函数：在实例化时把命令行参数记下来，同时用项目文件夹名作为项目名记录下来</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, argv=None)</span>:</span></span><br><span class="line">        self.argv = argv <span class="keyword">or</span> sys.argv[:]</span><br><span class="line">        self.prog_name = os.path.basename(self.argv[<span class="number">0</span>])</span><br><span class="line">        self.settings_exception = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main_help_text</span><span class="params">(self, commands_only=False)</span>:</span></span><br><span class="line">				...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetch_command</span><span class="params">(self, subcommand)</span>:</span></span><br><span class="line">				...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">autocomplete</span><span class="params">(self)</span>:</span></span><br><span class="line">				...</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 真正执行命令的函数，这里以runserver命名为例，看看项目启动都干了什么</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Given the command-line arguments, this figures out which subcommand is</span></span><br><span class="line"><span class="string">        being run, creates a parser appropriate to that command, and runs it.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">          	<span class="comment"># 拿具体的命令行指令，比如'runserver'</span></span><br><span class="line">            subcommand = self.argv[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">except</span> IndexError:</span><br><span class="line">            subcommand = <span class="string">'help'</span>  <span class="comment"># Display help if no arguments were given.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Preprocess options to extract --settings and --pythonpath.</span></span><br><span class="line">        <span class="comment"># These options could affect the commands that are available, so they</span></span><br><span class="line">        <span class="comment"># must be processed early.</span></span><br><span class="line">        <span class="comment"># 下面部分是一些命令行参数的读取和校验，这一块只要settings配置和命令行参数没问题就可以过</span></span><br><span class="line">        parser = CommandParser(<span class="keyword">None</span>, usage=<span class="string">"%(prog)s subcommand [options] [args]"</span>, add_help=<span class="keyword">False</span>)</span><br><span class="line">        parser.add_argument(<span class="string">'--settings'</span>)</span><br><span class="line">        parser.add_argument(<span class="string">'--pythonpath'</span>)</span><br><span class="line">        parser.add_argument(<span class="string">'args'</span>, nargs=<span class="string">'*'</span>)  <span class="comment"># catch-all</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            options, args = parser.parse_known_args(self.argv[<span class="number">2</span>:])</span><br><span class="line">            handle_default_options(options)</span><br><span class="line">        <span class="keyword">except</span> CommandError:</span><br><span class="line">            <span class="keyword">pass</span>  <span class="comment"># Ignore any option errors at this point.</span></span><br><span class="line"></span><br><span class="line">        no_settings_commands = [</span><br><span class="line">            <span class="string">'help'</span>, <span class="string">'version'</span>, <span class="string">'--help'</span>, <span class="string">'--version'</span>, <span class="string">'-h'</span>,</span><br><span class="line">            <span class="string">'compilemessages'</span>, <span class="string">'makemessages'</span>,</span><br><span class="line">            <span class="string">'startapp'</span>, <span class="string">'startproject'</span>,</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            settings.INSTALLED_APPS</span><br><span class="line">        <span class="keyword">except</span> ImproperlyConfigured <span class="keyword">as</span> exc:</span><br><span class="line">            self.settings_exception = exc</span><br><span class="line">            <span class="comment"># A handful of built-in management commands work without settings.</span></span><br><span class="line">            <span class="comment"># Load the default settings -- where INSTALLED_APPS is empty.</span></span><br><span class="line">            <span class="keyword">if</span> subcommand <span class="keyword">in</span> no_settings_commands:</span><br><span class="line">                settings.configure()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果settings已配置，则开始做命令的相应处理，这里是启动项目runserver部分</span></span><br><span class="line">        <span class="keyword">if</span> settings.configured:</span><br><span class="line">            <span class="comment"># Start the auto-reloading dev server even if the code is broken.</span></span><br><span class="line">            <span class="comment"># The hardcoded condition is a code smell but we can't rely on a</span></span><br><span class="line">            <span class="comment"># flag on the command class because we haven't located it yet.</span></span><br><span class="line">            <span class="keyword">if</span> subcommand == <span class="string">'runserver'</span> <span class="keyword">and</span> <span class="string">'--noreload'</span> <span class="keyword">not</span> <span class="keyword">in</span> self.argv:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                  	<span class="comment"># 这里的check_errors是个闭包实现，其实还是调用django.setup()，然后如果有exception就跑出来到下面进行处理。</span></span><br><span class="line">                    autoreload.check_errors(django.setup)()</span><br><span class="line">                <span class="keyword">except</span> Exception:</span><br><span class="line">                    <span class="comment"># The exception will be raised later in the child process</span></span><br><span class="line">                    <span class="comment"># started by the autoreloader. Pretend it didn't happen by</span></span><br><span class="line">                    <span class="comment"># loading an empty list of applications.</span></span><br><span class="line">                    apps.all_models = defaultdict(OrderedDict)</span><br><span class="line">                    apps.app_configs = OrderedDict()</span><br><span class="line">                    apps.apps_ready = apps.models_ready = apps.ready = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># In all other cases, django.setup() is required to succeed.</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                django.setup()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 下面是其他的一些可能的命令，如'version'或'help'</span></span><br><span class="line">        self.autocomplete()</span><br><span class="line">        <span class="keyword">if</span> subcommand == <span class="string">'help'</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'--commands'</span> <span class="keyword">in</span> args:</span><br><span class="line">                sys.stdout.write(self.main_help_text(commands_only=<span class="keyword">True</span>) + <span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">elif</span> len(options.args) &lt; <span class="number">1</span>:</span><br><span class="line">                sys.stdout.write(self.main_help_text() + <span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.fetch_command(options.args[<span class="number">0</span>]).print_help(self.prog_name, options.args[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># Special-cases: We want 'django-admin --version' and</span></span><br><span class="line">        <span class="comment"># 'django-admin --help' to work, for backwards compatibility.</span></span><br><span class="line">        <span class="keyword">elif</span> subcommand == <span class="string">'version'</span> <span class="keyword">or</span> self.argv[<span class="number">1</span>:] == [<span class="string">'--version'</span>]:</span><br><span class="line">            sys.stdout.write(django.get_version() + <span class="string">'\n'</span>)</span><br><span class="line">        <span class="keyword">elif</span> self.argv[<span class="number">1</span>:] <span class="keyword">in</span> ([<span class="string">'--help'</span>], [<span class="string">'-h'</span>]):</span><br><span class="line">            sys.stdout.write(self.main_help_text() + <span class="string">'\n'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.fetch_command(subcommand).run_from_argv(self.argv)</span><br></pre></td></tr></table></figure>
<p>这一部分先看到这里，这里基本是启动项目前一半的过程，我们可以知道：<code>django</code>项目的入口程序其实就是<code>manage.py</code>通过对命令行参数进行解析，然后对不同的命令进行不同的处理。针对<code>runserver</code>，<code>django</code>会调用<code>django.setup()</code>函数来进行项目的初始化配置，然后调用 <code>self.fetch_command(subcommand).run_from_argv(self.argv)</code> 来进行项目启动，包括启动WSGI等。</p>
<h2 id="App-注册"><a href="#App-注册" class="headerlink" title="App 注册"></a>App 注册</h2><p><code>django.setup()</code> 函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django/__init__.py</span></span><br><span class="line"><span class="keyword">from</span> django.utils.version <span class="keyword">import</span> get_version</span><br><span class="line"></span><br><span class="line">VERSION = (<span class="number">1</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="string">'final'</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">__version__ = get_version(VERSION)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Configure the settings (this happens as a side effect of accessing the</span></span><br><span class="line"><span class="string">    first setting), configure logging and populate the app registry.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">from</span> django.apps <span class="keyword">import</span> apps</span><br><span class="line">    <span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line">    <span class="keyword">from</span> django.utils.log <span class="keyword">import</span> configure_logging</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置一下日志</span></span><br><span class="line">    configure_logging(settings.LOGGING_CONFIG, settings.LOGGING)</span><br><span class="line">    <span class="comment"># 配置app</span></span><br><span class="line">    apps.populate(settings.INSTALLED_APPS)</span><br></pre></td></tr></table></figure>
<p><code>apps.populate()</code> 函数：在项目启动时，对开发者写好的项目中的app进行配置。因为是类中的函数，用到了一些属性，所以这里把init函数也一起放出来。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django/apps/registry.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter, OrderedDict, defaultdict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> AppRegistryNotReady, ImproperlyConfigured</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> lru_cache</span><br><span class="line"><span class="keyword">from</span> django.utils._os <span class="keyword">import</span> upath</span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> RemovedInDjango19Warning</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .config <span class="keyword">import</span> AppConfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apps</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A registry that stores the configuration of installed applications.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    It also keeps track of models eg. to provide reverse-relations.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">		<span class="comment"># 初始化函数放在这里主要是为了说明几个重要的实例变量：self.all_models, self.app_configs.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, installed_apps=<span class="params">()</span>)</span>:</span></span><br><span class="line">        <span class="comment"># installed_apps is set to None when creating the master registry</span></span><br><span class="line">        <span class="comment"># because it cannot be populated at that point. Other registries must</span></span><br><span class="line">        <span class="comment"># provide a list of installed apps and are populated immediately.</span></span><br><span class="line">        <span class="keyword">if</span> installed_apps <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> hasattr(sys.modules[__name__], <span class="string">'apps'</span>):</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">"You must supply an installed_apps argument."</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Mapping of app labels =&gt; model names =&gt; model classes. Every time a</span></span><br><span class="line">        <span class="comment"># model is imported, ModelBase.__new__ calls apps.register_model which</span></span><br><span class="line">        <span class="comment"># creates an entry in all_models. All imported models are registered,</span></span><br><span class="line">        <span class="comment"># regardless of whether they're defined in an installed application</span></span><br><span class="line">        <span class="comment"># and whether the registry has been populated. Since it isn't possible</span></span><br><span class="line">        <span class="comment"># to reimport a module safely (it could reexecute initialization code)</span></span><br><span class="line">        <span class="comment"># all_models is never overridden or reset.</span></span><br><span class="line">        <span class="comment"># 存项目中所有的models，是在import的时候更新，不在setup的时候</span></span><br><span class="line">        self.all_models = defaultdict(OrderedDict)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Mapping of labels to AppConfig instances for installed apps.</span></span><br><span class="line">        <span class="comment"># 存各个app的配置实例</span></span><br><span class="line">        self.app_configs = OrderedDict()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Stack of app_configs. Used to store the current state in</span></span><br><span class="line">        <span class="comment"># set_available_apps and set_installed_apps.</span></span><br><span class="line">        self.stored_app_configs = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Whether the registry is populated.</span></span><br><span class="line">        self.apps_ready = self.models_ready = self.ready = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Lock for thread-safe population.</span></span><br><span class="line">        self._lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Pending lookups for lazy relations.</span></span><br><span class="line">        self._pending_lookups = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Populate apps and models, unless it's the master registry.</span></span><br><span class="line">        <span class="keyword">if</span> installed_apps <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.populate(installed_apps)</span><br><span class="line">		</span><br><span class="line">    <span class="comment"># 启动项目时最主要的执行函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">populate</span><span class="params">(self, installed_apps=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Loads application configurations and models.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        This method imports each application module and then each model module.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        It is thread safe and idempotent, but not reentrant.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.ready:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># populate() might be called by two threads in parallel on servers</span></span><br><span class="line">        <span class="comment"># that create threads before initializing the WSGI callable.</span></span><br><span class="line">        <span class="keyword">with</span> self._lock:</span><br><span class="line">            <span class="keyword">if</span> self.ready:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># app_config should be pristine, otherwise the code below won't</span></span><br><span class="line">            <span class="comment"># guarantee that the order matches the order in INSTALLED_APPS.</span></span><br><span class="line">            <span class="comment"># 这里因为self._lock用的是可重入锁，所以同一个线程是可以在配置过程中多次进入到这里的，所以通过加self.app_configs状态防止同一线程的多次setup</span></span><br><span class="line">            <span class="keyword">if</span> self.app_configs:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">"populate() isn't reentrant"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Load app configs and app modules.</span></span><br><span class="line">            <span class="comment"># 这里的installed_apps是settings.py传过来的我们自己写的那个列表</span></span><br><span class="line">            <span class="keyword">for</span> entry <span class="keyword">in</span> installed_apps:</span><br><span class="line">                <span class="keyword">if</span> isinstance(entry, AppConfig):</span><br><span class="line">                  	<span class="comment"># 这里是为了多一种配置方式吧，我们自己写的entry基本都是字符串，进入else分支</span></span><br><span class="line">                    app_config = entry</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                  	<span class="comment"># 这里创建一个app配置类实例，代码在下面，也就现在在针对每一个app进行配置。这里最好先到后面看看每一个AppConfig对象里面属性的含义。</span></span><br><span class="line">                    app_config = AppConfig.create(entry)</span><br><span class="line">                <span class="comment"># 配置完之后检查是否有重复的app配置实例的label</span></span><br><span class="line">                <span class="keyword">if</span> app_config.label <span class="keyword">in</span> self.app_configs:</span><br><span class="line">                    <span class="keyword">raise</span> ImproperlyConfigured(</span><br><span class="line">                        <span class="string">"Application labels aren't unique, "</span></span><br><span class="line">                        <span class="string">"duplicates: %s"</span> % app_config.label)</span><br><span class="line">								<span class="comment"># 把每一个app的配置实例添加到self.app_configs中</span></span><br><span class="line">                self.app_configs[app_config.label] = app_config</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Check for duplicate app names.</span></span><br><span class="line">            <span class="comment"># 这里确保配置类对象的名字不会重复</span></span><br><span class="line">            counts = Counter(</span><br><span class="line">                app_config.name <span class="keyword">for</span> app_config <span class="keyword">in</span> self.app_configs.values())</span><br><span class="line">            duplicates = [</span><br><span class="line">                name <span class="keyword">for</span> name, count <span class="keyword">in</span> counts.most_common() <span class="keyword">if</span> count &gt; <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> duplicates:</span><br><span class="line">                <span class="keyword">raise</span> ImproperlyConfigured(</span><br><span class="line">                    <span class="string">"Application names aren't unique, "</span></span><br><span class="line">                    <span class="string">"duplicates: %s"</span> % <span class="string">", "</span>.join(duplicates))</span><br><span class="line"></span><br><span class="line">            self.apps_ready = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Load models.</span></span><br><span class="line">            <span class="comment"># 将每个模块所拥有的models分配到每个模块的app配置实例中，对应函数代码在下面</span></span><br><span class="line">            <span class="keyword">for</span> app_config <span class="keyword">in</span> self.app_configs.values():</span><br><span class="line">                all_models = self.all_models[app_config.label]</span><br><span class="line">                app_config.import_models(all_models)</span><br><span class="line"></span><br><span class="line">            self.clear_cache()</span><br><span class="line"></span><br><span class="line">            self.models_ready = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 跑每一个app_config的ready函数，对应函数代码和分析在下面（重点）</span></span><br><span class="line">            <span class="keyword">for</span> app_config <span class="keyword">in</span> self.get_app_configs():</span><br><span class="line">                app_config.ready()</span><br><span class="line"></span><br><span class="line">            self.ready = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_apps_ready</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_models_ready</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_app_configs</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_app_config</span><span class="params">(self, app_label)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># This method is performance-critical at least for Django's test suite.</span></span><br><span class="line"><span class="meta">    @lru_cache.lru_cache(maxsize=None)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_models</span><span class="params">(self, app_mod=None, include_auto_created=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                   include_deferred=False, include_swapped=False)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_model</span><span class="params">(self, app_label, model_name=None)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register_model</span><span class="params">(self, app_label, model)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_installed</span><span class="params">(self, app_name)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_containing_app_config</span><span class="params">(self, object_name)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_registered_model</span><span class="params">(self, app_label, model_name)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_available_apps</span><span class="params">(self, available)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unset_available_apps</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_installed_apps</span><span class="params">(self, installed)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unset_installed_apps</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear_cache</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_app</span><span class="params">(self, app_name)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">app_cache_ready</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_app</span><span class="params">(self, app_label)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_apps</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_app_package</span><span class="params">(self, app)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_app_package</span><span class="params">(self, app_label)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_app_path</span><span class="params">(self, app)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_app_path</span><span class="params">(self, app_label)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_app_paths</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register_models</span><span class="params">(self, app_label, *models)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先看看apps是什么，其实是Apps类对象是实例，实例化之后通过在该目录下__init__.py中__all__ = ['AppConfig', 'apps']暴露到全局</span></span><br><span class="line">apps = Apps(installed_apps=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure>
<p>上面代码中，有项目启动时候初始化<code>django</code>的各个app的代码，而各个app代码中存在针对各个app的配置，这些是由AppConfig类来做处理的，所以可以看到上面的代码中一直有调用<code>app_config.xxx())</code>函数，下面是三个比较主要的函数，为了更好地说明这个类，下面的代码中也把init函数放出来了：</p>
<ul>
<li><code>AppConfig.create()</code>函数：所以，这个函数其实就是将我们自己生成的<code>app</code>的配置类<code>xxxConfig</code>进行实例化并返回，只是中间经过一系列路径解析和尝试<code>import_module</code>所以代码才这么长。</li>
<li><code>AppConfig.import_models()</code>函数：这里可以看到，<code>import_models</code>其实是从总的<code>apps</code>管理器对象那里去取自己对应的<code>models</code>存起来。这是因为如Apps类中所注释的：<code>Every time a model is imported, ModelBase.__new__ calls apps.register_model which creates an entry in all*models.</code> 。总的<code>apps</code>管理器会在import的时候注册所有的<code>model</code>，所以在注册某一个<code>app</code>配置实例<code>(app_config*)</code>的时候，反而是<code>app</code>配置实例去<code>apps</code>管理器那里拿属于自己的<code>models</code>进行属性赋值。</li>
<li><code>AppConfig.ready()</code>函数：我们可以看到，<code>ready</code>函数是空的，<strong>是为了给开发者在需要在启动项目时候做一些一次性的事情留了一个接口，只需要在<code>apps.py</code>中重写<code>ready</code>函数就可以了，而且确实会在启动过程中执行。</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django/apps/config.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> importlib <span class="keyword">import</span> import_module</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> AppRegistryNotReady, ImproperlyConfigured</span><br><span class="line"><span class="keyword">from</span> django.utils._os <span class="keyword">import</span> upath</span><br><span class="line"><span class="keyword">from</span> django.utils.module_loading <span class="keyword">import</span> module_has_submodule</span><br><span class="line"></span><br><span class="line">MODELS_MODULE_NAME = <span class="string">'models'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Class representing a Django application and its configuration.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 各个属性的注释可以说很详细了，主要看例子！注意label和name的不同，同时两者都要求不能重复</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app_name, app_module)</span>:</span></span><br><span class="line">        <span class="comment"># Full Python path to the application eg. 'django.contrib.admin'.</span></span><br><span class="line">        self.name = app_name</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Root module for the application eg. &lt;module 'django.contrib.admin'</span></span><br><span class="line">        <span class="comment"># from 'django/contrib/admin/__init__.pyc'&gt;.</span></span><br><span class="line">        self.module = app_module</span><br><span class="line"></span><br><span class="line">        <span class="comment"># The following attributes could be defined at the class level in a</span></span><br><span class="line">        <span class="comment"># subclass, hence the test-and-set pattern.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Last component of the Python path to the application eg. 'admin'.</span></span><br><span class="line">        <span class="comment"># This value must be unique across a Django project.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'label'</span>):</span><br><span class="line">            self.label = app_name.rpartition(<span class="string">"."</span>)[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Human-readable name for the application eg. "Admin".</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'verbose_name'</span>):</span><br><span class="line">            self.verbose_name = self.label.title()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Filesystem path to the application directory eg.</span></span><br><span class="line">        <span class="comment"># u'/usr/lib/python2.7/dist-packages/django/contrib/admin'. Unicode on</span></span><br><span class="line">        <span class="comment"># Python 2 and a str on Python 3.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'path'</span>):</span><br><span class="line">            self.path = self._path_from_module(app_module)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Module containing models eg. &lt;module 'django.contrib.admin.models'</span></span><br><span class="line">        <span class="comment"># from 'django/contrib/admin/models.pyc'&gt;. Set by import_models().</span></span><br><span class="line">        <span class="comment"># None if the application doesn't have a models module.</span></span><br><span class="line">        self.models_module = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Mapping of lower case model names to model classes. Initially set to</span></span><br><span class="line">        <span class="comment"># None to prevent accidental access before import_models() runs.</span></span><br><span class="line">        self.models = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;%s: %s&gt;'</span> % (self.__class__.__name__, self.label)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_path_from_module</span><span class="params">(self, module)</span>:</span></span><br><span class="line">        <span class="string">"""Attempt to determine app's filesystem path from its module."""</span></span><br><span class="line">        <span class="comment"># See #21874 for extended discussion of the behavior of this method in</span></span><br><span class="line">        <span class="comment"># various cases.</span></span><br><span class="line">        <span class="comment"># Convert paths to list because Python 3.3 _NamespacePath does not</span></span><br><span class="line">        <span class="comment"># support indexing.</span></span><br><span class="line">        paths = list(getattr(module, <span class="string">'__path__'</span>, []))</span><br><span class="line">        <span class="keyword">if</span> len(paths) != <span class="number">1</span>:</span><br><span class="line">            filename = getattr(module, <span class="string">'__file__'</span>, <span class="keyword">None</span>)</span><br><span class="line">            <span class="keyword">if</span> filename <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                paths = [os.path.dirname(filename)]</span><br><span class="line">        <span class="keyword">if</span> len(paths) &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(</span><br><span class="line">                <span class="string">"The app module %r has multiple filesystem locations (%r); "</span></span><br><span class="line">                <span class="string">"you must configure this app with an AppConfig subclass "</span></span><br><span class="line">                <span class="string">"with a 'path' class attribute."</span> % (module, paths))</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> paths:</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(</span><br><span class="line">                <span class="string">"The app module %r has no filesystem location, "</span></span><br><span class="line">                <span class="string">"you must configure this app with an AppConfig subclass "</span></span><br><span class="line">                <span class="string">"with a 'path' class attribute."</span> % (module,))</span><br><span class="line">        <span class="keyword">return</span> upath(paths[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这里用类方法做实例化，其实这里才是真正的实例化逻辑，上面的init函数只是声明了一些属性</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(cls, entry)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Factory that creates an app config from an entry in INSTALLED_APPS.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># If import_module succeeds, entry is a path to an app module,</span></span><br><span class="line">            <span class="comment"># which may specify an app config class with default_app_config.</span></span><br><span class="line">            <span class="comment"># Otherwise, entry is a path to an app config class or an error.</span></span><br><span class="line">            <span class="comment"># 这里导入对应的app module</span></span><br><span class="line">            module = import_module(entry)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> ImportError:</span><br><span class="line">            <span class="comment"># Track that importing as an app module failed. If importing as an</span></span><br><span class="line">            <span class="comment"># app config class fails too, we'll trigger the ImportError again.</span></span><br><span class="line">            module = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">            mod_path, _, cls_name = entry.rpartition(<span class="string">'.'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Raise the original exception when entry cannot be a path to an</span></span><br><span class="line">            <span class="comment"># app config class.</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> mod_path:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># If this works, the app module specifies an app config class.</span></span><br><span class="line">                <span class="comment"># 这里的entry是每个django app中对应的配置类，对应于apps.py</span></span><br><span class="line">                entry = module.default_app_config</span><br><span class="line">            <span class="keyword">except</span> AttributeError:</span><br><span class="line">                <span class="comment"># Otherwise, it simply uses the default app config class.</span></span><br><span class="line">                <span class="keyword">return</span> cls(entry, module)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                mod_path, _, cls_name = entry.rpartition(<span class="string">'.'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># If we're reaching this point, we must attempt to load the app config</span></span><br><span class="line">        <span class="comment"># class located at &lt;mod_path&gt;.&lt;cls_name&gt;</span></span><br><span class="line">        mod = import_module(mod_path)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 这里拿到我们项目中某个app下apps.py中的那个xxxConfig类，继承自AppConfig</span></span><br><span class="line">            cls = getattr(mod, cls_name)</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">if</span> module <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="comment"># If importing as an app module failed, that error probably</span></span><br><span class="line">                <span class="comment"># contains the most informative traceback. Trigger it again.</span></span><br><span class="line">                import_module(entry)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Check for obvious errors. (This check prevents duck typing, but</span></span><br><span class="line">        <span class="comment"># it could be removed if it became a problem in practice.)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> issubclass(cls, AppConfig):</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(</span><br><span class="line">                <span class="string">"'%s' isn't a subclass of AppConfig."</span> % entry)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Obtain app name here rather than in AppClass.__init__ to keep</span></span><br><span class="line">        <span class="comment"># all error checking for entries in INSTALLED_APPS in one place.</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 这个是我们生成app的时候指定的那个名字，会自动填到xxxConfig的name属性中</span></span><br><span class="line">            app_name = cls.name</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(</span><br><span class="line">                <span class="string">"'%s' must supply a name attribute."</span> % entry)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Ensure app_name points to a valid module.</span></span><br><span class="line">        app_module = import_module(app_name)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Entry is a path to an app config class.</span></span><br><span class="line">        <span class="comment"># 真正实例化这个类，这里的cls其实就是xxxConfig</span></span><br><span class="line">        <span class="keyword">return</span> cls(app_name, app_module)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_models_ready</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Raises an exception if models haven't been imported yet.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.models <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> AppRegistryNotReady(</span><br><span class="line">                <span class="string">"Models for app '%s' haven't been imported yet."</span> % self.label)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_model</span><span class="params">(self, model_name)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns the model with the given case-insensitive model_name.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Raises LookupError if no model exists with this name.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.check_models_ready()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.models[model_name.lower()]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> LookupError(</span><br><span class="line">                <span class="string">"App '%s' doesn't have a '%s' model."</span> % (self.label, model_name))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_models</span><span class="params">(self, include_auto_created=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                   include_deferred=False, include_swapped=False)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns an iterable of models.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        By default, the following models aren't included:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        - auto-created models for many-to-many relations without</span></span><br><span class="line"><span class="string">          an explicit intermediate table,</span></span><br><span class="line"><span class="string">        - models created to satisfy deferred attribute queries,</span></span><br><span class="line"><span class="string">        - models that have been swapped out.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Set the corresponding keyword argument to True to include such models.</span></span><br><span class="line"><span class="string">        Keyword arguments aren't documented; they're a private API.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.check_models_ready()</span><br><span class="line">        <span class="keyword">for</span> model <span class="keyword">in</span> self.models.values():</span><br><span class="line">            <span class="keyword">if</span> model._deferred <span class="keyword">and</span> <span class="keyword">not</span> include_deferred:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> model._meta.auto_created <span class="keyword">and</span> <span class="keyword">not</span> include_auto_created:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> model._meta.swapped <span class="keyword">and</span> <span class="keyword">not</span> include_swapped:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">yield</span> model</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这里可以看到，import_models其实是从总的apps管理器对象那里去取自己对应的models存起来。这是因为如Apps类中所注释的：Every time a model is imported, ModelBase.__new__ calls apps.register_model which creates an entry in all_models. 总的apps管理器会在import的时候注册所有的model，所以在注册某一个app配置实例的时候，反而是app配置实例去apps管理器那里拿属于自己的models进行属性赋值。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">import_models</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">import_models</span><span class="params">(self, all_models)</span>:</span></span><br><span class="line">        <span class="comment"># Dictionary of models for this app, primarily maintained in the</span></span><br><span class="line">        <span class="comment"># 'all_models' attribute of the Apps this AppConfig is attached to.</span></span><br><span class="line">        <span class="comment"># Injected as a parameter because it gets populated when models are</span></span><br><span class="line">        <span class="comment"># imported, which might happen before populate() imports models.</span></span><br><span class="line">        self.models = all_models</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> module_has_submodule(self.module, MODELS_MODULE_NAME):</span><br><span class="line">            models_module_name = <span class="string">'%s.%s'</span> % (self.name, MODELS_MODULE_NAME)</span><br><span class="line">            self.models_module = import_module(models_module_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注释很清晰了,用户可通过重写自定义项目启动时app的行为</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ready</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Override this method in subclasses to run code when Django starts.</span></span><br><span class="line"><span class="string">        """</span></span><br></pre></td></tr></table></figure>
<p><code>app</code>的相关配置有两个关键部分，一个是对单个<code>app</code>的配置类<code>AppConfig</code>，一个是对所有<code>app</code>的管理类<code>Apps</code>，这两个类紧密相关，是总分关系，同时相互索引。在初始化过程中，<code>Apps</code>在控制流程，主要包括对所有<code>app</code>进行路径解析、名字去重、对每个<code>app</code>配置类进行初始化、赋予每个<code>app</code>配置类它们的相关<code>models</code>、还有就是执行每个<code>app</code>开发者自己定义的<code>ready</code>函数。</p>
<p>下面看下 <code>self.fetch_command(subcommand).run_from_argv(self.argv)</code></p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>获取执行命令所需要的类</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django/core/management/__init__.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManagementUtility</span><span class="params">(object)</span>:</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">fetch_command</span><span class="params">(self, subcommand)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Tries to fetch the given subcommand, printing a message with the</span></span><br><span class="line"><span class="string">        appropriate command called from the command line (usually</span></span><br><span class="line"><span class="string">        "django-admin" or "manage.py") if it can't be found.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># Get commands outside of try block to prevent swallowing exceptions</span></span><br><span class="line">        commands = get_commands()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            app_name = commands[subcommand]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="comment"># This might trigger ImproperlyConfigured (masked in get_commands)</span></span><br><span class="line">            settings.INSTALLED_APPS</span><br><span class="line">            sys.stderr.write(<span class="string">"Unknown command: %r\nType '%s help' for usage.\n"</span> %</span><br><span class="line">                (subcommand, self.prog_name))</span><br><span class="line">            sys.exit(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> isinstance(app_name, BaseCommand):</span><br><span class="line">            <span class="comment"># If the command is already loaded, use it directly.</span></span><br><span class="line">            klass = app_name</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            klass = load_command_class(app_name, subcommand)</span><br><span class="line">        <span class="keyword">return</span> klass</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django/core/management/base.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseCommand</span><span class="params">(object)</span>:</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">run_from_argv</span><span class="params">(self, argv)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Set up any environment changes requested (e.g., Python path</span></span><br><span class="line"><span class="string">        and Django settings), then run this command. If the</span></span><br><span class="line"><span class="string">        command raises a ``CommandError``, intercept it and print it sensibly</span></span><br><span class="line"><span class="string">        to stderr. If the ``--traceback`` option is present or the raised</span></span><br><span class="line"><span class="string">        ``Exception`` is not ``CommandError``, raise it.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._called_from_command_line = <span class="keyword">True</span></span><br><span class="line">        parser = self.create_parser(argv[<span class="number">0</span>], argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.use_argparse:</span><br><span class="line">            options = parser.parse_args(argv[<span class="number">2</span>:])</span><br><span class="line">            cmd_options = vars(options)</span><br><span class="line">            <span class="comment"># Move positional args out of options to mimic legacy optparse</span></span><br><span class="line">            args = cmd_options.pop(<span class="string">'args'</span>, ())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            options, args = parser.parse_args(argv[<span class="number">2</span>:])</span><br><span class="line">            cmd_options = vars(options)</span><br><span class="line">        handle_default_options(options)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.execute(*args, **cmd_options)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> options.traceback <span class="keyword">or</span> <span class="keyword">not</span> isinstance(e, CommandError):</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># SystemCheckError takes care of its own formatting.</span></span><br><span class="line">            <span class="keyword">if</span> isinstance(e, SystemCheckError):</span><br><span class="line">                self.stderr.write(str(e), <span class="keyword">lambda</span> x: x)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.stderr.write(<span class="string">'%s: %s'</span> % (e.__class__.__name__, e))</span><br><span class="line">            sys.exit(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            connections.close_all()</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self, *args, **options)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Try to execute this command, performing system checks if needed (as</span></span><br><span class="line"><span class="string">        controlled by attributes ``self.requires_system_checks`` and</span></span><br><span class="line"><span class="string">        ``self.requires_model_validation``, except if force-skipped).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> options.get(<span class="string">'no_color'</span>):</span><br><span class="line">            self.style = no_style()</span><br><span class="line">            self.stderr.style_func = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> options.get(<span class="string">'stdout'</span>):</span><br><span class="line">            self.stdout = OutputWrapper(options[<span class="string">'stdout'</span>])</span><br><span class="line">        <span class="keyword">if</span> options.get(<span class="string">'stderr'</span>):</span><br><span class="line">            self.stderr = OutputWrapper(options.get(<span class="string">'stderr'</span>), self.stderr.style_func)</span><br><span class="line"></span><br><span class="line">        saved_locale = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.leave_locale_alone:</span><br><span class="line">            <span class="comment"># Only mess with locales if we can assume we have a working</span></span><br><span class="line">            <span class="comment"># settings file, because django.utils.translation requires settings</span></span><br><span class="line">            <span class="comment"># (The final saying about whether the i18n machinery is active will be</span></span><br><span class="line">            <span class="comment"># found in the value of the USE_I18N setting)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.can_import_settings:</span><br><span class="line">                <span class="keyword">raise</span> CommandError(<span class="string">"Incompatible values of 'leave_locale_alone' "</span></span><br><span class="line">                                   <span class="string">"(%s) and 'can_import_settings' (%s) command "</span></span><br><span class="line">                                   <span class="string">"options."</span> % (self.leave_locale_alone,</span><br><span class="line">                                                 self.can_import_settings))</span><br><span class="line">            <span class="comment"># Deactivate translations, because django-admin creates database</span></span><br><span class="line">            <span class="comment"># content like permissions, and those shouldn't contain any</span></span><br><span class="line">            <span class="comment"># translations.</span></span><br><span class="line">            <span class="keyword">from</span> django.utils <span class="keyword">import</span> translation</span><br><span class="line">            saved_locale = translation.get_language()</span><br><span class="line">            translation.deactivate_all()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> (self.requires_system_checks <span class="keyword">and</span></span><br><span class="line">                    <span class="keyword">not</span> options.get(<span class="string">'skip_validation'</span>) <span class="keyword">and</span>  <span class="comment"># Remove at the end of deprecation for `skip_validation`.</span></span><br><span class="line">                    <span class="keyword">not</span> options.get(<span class="string">'skip_checks'</span>)):</span><br><span class="line">                self.check()</span><br><span class="line">            output = self.handle(*args, **options)</span><br><span class="line">            <span class="keyword">if</span> output:</span><br><span class="line">                <span class="keyword">if</span> self.output_transaction:</span><br><span class="line">                    <span class="comment"># This needs to be imported here, because it relies on</span></span><br><span class="line">                    <span class="comment"># settings.</span></span><br><span class="line">                    <span class="keyword">from</span> django.db <span class="keyword">import</span> connections, DEFAULT_DB_ALIAS</span><br><span class="line">                    connection = connections[options.get(<span class="string">'database'</span>, DEFAULT_DB_ALIAS)]</span><br><span class="line">                    <span class="keyword">if</span> connection.ops.start_transaction_sql():</span><br><span class="line">                        self.stdout.write(self.style.SQL_KEYWORD(connection.ops.start_transaction_sql()))</span><br><span class="line">                self.stdout.write(output)</span><br><span class="line">                <span class="keyword">if</span> self.output_transaction:</span><br><span class="line">                    self.stdout.write(<span class="string">'\n'</span> + self.style.SQL_KEYWORD(connection.ops.end_transaction_sql()))</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">if</span> saved_locale <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                translation.activate(saved_locale)</span><br></pre></td></tr></table></figure>
<p>主要看下<code>execute --&gt; handle</code>  方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django/core/management/commands/runserver.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span><span class="params">(BaseCommand)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self, *args, **options)</span>:</span></span><br><span class="line">        <span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对DEBUG和ALLOWED_HOSTS进行检查</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> settings.DEBUG <span class="keyword">and</span> <span class="keyword">not</span> settings.ALLOWED_HOSTS:</span><br><span class="line">            <span class="keyword">raise</span> CommandError(<span class="string">'You must set settings.ALLOWED_HOSTS if DEBUG is False.'</span>)</span><br><span class="line"></span><br><span class="line">        self.use_ipv6 = options.get(<span class="string">'use_ipv6'</span>)</span><br><span class="line">        <span class="keyword">if</span> self.use_ipv6 <span class="keyword">and</span> <span class="keyword">not</span> socket.has_ipv6:</span><br><span class="line">            <span class="keyword">raise</span> CommandError(<span class="string">'Your Python does not support IPv6.'</span>)</span><br><span class="line">        self._raw_ipv6 = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> options.get(<span class="string">'addrport'</span>):</span><br><span class="line">            self.addr = <span class="string">''</span></span><br><span class="line">            self.port = DEFAULT_PORT</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          	<span class="comment"># 对端口 地址合法性进行检查</span></span><br><span class="line">            m = re.match(naiveip_re, options[<span class="string">'addrport'</span>])</span><br><span class="line">            <span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> CommandError(<span class="string">'"%s" is not a valid port number '</span></span><br><span class="line">                                   <span class="string">'or address:port pair.'</span> % options[<span class="string">'addrport'</span>])</span><br><span class="line">            self.addr, _ipv4, _ipv6, _fqdn, self.port = m.groups()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.port.isdigit():</span><br><span class="line">                <span class="keyword">raise</span> CommandError(<span class="string">"%r is not a valid port number."</span> % self.port)</span><br><span class="line">            <span class="keyword">if</span> self.addr:</span><br><span class="line">                <span class="keyword">if</span> _ipv6:</span><br><span class="line">                    self.addr = self.addr[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line">                    self.use_ipv6 = <span class="keyword">True</span></span><br><span class="line">                    self._raw_ipv6 = <span class="keyword">True</span></span><br><span class="line">                <span class="keyword">elif</span> self.use_ipv6 <span class="keyword">and</span> <span class="keyword">not</span> _fqdn:</span><br><span class="line">                    <span class="keyword">raise</span> CommandError(<span class="string">'"%s" is not a valid IPv6 address.'</span> % self.addr)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.addr:</span><br><span class="line">            self.addr = <span class="string">'::1'</span> <span class="keyword">if</span> self.use_ipv6 <span class="keyword">else</span> <span class="string">'127.0.0.1'</span></span><br><span class="line">            self._raw_ipv6 = bool(self.use_ipv6)</span><br><span class="line">        self.run(**options)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, **options)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Runs the server, using the autoreloader if needed</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        use_reloader = options.get(<span class="string">'use_reloader'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> use_reloader:</span><br><span class="line">          	<span class="comment"># 如果use_reloader为True,则会在`autoreload.main`中开启一个新的线程</span></span><br><span class="line">            autoreload.main(self.inner_run, <span class="keyword">None</span>, options)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.inner_run(<span class="keyword">None</span>, **options)</span><br></pre></td></tr></table></figure>
<p>最后调用<code>run</code>，<code>user_reloader</code>为<code>True</code>时，会通过<code>restart_with_reloader</code>开启一个新的进程，这个进程再次重复上面的调用过程，当再次调用到<code>python_reloader</code>时，开启一个新的线程：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django/utils/autoreload.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(main_func, args=None, kwargs=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> args <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        args = ()</span><br><span class="line">    <span class="keyword">if</span> kwargs <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        kwargs = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> sys.platform.startswith(<span class="string">'java'</span>):</span><br><span class="line">        reloader = jython_reloader</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        reloader = python_reloader</span><br><span class="line"></span><br><span class="line">    wrapped_main_func = check_errors(main_func)</span><br><span class="line">    reloader(wrapped_main_func, args, kwargs)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">python_reloader</span><span class="params">(main_func, args, kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> os.environ.get(<span class="string">"RUN_MAIN"</span>) == <span class="string">"true"</span>:</span><br><span class="line">        thread.start_new_thread(main_func, args, kwargs)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            reloader_thread()</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            exit_code = restart_with_reloader()</span><br><span class="line">            <span class="keyword">if</span> exit_code &lt; <span class="number">0</span>:</span><br><span class="line">                os.kill(os.getpid(), -exit_code)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sys.exit(exit_code)</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">          </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restart_with_reloader</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        args = [sys.executable] + [<span class="string">'-W%s'</span> % o <span class="keyword">for</span> o <span class="keyword">in</span> sys.warnoptions] + sys.argv</span><br><span class="line">        <span class="keyword">if</span> sys.platform == <span class="string">"win32"</span>:</span><br><span class="line">            args = [<span class="string">'"%s"'</span> % arg <span class="keyword">for</span> arg <span class="keyword">in</span> args]</span><br><span class="line">        new_environ = os.environ.copy()</span><br><span class="line">        new_environ[<span class="string">"RUN_MAIN"</span>] = <span class="string">'true'</span></span><br><span class="line">        exit_code = os.spawnve(os.P_WAIT, sys.executable, args, new_environ)</span><br><span class="line">        <span class="keyword">if</span> exit_code != <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> exit_code</span><br></pre></td></tr></table></figure>
<p>新开的线程运行<code>inner_run</code>，输出我们常见到的信息：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django/core/management/commands/runserver.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span><span class="params">(BaseCommand)</span>:</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">inner_run</span><span class="params">(self, *args, **options)</span>:</span></span><br><span class="line">        <span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line">        <span class="keyword">from</span> django.utils <span class="keyword">import</span> translation</span><br><span class="line"></span><br><span class="line">        <span class="comment"># If an exception was silenced in ManagementUtility.execute in order</span></span><br><span class="line">        <span class="comment"># to be raised in the child process, raise it now.</span></span><br><span class="line">        autoreload.raise_last_exception()</span><br><span class="line"></span><br><span class="line">        threading = options.get(<span class="string">'use_threading'</span>)</span><br><span class="line">        shutdown_message = options.get(<span class="string">'shutdown_message'</span>, <span class="string">''</span>)</span><br><span class="line">        quit_command = <span class="string">'CTRL-BREAK'</span> <span class="keyword">if</span> sys.platform == <span class="string">'win32'</span> <span class="keyword">else</span> <span class="string">'CONTROL-C'</span></span><br><span class="line"></span><br><span class="line">        self.stdout.write(<span class="string">"Performing system checks...\n\n"</span>)</span><br><span class="line">        self.validate(display_num_errors=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.check_migrations()</span><br><span class="line">        <span class="keyword">except</span> ImproperlyConfigured:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        now = datetime.now().strftime(<span class="string">'%B %d, %Y - %X'</span>)</span><br><span class="line">        <span class="keyword">if</span> six.PY2:</span><br><span class="line">            now = now.decode(get_system_encoding())</span><br><span class="line">        self.stdout.write((</span><br><span class="line">            <span class="string">"%(started_at)s\n"</span></span><br><span class="line">            <span class="string">"Django version %(version)s, using settings %(settings)r\n"</span></span><br><span class="line">            <span class="string">"Starting development server at http://%(addr)s:%(port)s/\n"</span></span><br><span class="line">            <span class="string">"Quit the server with %(quit_command)s.\n"</span></span><br><span class="line">        ) % &#123;</span><br><span class="line">            <span class="string">"started_at"</span>: now,</span><br><span class="line">            <span class="string">"version"</span>: self.get_version(),</span><br><span class="line">            <span class="string">"settings"</span>: settings.SETTINGS_MODULE,</span><br><span class="line">            <span class="string">"addr"</span>: <span class="string">'[%s]'</span> % self.addr <span class="keyword">if</span> self._raw_ipv6 <span class="keyword">else</span> self.addr,</span><br><span class="line">            <span class="string">"port"</span>: self.port,</span><br><span class="line">            <span class="string">"quit_command"</span>: quit_command,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment"># django.core.management.base forces the locale to en-us. We should</span></span><br><span class="line">        <span class="comment"># set it up correctly for the first request (particularly important</span></span><br><span class="line">        <span class="comment"># in the "--noreload" case).</span></span><br><span class="line">        translation.activate(settings.LANGUAGE_CODE)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            handler = self.get_handler(*args, **options)</span><br><span class="line">            run(self.addr, int(self.port), handler,</span><br><span class="line">                ipv6=self.use_ipv6, threading=threading)</span><br><span class="line">        <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># Use helpful error messages instead of ugly tracebacks.</span></span><br><span class="line">            ERRORS = &#123;</span><br><span class="line">                errno.EACCES: <span class="string">"You don't have permission to access that port."</span>,</span><br><span class="line">                errno.EADDRINUSE: <span class="string">"That port is already in use."</span>,</span><br><span class="line">                errno.EADDRNOTAVAIL: <span class="string">"That IP address can't be assigned-to."</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                error_text = ERRORS[e.errno]</span><br><span class="line">            <span class="keyword">except</span> KeyError:</span><br><span class="line">                error_text = force_text(e)</span><br><span class="line">            self.stderr.write(<span class="string">"Error: %s"</span> % error_text)</span><br><span class="line">            <span class="comment"># Need to use an OS exit because sys.exit doesn't work in a thread</span></span><br><span class="line">            os._exit(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="keyword">if</span> shutdown_message:</span><br><span class="line">                self.stdout.write(shutdown_message)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>这里有两个重要的方法需要看下：<code>self.get_handler</code> 和 <code>run(...)</code> ，这两个方法就是WSGI协议的具体实现过程，我们知道WSGI协议一般来说可以分为两部分，<code>application</code>和<code>server</code>：</p>
<h3 id="WSGI-Application"><a href="#WSGI-Application" class="headerlink" title="WSGI Application"></a>WSGI Application</h3><p><strong>WSGI application</strong> 应该实现为一个可调用对象，例如函数、方法、类(包含<code>call</code>方法)。需要接收两个参数：</p>
<ul>
<li>一个字典，该字典可以包含了客户端请求的信息以及其他信息，可以认为是请求上下文，一般叫做environment（编码中多简写为environ、env）</li>
<li>一个用于发送HTTP响应状态（HTTP status ）、响应头（HTTP headers）的回调函数</li>
</ul>
<p>通过回调函数将响应状态和响应头返回给server，同时返回响应正文(response body)，响应正文是可迭代的、并包含了多个字符串。</p>
<p>下面是Django中application的具体实现部分：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django/core/management/commands/runserver.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span><span class="params">(BaseCommand)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_handler</span><span class="params">(self, *args, **options)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns the default WSGI handler for the runner.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> get_internal_wsgi_application()</span><br><span class="line"></span><br><span class="line"><span class="comment"># django/core/servers/basehttp.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_internal_wsgi_application</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Loads and returns the WSGI application as configured by the user in</span></span><br><span class="line"><span class="string">    ``settings.WSGI_APPLICATION``. With the default ``startproject`` layout,</span></span><br><span class="line"><span class="string">    this will be the ``application`` object in ``projectname/wsgi.py``.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This function, and the ``WSGI_APPLICATION`` setting itself, are only useful</span></span><br><span class="line"><span class="string">    for Django's internal servers (runserver, runfcgi); external WSGI servers</span></span><br><span class="line"><span class="string">    should just be configured to point to the correct application object</span></span><br><span class="line"><span class="string">    directly.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If settings.WSGI_APPLICATION is not set (is ``None``), we just return</span></span><br><span class="line"><span class="string">    whatever ``django.core.wsgi.get_wsgi_application`` returns.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line">    app_path = getattr(settings, <span class="string">'WSGI_APPLICATION'</span>)</span><br><span class="line">    <span class="keyword">if</span> app_path <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> get_wsgi_application()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> import_string(app_path)</span><br><span class="line">    <span class="keyword">except</span> ImportError <span class="keyword">as</span> e:</span><br><span class="line">        msg = (</span><br><span class="line">            <span class="string">"WSGI application '%(app_path)s' could not be loaded; "</span></span><br><span class="line">            <span class="string">"Error importing module: '%(exception)s'"</span> % (&#123;</span><br><span class="line">                <span class="string">'app_path'</span>: app_path,</span><br><span class="line">                <span class="string">'exception'</span>: e,</span><br><span class="line">            &#125;)</span><br><span class="line">        )</span><br><span class="line">        six.reraise(ImproperlyConfigured, ImproperlyConfigured(msg),</span><br><span class="line">                    sys.exc_info()[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># django/core/wsgi.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_wsgi_application</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    The public interface to Django's WSGI support. Should return a WSGI</span></span><br><span class="line"><span class="string">    callable.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Allows us to avoid making django.core.handlers.WSGIHandler public API, in</span></span><br><span class="line"><span class="string">    case the internal WSGI implementation changes or moves in the future.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    django.setup()</span><br><span class="line">    <span class="keyword">return</span> WSGIHandler()</span><br><span class="line">  </span><br><span class="line"><span class="comment"># django/core/handlers/wsgi.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIHandler</span><span class="params">(base.BaseHandler)</span>:</span></span><br><span class="line">    initLock = Lock()</span><br><span class="line">    request_class = WSGIRequest</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        <span class="comment"># Set up middleware if needed. We couldn't do this earlier, because</span></span><br><span class="line">        <span class="comment"># settings weren't available.</span></span><br><span class="line">        <span class="comment"># 加载中间件 -- 这部分内容后面重点单独说下</span></span><br><span class="line">        <span class="keyword">if</span> self._request_middleware <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">with</span> self.initLock:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="comment"># Check that middleware is still uninitialized.</span></span><br><span class="line">                    <span class="keyword">if</span> self._request_middleware <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                        self.load_middleware()</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="comment"># Unload whatever middleware we got</span></span><br><span class="line">                    self._request_middleware = <span class="keyword">None</span></span><br><span class="line">                    <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">        set_script_prefix(get_script_name(environ))</span><br><span class="line">        <span class="comment"># 请求处理之前发送信号</span></span><br><span class="line">        signals.request_started.send(sender=self.__class__, environ=environ)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            request = self.request_class(environ)</span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">            logger.warning(<span class="string">'Bad Request (UnicodeDecodeError)'</span>,</span><br><span class="line">                exc_info=sys.exc_info(),</span><br><span class="line">                extra=&#123;</span><br><span class="line">                    <span class="string">'status_code'</span>: <span class="number">400</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">            response = http.HttpResponseBadRequest()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response = self.get_response(request)</span><br><span class="line"></span><br><span class="line">        response._handler_class = self.__class__</span><br><span class="line"></span><br><span class="line">        status = <span class="string">'%s %s'</span> % (response.status_code, response.reason_phrase)</span><br><span class="line">        response_headers = [(str(k), str(v)) <span class="keyword">for</span> k, v <span class="keyword">in</span> response.items()]</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> response.cookies.values():</span><br><span class="line">            response_headers.append((str(<span class="string">'Set-Cookie'</span>), str(c.output(header=<span class="string">''</span>))))</span><br><span class="line">        <span class="comment"># server提供的回调方法，将响应的header和status返回给server</span></span><br><span class="line">        start_response(force_str(status), response_headers)</span><br><span class="line">        <span class="keyword">if</span> getattr(response, <span class="string">'file_to_stream'</span>, <span class="keyword">None</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> environ.get(<span class="string">'wsgi.file_wrapper'</span>):</span><br><span class="line">            response = environ[<span class="string">'wsgi.file_wrapper'</span>](response.file_to_stream)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
<p>可以看出<code>application</code>的流程包括:</p>
<ul>
<li>加载所有中间件，以及执行框架相关的操作，设置当前线程脚本前缀，发送请求开始信号；</li>
<li>处理请求，调用<code>get_response()</code>方法处理当前请求，该方法的的主要逻辑是通过<code>urlconf</code>找到对应的<code>view</code>和<code>callback</code>，按顺序执行各种<code>middleware</code>和<code>callback</code>。</li>
<li>调用由<code>server</code>传入的<code>start_response()</code>方法将响应<code>header</code>与<code>status</code>返回给<code>server</code>。</li>
<li>返回响应正文</li>
</ul>
<h3 id="WSGI-Server"><a href="#WSGI-Server" class="headerlink" title="WSGI Server"></a>WSGI Server</h3><p><strong>WSGI server</strong> 负责获取http请求，将请求传递给WSGI application，由application处理请求后返回response。看下Django具体实现。</p>
<p>通过runserver运行django项目，在启动时都会调用下面的run方法，创建一个WSGIServer的实例，之后再调用其serve_forever()方法启动服务。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django/core/servers/basehttp.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(addr, port, wsgi_handler, ipv6=False, threading=False)</span>:</span></span><br><span class="line">    server_address = (addr, port)</span><br><span class="line">    <span class="keyword">if</span> threading:</span><br><span class="line">        httpd_cls = type(str(<span class="string">'WSGIServer'</span>), (socketserver.ThreadingMixIn, WSGIServer), &#123;&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        httpd_cls = WSGIServer</span><br><span class="line">    httpd = httpd_cls(server_address, WSGIRequestHandler, ipv6=ipv6)</span><br><span class="line">    <span class="keyword">if</span> threading:</span><br><span class="line">        <span class="comment"># ThreadingMixIn.daemon_threads indicates how threads will behave on an</span></span><br><span class="line">        <span class="comment"># abrupt shutdown; like quitting the server by the user or restarting</span></span><br><span class="line">        <span class="comment"># by the auto-reloader. True means the server will not wait for thread</span></span><br><span class="line">        <span class="comment"># termination before it quits. This will make auto-reloader faster</span></span><br><span class="line">        <span class="comment"># and will prevent the need to kill the server manually if a thread</span></span><br><span class="line">        <span class="comment"># isn't terminating correctly.</span></span><br><span class="line">        httpd.daemon_threads = <span class="keyword">True</span></span><br><span class="line">    httpd.set_app(wsgi_handler)</span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure>
<p>下面表示<code>WSGI server</code>服务器处理流程中关键的类和方法。</p>
<ul>
<li><p>WSGIServer</p>
<p>run()方法会创建WSGIServer实例，主要作用是接收客户端请求，将请求传递给application，然后将application返回的response</p>
<p>返回给客户端。</p>
<ul>
<li>创建实例时会指定<code>HTTP</code>请求的<code>handler</code>：<code>WSGIRequestHandler</code>类</li>
<li>通过<code>set_app</code>和<code>get_app</code>方法设置和获取<code>WSGIApplication</code>实例<code>wsgi_handler</code></li>
<li>处理http请求时，调用<code>handler_request</code>方法，会创建<code>WSGIRequestHandler</code>实例处理http请求。</li>
<li><code>WSGIServer</code>中<code>get_request</code>方法通过<code>socket</code>接受请求数据</li>
</ul>
</li>
<li><p>WSGIRequestHandler</p>
<ul>
<li>由<code>WSGIServer</code>在调用<code>handle_request</code>时创建实例，传入<code>request</code>、<code>cient_address</code>、<code>WSGIServer</code>三个参数，<code>__init__</code>方法在实例化同时还会调用自身的<code>handle</code>方法</li>
<li><code>handle</code>方法会创建<code>ServerHandler</code>实例，然后调用其<code>run</code>方法处理请求</li>
</ul>
</li>
<li><p>ServerHandler</p>
<ul>
<li><code>WSGIRequestHandler</code>在其<code>handle</code>方法中调用<code>run</code>方法，传入<code>self.server.get_app()</code>参数，获取<code>WSGIApplication</code>，然后调用实例(<code>__call__</code>)，获取<code>response</code>，其中会传入<code>start_response</code>回调，用来处理返回的<code>header</code>和<code>status</code>。</li>
<li>通过<code>application</code>获取<code>response</code>以后，通过<code>finish_response</code>返回<code>response</code></li>
</ul>
</li>
<li><p>WSGIHandler</p>
<ul>
<li><code>WSGI</code>协议中的<code>application</code>，接收两个参数，<code>environ</code>字典包含了客户端请求的信息以及其他信息，可以认为是请求上下文，<code>start_response</code>用于发送返回<code>status</code>和<code>header</code>的回调函数</li>
</ul>
</li>
</ul>
<p>虽然上面一个<code>WSGI server</code>涉及到多个类实现以及相互引用，但其实原理还是调用<code>WSGIHandler</code>，传入请求参数以及回调方法<code>start_response()</code>，并将响应返回给客户端。</p>
<p>到这里，整个启动流程就结束了。这里我们使用的django自带的WSGI Server，一般用于调试，生产环境一般不用这个，需要注意。</p>
<p>比如我们使用 <code>gunicorn</code> 部署的时候可以执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> gunicorn -c gunicorn_conf.py wsgi:application</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from distutils.sysconfig import get_python_lib</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">bind = &quot;0.0.0.0:80&quot;</span><br><span class="line">workers = 8</span><br><span class="line">chdir = os.path.join(get_python_lib(), &quot;dashboard/wsgi&quot;)</span><br><span class="line">pidfile = &quot;/run/horizon.pid&quot;</span><br><span class="line">worker_class = &quot;eventlet&quot;</span><br><span class="line">worker_tmp_dir = &quot;/dev/shm&quot;</span><br><span class="line">timeout = 600</span><br><span class="line">raw_env = [&quot;SCRIPT_NAME=/ecs&quot;]</span><br><span class="line">accesslog = &quot;-&quot;</span><br><span class="line">errorlog = &quot;-&quot;</span><br><span class="line"></span><br><span class="line"># Time to wait after &quot;keep-alive&quot; request ends. Default is 2.</span><br><span class="line"># Increasing for gunicorn is behind 2 load balancer (ingress and service).</span><br><span class="line">keepalive = 5</span><br></pre></td></tr></table></figure>
<p>然后在你项目的dashboard下加上一个wsgi文件，类似：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">from django.core.wsgi import get_wsgi_application</span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line"># Add this file path to sys.path in order to import settings</span><br><span class="line">sys.path.insert(0, os.path.realpath(os.path.join(os.path.dirname(__file__), &apos;../..&apos;)))</span><br><span class="line">os.environ[&apos;DJANGO_SETTINGS_MODULE&apos;] = &apos;dashboard.settings&apos;</span><br><span class="line">sys.stdout = sys.stderr</span><br><span class="line"></span><br><span class="line">DEBUG = False</span><br><span class="line"></span><br><span class="line">application = get_wsgi_application()</span><br></pre></td></tr></table></figure>
<h3 id="django-simple-server-demo"><a href="#django-simple-server-demo" class="headerlink" title="django simple_server demo"></a>django simple_server demo</h3><p><code>django</code>的<code>simple_server.py</code>模块实现了一个简单的<code>HTTP</code>服务器，并给出了一个简单的<code>demo</code>，可以直接运行，运行结果会将请求中涉及到的环境变量在浏览器中展示出来。<br>其中包括上述描述的整个<code>http</code>请求的所有组件:<br><code>ServerHandler</code>, <code>WSGIServer</code>, <code>WSGIRequestHandler</code>，以及<code>demo_app</code>表示的简易版的<code>WSGIApplication</code>。<br>可以看一下整个流程：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 通过make_server方法创建WSGIServer实例</span></span><br><span class="line">    <span class="comment"># 传入建议application，demo_app</span></span><br><span class="line">    httpd = make_server(<span class="string">''</span>, <span class="number">8000</span>, demo_app)</span><br><span class="line">    sa = httpd.socket.getsockname()</span><br><span class="line">    print(<span class="string">"Serving HTTP on"</span>, sa[<span class="number">0</span>], <span class="string">"port"</span>, sa[<span class="number">1</span>], <span class="string">"..."</span>)</span><br><span class="line">    <span class="keyword">import</span> webbrowser</span><br><span class="line">    webbrowser.open(<span class="string">'http://localhost:8000/xyz?abc'</span>)</span><br><span class="line">    <span class="comment"># 调用WSGIServer的handle_request方法处理http请求</span></span><br><span class="line">    httpd.handle_request()  <span class="comment"># serve one request, then exit</span></span><br><span class="line">    httpd.server_close()</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_server</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler</span></span></span><br><span class="line"><span class="function"><span class="params">)</span>:</span></span><br><span class="line">    <span class="string">"""Create a new WSGI server listening on `host` and `port` for `app`"""</span></span><br><span class="line">    server = server_class((host, port), handler_class)</span><br><span class="line">    server.set_app(app)</span><br><span class="line">    <span class="keyword">return</span> server</span><br><span class="line"></span><br><span class="line"><span class="comment"># demo_app可调用对象，接受请求输出结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_app</span><span class="params">(environ,start_response)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line">    stdout = StringIO()</span><br><span class="line">    print(<span class="string">"Hello world!"</span>, file=stdout)</span><br><span class="line">    print(file=stdout)</span><br><span class="line">    h = sorted(environ.items())</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> h:</span><br><span class="line">        print(k,<span class="string">'='</span>,repr(v), file=stdout)</span><br><span class="line">    start_response(<span class="string">"200 OK"</span>, [(<span class="string">'Content-Type'</span>,<span class="string">'text/plain; charset=utf-8'</span>)])</span><br><span class="line">    <span class="keyword">return</span> [stdout.getvalue().encode(<span class="string">"utf-8"</span>)]</span><br></pre></td></tr></table></figure>
<p><code>demo_app()</code>表示一个简单的WSGI application实现，通过<code>make_server()</code>方法创建一个<code>WSGIServer</code>实例，调用其<code>handle_request()</code>方法，该方法会调用<code>demo_app()</code>处理请求，并最终返回响应。</p>
<h2 id="中间件分析"><a href="#中间件分析" class="headerlink" title="中间件分析"></a>中间件分析</h2><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>我们在上面分析启动流程的时候看到了有个中间件加载的过程，这里单独分析下</p>
<p>中间件是一个用来处理Django的请求和响应的框架级别的钩子。它是一个轻量、低级别的插件系统，用于在全局范围内改变Django的输入和输出。每个中间件组件都负责做一些特定的功能。</p>
<p>但是由于其影响的是全局，所以需要谨慎使用，使用不当会影响性能。</p>
<p>中间件是帮助我们在视图函数执行之前和执行之后都可以做一些额外的操作，它本质上就是一个自定义类，类中定义了几个方法，Django框架会在请求的特定的时间去执行这些方法。</p>
<p>中间件中主要可以定义下面5个钩子函数来对请求的输入输出做处理:</p>
<ul>
<li>process_request(self,request)</li>
<li>process_view(self, request, view_func, view_args, view_kwargs)</li>
<li>process_template_response(self,request,response)</li>
<li>process_exception(self, request, exception)</li>
<li>process_response(self, request, response)</li>
</ul>
<p>它们的主要作用参见<a href="https://docs.djangoproject.com/en/2.2/topics/http/middleware/#other-middleware-hooks" target="_blank" rel="external">官方文档</a>.</p>
<p>这5个钩子函数的触发时机可以见下面的图.</p>
<p><img src="/images/python-web-django-1.png" alt="img"></p>
<p><img src="/images/python-web-django-2.png" alt="img"></p>
<p><img src="/images/python-web-django-3.png" alt="img"></p>
<p><img src="/images/python-web-django-4.png" alt="img"></p>
<p>说明: 上面说的顺序都是中间件在settings文件中列表的注册顺序。</p>
<h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><p>我们上面说到，在启动WSGI application的时候会加载中间件，代码大概在这个位置：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django/core/handlers/wsgi.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIHandler</span><span class="params">(base.BaseHandler)</span>:</span></span><br><span class="line">    initLock = Lock()</span><br><span class="line">    request_class = WSGIRequest</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        <span class="comment"># Set up middleware if needed. We couldn't do this earlier, because</span></span><br><span class="line">        <span class="comment"># settings weren't available.</span></span><br><span class="line">        <span class="keyword">if</span> self._request_middleware <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">with</span> self.initLock:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="comment"># Check that middleware is still uninitialized.</span></span><br><span class="line">                    <span class="keyword">if</span> self._request_middleware <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                      		<span class="comment"># 初始化wsgi处理器，会调用这个来加载所有的中间件</span></span><br><span class="line">                        self.load_middleware()</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="comment"># Unload whatever middleware we got</span></span><br><span class="line">                    self._request_middleware = <span class="keyword">None</span></span><br><span class="line">                    <span class="keyword">raise</span></span><br><span class="line">				......略</span><br><span class="line">        </span><br><span class="line"><span class="comment"># django/core/handlers/base.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseHandler</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># Changes that are always applied to a response (in this order).</span></span><br><span class="line">    response_fixes = [</span><br><span class="line">        http.fix_location_header,</span><br><span class="line">        http.conditional_content_removal,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._request_middleware = <span class="keyword">None</span></span><br><span class="line">        self._view_middleware = <span class="keyword">None</span></span><br><span class="line">        self._template_response_middleware = <span class="keyword">None</span></span><br><span class="line">        self._response_middleware = <span class="keyword">None</span></span><br><span class="line">        self._exception_middleware = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_middleware</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Populate middleware lists from settings.MIDDLEWARE_CLASSES.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Must be called after the environment is fixed (see __call__ in subclasses).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 可以看我们可以自定义的钩子函数都在这里了，放在5个列表里面</span></span><br><span class="line">        self._view_middleware = []</span><br><span class="line">        self._template_response_middleware = []</span><br><span class="line">        self._response_middleware = []</span><br><span class="line">        self._exception_middleware = []</span><br><span class="line"></span><br><span class="line">        request_middleware = []</span><br><span class="line">        <span class="comment"># 到setting.py文件中找需要加载的中间件</span></span><br><span class="line">        <span class="keyword">for</span> middleware_path <span class="keyword">in</span> settings.MIDDLEWARE_CLASSES:</span><br><span class="line">          	<span class="comment"># 这里是将我们配置的字符串形式的中间件类通过反射解析成类</span></span><br><span class="line">            mw_class = import_string(middleware_path)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">              	<span class="comment"># 将中间件类实例化为一个对象</span></span><br><span class="line">                mw_instance = mw_class()</span><br><span class="line">            <span class="keyword">except</span> MiddlewareNotUsed <span class="keyword">as</span> exc:</span><br><span class="line">                <span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">                    <span class="keyword">if</span> six.text_type(exc):</span><br><span class="line">                        logger.debug(<span class="string">'MiddlewareNotUsed(%r): %s'</span>, middleware_path, exc)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        logger.debug(<span class="string">'MiddlewareNotUsed: %r'</span>, middleware_path)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_request'</span>):</span><br><span class="line">                request_middleware.append(mw_instance.process_request)</span><br><span class="line">            <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_view'</span>):</span><br><span class="line">                self._view_middleware.append(mw_instance.process_view)</span><br><span class="line">            <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_template_response'</span>):</span><br><span class="line">                self._template_response_middleware.insert(<span class="number">0</span>, mw_instance.process_template_response)</span><br><span class="line">            <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_response'</span>):</span><br><span class="line">                self._response_middleware.insert(<span class="number">0</span>, mw_instance.process_response)</span><br><span class="line">            <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_exception'</span>):</span><br><span class="line">                self._exception_middleware.insert(<span class="number">0</span>, mw_instance.process_exception)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># We only assign to this when initialization is complete as it is used</span></span><br><span class="line">        <span class="comment"># as a flag for initialization being complete.</span></span><br><span class="line">        self._request_middleware = request_middleware</span><br></pre></td></tr></table></figure>
<p>进入到<code>load_middleware</code>函数，可以看我们可以自定义的钩子函数都在这里了，放在5个列表里面。接下来判断settings里面的<code>MIDDLEWARE</code>配置项是否为空，为空的话会去<code>django.conf.global_settings.py</code>里面的默认的配置文件加载中间件，默认的中间件只有下面两个。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django.conf.global_settings.py</span></span><br><span class="line">MIDDLEWARE_CLASSES = [</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">MIDDLEWARE = <span class="keyword">None</span></span><br></pre></td></tr></table></figure>
<p>从这里我们可以看到</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_request'</span>):</span><br><span class="line">    request_middleware.append(mw_instance.process_request)</span><br><span class="line"><span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_view'</span>):</span><br><span class="line">    self._view_middleware.append(mw_instance.process_view)</span><br><span class="line"><span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_template_response'</span>):</span><br><span class="line">    self._template_response_middleware.insert(<span class="number">0</span>, mw_instance.process_template_response)</span><br><span class="line"><span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_response'</span>):</span><br><span class="line">    self._response_middleware.insert(<span class="number">0</span>, mw_instance.process_response)</span><br><span class="line"><span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_exception'</span>):</span><br><span class="line">    self._exception_middleware.insert(<span class="number">0</span>, mw_instance.process_exception)</span><br></pre></td></tr></table></figure>
<p><code>process_request</code> 和 <code>process_view</code> 是顺序执行，而 <code>process_template_response</code> 、<code>process_response</code> 、<code>process_exception</code> 几个都是逆序执行。那么在一个请求中，他们执行的顺序是什么？</p>
<p>在上面初始化WSGI的时候，调用了 <code>self.get_response(request)</code> ，看下这个方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_response</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="string">"Returns an HttpResponse object for the given HttpRequest"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Setup default url resolver for this thread, this code is outside</span></span><br><span class="line">    <span class="comment"># the try/except so we don't get a spurious "unbound local</span></span><br><span class="line">    <span class="comment"># variable" exception in the event an exception is raised before</span></span><br><span class="line">    <span class="comment"># resolver is set</span></span><br><span class="line">    urlconf = settings.ROOT_URLCONF</span><br><span class="line">    urlresolvers.set_urlconf(urlconf)</span><br><span class="line">    resolver = urlresolvers.RegexURLResolver(<span class="string">r'^/'</span>, urlconf)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># Apply request middleware</span></span><br><span class="line">        <span class="keyword">for</span> middleware_method <span class="keyword">in</span> self._request_middleware:</span><br><span class="line">            response = middleware_method(request)</span><br><span class="line">            <span class="keyword">if</span> response:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> response <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> hasattr(request, <span class="string">'urlconf'</span>):</span><br><span class="line">                <span class="comment"># Reset url resolver with a custom urlconf.</span></span><br><span class="line">                urlconf = request.urlconf</span><br><span class="line">                urlresolvers.set_urlconf(urlconf)</span><br><span class="line">                resolver = urlresolvers.RegexURLResolver(<span class="string">r'^/'</span>, urlconf)</span><br><span class="line"></span><br><span class="line">            resolver_match = resolver.resolve(request.path_info)</span><br><span class="line">            callback, callback_args, callback_kwargs = resolver_match</span><br><span class="line">            request.resolver_match = resolver_match</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Apply view middleware</span></span><br><span class="line">            <span class="keyword">for</span> middleware_method <span class="keyword">in</span> self._view_middleware:</span><br><span class="line">                response = middleware_method(request, callback, callback_args, callback_kwargs)</span><br><span class="line">                <span class="keyword">if</span> response:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> response <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            wrapped_callback = self.make_view_atomic(callback)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                response = wrapped_callback(request, *callback_args, **callback_kwargs)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="comment"># If the view raised an exception, run it through exception</span></span><br><span class="line">                <span class="comment"># middleware, and if the exception middleware returns a</span></span><br><span class="line">                <span class="comment"># response, use that. Otherwise, reraise the exception.</span></span><br><span class="line">                <span class="keyword">for</span> middleware_method <span class="keyword">in</span> self._exception_middleware:</span><br><span class="line">                    response = middleware_method(request, e)</span><br><span class="line">                    <span class="keyword">if</span> response:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> response <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                    <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Complain if the view returned None (a common error).</span></span><br><span class="line">        <span class="keyword">if</span> response <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> isinstance(callback, types.FunctionType):    <span class="comment"># FBV</span></span><br><span class="line">                view_name = callback.__name__</span><br><span class="line">            <span class="keyword">else</span>:                                           <span class="comment"># CBV</span></span><br><span class="line">                view_name = callback.__class__.__name__ + <span class="string">'.__call__'</span></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"The view %s.%s didn't return an HttpResponse object. It returned None instead."</span></span><br><span class="line">                             % (callback.__module__, view_name))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># If the response supports deferred rendering, apply template</span></span><br><span class="line">        <span class="comment"># response middleware and then render the response</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(response, <span class="string">'render'</span>) <span class="keyword">and</span> callable(response.render):</span><br><span class="line">            <span class="keyword">for</span> middleware_method <span class="keyword">in</span> self._template_response_middleware:</span><br><span class="line">                response = middleware_method(request, response)</span><br><span class="line">                <span class="comment"># Complain if the template response middleware returned None (a common error).</span></span><br><span class="line">                <span class="keyword">if</span> response <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(</span><br><span class="line">                        <span class="string">"%s.process_template_response didn't return an "</span></span><br><span class="line">                        <span class="string">"HttpResponse object. It returned None instead."</span></span><br><span class="line">                        % (middleware_method.__self__.__class__.__name__))</span><br><span class="line">            response = response.render()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> http.Http404 <span class="keyword">as</span> e:</span><br><span class="line">		... ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Apply response middleware, regardless of the response</span></span><br><span class="line">        <span class="keyword">for</span> middleware_method <span class="keyword">in</span> self._response_middleware:</span><br><span class="line">            response = middleware_method(request, response)</span><br><span class="line">            <span class="comment"># Complain if the response middleware returned None (a common error).</span></span><br><span class="line">            <span class="keyword">if</span> response <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(</span><br><span class="line">                    <span class="string">"%s.process_response didn't return an "</span></span><br><span class="line">                    <span class="string">"HttpResponse object. It returned None instead."</span></span><br><span class="line">                    % (middleware_method.__self__.__class__.__name__))</span><br><span class="line">        response = self.apply_response_fixes(request, response)</span><br><span class="line">    <span class="keyword">except</span>:  <span class="comment"># Any exception should be gathered and handled</span></span><br><span class="line">        signals.got_request_exception.send(sender=self.__class__, request=request)</span><br><span class="line">        response = self.handle_uncaught_exception(request, resolver, sys.exc_info())</span><br><span class="line"></span><br><span class="line">    response._closable_objects.append(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
<p>从上段代码中可以看出来request执行的过程是，解析url，调用请求中间件过滤请求。如果响应处理，那么直接返回响应结果；如果不响应处理，解析url得到view。调用view中间件过滤；如果还没有得到响应；那么调用转化得到view类或者view响应方法，调用view的渲染方法得到response，最后调用返回response中间件过滤处理，返回response。</p>
<p><img src="/images/python-web-django-5.png" alt="img"></p>
<p>流程上解析完以后。具体查看中间件部分，文件夹结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">middleware</span><br><span class="line">    |----__init__.py</span><br><span class="line">    |----cache.py                    	缓存处理</span><br><span class="line">    |----clickjacking.py            	框架跨站保护</span><br><span class="line">    |----common.py                		公共部分</span><br><span class="line">    |----csrf.py                      csrf保护</span><br><span class="line">    |----doc.py                       头信息中添加xView，具体作用未知</span><br><span class="line">    |----gzip.py                      gzip压缩</span><br><span class="line">    |----http.py                      如果有Etag或者修改时间标记。做一些响应处理</span><br><span class="line">    |----locale.py                    多语言处理</span><br><span class="line">    |----transaction.py          			交易中间件，如果发生异常，数据库将回滚</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/93578120" target="_blank" rel="external">django源码分析</a></p>
<p><a href="https://blog.csdn.net/weixin_30321709/article/details/99871340" target="_blank" rel="external">django源码分析</a></p>
<p><a href="https://www.cnblogs.com/suwanbin-thought/articles/11709204.html" target="_blank" rel="external">django 部分中间件源码解析</a></p>
<p><a href="https://www.cnblogs.com/weiwu1578/category/1194670.html" target="_blank" rel="external">django 各组件源码解析</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> PythonWeb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Apache httpd mod_wsgi Nginx uWSGI学习笔记]]></title>
      <url>https://magiceses.github.io/2016/09/25/python-web-Apache%20httpd%20mod_wsgi%20Nginx%20uWSGI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">这座城市人很多，每天在路上都能看到好多拉着行李箱的人，不管他们是来到这座城市还是离开这座城市，至少他们都曾努力过。<br></p>

<p><br></p>
<h1 id="Apache-httpd-mod-wsgi-Nginx-uWSGI学习笔记"><a href="#Apache-httpd-mod-wsgi-Nginx-uWSGI学习笔记" class="headerlink" title="Apache httpd mod_wsgi Nginx uWSGI学习笔记"></a>Apache httpd mod_wsgi Nginx uWSGI学习笔记</h1><p>以下所总结仅是学习记录，如有不对的部分，还请及时指出，十分感谢<br>参考文档目录较多，都在末尾列出，有兴趣的可以直接访问<br><a id="more"></a></p>
<h2 id="Apache-httpd-简介"><a href="#Apache-httpd-简介" class="headerlink" title="Apache httpd 简介"></a>Apache httpd 简介</h2><p>Apache HTTPD又可以简称为httpd或者Apache，它是Internet使用最广泛的web服务器之一，使用Apache提供的web服务器是由守护进程httpd，通过http协议进行文本传输，默认使用80端口的明文传输方式，当然，后来，为了保证数据的安全和可靠性，又添加了443的加密传输的方式，Apache提供的服务器又被称为：补丁服务器，原因很简单，它是一款高度模块化的软件，想要给它添加相应的功能只需添加相应的模块，让其Apache主程序加载相应的模块，不需要的模块也可以不用加载，保证了Apache的简洁，轻便，高效性，当出现大量访问一个服务器是可以使用多种复用模式，保证了服务器能快速回应客户端的请求，如MPM，端口复用技术。</p>
<h3 id="apache和httpd区别"><a href="#apache和httpd区别" class="headerlink" title="apache和httpd区别"></a>apache和httpd区别</h3><p>从我们仅仅web服务器使用者的角度说的话，它们是同一个东西。在 Apache 的网站上有两种安装包下载<br>httpd-2.0.50-i686-pc-linux-gnu.tar.gz  和 apache_1.3.33-i686-whatever-linux22.tar.gz<br>其实都是提供Web服务的，只是一个是早期版一个是新的版本模式。httpd是apache开源项目的一部分，如果只需要web服务器，现在只需安装httpd2.*就可以了。</p>
<p>和 “Apache” 的历史有关。可以参考官方介绍：<a href="http://httpd.apache.org/ABOUT_APACHE.html" target="_blank" rel="external">http://httpd.apache.org/ABOUT_APACHE.html</a></p>
<p>早 期的Apache小组，现在已经成为一个拥有巨大力量的Apache软件基金会，而apache现在成为  apache基金会下几十种开源项目的标识。其中有一个项目做HTTP Server，httpd是HTTP  Server的守护进程，在Linux下最常用的是Apache，所以一提到httpd就会想到Apache HTTP Server。<br>他们把起 家的apache更名为httpd，也更符合其http server的特性。以前apache的http  server在1.3的时候直接叫apache_1.3.37，现在2.*版本的都叫httpd_2.2.3。在Linux下最常用的是Apache，所 以一提到httpd就会想到Apache HTTP Server。</p>
<p>对于nginx/mod_wsgi，请确保阅读：</p>
<p><a href="http://blog.dscpl.com.au/2009/05/blocking-requests-and-nginx-version-of.html" target="_blank" rel="external">http://blog.dscpl.com.au/2009/05/blocking-requests-and-nginx-version-of.html</a></p>
<h3 id="httpd配置相关目录"><a href="#httpd配置相关目录" class="headerlink" title="httpd配置相关目录"></a>httpd配置相关目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cd /etc/httpd</span><br><span class="line">[root@localhost httpd]# tree .</span><br><span class="line">.</span><br><span class="line">|-- conf</span><br><span class="line">|   |-- httpd.conf</span><br><span class="line">|   `-- magic</span><br><span class="line">|-- conf.d</span><br><span class="line">|   |-- README</span><br><span class="line">|   |-- proxy_ajp.conf</span><br><span class="line">|   `-- welcome.conf</span><br><span class="line">|-- logs -&gt; ../../var/log/httpd</span><br><span class="line">|-- modules -&gt; ../../usr/lib/httpd/modules</span><br><span class="line">`-- run -&gt; ../../var/run</span><br><span class="line"></span><br><span class="line">第一，httpd的主配置文件是/etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line">第二，在httpd.conf文件中通过include指令将conf.d/*.conf进行包含，也就是说，以后我们可以在conf.d目录下新增自己的配置文件。</span><br><span class="line"></span><br><span class="line">第三，对于WEB服务器而言，都有一个功能，那就是记录访问，错误日志。HTTPD的日志目录在/var/log/httpd下。</span><br><span class="line"></span><br><span class="line">第四，HTTPD的一个特性，就是模块化设计。我们可以增加模块来添加功能。</span><br></pre></td></tr></table></figure>
<h3 id="httpd配置文件"><a href="#httpd配置文件" class="headerlink" title="httpd配置文件"></a>httpd配置文件</h3><p>下面的三个文件分别是主配置文件和辅助配置文件，以及模块配置文件，对主配置文件进行分割方便管理，在重启服务或者重新加载配置文件时会一并加载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/etc/httpd/conf/httpd.conf 		# 主配置文件,这个是httpd最主要的配置文档</span><br><span class="line"></span><br><span class="line">/etc/httpd/conf.d/*.conf			 # 扩展配置文件,这个是httpd的额外配置文档</span><br><span class="line"></span><br><span class="line">/etc/httpd/conf.modules.d/*.conf		# 模块相关的配置文件</span><br><span class="line"></span><br><span class="line">/var/www/html							 # 文档根目录,这个是apache 首页的文档目录 ，即输入http://127.0.0.1 显示页面所在的目录</span><br><span class="line"></span><br><span class="line">/etc/rc.d/init.d/httpd				   # 服务脚本</span><br><span class="line"></span><br><span class="line">/var/www/error							# 错误目录,服务器设定错误，请求的资源错误或浏览器访问出现错误等错误文件的存储目录</span><br><span class="line"></span><br><span class="line">/var/www/cgi-bin/						# CGI目录,预设为CGI运行脚本的存储目录</span><br><span class="line"></span><br><span class="line">/etc/sysconfig/httpd					# 脚本配置文件</span><br><span class="line"></span><br><span class="line">/usr/sbin/apachectl ，/usr/sbin/httpd，/usr/bin/htpasswd			# 命令执行文件</span><br><span class="line"></span><br><span class="line">/var/run/httpd/httpd.pid			 # PID文件</span><br></pre></td></tr></table></figure>
<p><strong>模块的加载格式为：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LoadModule 模块名 模块存放路径</span><br><span class="line"></span><br><span class="line">UnitFile:/usr/lib/systemd/system/httpd.service  //Unit文件是rhel7之后的版本系统服务脚本启动文件</span><br></pre></td></tr></table></figure>
<p><strong>模块文件目录：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib64/httpd/modules/</span><br></pre></td></tr></table></figure>
<p><strong>站点主服务器根目录默认：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/www/httpd/</span><br></pre></td></tr></table></figure>
<p><strong>日志文件：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/var/log/httpd/</span><br><span class="line"></span><br><span class="line">	error_log 错误日志</span><br><span class="line"></span><br><span class="line">	access_log 访问日志</span><br></pre></td></tr></table></figure>
<p>下面是 <code>/etc/httpd/conf/httpd.conf</code>  简单配置的解释：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"># 1. ServerRoot：服务器的基础目录，一般来说它将包含conf/和logs/子目录，其它配置文件的相对路径即基于此目录。默认为安装目录，不需更改。</span><br><span class="line"># 语法：ServerRoot directory-path</span><br><span class="line"># 如：　ServerRoot &quot;/usr/local/apache-2.2.6&quot;</span><br><span class="line">ServerRoot &quot;/etc/httpd&quot;</span><br><span class="line"></span><br><span class="line"># 加载其它配置文件，类似于C语言的头文件的加载，此处可以使用相对路径也可以使用绝对路径，相对路径是相对于ServerRoot的路径，可以使用glob通配符，此处的配置文件是用来加载DSO（dynamic shared object）模块</span><br><span class="line">Include conf.modules.d/*.conf</span><br><span class="line"></span><br><span class="line"># 程序运行时的用户名和组名，在安装Apache时已经创建了系统账号和组账号，程序启动时是以root身份启动，执行完root特权的所有操作后（例如启动监听80端口，低于1024的端口的监听需要root才有权力执行）会以非特权用户执行程序</span><br><span class="line">User apache</span><br><span class="line">Group apache</span><br><span class="line"></span><br><span class="line"># 管理员的邮箱地址，当httpd出问题时，联系该邮箱地址可以联系到管理员</span><br><span class="line">ServerAdmin root@localhost</span><br><span class="line"></span><br><span class="line"># 关于目录的一些配置，有关目录的访问权限等都是在这里定义，可以使用基于URL定义访问权限，但要使用&lt;Location “”&gt; …&lt;Location&gt;来定义</span><br><span class="line">&lt;Directory /&gt;</span><br><span class="line">		# AllowOverride参数就是指明Apache服务器是否去找.htacess文件作为配置文件，如果设置为none,那么服务器将忽略.htacess文件，如果设置为All,那么所有在.htaccess文件里有的指令都将被重写。对于AllowOverride，还可以对它指定如下一些能被重写的指令类型.</span><br><span class="line">    AllowOverride none</span><br><span class="line">    # 对目录的授权此处为拒绝所有访问</span><br><span class="line">    Require all denied</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line"># 定义目录的根位置类似于配置文件的根，不过此处是网页存放的根，在定义Directory目录时，那里的目录同样可以是绝对路径，也可以是相对于此处的路径</span><br><span class="line">DocumentRoot &quot;/var/www/html&quot;</span><br><span class="line"></span><br><span class="line"># 此处为仅在加载了模块dir_module 后才执行，DirectoryIndex配置指令后面的值可以跟多个，先后顺序很关键，值的含义为URL访问时进入目录是应该寻找哪一个文件，多个时按顺序寻找，找不到第一个然后寻找第二个值</span><br><span class="line">&lt;Directory &quot;/var/www&quot;&gt;</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;Directory &quot;/var/www/html&quot;&gt;</span><br><span class="line">    Options Indexes FollowSymLinks</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;IfModule dir_module&gt;</span><br><span class="line">    DirectoryIndex index.html</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line"># 对所有安全相关的敏感文件设置为禁止，如目录下的.htaccess，.htpasswd</span><br><span class="line">&lt;Files &quot;.ht*&quot;&gt;</span><br><span class="line">    Require all denied</span><br><span class="line">&lt;/Files&gt;</span><br><span class="line"></span><br><span class="line"># 设置错误日志的存放路径，这里是一个软链接，指向/var/log/httpd/的符号链接</span><br><span class="line">ErrorLog &quot;logs/error_log&quot;</span><br><span class="line"></span><br><span class="line"># 设置日志级别，仅达到该级别才记录日志</span><br><span class="line">LogLevel warn</span><br><span class="line"></span><br><span class="line">&lt;IfModule log_config_module&gt;</span><br><span class="line">		# 下面定义了多种日志的记录格式，可以人为的修改自己想要定义的格式，LogFormat后面的双引号具体定义了日志的格式，后面有一个名字，在使用该定义好的格式可以使用后面的别名代替，当然也可以在使用时直接用双引号加相应的格式，访问日志也可以在虚拟主机中单独定义</span><br><span class="line">    LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot;&quot; combined</span><br><span class="line">    LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b&quot; common</span><br><span class="line">    &lt;IfModule logio_module&gt;</span><br><span class="line">      LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot; %I %O&quot; combinedio</span><br><span class="line">    &lt;/IfModule&gt;</span><br><span class="line">    # 下面定义问日志，和使用相应的格式为combined</span><br><span class="line">    CustomLog &quot;logs/access_log&quot; combined</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;IfModule alias_module&gt;</span><br><span class="line">		# ScriptAlias和Alias类似都是在此定义，两者的区别是ScriptAlias是作为服务器的运行文件，而不是发送到客户端的文件</span><br><span class="line">    ScriptAlias /cgi-bin/ &quot;/var/www/cgi-bin/&quot;</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory &quot;/var/www/cgi-bin&quot;&gt;</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Options None</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line"># mime多媒体英特网邮件扩展，这个模块是用来指定内容元数据，选择HTTP响应的映射模式中的URI或文件的元数据值的内容。如mime-type中的类型有语言，字符集，编码方式</span><br><span class="line">&lt;IfModule mime_module&gt;</span><br><span class="line">    TypesConfig /etc/mime.types</span><br><span class="line">    AddType application/x-compress .Z</span><br><span class="line">    AddType application/x-gzip .gz .tgz</span><br><span class="line">    AddType text/html .shtml</span><br><span class="line">    AddOutputFilter INCLUDES .shtml</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line"># 下面的设置向text/plain和text/html 资源的content-type报头中添加charset部分。</span><br><span class="line">AddDefaultCharset UTF-8</span><br><span class="line">&lt;IfModule mime_magic_module&gt;</span><br><span class="line">    MIMEMagicFile conf/magic</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line"># 控制httpd是否可以使用操作系统内核的sendfile支持来将文件发送到客户端。</span><br><span class="line">EnableSendfile on</span><br><span class="line"></span><br><span class="line">IncludeOptional conf.d/*.conf</span><br></pre></td></tr></table></figure>
<p>更加具体的配置文件信息可见下面的链接，作者介绍的很详细</p>
<p><a href="https://blog.csdn.net/number_chc/article/details/38978567?utm_medium=distribute.pc_relevant_t0.none-task-blog-OPENSEARCH-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-OPENSEARCH-1.channel_param" target="_blank" rel="external">https://blog.csdn.net/number_chc/article/details/38978567?utm_medium=distribute.pc_relevant_t0.none-task-blog-OPENSEARCH-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-OPENSEARCH-1.channel_param</a></p>
<p><a href="https://blog.csdn.net/fzjw/article/details/87662?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param" target="_blank" rel="external">https://blog.csdn.net/fzjw/article/details/87662?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param</a></p>
<h3 id="https运行模式–MPM"><a href="#https运行模式–MPM" class="headerlink" title="https运行模式–MPM"></a>https运行模式–MPM</h3><p>MPM模块在httpd-2.4中是动态共享模块的，没有编译如主程序当中，httpd-2. 2中是静态编译入主程序当中的。在这些模型中，默认使用第一个prefork模型，第二个模型因为出错不以排查，因此使用较少，在第三个模型当中因为是比较新的功能，只有在httpd-2.4之后的版本才有的功能，所以使用较少，因为在企业使用时稳定才是王道，绝非功能越新越好</p>
<p>配置文件在：/etc/httpd/conf.modules.d/00-mpm.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Select the MPM module which should be used by uncommenting exactly</span><br><span class="line"># one of the following LoadModule lines:</span><br><span class="line"></span><br><span class="line"># prefork MPM: Implements a non-threaded, pre-forking web server</span><br><span class="line"># See: http://httpd.apache.org/docs/2.4/mod/prefork.html</span><br><span class="line">LoadModule mpm_prefork_module modules/mod_mpm_prefork.so				# prefork</span><br><span class="line"></span><br><span class="line"># worker MPM: Multi-Processing Module implementing a hybrid</span><br><span class="line"># multi-threaded multi-process web server</span><br><span class="line"># See: http://httpd.apache.org/docs/2.4/mod/worker.html</span><br><span class="line">#</span><br><span class="line">#LoadModule mpm_worker_module modules/mod_mpm_worker.so					# worker</span><br><span class="line"></span><br><span class="line"># event MPM: A variant of the worker MPM with the goal of consuming</span><br><span class="line"># threads only for connections with active processing</span><br><span class="line"># See: http://httpd.apache.org/docs/2.4/mod/event.html</span><br><span class="line">#</span><br><span class="line">#LoadModule mpm_event_module modules/mod_mpm_event.so						# event</span><br></pre></td></tr></table></figure>
<p>每种模式的详解：</p>
<h4 id="prefork"><a href="#prefork" class="headerlink" title="prefork"></a>prefork</h4><p>简介：prefork模式可以算是很古老但是非常稳定的Apache模式。Apache在启动之初，就预先fork一些子进程，然后等待请求进来。之所以这样做，是为了减少频繁创建和销毁进程的开销。每个子进程只有一个线程，在一个时间点内，只能处理一个请求。<br>优点：成熟稳定，兼容所有新老模块。同时，不需要担心线程安全的问题。（我们常用的mod_php，PHP的拓展不需要支持线程安全）<br>缺点：一个进程相对占用更多的系统资源，消耗更多的内存。而且，它并不擅长处理高并发请求，在这种场景下，它会将请求放进队列中，一直等到有可用进程，请求才会被处理。</p>
<p><strong>工作原理：</strong></p>
<p>一个单独的控制进程(父进程)负责产生子进程，这些子进程用于监听请求并作出应答。Apache总是试图保持一些备用的 (spare)或是空闲的子进程用于迎接即将到来的请求。这样客户端就无需在得到服务前等候子进程的产生。在Unix系统中，父进程通常以root身份运行以便邦定80端口，而 Apache产生的子进程通常以一个低特权的用户运行。User和Group指令用于配置子进程的低特权用户。运行子进程的用户必须要对他所服务的内容有读取的权限，但是对服务内容之外的其他资源必须拥有尽可能少的权限。<br>这样可以减少频繁创建和销毁进程的开销，每个子进程只有一个线程，在一个时间点内，只能处理一个请求。这是一个成熟稳定，可以兼容新老模块，也不需要担心线程安全问题，但是一个进程相对占用资源，消耗大量内存，不擅长处理高并发的场景。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     		-----&gt;		派生子进程		-----&gt;		子进程</span><br><span class="line">主进程		-----&gt;		派生子进程		-----&gt;		子进程</span><br><span class="line">		 		-----&gt;		派生子进程		-----&gt;		子进程</span><br></pre></td></tr></table></figure>
<p><strong>配置说明：</strong></p>
<p>如何配置在Apache的配置文件httpd.conf的配置方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mpm_prefork_module&gt;</span><br><span class="line">    StartServers             5</span><br><span class="line">    MinSpareServers          5</span><br><span class="line">    MaxSpareServers          10</span><br><span class="line">    MaxRequestWorkers        250</span><br><span class="line">    MaxConnectionsPerChild   1000</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>StartServers</strong>   服务器启动时建立的子进程数量，默认是5个</li>
<li><strong>MinSpareServers</strong>    空闲子进程的最小数量，默认5个；如果当前空闲子进程数少于MinSpareServers ，那么Apache将以最大每秒一个的速度产生新的子进程。此参数不要设的太大。</li>
<li><strong>MaxSpareServers</strong>   空闲子进程的最大数量，默认10；如果当前有超过MaxSpareServers数量的空闲子进程，那么父进程会杀死多余的子进程。次参数也不需要设置太大，如果你将其设置比MinSpareServers 小，Apache会自动将其修改为MinSpareServers +1的数量。</li>
<li><strong>MaxRequestWorkers</strong>  限定服务器同一时间内客户端最大接入的请求数量，默认是256；任何超过了MaxRequestWorkers限制的请求都要进入等待队列，一旦一个个连接被释放，队列中的请求才将得到服务，如果要增大这个数值，必须先增大ServerLimit。在Apache2.3.1版本之前这参数MaxRequestWorkers被称为MaxClients。</li>
<li><strong>MaxConnectionsPerChild</strong>   每个子进程在其生命周期内允许最大的请求数量，如果请求总数已经达到这个数值，子进程将会结束，如果设置为0，子进程将永远不会结束。在Apache2.3.9之前称之为MaxRequestsPerChild。</li>
</ul>
<h4 id="worker"><a href="#worker" class="headerlink" title="worker"></a>worker</h4><p>简介：worker模式比起上一个，是使用了多进程和多线程的混合模式。它也预先fork了几个子进程（数量比较少），然后每个子进程创建一些线程，同时包括一个监听线程。每个请求过来，会被分配到1个线程来服务。线程比起进程会更轻量，因为线程通常会共享父进程的内存空间，因此，内存的占用会减少一些。在高并发的场景下，因为比起prefork有更多的可用线程，表现会更优秀一些。<br>有些人会觉得奇怪，那么这里为什么不完全使用多线程呢，还要引入多进程？<br>原因主要是需要考虑稳定性，如果一个线程异常挂了，会导致父进程连同其他正常的子线程都挂了（它们都是同一个进程下的）。为了防止这场异常场景出现，就不能全部使用线程，使用多个进程再加多线程，如果某个线程出现异常，受影响的只是Apache的一部分服务，而不是整个服务。</p>
<p>优点：占据更少的内存，高并发下表现更优秀。</p>
<p>缺点：必须考虑线程安全的问题，因为多个子线程是共享父进程的内存地址的。如果使用keep-alive的长连接方式，某个线程会一直被占据，也许中间几乎没有请求，需要一直等待到超时才会被释放。如果过多的线程，被这样占据，也会导致在高并发场景下的无服务线程可用。（该问题在prefork模式下，同样会发生）</p>
<p>注：keep-alive的长连接方式，是为了让下一次的socket通信复用之前创建的连接，从而，减少连接的创建和销毁的系统开销。保持连接，会让某个进程或者线程一直处于等待状态，即使没有数据过来。</p>
<p><strong>工作原理：</strong></p>
<p>和prefork模式相比，worker使用了多进程和多线程的混合模式，worker模式也同样会先预派生一些子进程，然后每个子进程创建一些线程，同时包括一个监听线程，每个请求过来会被分配到一个线程来服务。线程比起进程会更轻量，因为线程是通过共享父进程的内存空间，因此，内存的占用会减少一些，在高并发的场景下会比prefork有更多可用的线程，表现会更优秀一些；另外，如果一个线程出现了问题也会导致同一进程下的线程出现问题，如果是多个线程出现问题，也只是影响Apache的一部分，而不是全部。由于用到多进程多线程，需要考虑到线程的安全了，在使用keep-alive长连接的时候，某个线程会一直被占用，即使中间没有请求，需要等待到超时才会被释放（该问题在prefork模式下也存在）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     		-----&gt;		派生子进程		-----&gt;		线程</span><br><span class="line">主进程		-----&gt;		派生子进程		-----&gt;		线程</span><br><span class="line">		 		-----&gt;		派生子进程		-----&gt;		线程</span><br></pre></td></tr></table></figure>
<p><strong>配置说明：</strong></p>
<p>配置在Apache的配置文件httpd.conf的配置方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mpm_worker_module&gt;</span><br><span class="line">    StartServers             3</span><br><span class="line">    ServerLimit              16</span><br><span class="line">    MinSpareThreads          75</span><br><span class="line">    MaxSpareThreads          250</span><br><span class="line">    ThreadsPerChild          25</span><br><span class="line">    MaxRequestWorkers        400</span><br><span class="line">    MaxConnectionsPerChild   1000</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>StartServers</strong> 服务器启动时建立的子进程数量,在workers模式下默认是3个.</li>
<li><strong>ServerLimit</strong>系统配置的最大进程数量</li>
<li><strong>MinSpareThreads</strong>空闲子进程的最小数量，默认75</li>
<li><strong>MaxSpareThreads</strong> 空闲子进程的最大数量，默认250</li>
<li><strong>ThreadsPerChild</strong>  每个子进程产生的线程数量，默认是64</li>
<li><strong>MaxRequestWorkers</strong> /<strong>MaxClients</strong> 限定服务器同一时间内客户端最大接入的请求数量.</li>
<li><strong>MaxConnectionsPerChild</strong> 每个子进程在其生命周期内允许最大的请求数量，如果请求总数已经达到这个数值，子进程将会结束，如果设置为0，子进程将永远不会结束。在Apache2.3.9之前称之为MaxRequestsPerChild。</li>
</ul>
<blockquote>
<p>这里建议设置为非零，注意原因：<br> 1）能够防止(偶然的)内存泄漏无限进行，从而耗尽内存。<br> 2）给进程一个有限寿命，从而有助于当服务器负载减轻的时候减少活动进程的数量(重生的机会)。</p>
</blockquote>
<p>Worker模式下所能同时处理的请求总数是由子进程总数乘以ThreadsPerChild 值决定的，应该大于等于MaxRequestWorkers。如果负载很大，现有的子进程数不能满足时，控制进程会派生新的子进程。默认最大的子进程总数是16，加大时 也需要显式声明ServerLimit（最大值是20000）。需要注意的是，如果显式声明了ServerLimit，那么它乘以 ThreadsPerChild的值必须大于等于MaxRequestWorkers，而且MaxRequestWorkers必须是ThreadsPerChild的整数倍，否则 Apache将会自动调节到一个相应值。</p>
<h4 id="event"><a href="#event" class="headerlink" title="event"></a>event</h4><p>简介：这个是Apache中最新的模式，在现在版本里的已经是稳定可用的模式。它和worker模式很像，最大的区别在于，它解决了keep-alive场景下，长期被占用的线程的资源浪费问题（某些线程因为被keep-alive，空挂在哪里等待，中间几乎没有请求过来，甚至等到超时）。event MPM中，会有一个专门的线程来管理这些keep-alive类型的线程，当有真实请求过来的时候，将请求传递给服务线程，执行完毕后，又允许它释放。这样增强了高并发场景下的请求处理能力。</p>
<p>event MPM在遇到某些不兼容的模块时，会失效，将会回退到worker模式，一个工作线程处理一个请求。官方自带的模块，全部是支持event MPM的。</p>
<p>注意一点，event MPM需要Linux系统（Linux 2.6+）对EPoll的支持，才能启用。</p>
<p>还有，需要补充的是HTTPS的连接（SSL），它的运行模式仍然是类似worker的方式，线程会被一直占用，知道连接关闭。部分比较老的资料里，说event MPM不支持SSL，那个说法是几年前的说法，现在已经支持了。</p>
<p><strong>工作原理：</strong></p>
<p>这是Apache最新的工作模式，它和worker模式很像，不同的是在于它解决了keep-alive长连接的时候占用线程资源被浪费的问题，在event工作模式中，会有一些专门的线程用来管理这些keep-alive类型的线程，当有真实请求过来的时候，将请求传递给服务器的线程，执行完毕后，又允许它释放。这增强了在高并发场景下的请求处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     		-----&gt;		子进程		-----&gt;		多线程		-----&gt;		管理&amp;分配线程		-----&gt;		HTTP请求</span><br><span class="line">主进程		-----&gt;		子进程		-----&gt;		线程</span><br><span class="line">		 		-----&gt;		子进程		-----&gt;		线程</span><br></pre></td></tr></table></figure>
<p><strong>配置说明：</strong></p>
<p>配置在Apache的配置文件httpd.conf的配置方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mpm_event_module&gt;</span><br><span class="line">    StartServers             3</span><br><span class="line">    ServerLimit              16</span><br><span class="line">    MinSpareThreads          75</span><br><span class="line">    MaxSpareThreads          250</span><br><span class="line">    ThreadsPerChild          25</span><br><span class="line">    MaxRequestWorkers        400</span><br><span class="line">    MaxConnectionsPerChild   1000</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>StartServers</strong> 服务器启动时建立的子进程数量,在workers模式下默认是3个.</li>
<li><strong>ServerLimit</strong>系统配置的最大进程数量</li>
<li><strong>MinSpareThreads</strong>空闲子进程的最小数量，默认75</li>
<li><strong>MaxSpareThreads</strong> 空闲子进程的最大数量，默认250</li>
<li><strong>ThreadsPerChild</strong>  每个子进程产生的线程数量，默认是64</li>
<li><strong>MaxRequestWorkers</strong> /<strong>MaxClients</strong> 限定服务器同一时间内客户端最大接入的请求数量.</li>
<li><strong>MaxConnectionsPerChild</strong> 每个子进程在其生命周期内允许最大的请求数量，如果请求总数已经达到这个数值，子进程将会结束，如果设置为0，子进程将永远不会结束。</li>
</ul>
<p>ps：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost httpd]# /usr/sbin/httpd</span><br><span class="line">You have new mail in /var/spool/mail/root</span><br><span class="line">[root@localhost httpd]# ps aux | grep httpd</span><br><span class="line">root      5589  0.0  0.6  10292  2820 ?        Ss   22:58   0:00 /usr/sbin/httpd</span><br><span class="line">apache    5590  0.0  0.4  10424  2060 ?        S    22:58   0:00 /usr/sbin/httpd</span><br><span class="line">apache    5591  0.0  0.4  10424  2060 ?        S    22:58   0:00 /usr/sbin/httpd</span><br><span class="line">apache    5592  0.0  0.4  10424  2060 ?        S    22:58   0:00 /usr/sbin/httpd</span><br><span class="line">apache    5593  0.0  0.4  10424  2060 ?        S    22:58   0:00 /usr/sbin/httpd</span><br><span class="line">apache    5594  0.0  0.4  10424  2060 ?        S    22:58   0:00 /usr/sbin/httpd</span><br><span class="line">apache    5595  0.0  0.4  10424  2060 ?        S    22:58   0:00 /usr/sbin/httpd</span><br><span class="line">apache    5596  0.0  0.4  10424  2060 ?        S    22:58   0:00 /usr/sbin/httpd</span><br><span class="line">apache    5597  0.0  0.4  10424  2060 ?        S    22:58   0:00 /usr/sbin/httpd</span><br><span class="line">root      5599  0.0  0.1   3896   664 pts/0    R+   22:59   0:00 grep httpd</span><br><span class="line">启动HTTPD，可以通过/usr/sbin/httpd来启动，或者service httpd start。</span><br><span class="line"></span><br><span class="line">默认，HTTPD的工作模型是perfork。</span><br><span class="line"></span><br><span class="line">通过上面的，可以知道，启动HTTPD后，由于HTTPD的特性【事先创建进程】，会有多个HTTPD的进程，其中会有一个HTTPD的进程的OWER:GROUP都是ROOT。【很显然，这是一个主导进程，用于创建，销毁其他HTTPD进程的 master process】。其他HTTPD进程可以成为工作进程，work process.</span><br><span class="line"></span><br><span class="line">说白了，就是每一个用户请求，由master process负责创建work process来响应。</span><br></pre></td></tr></table></figure>
<h3 id="httpd虚拟主机的配置"><a href="#httpd虚拟主机的配置" class="headerlink" title="httpd虚拟主机的配置"></a>httpd虚拟主机的配置</h3><p><strong>基于IP地址的虚拟主机</strong></p>
<p>在同一台服务器上，有多个IP地址，每一个IP地址负责一台虚拟主机的绑定，每个主机的主机名不一样如www.vhost1.com www.vhost2.com，使用较少，因为IP地址较为宝贵，而这种虚拟主机需要大量IP地址。</p>
<p>配置示例：</p>
<p>（1） 添加多个供虚拟主机使用的IP地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cnode6_8conf.d]# ip a |grep 192  //此时eth2有一个IP地址</span><br><span class="line">    inet 192.168.66.142/24 scope global eth2</span><br></pre></td></tr></table></figure>
<p>#使用ip命令添加三个临时IP地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@cnode6_8conf.d]# ip addr add 192.168.66.143/24 dev eth2</span><br><span class="line">[root@cnode6_8conf.d]# ip addr add 192.168.66.144/24 dev eth2</span><br><span class="line">[root@cnode6_8conf.d]# ip addr add 192.168.66.145/24 dev eth2</span><br><span class="line">[root@cnode6_8conf.d]# ip a | grep 192  //通过查看多了3个IP地址</span><br><span class="line">    inet 192.168.66.142/24 scope global eth2</span><br><span class="line">    inet 192.168.66.143/24 scope globalsecondary eth2</span><br><span class="line">    inet 192.168.66.144/24 scope globalsecondary eth2</span><br></pre></td></tr></table></figure>
<p>（2）添加虚拟主机的配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@cnode6_8conf.d]# pwd</span><br><span class="line">/etc/httpd/conf.d</span><br><span class="line">[root@cnode6_8conf.d]# vim virtual.conf</span><br><span class="line">&lt;VirtualHost 192.168.66.143:80&gt; </span><br><span class="line">    ServerName www.vhost1.com</span><br><span class="line">    DocumentRoot &quot;/testdir/vhost1&quot;</span><br><span class="line">    &lt;Directory&quot;/testdir/vhost1&quot;&gt;</span><br><span class="line">             AllowOverride none</span><br><span class="line">             Allow from all</span><br><span class="line">             Order Allow,deny   </span><br><span class="line">    &lt;/Directory&gt;   </span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"> </span><br><span class="line">&lt;VirtualHost 192.168.66.144:80&gt;</span><br><span class="line">    ServerName www.vhost2.com</span><br><span class="line">    DocumentRoot &quot;/testdir/vhost2&quot;</span><br><span class="line">    &lt;Directory&quot;/testdir/vhost2&quot;&gt;</span><br><span class="line">             AllowOverride none</span><br><span class="line">             Allow from all</span><br><span class="line">             Order Allow,deny   </span><br><span class="line">    &lt;/Directory&gt;   </span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<p>（3）修改/etc/hosts文件（此处不是必须的，因为这里没有DNS服务器解析域名，只好修改hosts文件以供测试！）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@cnode6_8conf.d]# grep &quot;^192&quot; /etc/hosts</span><br><span class="line">168.66.143  www.vhost1.com</span><br><span class="line">168.66.144  www.vhost2.com</span><br><span class="line">168.66.145 www.vhost3.com</span><br></pre></td></tr></table></figure>
<p>（4）添加相应的目录和文件重启服务测试，添加的目录和文件都因该是配置文件定义的。这里省略这些步骤，测试结果应该为访问相应的域名，会被解析为相应的IP能访问到响应的网页</p>
<p><strong>基于域名的虚拟主机</strong></p>
<p>在同一台服务器上面，仅有一个IP地址，使用不同的主机名访问不同的网页内容，在虚拟主机块定义上面需要使用NameVirtualHost声明监听的IP地址，使用较多。需要注意在httpd-2.4的版本中不需要使用NameVirtualHost关键字指定监听IP地址和端口号，其余部分没有变化</p>
<p>（1）修改配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">root@cnode6_8conf.d]# pwd</span><br><span class="line">/etc/httpd/conf.d</span><br><span class="line">[root@cnode6_8conf.d]# vim virtual.conf</span><br><span class="line">NameVirtualHost 192.168.66.142:80 //如果要监听主机所有IP可以使用通配符 *</span><br><span class="line">&lt;VirtualHost192.168.66.142:80&gt;</span><br><span class="line">    ServerNamewww.vhost1.com</span><br><span class="line">    DocumentRoot &quot;/testdir/vhost1&quot;</span><br><span class="line">    &lt;Directory&quot;/testdir/vhost1&quot;&gt;</span><br><span class="line">             AllowOverride none</span><br><span class="line">             Allow from all</span><br><span class="line">             Order Allow,deny   </span><br><span class="line">    &lt;/Directory&gt;   </span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"> </span><br><span class="line">&lt;VirtualHost192.168.66.142:80&gt;</span><br><span class="line">    ServerNamewww.vhost2.com</span><br><span class="line">    DocumentRoot &quot;/testdir/vhost2&quot;</span><br><span class="line">    &lt;Directory&quot;/testdir/vhost2&quot;&gt;</span><br><span class="line">          AllowOverride none</span><br><span class="line">          Allow from all</span><br><span class="line">          Order Allow,deny   </span><br><span class="line">    &lt;/Directory&gt;   </span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<p>（2）修改/etc/hosts文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@cnode6_8 conf.d]# grep 192 /etc/hosts</span><br><span class="line">168.66.143 www.vhost1.com</span><br><span class="line">168.66.143 www.vhost2.com</span><br></pre></td></tr></table></figure>
<p>（3）测试</p>
<p>测试时访问不同的域名，虽然是被解析为相同的IP地址，但是能访问到不同的主页</p>
<p><strong>基于不同端口的虚拟主机</strong></p>
<p>在同一IP，同一主机名下，使用监听不同端口，访问时需要加访问的端口。使用不多，一般用来做内网测试使用</p>
<p>（1）修改配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@cnode6_8conf.d]# cat virtual.conf</span><br><span class="line">Listen 8080   //添加监听的端口</span><br><span class="line">&lt;VirtualHost 192.168.66.142:8080&gt;</span><br><span class="line">    ServerName www.vhost1.com</span><br><span class="line">    DocumentRoot &quot;/testdir/vhost1&quot;</span><br><span class="line">    &lt;Directory&quot;/testdir/vhost1&quot;&gt;</span><br><span class="line">          AllowOverride none</span><br><span class="line">          Allow from all</span><br><span class="line">          Order Allow,deny   </span><br><span class="line">    &lt;/Directory&gt;   </span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"> </span><br><span class="line">&lt;VirtualHost 192.168.66.142:80&gt;</span><br><span class="line">    ServerName www.vhost1.com</span><br><span class="line">    DocumentRoot &quot;/testdir/vhost2&quot;</span><br><span class="line">    &lt;Directory&quot;/testdir/vhost2&quot;&gt;</span><br><span class="line">             AllowOverride none</span><br><span class="line">             Allow from all</span><br><span class="line">             Order Allow,deny   </span><br><span class="line">    &lt;/Directory&gt;   </span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<p>（2）修改/etc/hosts文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cnode6_8 conf.d]# grep 192 /etc/hosts</span><br><span class="line">168.66.142 www.vhost1.com</span><br></pre></td></tr></table></figure>
<p>测试要注意默认的端口可以不加，但是非80的端口访问时要手动添加，在访问相同的域名，不同的端口的地址时，同样可以得到不同的网页</p>
<h3 id="httpd命令使用"><a href="#httpd命令使用" class="headerlink" title="httpd命令使用"></a>httpd命令使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">httpd -M 用来列出基于当前配置加载的所有模块 </span><br><span class="line">httpd -l 输出一个静态编译在服务器中的模块的列表。它不会列出使用LoadModule指令动态加载的模块</span><br><span class="line">httpd -S 显示虚拟机的设置</span><br><span class="line">httpd -t 对配置文件执行语法检查</span><br><span class="line">httpd -v 显示httpd的版本</span><br><span class="line">httpd -V 显示httpd的版本和编译参数</span><br><span class="line">httpd -f 在启动中使用的配置文件</span><br><span class="line">httpd -e levle 在服务器启动时，设置LogLevel为level 。它用于在启动时，临时增加出错信息的详细程度，以帮助排错</span><br></pre></td></tr></table></figure>
<h3 id="mod-wsgi介绍"><a href="#mod-wsgi介绍" class="headerlink" title="mod_wsgi介绍"></a>mod_wsgi介绍</h3><h4 id="apache-mod-wsgi"><a href="#apache-mod-wsgi" class="headerlink" title="apache mod_wsgi"></a>apache mod_wsgi</h4><p>在openstack中，所有提供API接口的服务都是python web server，而其本身性能很弱，目前已经将它们配置到了apache上。且加载了mod_wsgi模块</p>
<p>Apache HTTP服务器的mod_wsgi扩展模块，实现了Python WSGI标准，可以支持任何兼容Python WSGI标准的Python应用。</p>
<p>httpd中配置加载了Include conf.modules.d/?.conf和IncludeOptional conf.d/?.conf，其中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Include conf.modules.d/?.conf</span><br><span class="line"></span><br><span class="line">-rw-r--r-- 1 root root 3739 Oct 20  2017 00-base.conf</span><br><span class="line">-rw-r--r-- 1 root root  139 Oct 20  2017 00-dav.conf</span><br><span class="line">-rw-r--r-- 1 root root   41 Oct 20  2017 00-lua.conf</span><br><span class="line">-rw-r--r-- 1 root root  742 Oct 20  2017 00-mpm.conf</span><br><span class="line">-rw-r--r-- 1 root root  957 Oct 20  2017 00-proxy.conf</span><br><span class="line">-rw-r--r-- 1 root root   41 Oct 20  2017 00-ssl.conf</span><br><span class="line">-rw-r--r-- 1 root root   88 Oct 20  2017 00-systemd.conf</span><br><span class="line">-rw-r--r-- 1 root root  451 Oct 20  2017 01-cgi.conf</span><br><span class="line">-rw-r--r-- 1 root root   43 Aug 25  2014 10-wsgi.conf</span><br><span class="line"></span><br><span class="line">这里是加载的一些模块，加载的目录在/usr/lib64/httpd/modules/</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">IncludeOptional conf.d/?.conf</span><br><span class="line"></span><br><span class="line">-rw-r--r-- 1 root root 2926 Dec 25  2017 autoindex.conf</span><br><span class="line">-rw-r--r-- 1 root root  366 Dec 25  2017 README</span><br><span class="line">-rw-r--r-- 1 root root 9439 Aug  4 00:12 ssl.conf</span><br><span class="line">-rw-r--r-- 1 root root 1252 Oct 20  2017 userdir.conf</span><br><span class="line">-rw-r--r-- 1 root root  824 Oct 20  2017 welcome.conf</span><br><span class="line">-r--r--r-- 1 root root  738 Aug  7 14:56 wsgi-gnocchi.conf</span><br></pre></td></tr></table></figure>
<p>mod_wsgi.go文件放在/usr/lib64/httpd/modules/</p>
<p><strong>先介绍下mod_wsgi的两种工作模式：</strong></p>
<p>第一种是嵌入模式，类似于mod_python，直接在apache进程中运行，这样的好处是不需要另外增加进程，但是坏处也很明显，所有内存都和apache共享，如果和mod_python一样造成内存漏洞的话，就会危害整个apache。而且如果apache是用worker mpm，mod_wsgi也就强制进入了线程模式，这样子对于非线程安全的程序来说就没法用了。</p>
<p>这种模式下需要在apache的vhost中如下设置：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WSGIScriptAlias /path /path-to-wsgi</span><br></pre></td></tr></table></figure>
<p>即可生效，对于小型脚本的话，直接用这种模式即可。</p>
<p>第二种是后台模式，类似于FastCGI的后台，mod_wsgi会借apache的外壳，另外启动一个或多个进程，然后通过socket通信和apache的进程联系。</p>
<p>这种方式只要使用以下配置即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#启动WSGI后台，site1是后台名字</span><br><span class="line">WSGIDaemonProcess site1 processes=1 threads=15 display-name=%&#123;GROUP&#125;</span><br><span class="line"></span><br><span class="line">#分配当前上下文应该使用哪个WSGI后台，可以放在Location里面指定</span><br><span class="line">WSGIProcessGroup site1</span><br><span class="line"></span><br><span class="line">#根据当前上下文的ProcessGroup分配到对应的后台</span><br><span class="line">WSGIScriptAlias /path /path-to-wsgi</span><br></pre></td></tr></table></figure>
<p>在这种模式下，我们可以通过调节processes和threads的值来设置三种MPM的模式：prefork’, ‘worker’, ‘winnt’。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">winnt模式</span><br><span class="line">WSGIDaemonProcess example threads=25</span><br><span class="line"></span><br><span class="line">wsgi.multithread	True</span><br><span class="line">wsgi.multiprocess	False</span><br><span class="line"></span><br><span class="line">此时processes=1，但是multiprocess为false</span><br><span class="line">如果显式地指出processes为1那么：</span><br><span class="line">WSGIDaemonProcess example processes=1 threads=25</span><br><span class="line"></span><br><span class="line">wsgi.multithread	True</span><br><span class="line">wsgi.multiprocess	True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">worker模式</span><br><span class="line">WSGIDaemonProcess example processes=2 threads=25</span><br><span class="line">wsgi.multithread	True</span><br><span class="line">wsgi.multiprocess	True</span><br><span class="line"></span><br><span class="line">preforker模式</span><br><span class="line">WSGIDaemonProcess example processes=5 threads=1</span><br><span class="line">wsgi.multithread	False</span><br><span class="line">wsgi.multiprocess	True</span><br></pre></td></tr></table></figure>
<p>后台模式由于是与apache进程分离了，内存独立，而且可以独立重启，不会影响apache的进程，如果你有多个项目（django），可以选择建立多个后台或者共同使用一个后台。</p>
<p>比如在同一个VirtualHost里面，不同的path对应不同的django项目，可以同时使用一个Daemon：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WSGIDaemonProcess <span class="keyword">default</span> processes=<span class="number">1</span> threads=<span class="number">1</span> display-name=%&#123;GROUP&#125;</span><br><span class="line"></span><br><span class="line">WSGIProcessGroup <span class="keyword">default</span></span><br><span class="line"></span><br><span class="line">WSGIScriptAlias /project1 “/home/website/project1.wsgi”</span><br><span class="line"></span><br><span class="line">WSGIScriptAlias /project2 “/home/website/project2.wsgi”</span><br></pre></td></tr></table></figure>
<p>这样子两个django都使用同一个WSGI后台。</p>
<p>也可以把不同的项目分开，分开使用不同的后台，这样开销比较大，但就不会耦合在一起了。</p>
<p>display-name是后台进程的名字，这样方便重启对应的进程，而不需要全部杀掉。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">WSGIDaemonProcess site1 processes=1 threads=1 display-name=%&#123;GROUP&#125;</span><br><span class="line"></span><br><span class="line">WSGIDaemonProcess site2 processes=1 threads=1 display-name=%&#123;GROUP&#125;</span><br><span class="line"></span><br><span class="line">&lt;Location “/project1″&gt;</span><br><span class="line"></span><br><span class="line">WSGIProcessGroup site1</span><br><span class="line"></span><br><span class="line">&lt;/Location&gt;</span><br><span class="line"></span><br><span class="line">WSGIScriptAlias /project1 “/home/website/project1.wsgi”</span><br><span class="line"></span><br><span class="line">&lt;Location “/project1″&gt;</span><br><span class="line"></span><br><span class="line">WSGIProcessGroup site2</span><br><span class="line"></span><br><span class="line">&lt;/Location&gt;</span><br><span class="line"></span><br><span class="line">WSGIScriptAlias /project2 “/home/website/project2.wsgi”</span><br></pre></td></tr></table></figure>
<p>对于django 1.0以下的版本，由于官方认定不是线程安全的，所以建议使用多进程单线程模式</p>
<p>processes=n threads=1</p>
<p>对于django 1.0以后，就可以放心的使用多进程多线程模式：</p>
<p>processes=2 threads=64</p>
<p>这样子性能会更好。</p>
<p>ps：</p>
<p>这里介绍了关于mod_wsgi运行模式的用法：<a href="https://code.google.com/archive/p/modwsgi/wikis/ProcessesAndThreading.wiki" target="_blank" rel="external">modwsgi-ProcessesAndThreading.wiki</a></p>
<p>大概总结下，运行模式分为三类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">1. prefork：</span><br><span class="line">  该MPM是最常用的。它是Apache 1.3中唯一可用的操作模式，并且在更高版本的Apache中仍然是UNIX系统上的默认模式。在此配置中，主Apache进程将在启动时创建多个子进程。当父进程接收到一个请求时，它将由哪个子进程准备就绪进行处理。</span><br><span class="line"></span><br><span class="line">  每个子进程一次只能处理一个请求。如果另一个请求同时到达，它将由下一个可用的子进程处理。当检测到可用进程数已用完时，将根据需要创建其他子进程。如果为可以创建的子进程数指定了限制，并且达到了该限制，并且有足够的请求到达以填充侦听器套接字队列，则客户端可能会收到由于无法建立而导致的错误与Web服务器的连接。</span><br><span class="line"></span><br><span class="line">  在由于到达的当前请求数量达到峰值而必须创建其他子进程的情况下，并且随后请求数量减少的情况下，多余的子进程可能会被关闭并被杀死。子进程在处理了一定数量的请求后也可能被关闭并被杀死。</span><br><span class="line"></span><br><span class="line">  尽管不使用线程来满足各个请求，但这并不妨碍应用程序创建单独的线程来执行某些特定任务。</span><br><span class="line"></span><br><span class="line">  对于使用多个进程的典型“ prefork”配置，指示如何使用进程和线程的WSGI环境键/值对如下所示。</span><br><span class="line"></span><br><span class="line">  | wsgi.multithread | False | |：------------------- |：---- | | wsgi.multiprocess |真|</span><br><span class="line"></span><br><span class="line">  由于正在使用多个进程，因此将无法使用WSGI中间件组件（如所述的基于交互式浏览器的调试器）。如果在开发和测试WSGI应用程序期间需要使用这样的调试器，那么唯一存在的选择是限制所使用的进程数。这可以使用Apache配置来实现：</span><br><span class="line"></span><br><span class="line">  StartServers 1 ServerLimit 1</span><br><span class="line"></span><br><span class="line">  使用此配置，将仅启动一个进程，而不会创建其他进程。指示如何使用进程和线程的WSGI环境键/值对将用于此配置，如下所示。</span><br><span class="line"></span><br><span class="line">  | wsgi.multithread | False | |：------------------- |：---- | | wsgi.multiprocess | False |</span><br><span class="line"></span><br><span class="line">  实际上，此配置的结果是通过单个过程序列化所有请求。这将允许使用基于浏览器的交互式调试器，但可能会使使用AJAX技术的更复杂的WSGI应用程序无法正常工作。在网页启动一系列AJAX请求并期望后续请求能够完成而初始请求的响应仍未决的情况下，可能会发生这种情况。换句话说，在请求重叠的地方可能会出现问题，因为在初始请求完成之前，后续请求将无法执行。</span><br><span class="line">  </span><br><span class="line">2. worker：</span><br><span class="line">  &apos;worker&apos;MPM与&apos;prefork&apos;模式相似，除了在每个子进程中将存在许多worker线程。代替只能由下一个可用的空闲子进程处理请求，并且仅由子进程执行该请求的处理，该请求可以由子进程中的工作线程处理，该线程已经具有其他工作线程同时处理其他请求。</span><br><span class="line"></span><br><span class="line">  一个子进程中的多个工作线程可以同时执行WSGI应用程序。这意味着多个工作线程可能希望同时访问公共共享数据。因此，必须以一种允许以线程安全的方式进行访问和修改的方式来保护此类公共共享数据。通常，这将需要使用某种形式的同步机制，以确保一次仅一个线程访问和/或修改公共共享数据。</span><br><span class="line"></span><br><span class="line">  如果新请求到达时子进程中的所有工作线程都忙，则该请求将由另一个子进程中的空闲工作线程处理。如果需要，Apache仍可以根据需要创建新的子进程。Apache可能仍会关闭并杀死多余的子进程或已处理了多个请求数量的子进程。</span><br><span class="line"></span><br><span class="line">  总体而言，使用“工作者” MPM将导致需要创建的子流程更少，但是单个子流程的资源使用量将会更大。在现代计算机系统上，通常使用“工作者” MPM作为首选的MPM，并且如果可能的话，应该优先使用“工作者” MPM。</span><br><span class="line"></span><br><span class="line">  尽管对Python中的全局解释器锁（GIL）的争用会导致纯Python程序出现问题，但是在Apache中使用Python时，这通常不是一个大问题。这是因为所有用于接受请求并将URL映射到WSGI应用程序的基础结构以及对静态文件的请求处理都是由Apache用C代码执行的。在执行此代码时，线程将不会保留Python GIL，因此在系统具有多个CPU或具有多个核心的CPU的情况下，可以实现更高水平的重叠执行。</span><br><span class="line"></span><br><span class="line">  Apache使用多个进程来处理请求，而不仅仅是一个进程，这一事实进一步增强了即使在使用多线程时也可以充分利用处理器以外的功能的能力。因此，即使在特定进程中存在GIL争用时，它也不会阻止其他进程运行，因为GIL仅在进程本地，并且不会跨进程扩展。</span><br><span class="line"></span><br><span class="line">  对于使用多个进程和多个线程的典型“工作者”配置，指示如何使用进程和线程的WSGI环境键/值对如下所示。</span><br><span class="line"></span><br><span class="line">  | wsgi.multithread | True | |：--------------- ||：--- | | wsgi.multiprocess |真|</span><br><span class="line"></span><br><span class="line">  与“ prefork” MPM相似，如果需要，可以使用以下配置将进程数限制为一个：</span><br><span class="line"></span><br><span class="line">  StartServers 1 ServerLimit 1</span><br><span class="line"></span><br><span class="line">  使用此配置，将仅启动一个进程，而不会再创建任何其他进程，但是该进程仍将使用多个线程。</span><br><span class="line"></span><br><span class="line">  指示如何使用进程和线程的WSGI环境键/值对将用于此配置，如下所示。</span><br><span class="line"></span><br><span class="line">  | wsgi.multithread | True | |：--------------- ||：--- | | wsgi.multiprocess | False |</span><br><span class="line"></span><br><span class="line">  因为使用了多个线程，所以基于AJAX的网页生成的重叠请求不会有问题。</span><br><span class="line"></span><br><span class="line">3. winnt：</span><br><span class="line">  在Windows平台上，“ winnt” MPM是唯一可用的选项。使用此MPM，子进程中的多个工作线程可用于处理所有请求。“ winnt” MPM与“ worker”模式不同，但是只有一个子进程。除了要停止或重新启动整个Apache之外，绝不会创建其他子进程，也不会立即关闭该子进程。因为只有一个子进程，所以使用的最大线程数要大得多。</span><br><span class="line"></span><br><span class="line">  指示如何使用进程和线程的WSGI环境键/值对将用于此配置，如下所示。</span><br><span class="line"></span><br><span class="line">  | wsgi.multithread | True | |：--------------- ||：--- | | wsgi.multiprocess | False |</span><br><span class="line">  </span><br><span class="line">4. The mod_wsgi Daemon Processes</span><br><span class="line">  当使用mod_wsgi的“守护程序”模式时，可以单独配置每个进程组，使其以类似于Apache的“ prefork”，“ worker”或“ winnt” MPM的方式运行。这是通过使用WSGIDaemonProcess指令的“进程”和“线程”选项控制每个进程中的进程和线程数来实现的。</span><br><span class="line"></span><br><span class="line">  为了模拟与“ winnt” MPM相同的进程/线程模型，即具有多个线程的单个进程，将使用以下配置：</span><br><span class="line"></span><br><span class="line">  WSGIDaemonProcess example threads=25</span><br><span class="line"></span><br><span class="line">  指示如何使用进程和线程的WSGI环境键/值对将用于此配置，如下所示。</span><br><span class="line"></span><br><span class="line">  | wsgi.multithread | True | |：--------------- ||：--- | | wsgi.multiprocess | False |</span><br><span class="line"></span><br><span class="line">  请注意，通过不指定&apos;processes&apos;选项，只能在流程组中创建一个流程。尽管提供“ processes = 1”作为选项也将导致创建单个进程，但这具有稍微不同的含义，因此您仅应在必要时这样做。</span><br><span class="line"></span><br><span class="line">  未指定&apos;processes&apos;选项和定义&apos;processes = 1&apos;之间的区别是，在定义&apos;processes&apos;选项时，名为&apos;wsgi.multiprocess&apos;的WSGI环境属性将设置为True，而在以下位置不提供该选项：全部将导致该属性设置为False。这种区别是为了允许使用某种形式的映射机制在多个进程组之间分配请求，因此实际上它仍然是一个多进程应用程序。</span><br><span class="line"></span><br><span class="line">  换句话说，如果您使用配置：</span><br><span class="line"></span><br><span class="line">  WSGIDaemonProcess example processes=1 threads=25</span><br><span class="line"></span><br><span class="line">  指示如何使用进程和线程的WSGI环境键/值对将改为：</span><br><span class="line"></span><br><span class="line">  | wsgi.multithread | True | |：--------------- ||：--- | | wsgi.multiprocess |真|</span><br><span class="line"></span><br><span class="line">  如果您需要确保&apos;wsgi.multiprocess&apos;为False，以使交互式调试器不会抱怨配置不兼容，只需不指定&apos;processes&apos;选项，并允许应用单个守护进程的默认行为即可。</span><br><span class="line"></span><br><span class="line">  为了模拟与“工人” MPM相同的进程/线程模型，即具有多个线程的多个进程，将使用以下配置：</span><br><span class="line"></span><br><span class="line">  WSGIDaemonProcess example processes=2 threads=25</span><br><span class="line"></span><br><span class="line">  指示如何使用进程和线程的WSGI环境键/值对将用于此配置，如下所示。</span><br><span class="line"></span><br><span class="line">  | wsgi.multithread | True | |：--------------- ||：--- | | wsgi.multiprocess |真|</span><br><span class="line"></span><br><span class="line">  为了模拟与“ prefork” MPM相同的进程/线程模型，即，多个进程中每个进程仅运行一个线程，将使用以下配置：</span><br><span class="line"></span><br><span class="line">  WSGIDaemonProcess example processes=5 threads=1</span><br><span class="line"></span><br><span class="line">  指示如何使用进程和线程的WSGI环境键/值对将用于此配置，如下所示。</span><br><span class="line"></span><br><span class="line">  | wsgi.multithread | False | |：------------------- |：---- | | wsgi.multiprocess |真|</span><br><span class="line"></span><br><span class="line">  请注意，在使用mod_wsgi守护进程时，这些进程仅用于执行基于Python的WSGI应用程序。这些过程绝不用于提供静态文件或托管以其他语言实现的应用程序。</span><br><span class="line"></span><br><span class="line">  与使用mod_wsgi的“嵌入式”模式的普通Apache子进程不同，进程组中守护进程数量的配置是固定的。也就是说，当服务器承受额外的负载时，创建的守护进程不会超过定义的进程。因此，您应该始终提前计划，并确保定义的进程和线程数足以应付预期的负载</span><br></pre></td></tr></table></figure>
<p><strong>apache-wsgi-python如何工作</strong></p>
<p>客户端也就是浏览器端，当用户在浏览器的地址栏输入一个网站并且回车的时候，就会产生一个http的request请求到对应的服务器，服务器端的web服务器程序-这里就是我们的apache接受到,请求后，就查看所请求的这个url对应的虚拟机的对应的目录或者文件。这样说，可能有点晕，给个实际的例子吧：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost 192.168.77.122:80&gt;  </span><br><span class="line">   ServerAdmin admin@system  </span><br><span class="line">   DocumentRoot "C:/Program Files/Apache Software Foundation/Apache2.2/htdocs/test"  </span><br><span class="line">   ServerName myserver </span><br><span class="line">   WSGIScriptAlias / "C:/Program Files/Apache Software Foundation/Apache2.2/htdocs/test/mytest.py" </span><br><span class="line">   AddType text/html .py  </span><br><span class="line">   ErrorLog logs/dummy-host.example.com-error_log  </span><br><span class="line">   CustomLog logs/dummy-host.example.com-access_log common</span><br><span class="line">   &lt;Directory /&gt;</span><br><span class="line">     Options FollowSymLinks ExecCGI</span><br><span class="line">     AllowOverride None</span><br><span class="line">     Order deny,allow</span><br><span class="line">     Allow from all</span><br><span class="line">   &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<p>apache接受到这个请求后，发现请求对应的是目录<strong>C:/Program Files/Apache Software Foundation/Apache2.2/htdocs/test</strong>，虚拟机是myserver，这个虚拟机中有个很重要的配置是就是<strong>WSGIScriptAlias</strong></p>
<p>这个东西非常关键，因为如果没有这个那么apache就不知道如何解析这个请求了。这个关键字告诉apache，该虚拟对应的目录下面的程序有wsgi对应的模块去执行，那么apache又怎么知道什么是wsgi模块，这个模块又在什么地方呢？这个需要在httpd.conf中来告诉apache，上面已经介绍过，加载mod_wsgi.go</p>
<p>即<strong>LoadModule wsgi_module modules/mod_wsgi.so</strong>，在httpd.conf中加入这个配置后，apache就知道wsgi是哪个模块，在什么位置了。注意<strong>LoadModule</strong>和<strong>wsgi_module</strong>是apache自己的关键字，它自己知道wsgi_module就是wsgi对应模块定义关键字。</p>
<p>你可以自己写一个动态库so，然后通过上面的方式-LoadModule加载进apache，但是对不起，apache并不认识你的模块，不能让你的这个so工作起来。好了我们言归正传吧，回到我们的主题。</p>
<p>所以当apache收到这个请求后，就知道使用mod_wsgi.so这个动态库的函数去处理请求，上面因为有这句：</p>
<p><strong>WSGIScriptAlias / “C:/Program Files/Apache Software Foundation/Apache2.2/htdocs/test/mytest.py”</strong></p>
<p>这样apache就知道当收到访问当前服务器的根目录时，就使用mytest.py来处理请求。谁来处理mytest.py，就是python解释器，所以mod_wsgi.so中就要创建进程-python解释器进程来解释执行mytest.py。</p>
<p>执行mytest.py就是为了生成这个请求的应答的内容，接着返回mod_wsgi，从而通知apache，处理完成并把结果-比如是一个html的流，apache再把这个结果发送给我们的客户端-浏览器，浏览器最后显示它。整个过程结束。</p>
<p>这里加一句题外话，上面是指定只要访问服务器就使用mytest.py来处理请求，这样的话，你请求别的页面，比如<a href="http://192.168.77.122/test.py那么服务器还是会使用mytest.py来处理请求，这不是我们希望的，我们希望用户访问不同的页面会有不同结果。怎么办呢?我们只要一个小小的改变就可以，就是将上面的有wsgiscriptAlias那就修改为下面的这句：" target="_blank" rel="external">http://192.168.77.122/test.py那么服务器还是会使用mytest.py来处理请求，这不是我们希望的，我们希望用户访问不同的页面会有不同结果。怎么办呢?我们只要一个小小的改变就可以，就是将上面的有wsgiscriptAlias那就修改为下面的这句：</a></p>
<p><strong>WSGIScriptAlias / “C:/Program Files/Apache Software Foundation/Apache2.2/htdocs/test”</strong></p>
<p>这样就达到我们的效果了。</p>
<h4 id="nginx-mod-wsgi"><a href="#nginx-mod-wsgi" class="headerlink" title="nginx mod_wsgi"></a>nginx mod_wsgi</h4><p>其实nginx也可以使用mod_wsgi的模块，但是由于nginx在底层是一个事件驱动系统，因此它具有不利于阻塞应用程序的行为特征，例如基于WSGI的应用程序。更糟糕的情况是，使用多进程nginx配置，您可以看到用户请求被阻止，即使某些nginx工作进程可能处于空闲状态。Apache/mod_wsgi没有这个问题，因为Apache进程只有在有资源实际处理请求时才会接受请求。因此，Apache/mod_wsgi将提供更可预测和可靠的行为。</p>
<h2 id="Nginx、WSGI、-uWSGI、-uwsgi-简介"><a href="#Nginx、WSGI、-uWSGI、-uwsgi-简介" class="headerlink" title="Nginx、WSGI、 uWSGI、 uwsgi 简介"></a>Nginx、WSGI、 uWSGI、 uwsgi 简介</h2><p>当我们部署完一个应用程序，浏览网页时具体的过程是怎样的呢？首先我们得有一个 Web 服务器来处理 HTTP 协议的内容，Web 服务器获得客户端的请求，交给应用程序，应用程序处理完，返回给 Web 服务器，这时 Web 服务器再返回给客户端。Web 服务器与应用程序之间显然要进行交互，这时就出现了很多 Web 服务器与应用程序之间交互的规范，最早出现的是 CGI，后来又出现了改进 CGI 性能的FasgCGI，Java 专用的 Servlet 规范，Python 专用的 WSGI 规范等等。有了统一标准，程序的可移植性就大大提高了。这里我们只介绍 WSGI。</p>
<p>WSGI 全称是 Web Server Gateway Interface，也就是 Web 服务器网关接口，它是 Python 语言定义出来的 Web 服务器和 Web 应用程序之间的简单而通用的接口，基于现存的 CGI 标准设计，后来在很多其他语言中也出现了类似的接口。 总的来说，WSGI 可以分为服务器和应用程序两个部分，实际上可以将 WSGI 理解为服务器与应用程序之间的一座桥，桥的一边是服务器，另一边是应用程序。</p>
<p>按照 web 组件分类，WSGI 内部可以分为三类，web 应用程序，web 服务器，web 中间件。应用程序端的部分通过Python 语言的各种 Web 框架实现，比如 Flask，Django这些，有了框架，开发者就不需要处理 WSGI，框架会帮忙解决这些，开发者只需处理 HTTP 请求和响应，web 服务器的部分就要复杂一点，可以通过 uWSGI 实现，也可以用最常见的 Web 服务器，比如 Apache、Nginx，但这些 Web 服务器没有内置 WSGI 的实现，是通过扩展完成的。如 Apache，通过扩展模块 mod_wsgi 来支持WSGI，Nginx可以通过代理的方式，将请求封装好，交给应用服务器，比如 uWSGI。uWSGI 可以完成 WSGI 的服务端，进程管理以及对应用的调用。WSGI 中间件的部分可以这样理解：我们把 WSGI 看做桥，这个桥有两个桥墩，一个是应用程序端，另一个是服务器端，那么桥面就是 WSGI 中间件，中间件同时具备服务器、应用程序端两个角色，当然也需要同时遵守 WSGI 服务器和 WSGI 应用程序两边的限制和需要。更详细的内容可以看<a href="https://www.python.org/dev/peps/pep-3333/#middleware-components-that-play-both-sides" target="_blank" rel="external">PEP-333 中间件的描述</a></p>
<p>Flask 依赖的 Werkzeug 就是一个 WSGI 工具包，官方文档的定义是 Werkzeug 是为 Python 设计的 HTTP和 WSGI 实用程序库。我们需要注意的是，Flask 自带的 Werkzeug 是用来开发的，并不能用于生产环境，Flask 是 Web 框架，而 Werkzeug 不是 Web框架，不是 Web 服务器，它只是一个 WSGI 工具包，它在 Flask 的作用是作为 Web 框架的底层库，它方便了我们的开发。</p>
<p>我们将 uwsgi 和 uWSGI 放在一起讲解。uWSGI 是一个 Web 服务器程序，WSGI，上面已经谈到，是一种协议，uwsgi 也是一种协议，uWSGI 实现了 uwsgi、WSGI、http 等协议。 uwsgi 的介绍可以看<a href="http://uwsgi-docs.readthedocs.io/en/latest/Protocol.html" target="_blank" rel="external">这里</a>，uwsgi 是 uWSGI 使用的一个自有的协议，它用4个字节来定义传输数据类型描述。尽管都是协议，uwsgi 和 WSGI 并没有联系，我们需要区分这两个词。</p>
<h3 id="Nginx-简介"><a href="#Nginx-简介" class="headerlink" title="Nginx 简介"></a>Nginx 简介</h3><p>Nginx 是高效的 Web 服务器和反向代理服务器，可以用作负载均衡（当有 n 个用户访问服务器时，可以实现分流，分担服务器的压力），与 Apache 相比，Nginx 支持高并发，可以支持百万级的 TCP 连接，十万级别的并发连接，部署简单，内存消耗少，成本低，但 Nginx 的模块没有 Apache 丰富。Nginx 支持 uWSGI 的 uwsgi 协议，因此我们可以将 Nginx 与 uWSGI 结合起来，Nginx 通过 <code>uwsgi_pass</code> 将动态内容交给 uWSGI 处理。</p>
<h3 id="Nginx-和-uWSGI-的关系"><a href="#Nginx-和-uWSGI-的关系" class="headerlink" title="Nginx 和 uWSGI 的关系"></a>Nginx 和 uWSGI 的关系</h3><p>从上面的讲解中，我们知道，uWSGI 可以起到 Web 服务器的作用，那么为什么有了 uWSGI 还需要 Nginx 呢？</p>
<p>最普遍的说法是 Nginx 对于处理静态文件更有优势，性能更好。其实如果是小网站，没有静态文件需要处理，只用 uWSGI 也是可以的，但加上 Nginx 这一层，优势可以很具体：</p>
<ol>
<li>对于运维来说比较方便，如果服务器被某个 IP 攻击，在 Nginx 配置文件黑名单中添加这个 IP 即可，如果只用 uWSGI，那么就需要在代码中修改了。另一方面，Nginx 是身经百战的 Web 服务器了，在表现上 uWSGI 显得更专业，比如说 uWSGI 在早期版本里是不支持 https 的，可以说 Nginx 更安全。</li>
<li>Nginx 的特点是能够做负载均衡和 HTTP 缓存，如果不止一台服务器，Nginx 基本就是必选项了，通过 Nginx，将资源可以分配给不同的服务器节点，只有一台服务器，也能很好地提高性能，因为 Nginx 可以通过 headers 的Expires or E-Tag，gzip 压缩等方式很好地处理静态资源，毕竟是 C 语言写的，调用的是 native 的函数，针对 I/O做了优化，对于动态资源来说，Nginx 还可以实现缓存的功能，配合 CDN 优化（这是 uWSGI 做不到的）。Nginx 支持epoll/kqueue 等高效网络库，能够很好地处理高并发短连接请求，性能比 uWSGI 不知道高到哪里去了。</li>
<li>如果服务器主机上运行了PHP，Python 等语言写的多个应用，都需要监听80端口，这时候 Nginx 就是必选项了。因为我们需要一个转发的服务。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WSGI：全称是Web Server Gateway Interface，WSGI不是服务器，python模块，框架，API或者任何软件，只是一种规范，描述web server如何与web application通信的规范。要实现WSGI协议，必须同时实现web server和web application，当前运行在WSGI协议之上的web框架有Bottle, Flask, Django。</span><br><span class="line">uwsgi：与WSGI一样是一种通信协议，是uWSGI服务器的独占协议，用于定义传输信息的类型(type of information)</span><br><span class="line">uWSGI：是一个web服务器，实现了WSGI协议、uwsgi协议、http协议等。</span><br><span class="line">WSGI协议主要包括server和application两部分：</span><br><span class="line">WSGI server负责从客户端接收请求，将request转发给application，将application返回的response返回给客户端；</span><br><span class="line">WSGI application接收由server转发的request，处理请求，并将处理结果返回给server。application中可以包括多个栈式的中间件(middlewares)，这些中间件需要同时实现server与application，因此可以在WSGI服务器与WSGI应用之间起调节作用：对服务器来说，中间件扮演应用程序，对应用程序来说，中间件扮演服务器。</span><br><span class="line">WSGI协议其实是定义了一种server与application解耦的规范，即可以有多个实现WSGI server的服务器，也可以有多个实现WSGI application的框架，那么就可以选择任意的server和application组合实现自己的web应用。例如uWSGI和Gunicorn都是实现了WSGI server协议的服务器，Django，Flask是实现了WSGI application协议的web框架，可以根据项目实际情况搭配使用</span><br></pre></td></tr></table></figure>
<h3 id="Nginx-与-Apache-的异同"><a href="#Nginx-与-Apache-的异同" class="headerlink" title="Nginx 与 Apache 的异同"></a>Nginx 与 Apache 的异同</h3><p>Nginx和Apache一样，都是一个HTTP服务器软件，功能实现上都采用模块化结构设计，都支持通用的语言接口，如PHP、Perl、Python等，同时还支持正、反向代理，虚拟主机，URL重写，压缩传输，SSL加密传输等。它们之间最大的差别是Apache处理速度很慢，且占用很多内存资源，而Nginx却恰恰相反；在功能实现上，Apache的所有模块都支持动、静态编译，而Nginx模块都是静态编译的，同时，Apache对Fcgi支持不好，而Nginx对Fcgi的支持非常的好；最重要的是，在处理连接方式上，Nginx支持epoll，而Apache却不支持；在大小上，Nginx安装包仅仅有几百K，和Nginx比起来Apache绝对是庞然大物。在了解了Nginx和Apache之间的异同点后基本知道了Nginx作为HTTP服务器的优势所在。</p>
<h3 id="Nginx的优势"><a href="#Nginx的优势" class="headerlink" title="Nginx的优势"></a>Nginx的优势</h3><p>通过上面的简单介绍，Nginx作为HTTP服务器的优势是显而易见的，它有很多其它Web服务器无法比拟的性能和优势：<br>作为Web服务器，nginx处理静态文件、索引文件以及自动索引效率非常高。<br>作为代理服务器，Nginx可以实现无缓存的反向代理加速，提高网站运行速度。<br>作为负载均衡服务器，Nginx既可以在内部直接支持Rails和PHP，也可以支持HTTP代理服务器，对外进行服务。同时支持简单的容错和利用算法进行负载均衡。<br>在性能方面，Nginx是专门为性能优化而开发的，在实现上非常注重效率。它采用内核Poll模型，可以支持更多的并发连接，最大可以支持对50 000个并发连接数的响应，而且占用很低的内存资源。<br>在稳定性方面，Nginx采取了分阶段资源分配技术，使得对CPU与内存的占用率非常低。Nginx官方表示Nginx保持10 000个没有活动的连接，这些连接只占2.5M内存，因此，类似DOS这样的攻击对Nginx来说基本上是没有任何作用的。<br>在高可用性方面，Nginx支持热部署，启动速度特别迅速，因此可以在不间断服务的情况下，对软件版本或者配置进行升级，即使运行数月也无需重新启动，几乎可以做到7×24小时的不间断运行。</p>
<h3 id="Nginx的模块与工作原理"><a href="#Nginx的模块与工作原理" class="headerlink" title="Nginx的模块与工作原理"></a>Nginx的模块与工作原理</h3><p>Nginx由内核和模块组成，其中，内核的设计非常微小和简洁，完成的工作也非常简单，仅仅通过查找配置文件将客户端请求映射到一个location block（location是Nginx配置中的一个指令，用于URL匹配），而在这个location中所配置的每个指令将会启动不同的模块去完成相应的工作。<br>Nginx的模块从结构上分为核心模块、基础模块和第三方模块， HTTP模块、EVENT模块和MAIL模块等属于核心模块，HTTP Access模块、HTTP FastCGI模块、HTTP Proxy模块和HTTP Rewrite模块属于基本模块，而HTTP Upstream Request Hash模块、Notice模块和HTTP Access Key模块属于第三方模块，用户根据自己的需要开发的模块都属于第三方模块。正是有了这么多模块的支撑，Nginx的功能才会如此强大。<br>Nginx的模块从功能上分为三类，分别是：<br>(1) Handlers（处理器模块）。此类模块直接处理请求，并进行输出内容和修改headers信息等操作。handlers处理器模块一般只能有一个。<br>(2) Filters （过滤器模块）。此类模块主要对其他处理器模块输出的内容进行修改操作，最后由Nginx输出。<br>(3) Proxies （代理类模块）。就是Nginx的HTTP Upstream之类的模块，这些模块主要与后端一些服务比如fastcgi等操作交互，实现服务代理和负载均衡等功能。<br>下图展示了Nginx的模块下一次常规的HTTP请求和响应的过程。</p>
<p><img src="/images/python-apache-1.png" alt="image-20200809171115243"></p>
<p>在工作方式上，Nginx分为单工作进程和多工作进程两种模式。在单工作进程模式下，除主进程外，还有一个工作进程，工作进程是单线程的；在多工作进程模式下，每个工作进程包含多个线程。Nginx默认为单工作进程模式。<br>Nginx的模块直接被编译进Nginx，因此属于静态编译方式。启动Nginx后，Nginx的模块被自动加载，不像在Apache一样，首先将模块编译为一个so文件，然后在配置文件中指定是否进行加载。在解析配置文件时，Nginx的每个模块都有可能去处理某个请求，但是同一个处理请求只能由一个模块来完成。</p>
<h3 id="Nginx-配置文件结构"><a href="#Nginx-配置文件结构" class="headerlink" title="Nginx 配置文件结构"></a>Nginx 配置文件结构</h3><p>Nginx的配置文件是一个纯文本文件，它一般位于Nginx安装目录的conf目录下，整个配置文件是以block的形式组织的。每个block一般以一个大括号“{}”来表示，block可以分为几个层次，整个配置文件中Main指令位于最高层，在Main层下面可以有Events、HTTP等层级，而在HTTP层中又包含有Server层，即server block，server block中又可分为location层，并且一个server block中可以包含多个location block。<br>一个完整的配置文件结构如下图所示。</p>
<p><img src="/images/python-apache-2.png" alt="image-20200809171313596"></p>
<h3 id="Nginx-配置文件详解"><a href="#Nginx-配置文件详解" class="headerlink" title="Nginx 配置文件详解"></a>Nginx 配置文件详解</h3><p>Nginx安装完毕后，会产生相应的安装目录，一般为/etc/nginx/conf，其中nginx.conf为Nginx的主配置文件。这里重点介绍下nginx.conf这个配置文件。</p>
<p>Nginx配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（负载均衡服务器设置）和 location（URL匹配特定位置的设置）。main部分设置的指令将影响其他所有设置；server部分的指令主要用于指定主机和端口；upstream指令主要用于负载均衡，设置一系列的后端服务器；location部分用于匹配网页位置。这四者之间的关系式：server继承main，location继承server，upstream既不会继承其他设置也不会被继承。<br>在这四个部分当中，每个部分都包含若干指令，这些指令主要包含Nginx的主模块指令、事件模块指令、HTTP核心模块指令，同时每个部分还可以使用其他HTTP模块指令，例如Http SSL模块、HttpGzip Static模块和Http Addition模块等。<br>下面通过一个Nginx配置实例，详细介绍下nginx.conf每个指令的含义。为了能更清楚地了解Nginx的结构和每个配置选项的含义，这里按照功能点将Nginx配置文件分为7个部分逐次讲解，下面就围绕这7个部分进行介绍。</p>
<h4 id="Nginx的全局配置"><a href="#Nginx的全局配置" class="headerlink" title="Nginx的全局配置"></a>Nginx的全局配置</h4><p>下面这段内容是对Nginx的全局属性配置，代码如下：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span>  nobody nobody;</span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">4</span>;</span><br><span class="line"><span class="attribute">error_log</span>  logs/error.log  <span class="literal">notice</span>;</span><br><span class="line"><span class="attribute">pid</span>        logs/nginx.pid;</span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br><span class="line">events&#123;</span><br><span class="line"> <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line"> <span class="attribute">worker_connections</span>      <span class="number">65536</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p>对上面这段代码中每个配置选项的含义解释如下：</p>
<p>对上面这段代码中每个配置选项的含义解释如下：</p>
<ul>
<li><p>user是个主模块指令，指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行。</p>
</li>
<li><p>worker_processes是个主模块指令，指定了Nginx要开启的进程数。每个Nginx进程平均耗费10M~12M内存。根据经验，一般指定一个进程足够了，如果是多核CPU，建议指定和CPU的数量一样的进程数即可。</p>
</li>
<li><p>error_log是个主模块指令，用来定义全局错误日志文件。日志输出级别有debug、info、notice、warn、error、crit可供选择，其中，debug输出日志最为最详细，而crit输出日志最少。</p>
</li>
<li><p>pid是个主模块指令，用来指定进程id的存储文件位置。</p>
</li>
<li><p>worker_rlimit_nofile用于指定一个nginx进程可以打开的最多文件描述符数目，这里是65535，需要使用命令“ulimit -n 65535”来设置。</p>
</li>
<li><p>events指令是设定Nginx的工作模式及连接数上限。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">events&#123;</span><br><span class="line"><span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line"><span class="attribute">worker_connections</span>      <span class="number">65536</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>use是个事件模块指令，用来指定Nginx的工作模式。Nginx支持的工作模式有select、poll、kqueue、epoll、rtsig和/dev/poll。其中select和poll都是标准的工作模式，kqueue和epoll是高效的工作模式，不同的是epoll用在Linux平台上，而kqueue用在BSD系统中。对于Linux系统，epoll工作模式是首选。<br>worker_connections也是个事件模块指令，用于定义Nginx每个进程的最大连接数，默认是1024.最大客户端连接数由worker_processes和worker_connections决定，即Max_client=worker_processes<em>worker_connections，在作为反向代理时，max_clients变为：max_clients = worker_processes </em> worker_connections/4。<br>进程的最大连接数受Linux系统进程的最大打开文件数限制，在执行操作系统命令“ulimit -n 65536”后worker_connections的设置才能生效。</p>
</li>
</ul>
<h4 id="HTTP服务器配置"><a href="#HTTP服务器配置" class="headerlink" title="HTTP服务器配置"></a>HTTP服务器配置</h4><p>接下来开始进行HTTP服务器设置。<br>下面这段内容是Nginx对HTTP服务器相关属性的配置，代码如下：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line"><span class="attribute">include</span>      conf/mime.types;</span><br><span class="line"><span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"><span class="attribute">log_format</span> main <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] '</span></span><br><span class="line"> <span class="string">'"<span class="variable">$request</span>" <span class="variable">$status</span> <span class="variable">$bytes_sent</span> '</span></span><br><span class="line"> <span class="string">'"<span class="variable">$http_referer</span>" "<span class="variable">$http_user_agent</span>" '</span></span><br><span class="line"> <span class="string">'"<span class="variable">$gzip_ratio</span>"'</span>;</span><br><span class="line"> <span class="attribute">log_format</span> download <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] '</span></span><br><span class="line"> <span class="string">'"<span class="variable">$request</span>" <span class="variable">$status</span> <span class="variable">$bytes_sent</span> '</span></span><br><span class="line"> <span class="string">'"<span class="variable">$http_referer</span>" "<span class="variable">$http_user_agent</span>" '</span></span><br><span class="line"> <span class="string">'"<span class="variable">$http_range</span>" "<span class="variable">$sent_http_content_range</span>"'</span>;</span><br><span class="line"><span class="attribute">client_max_body_size</span>  <span class="number">20m</span>;</span><br><span class="line"><span class="attribute">client_header_buffer_size</span>    <span class="number">32K</span>;</span><br><span class="line"><span class="attribute">large_client_header_buffers</span>  <span class="number">4</span> <span class="number">32k</span>;</span><br><span class="line"><span class="attribute">Sendfile</span>  <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">tcp_nopush</span>     <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">tcp_nodelay</span>    <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">keepalive_timeout</span> <span class="number">60</span>;</span><br><span class="line"><span class="attribute">client_header_timeout</span>  <span class="number">10</span>;</span><br><span class="line"><span class="attribute">client_body_timeout</span>    <span class="number">10</span>;</span><br><span class="line"><span class="attribute">send_timeout</span>          <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>下面详细介绍下这段代码中每个配置选项的含义:</p>
<ul>
<li>include是个主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度。类似于Apache中的include方法。</li>
<li>default_type属于HTTP核心模块指令，这里设定默认类型为二进制流，也就是当文件类型未定义时使用这种方式，例如在没有配置PHP环境时，Nginx是不予解析的，此时，用浏览器访问PHP文件就会出现下载窗口。<br>下面的代码实现对日志格式的设定。<br>log_format main ‘$remote_addr - $remote_user [$time_local] ‘<br>‘“$request” $status $bytes_sent ‘<br>‘“$http_referer” “$http_user_agent” ‘<br>‘“$gzip_ratio”‘;<br>log_format download ‘$remote_addr - $remote_user [$time_local] ‘<br>‘“$request” $status $bytes_sent ‘<br>‘“$http_referer” “$http_user_agent” ‘<br>‘“$http_range” “$sent_http_content_range”‘;</li>
<li>log_format是Nginx的HttpLog模块指令，用于指定Nginx日志的输出格式。main为此日志输出格式的名称，可以在下面的access_log指令中引用。</li>
<li>client_max_body_size用来设置允许客户端请求的最大的单个文件字节数。</li>
<li>client_header_buffer_size用于指定来自客户端请求头的headerbuffer大小。对于大多数请求，1K的缓冲区大小已经足够，如果自定义了消息头或有更大的Cookie，可以增加缓冲区大小。这里设置为32K。</li>
<li>large_client_header_buffers用来指定客户端请求中较大的消息头的缓存最大数量和大小， “4”为个数，“128K”为大小，最大缓存量为4个128K。</li>
<li>sendfile参数用于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞。</li>
<li>keepalive_timeout设置客户端连接保持活动的超时时间。在超过这个时间之后，服务器会关闭该连接。</li>
<li>client_header_timeout设置客户端请求头读取超时时间。如果超过这个时间，客户端还没有发送任何数据，Nginx将返回“Request time out（408）”错误。</li>
<li>client_body_timeout设置客户端请求主体读取超时时间。如果超过这个时间，客户端还没有发送任何数据，Nginx将返回“Request time out（408）”错误，默认值是60。</li>
<li>send_timeout指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。</li>
</ul>
<h4 id="HttpGzip模块配置"><a href="#HttpGzip模块配置" class="headerlink" title="HttpGzip模块配置"></a>HttpGzip模块配置</h4><p>下面配置Nginx的HttpGzip模块。这个模块支持在线实时压缩输出数据流。要查看是否安装了此模块，需要使用下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# /etc/nginx/sbin/nginx  -V</span><br><span class="line">nginx version: nginx/0.7.65</span><br><span class="line"></span><br><span class="line">configure arguments: --with-http_stub_status_module --with-http_gzip_static_module --prefix=/etc/nginx</span><br><span class="line">通过/etc/nginx/sbin/nginx  -V命令可以查看安装Nginx时的编译选项，由输出可知，我们已经安装了HttpGzip模块。</span><br></pre></td></tr></table></figure>
<p>下面是HttpGzip模块在Nginx配置中的相关属性设置：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_min_length</span>  <span class="number">1k</span>;</span><br><span class="line"><span class="attribute">gzip_buffers</span>     <span class="number">4</span>  <span class="number">16k</span>;</span><br><span class="line"><span class="attribute">gzip_http_version</span>  <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="attribute">gzip_comp_level</span>  <span class="number">2</span>;</span><br><span class="line"><span class="attribute">gzip_types</span>  text/plain application/x-javascript text/css application/xml;</span><br><span class="line"><span class="attribute">gzip_vary</span>  <span class="literal">on</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>gzip用于设置开启或者关闭gzip模块，“gzip on”表示开启GZIP压缩，实时压缩输出数据流。</li>
<li>gzip_min_length设置允许压缩的页面最小字节数，页面字节数从header头的Content-Length中获取。默认值是0，不管页面多大都进行压缩。建议设置成大于1K的字节数，小于1K可能会越压越大。</li>
<li>gzip_buffers表示申请4个单位为16K的内存作为压缩结果流缓存，默认值是申请与原始数据大小相同的内存空间来存储gzip压缩结果。</li>
<li>gzip_http_version用于设置识别HTTP协议版本，默认是1.1，目前大部分浏览器已经支持GZIP解压，使用默认即可。</li>
<li>gzip_comp_level用来指定GZIP压缩比，1 压缩比最小，处理速度最快；9 压缩比最大，传输速度快，但处理最慢，也比较消耗cpu资源。</li>
<li>gzip_types用来指定压缩的类型，无论是否指定，“text/html”类型总是会被压缩的。</li>
<li>gzip_vary选项可以让前端的缓存服务器缓存经过GZIP压缩的页面，例如用Squid缓存经过Nginx压缩的数据</li>
</ul>
<h4 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h4><p>下面设定负载均衡的服务器列表:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> ixdba.net&#123;</span><br><span class="line">ip_hash;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.12.133:80</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.12.134:80</span>  down;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.12.135:8009</span>  max_fails=<span class="number">3</span>  fail_timeout=<span class="number">20s</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.12.136:8080</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>upstream是Nginx的HTTP Upstream模块，这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡。在上面的设定中，通过upstream指令指定了一个负载均衡器的名称ixdba.net。这个名称可以任意指定，在后面需要的地方直接调用即可。</p>
<ul>
<li>在HTTP Upstream模块中，可以通过server指令指定后端服务器的IP地址和端口，同时还可以设定每个后端服务器在负载均衡调度中的状态。常用的状态有：<br>down，表示当前的server暂时不参与负载均衡。</li>
<li>backup，预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻。</li>
<li>max_fails，允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。</li>
<li>fail_timeout，在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。</li>
<li>注意 当负载调度算法为ip_hash时，后端服务器在负载均衡调度中的状态不能是weight和backup。</li>
</ul>
<h4 id="server虚拟主机配置"><a href="#server虚拟主机配置" class="headerlink" title="server虚拟主机配置"></a>server虚拟主机配置</h4><p>下面介绍对虚拟主机的配置。建议将对虚拟主机进行配置的内容写进另外一个文件，然后通过include指令包含进来，这样更便于维护和管理:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span>          <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>    <span class="number">192.168.12.188</span>  www.ixdba.net;</span><br><span class="line"><span class="attribute">index</span> index.html index.htm index.jsp;</span><br><span class="line"><span class="attribute">root</span>  /web/wwwroot/www.ixdba.net</span><br><span class="line">charset gb2312;</span><br></pre></td></tr></table></figure>
<ul>
<li>server标志定义虚拟主机开始，listen用于指定虚拟主机的服务端口，server_name用来指定IP地址或者域名，多个域名之间用空格分开。Index用于设定访问的默认首页地址，root指令用于指定虚拟主机的网页根目录，这个目录可以是相对路径，也可以是绝对路径。Charset用于设置网页的默认编码格式。</li>
<li>access_log logs/www.ixdba.net.access.log main;</li>
<li>access_log用来指定此虚拟主机的访问日志存放路径，最后的main用于指定访问日志的输出格式。</li>
</ul>
<h4 id="URL匹配配置"><a href="#URL匹配配置" class="headerlink" title="URL匹配配置"></a>URL匹配配置</h4><p>URL地址匹配是进行Nginx配置中最灵活的部分。 location支持正则表达式匹配，也支持条件判断匹配，用户可以通过location指令实现Nginx对动、静态网页进行过滤处理。<br>以下这段设置是通过location指令来对网页URL进行分析处理，所有扩展名以.gif、.jpg、.jpeg、.png、.bmp、.swf结尾的静态文件都交给nginx处理，而expires用来指定静态文件的过期时间，这里是30天</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span>  &#123;</span><br><span class="line">                <span class="attribute">root</span>    /web/wwwroot/www.ixdba.net;</span><br><span class="line">               <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>以下这段设置是将upload和html下的所有文件都交给nginx来处理，当然，upload和html目录包含在/web/wwwroot/www.ixdba.net目录中。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ ^/(upload|html)/</span>  &#123;</span><br><span class="line">        <span class="attribute">root</span>    /web/wwwroot/www.ixdba.net;</span><br><span class="line">        <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在最后这段设置中，location是对此虚拟主机下动态网页的过滤处理，也就是将所有以.jsp为后缀的文件都交给本机的8080端口处理</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*.jsp$</span> &#123;</span><br><span class="line">    <span class="attribute">index</span> index.jsp;      </span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="StubStatus模块配置"><a href="#StubStatus模块配置" class="headerlink" title="StubStatus模块配置"></a>StubStatus模块配置</h4><p>StubStatus模块能够获取Nginx自上次启动以来的工作状态，此模块非核心模块，需要在Nginx编译安装时手工指定才能使用此功能。<br>以下指令实指定启用获取Nginx工作状态的功能</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">        <span class="attribute">location</span> /NginxStatus &#123;</span><br><span class="line">                        <span class="attribute">stub_status</span>      <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">access_log</span>              logs/NginxStatus.log;</span><br><span class="line">                        <span class="attribute">auth_basic</span>              <span class="string">"NginxStatus"</span>;</span><br><span class="line">      <span class="attribute">auth_basic_user_file</span>    ../htpasswd;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>stub_status设置为“on”表示启用StubStatus的工作状态统计功能。access_log 用来指定StubStatus模块的访问日志文件。auth_basic是Nginx的一种认证机制。auth_basic_user_file用来指定认证的密码文件，由于Nginx的auth_basic认证采用的是与Apache兼容的密码文件，因此需要用Apache的htpasswd命令来生成密码文件，例如要添加一个webadmin用户，可以使用下面方式生成密码文件：<br>/usr/local/apache/bin/htpasswd -c /opt/nginx/conf/htpasswd webadmin<br>会得到以下提示信息：<br>New password:<br>输入密码之后，系统会要求再次输入密码。确认之后添加用户成功。</p>
<p>要查看Nginx的运行状态，可以输入<a href="http://ip/" target="_blank" rel="external">http://ip/</a> NginxStatus，然后输入刚刚创建的用户名和密码就可以看到如下信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Active connections: 1</span><br><span class="line">server accepts handled requests</span><br><span class="line"> 393411 393411 393799</span><br><span class="line">Reading: 0 Writing: 1 Waiting: 0</span><br></pre></td></tr></table></figure>
<p>Active connections表示当前活跃的连接数，第三行的三个数字表示 Nginx当前总共处理了393411个连接， 成功创建393411次握手， 总共处理了393799个请求。最后一行的Reading表示Nginx读取到客户端Header信息数， Writing表示Nginx返回给客户端的Header信息数，“Waiting”表示Nginx已经处理完，正在等候下一次请求指令时的驻留连接数。</p>
<p>在最后这段设置中，设置了虚拟主机的错误信息返回页面，通过error_page指令可以定制各种错误信息的返回页面。在默认情况下，Nginx会在主目录的html目录中查找指定的返回页面，特别需要注意的是，这些错误信息的返回页面大小一定要超过512K，否者会被ie浏览器替换为ie默认的错误页面。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="attribute">error_page</span> <span class="number">404</span>       /<span class="number">404</span>.html;</span><br><span class="line">    <span class="attribute">error_page</span>  <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">      <span class="attribute">root</span>  html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Nginx-代理"><a href="#Nginx-代理" class="headerlink" title="Nginx 代理"></a>Nginx 代理</h3><p>Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。</p>
<h4 id="关于代理"><a href="#关于代理" class="headerlink" title="关于代理"></a>关于代理</h4><p>说到代理，首先我们要明确一个概念，所谓代理就是一个代表、一个渠道；</p>
<p>此时就涉及到两个角色，一个是被代理角色，一个是目标角色，被代理角色通过这个代理访问目标角色完成一些任务的过程称为代理操作过程；如同生活中的专卖店~客人到adidas专卖店买了一双鞋，这个专卖店就是代理，被代理角色就是adidas厂家，目标角色就是用户。</p>
<h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h4><p>说反向代理之前，我们先看看正向代理，正向代理也是大家最常接触的到的代理模式，我们会从两个方面来说关于正向代理的处理模式，分别从软件方面和生活方面来解释一下什么叫正向代理。</p>
<p>在如今的网络环境下，我们如果由于技术需要要去访问国外的某些网站，此时你会发现位于国外的某网站我们通过浏览器是没有办法访问的，此时大家可能都会用一个代理进行访问，代理的方式主要是找到一个可以访问国外网站的代理服务器，我们将请求发送给代理服务器，代理服务器去访问国外的网站，然后将访问到的数据传递给我们！</p>
<p>上述这样的代理模式称为正向代理，正向代理最大的特点是客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；正向代理模式屏蔽或者隐藏了真实客户端信息。</p>
<p>总结来说：正向代理，”它代理的是客户端”，是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p>
<p>正向代理的用途：<br>（1）访问原来无法访问的资源，如Google<br>（2） 可以做缓存，加速访问资源<br>（3）对客户端访问授权，上网进行认证<br>（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</p>
<h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>明白了什么是正向代理，我们继续看关于反向代理的处理方式，举例如我大天朝的某宝网站，每天同时连接到网站的访问人数已经爆表，单个服务器远远不能满足人民日益增长的购买欲望了，此时就出现了一个大家耳熟能详的名词：分布式部署；也就是通过部署多台服务器来解决访问人数限制的问题；某宝网站中大部分功能也是直接使用Nginx进行反向代理实现的，并且通过封装Nginx和其他的组件之后起了个高大上的名字：Tengine，有兴趣的童鞋可以访问Tengine的官网查看具体的信息：<a href="http://tengine.taobao.org/。" target="_blank" rel="external">http://tengine.taobao.org/。</a></p>
<p>多个客户端给服务器发送的请求，Nginx服务器接收到之后，按照一定的规则分发给了后端的业务处理服务器进行处理了。此时~请求的来源也就是客户端是明确的，但是请求具体由哪台服务器处理的并不明确了，Nginx扮演的就是一个反向代理角色。</p>
<p>客户端是无感知代理的存在的，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。</p>
<p>反向代理，”它代理的是服务端”，主要用于服务器集群分布式部署的情况下，反向代理隐藏了服务器的信息。</p>
<p>反向代理的作用：<br>（1）保证内网的安全，通常将反向代理作为公网访问地址，Web服务器是内网<br>（2）负载均衡，通过反向代理服务器来优化网站的负载</p>
<h4 id="项目场景"><a href="#项目场景" class="headerlink" title="项目场景"></a>项目场景</h4><p>一般在项目中正向代理和反向代理都是同时出现的，正向代理代理客户端的请求去访问目标服务器，目标服务器是一个反向代理服务器，反向代理了多台真实的业务处理服务器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多个客户端请求		-----&gt;		正向代理		-----&gt;		反向代理		-----&gt;		多个服务器</span><br></pre></td></tr></table></figure>
<p>在正向代理中，Proxy和Client同属于一个LAN（图中方框内），隐藏了客户端信息；</p>
<p>在反向代理中，Proxy和Server同属于一个LAN（图中方框内），隐藏了服务端信息；</p>
<p>实际上，Proxy在两种代理中做的事情都是替服务器代为收发请求和响应，不过从结构上看正好左右互换了一下，所以把后出现的那种代理方式称为反向代理了。</p>
<h3 id="Nginx-负载均衡"><a href="#Nginx-负载均衡" class="headerlink" title="Nginx 负载均衡"></a>Nginx 负载均衡</h3><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p>我们已经明确了所谓代理服务器的概念，那么接下来，Nginx扮演了反向代理服务器的角色，它是以依据什么样的规则进行请求分发的呢？不同的项目应用场景，分发的规则是否可以控制呢？</p>
<p>这里提到的客户端发送的、Nginx反向代理服务器接收到的请求数量，就是我们说的负载量。</p>
<p>请求数量按照一定的规则进行分发到不同的服务器处理的规则，就是一种均衡规则。</p>
<p>所以~将服务器接收到的请求按照规则分发的过程，称为负载均衡。</p>
<p>负载均衡在实际项目操作过程中，有硬件负载均衡和软件负载均衡两种，硬件负载均衡也称为硬负载，如F5负载均衡，相对造价昂贵成本较高，但是数据的稳定性安全性等等有非常好的保障，如中国移动中国联通这样的公司才会选择硬负载进行操作；更多的公司考虑到成本原因，会选择使用软件负载均衡，软件负载均衡是利用现有的技术结合主机硬件实现的一种消息队列分发机制。</p>
<p>Nginx支持的负载均衡调度算法方式如下：</p>
<ol>
<li>weight轮询(默认)：接收到的请求按照顺序逐一分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。 这种方式下，可以给不同的后端服务器设置一个权重值(weight)，用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。</li>
<li>ip_hash：每个请求按照发起客户端的ip的hash结果进行匹配，这样的算法下一个固定ip地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题。</li>
<li>fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是Nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块。</li>
<li>url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在Nginx作为静态服务器的情况下提高缓存效率。同样要注意Nginx默认不支持这种调度算法，要使用的话需要安装Nginx的hash软件包。</li>
</ol>
<h2 id="附录小知识"><a href="#附录小知识" class="headerlink" title="附录小知识"></a>附录小知识</h2><h3 id="如何查看某个进程的线程数"><a href="#如何查看某个进程的线程数" class="headerlink" title="如何查看某个进程的线程数"></a><strong>如何查看某个进程的线程数</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">有些时候需要确定进程内部当前运行了多少线程，查询方法如下：</span><br><span class="line">  </span><br><span class="line">1）通过pstree命令（根据pid）进行查询：</span><br><span class="line">[root@xqsj_web2 ~]# ps -ef|grep java     //查找进程pid（比如这里查找java（tomcat）进程的pid）</span><br><span class="line">[root@xqsj_web2 ~]# pstree -p 19135</span><br><span class="line">java(19135)─┬─&#123;java&#125;(19136)</span><br><span class="line">            ├─&#123;java&#125;(19137)</span><br><span class="line">             .......</span><br><span class="line">            └─&#123;java&#125;(13578)</span><br><span class="line">[root@xqsj_web2 ~]# pstree -p 19135|wc -l</span><br><span class="line">46     //由于第一行包括了2个线程，所以该进程下一共有47个线程！</span><br><span class="line">  </span><br><span class="line">或者使用top命令查看（可以查看到线程情况）</span><br><span class="line">[root@xqsj_web2 ~]# top -Hp 19135       //下面结果中的Tasks 对应的47即是线程的个数</span><br><span class="line">  </span><br><span class="line">top - 14:05:55 up 391 days, 20:59,  1 user,  load average: 0.00, 0.00, 0.00</span><br><span class="line">Tasks:  47 total,   0 running,  47 sleeping,   0 stopped,   0 zombie</span><br><span class="line">Cpu(s):  0.2%us,  0.1%sy,  0.0%ni, 99.7%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st</span><br><span class="line">Mem:   8058056k total,  7718656k used,   339400k free,   354216k buffers</span><br><span class="line">Swap:        0k total,        0k used,        0k free,  4678160k cached</span><br><span class="line">  </span><br><span class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                      </span><br><span class="line">19135 root      20   0 5339m 632m 5476 S  0.0  8.0   0:00.00 java                                                                          </span><br><span class="line">19136 root      20   0 5339m 632m 5476 S  0.0  8.0   0:00.84 java                                                                          </span><br><span class="line">......</span><br><span class="line">  </span><br><span class="line">2）根据ps命令直接查询：</span><br><span class="line">[root@xqsj_web2 ~]# ps hH p 19135| wc -l</span><br><span class="line">47</span><br><span class="line">  </span><br><span class="line">3）通过查看/proc/pid/status</span><br><span class="line">proc伪文件系统，它驻留在/proc目录，这是最简单的方法来查看任何活动进程的线程数。/proc目录以可读文本文件形式输出，提供现有进程和系统硬件</span><br><span class="line">相关的信息如CPU、中断、内存、磁盘等等。</span><br><span class="line">  </span><br><span class="line">[root@xqsj_web2 ~]# cat /proc/19135/status</span><br><span class="line">Name:   java</span><br><span class="line">State:  S (sleeping)</span><br><span class="line">Tgid:   19135</span><br><span class="line">Pid:    19135</span><br><span class="line">PPid:   1</span><br><span class="line">TracerPid:  0</span><br><span class="line">........</span><br><span class="line">Threads:    47                    //这里显示的是进程创建的总线程数。输出表明该进程有47个线程。</span><br><span class="line">SigQ:   1/62793</span><br><span class="line">SigPnd: 0000000000000000</span><br><span class="line">ShdPnd: 0000000000000000</span><br><span class="line">.......</span><br><span class="line">voluntary_ctxt_switches:    1</span><br><span class="line">nonvoluntary_ctxt_switches: 1</span><br><span class="line">  </span><br><span class="line">或者，也可以在/proc//task中简单的统计子目录的数量，如下所示：</span><br><span class="line">[root@xqsj_web2 ~]# ll /proc/19135/task</span><br><span class="line">总用量 0</span><br><span class="line">dr-xr-xr-x 6 root root 0 6月  14 17:57 11553</span><br><span class="line">......</span><br><span class="line">[root@xqsj_web2 ~]# ll /proc/19135/task|wc -l</span><br><span class="line">48</span><br><span class="line">  </span><br><span class="line">这是因为，对于一个进程中创建的每个线程，在/proc/&lt;pid&gt;/task中会创建一个相应的目录，命名为其线程ID。由此在/proc/&lt;pid&gt;/task中目录的总数表示在进程中线程的数目。</span><br><span class="line"></span><br><span class="line">参考：https://www.cnblogs.com/kevingrace/p/5252919.html</span><br></pre></td></tr></table></figure>
<h3 id="httpd-process-和-wsgi-process"><a href="#httpd-process-和-wsgi-process" class="headerlink" title="httpd process 和 wsgi process"></a>httpd process 和 wsgi process</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">()[root@gnocchi-api-797d4748bd-9ljfw /]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 Aug03 ?        00:00:00 /usr/local/bin/dumb-init /bin/bash /tmp/gnocchi-api.sh start</span><br><span class="line">root         7     1  0 Aug03 ?        00:00:28 httpd -DFOREGROUND</span><br><span class="line">gnocchi      8     7  0 Aug03 ?        00:04:09 (wsgi -DFOREGROUND</span><br></pre></td></tr></table></figure>
<p>为什么在apache中使用了mod_wsgi之后，却会有两个不同名字进程</p>
<p>根据：<a href="https://serverfault.com/questions/293595/why-are-there-double-apache-processes-for-mod-wsgi" target="_blank" rel="external">https://serverfault.com/questions/293595/why-are-there-double-apache-processes-for-mod-wsgi</a></p>
<p>When you use daemon mode and your Django application is therefore running in a separate process to main Apache processes, you still need the Apache parent process and at least one Apache child process. The later is what accepts requests and proxies them through to the mod_wsgi daemon processes. Read:</p>
<p><a href="http://code.google.com/p/modwsgi/wiki/ProcessesAndThreading" target="_blank" rel="external">http://code.google.com/p/modwsgi/wiki/ProcessesAndThreading</a></p>
<p>即httpd是转发请求给wsgi进程，由wsgi进程处理具体请求</p>
<h3 id="DFOREGROUND-含义"><a href="#DFOREGROUND-含义" class="headerlink" title="DFOREGROUND 含义"></a>DFOREGROUND 含义</h3><p>在k8s中运行的httpd和wsgi进程中总会有 DFOREGROUND</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">()[root@gnocchi-api-797d4748bd-9ljfw /]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 Aug03 ?        00:00:00 /usr/local/bin/dumb-init /bin/bash /tmp/gnocchi-api.sh start</span><br><span class="line">root         7     1  0 Aug03 ?        00:00:28 httpd -DFOREGROUND</span><br><span class="line">gnocchi      8     7  0 Aug03 ?        00:04:09 (wsgi -DFOREGROUND</span><br></pre></td></tr></table></figure>
<p>通俗的说就是它使得 apache 的进程一直在 console 界面的“前端”运行，而不是作为一个守护进程挂起，想象一下你用 tail -f 跟踪某个 log 文件时的窗口，就是那个效果。其目的就是让 docker “认为” apache 一直在跑着，否则 docker 就会认为自己的任务结束了，从而 exit；那是我们不希望看到的。据此，也让我对 docker 的运行机制多了一点了解。</p>
<h3 id="查看apache当前并发访问数和进程数-ApacheLinux"><a href="#查看apache当前并发访问数和进程数-ApacheLinux" class="headerlink" title="查看apache当前并发访问数和进程数 ApacheLinux"></a>查看apache当前并发访问数和进程数 ApacheLinux</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">1、查看apache当前并发访问数：</span><br><span class="line">　netstat -an | grep ESTABLISHED | wc -l</span><br><span class="line"></span><br><span class="line">对比httpd.conf中MaxClients的数字差距多少。</span><br><span class="line"></span><br><span class="line">2、查看有多少个进程数：</span><br><span class="line">ps aux|grep httpd|wc -l</span><br><span class="line"></span><br><span class="line">3、可以使用如下参数查看数据</span><br><span class="line">server-status?auto</span><br><span class="line"></span><br><span class="line">#ps -ef|grep httpd|wc -l</span><br><span class="line">1388</span><br><span class="line">统计httpd进程数，连个请求会启动一个进程，使用于Apache服务器。</span><br><span class="line">表示Apache能够处理1388个并发请求，这个值Apache可根据负载情况自动调整。</span><br><span class="line"></span><br><span class="line">#netstat -nat|grep -i &quot;80&quot;|wc -l</span><br><span class="line">4341</span><br><span class="line">netstat -an会打印系统当前网络链接状态，而grep -i &quot;80&quot;是用来提取与80端口有关的连接的，wc -l进行连接数统计。</span><br><span class="line">最终返回的数字就是当前所有80端口的请求总数。</span><br><span class="line"></span><br><span class="line">#netstat -na|grep ESTABLISHED|wc -l</span><br><span class="line">376</span><br><span class="line">netstat -an会打印系统当前网络链接状态，而grep ESTABLISHED 提取出已建立连接的信息。 然后wc -l统计。</span><br><span class="line">最终返回的数字就是当前所有80端口的已建立连接的总数。</span><br><span class="line"></span><br><span class="line">netstat -nat||grep ESTABLISHED|wc - 可查看所有建立连接的详细记录</span><br><span class="line"></span><br><span class="line">查看Apache的并发请求数及其TCP连接状态：</span><br><span class="line">　　Linux命令：</span><br><span class="line">netstat -n | awk &apos;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&apos;</span><br><span class="line"></span><br><span class="line">（这条语句是从 新浪互动社区事业部 新浪互动社区事业部技术总监王老大那儿获得的，非常不错）返回结果示例：</span><br><span class="line">　　LAST_ACK 5</span><br><span class="line">　　SYN_RECV 30</span><br><span class="line">　　ESTABLISHED 1597</span><br><span class="line">　　FIN_WAIT1 51</span><br><span class="line">　　FIN_WAIT2 504</span><br><span class="line">　　TIME_WAIT 1057</span><br><span class="line">　　其中的</span><br><span class="line">SYN_RECV表示正在等待处理的请求数；</span><br><span class="line">ESTABLISHED表示正常数据传输状态；</span><br><span class="line">TIME_WAIT表示处理完毕，等待超时结束的请求数</span><br></pre></td></tr></table></figure>
<h3 id="常用web服务器对比"><a href="#常用web服务器对比" class="headerlink" title="常用web服务器对比"></a>常用web服务器对比</h3><table>
<thead>
<tr>
<th><strong>对比项</strong></th>
<th><strong>Apache</strong></th>
<th><strong>Nginx</strong></th>
<th><strong>Lighttpd</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Proxy代理</td>
<td>非常好</td>
<td>非常好</td>
<td>一般</td>
</tr>
<tr>
<td>Rewriter</td>
<td>好</td>
<td>非常好</td>
<td>一般</td>
</tr>
<tr>
<td>Fcgi</td>
<td>不好</td>
<td>好</td>
<td>非常好</td>
</tr>
<tr>
<td>热部署</td>
<td>不支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>系统压力</td>
<td>很大</td>
<td>很小</td>
<td>比较小</td>
</tr>
<tr>
<td>稳定性</td>
<td>好</td>
<td>非常好</td>
<td>不好</td>
</tr>
<tr>
<td>安全性</td>
<td>好</td>
<td>一般</td>
<td>一般</td>
</tr>
<tr>
<td>静态文件处理</td>
<td>一般</td>
<td>非常好</td>
<td>好</td>
</tr>
<tr>
<td>反向代理</td>
<td>一般</td>
<td>非常好</td>
<td>一般</td>
</tr>
</tbody>
</table>
<p><br><br><br><br><br></p>
<p>参考：</p>
<p><a href="http://blog.360converter.com/archives/1005" target="_blank" rel="external">http://blog.360converter.com/archives/1005</a><br><a href="https://www.cnblogs.com/fengchong/p/10230266.html" target="_blank" rel="external">https://www.cnblogs.com/fengchong/p/10230266.html</a><br><a href="https://blog.csdn.net/a3192048/article/details/89737337" target="_blank" rel="external">https://blog.csdn.net/a3192048/article/details/89737337</a><br><a href="https://blog.51cto.com/ixdba/790611" target="_blank" rel="external">https://blog.51cto.com/ixdba/790611</a><br><a href="https://blog.51cto.com/ixdba/778469" target="_blank" rel="external">https://blog.51cto.com/ixdba/778469</a><br><a href="https://blog.51cto.com/ixdba/778462" target="_blank" rel="external">https://blog.51cto.com/ixdba/778462</a><br><a href="https://blog.51cto.com/ixdba/793571" target="_blank" rel="external">https://blog.51cto.com/ixdba/793571</a><br><a href="https://blog.51cto.com/ixdba/798913" target="_blank" rel="external">https://blog.51cto.com/ixdba/798913</a><br><a href="https://blog.51cto.com/ixdba/803475" target="_blank" rel="external">https://blog.51cto.com/ixdba/803475</a><br><a href="https://blog.csdn.net/weixin_34117211/article/details/85928265?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.channel_param" target="_blank" rel="external">https://blog.csdn.net/weixin_34117211/article/details/85928265?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.channel_param</a><br><a href="https://blog.csdn.net/weixin_33779515/article/details/92821188?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param" target="_blank" rel="external">https://blog.csdn.net/weixin_33779515/article/details/92821188?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param</a><br><a href="https://blog.csdn.net/weixin_33994444/article/details/92981756?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param" target="_blank" rel="external">https://blog.csdn.net/weixin_33994444/article/details/92981756?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param</a><br><a href="https://blog.csdn.net/weixin_33842304/article/details/86420744?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param" target="_blank" rel="external">https://blog.csdn.net/weixin_33842304/article/details/86420744?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param</a><br><a href="https://blog.csdn.net/willierStrong/article/details/7226938?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param" target="_blank" rel="external">https://blog.csdn.net/willierStrong/article/details/7226938?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> PythonWeb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-NexT搭建个人博客（六）]]></title>
      <url>https://magiceses.github.io/2016/09/08/hexo-next-six/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">人生的许多痛苦，都是因为分不清需要和渴望造成的。需要的越少，就越容易满足；渴望越多，失望也就越多。我们的太多失望和不满，都是源于对生命的过度索求。如果能够分清需要和渴望，合理规划自己的需要，适当抑制自己的渴望，我们的满足感就会更加强烈，快乐也就会更多。<br></p>

<p>在 hexo 中，我们如何使用自己自定义的 html 页面呢？</p>
<p>我们知道，在 hexo 中，我们使用的是 markdown 格式的文件，渲染出来的页面是有主题样式的。如果我们不希望我们的页面使用主题样式。那么需要在文件头部加一个 <code>layout: false</code> 的配置。</p>
<p><strong>使用 md 文件写文章时增加配置不使用 layout </strong></p>
<a id="more"></a>
<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 我来试一下如何禁止解析html</span><br><span class="line">date: 2018-10-04 13:25:24</span><br><span class="line">categories: 综合</span><br><span class="line">tags: [综合]</span><br><span class="line">comments: false</span><br><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>这样，我们的文件就不会被主题渲染。</p>
<hr>
<p>其实在我们的 hexo 中，是可以直接写 html 文件的，不过也会被渲染，出来的页面还是有主题样式的。如果我们不想要这个主题样式，怎么做呢？</p>
<p><strong> 使用 <code>skip_render</code> </strong></p>
<p><code>skip_render</code> 跳过指定文件的渲染，您可使用 <a href="https://github.com/isaacs/node-glob" target="_blank" rel="external">glob 表达式</a> 来匹配路径。   </p>
<p><code>skip_render</code> 的配置在 <span id="inline-blue">站点配置文件</span> 中。</p>
<p>只有 <code>source</code> 目录下的文件才会发布到 <code>public</code>（能够在网络上访问到），因此 Hexo 只渲染 <code>source</code> 目录下的文件。<code>skip_render</code> 参数设置的路径是相对于 <code>source</code> 目录的路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: test.html</span><br></pre></td></tr></table></figure></p>
<p>注意，千万不要写成<code>/test.html</code>，这里只能填相对于source文件夹的相对路径。</p>
<p><br><br>原文： <a href="https://github.com/Neveryu/Neveryu.github.io" target="_blank" rel="external">https://github.com/Neveryu/Neveryu.github.io</a></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-NexT搭建个人博客（五）]]></title>
      <url>https://magiceses.github.io/2016/09/07/hexo-next-five/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">不要抱怨学校的差异和现实的不公平，你的不公平对于别人而言却是公平，要靠你自己去改变不如意的环境，争取合理的公平。<br></p>

<p>在这之前，我写过四篇关于 Hexo + NexT 构建博客的文章。=》【<a href="/categories/Hexo/">传送门</a>】</p>
<p>本文将会介绍一些自定义的功能。相较于之前主要是修改配置文件中的内容，现在更多的是动手改源码来实现功能，而且还能帮你搞懂一些 Hexo NexT 的源码。如果你能弄懂源码的一些流程和逻辑，那么，你将能更好的来实现自己的一些想法。</p>
<h1 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h1><p>文章封面的意思就是：在博客首页的时候会显示文章的封面图片，进入这篇文章的详细页面后，将不显示这张图片。</p>
<p>如果想添加文章封面的话，需要添加一个字段属性：<code>summary_img</code>，<code>summary_img</code> 的值是图片的路径。</p>
<a id="more"></a>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: CSS 各种Hack手段</span><br><span class="line">date: 2017-06-25 03:25:24</span><br><span class="line">categories: 前端</span><br><span class="line">tags: [CSS]</span><br><span class="line">comments: false</span><br><span class="line">summary_img: /images/css-hack-1.png</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<p>具体实现细节如下：<br>修改 <code>\themes\next\layout\_macro\post.swing</code> 文件。<br>将代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.summary_img  %&#125;</span><br><span class="line">  &lt;div class=&quot;out-img-topic&quot;&gt;</span><br><span class="line">    &lt;img src=&#123;&#123; post.summary_img &#125;&#125; class=&quot;img-topic&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>
<p>添加到下图所示的位置</p>
<p><img src="/images/hexo-next-five-1.png" alt=""></p>
<p>这样的话，就可以使用 <code>summary_img: imageurl</code> 来设置文章封面了。</p>
<p>开启了文章封面的文章，我建议将 <code>&lt;!-- more --&gt;</code> 放在文章内容的开头，像这样：</p>
<p><img src="/images/hexo-next-five-2.png" alt=""></p>
<h1 id="网页加载进度条"><a href="#网页加载进度条" class="headerlink" title="网页加载进度条"></a>网页加载进度条</h1><p>打开 <code>/themes/next/layout/_partials/head.swing</code> 文件，在文件末尾添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 网页加载条 --&gt;</span><br><span class="line">&lt;script src=&quot;https://neveryu.github.io/js/src/pace.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>然后，打开 <code>/themes/source/css/_custom/custom.styl</code> 文件，在文件末尾添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">/*网页加载条*/</span><br><span class="line">/* This is a compiled file, you should be editing the file in the templates directory */</span><br><span class="line">.pace &#123;</span><br><span class="line">  -webkit-pointer-events: none;</span><br><span class="line">  pointer-events: none;</span><br><span class="line">  -webkit-user-select: none;</span><br><span class="line">  -moz-user-select: none;</span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pace-inactive &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pace .pace-progress &#123;</span><br><span class="line">  background: #1e92fb;</span><br><span class="line">  position: fixed;</span><br><span class="line">  z-index: 2000;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 100%;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 3px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pace .pace-progress-inner &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: 0px;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100%;</span><br><span class="line">  box-shadow: 0 0 10px #e90f92, 0 0 5px #e90f92;</span><br><span class="line">  opacity: 1.0;</span><br><span class="line">  -webkit-transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">  -moz-transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">  -ms-transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">  -o-transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">  transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pace .pace-activity &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  position: fixed;</span><br><span class="line">  z-index: 2000;</span><br><span class="line">  top: 15px;</span><br><span class="line">  right: 15px;</span><br><span class="line">  width: 14px;</span><br><span class="line">  height: 14px;</span><br><span class="line">  border: solid 2px transparent;</span><br><span class="line">  border-top-color: #e90f92;</span><br><span class="line">  border-left-color: #e90f92;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  -webkit-animation: pace-spinner 400ms linear infinite;</span><br><span class="line">  -moz-animation: pace-spinner 400ms linear infinite;</span><br><span class="line">  -ms-animation: pace-spinner 400ms linear infinite;</span><br><span class="line">  -o-animation: pace-spinner 400ms linear infinite;</span><br><span class="line">  animation: pace-spinner 400ms linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; -webkit-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; -webkit-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; -moz-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; -moz-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-o-keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; -o-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; -o-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-ms-keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; -ms-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; -ms-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*网页加载条 END*/</span><br></pre></td></tr></table></figure></p>
<h1 id="开发环境自动刷新"><a href="#开发环境自动刷新" class="headerlink" title="开发环境自动刷新"></a>开发环境自动刷新</h1><p>在 <a href="/2016/09/03/hexo-next-one/">Hexo-NexT搭建个人博客（一）</a> 已经提到了本地调试三部曲：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server --debug</span><br></pre></td></tr></table></figure></p>
<p>然后我在项目的 <code>package.json</code> 中配成了这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server --debug&quot;,</span><br></pre></td></tr></table></figure></p>
<p>这样的话，我执行 <code>npm run dev</code> 就可以启动本地环境了，省去了前面需要分别敲三次命令的步骤。<br>为什么可以这样写，详情看这里：<br><a href="/2017/04/10/npm/">npm 全面介绍</a><br><a href="/2017/05/20/npm-two/">npm 的一个小细节</a></p>
<p>这样还不爽，我希望在写博客的时候，按下 <code>Ctrl + S</code> 后能自动刷新浏览器，看到实时的效果，省去了自己手动刷新浏览器的过程，在双屏下，真的很好用，一边写一边看。<br>具体的做法是:<br>在项目的根目录下添加一个 <code>gulpfile.js</code> 文件，文件内容参看 <a href="https://github.com/Neveryu/Neveryu.github.io/blob/resource/gulpfile.js" target="_blank" rel="external">源码</a>，这里我就不贴了。<br>然后安装 <code>gulpfile.js</code> 里面的依赖包。</p>
<p><code>gulpfile.js</code> 里面有一个 dev-proxy 方法，会代理本地的 4000 端口，并且监听文件变化，如有变化就会自动刷新浏览器。</p>
<p>最后，我们的开发步骤就变成这样了：<br>先打开一个 Terminal ，使用 <code>npm run dev</code> 开启本地的博客服务。<br>然后再开一个 Terminal，使用 <code>gulp</code> 命令来开启监听和代理服务。</p>
<h1 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h1><p>在项目的根目录下，执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install gulp -g</span><br><span class="line">cnpm install gulp-minify-css gulp-uglify gulp-htmlmin gulp --save-dev</span><br></pre></td></tr></table></figure></p>
<p>然后在 <code>gulpfile.js</code> 里面写上相关代码，详情查看 <a href="https://github.com/Neveryu/Neveryu.github.io/blob/resource/gulpfile.js" target="_blank" rel="external">源码</a> 。</p>
<p>然后执行 <code>gulp min</code> 就会根据 <code>gulpfile.js</code> 中的配置，对 public 目录中的静态资源文件进行压缩。</p>
<p>鼠标右键 -&gt; 查看网页源代码，可以看到已经是压缩过的。</p>
<h1 id="自定义页面与目录"><a href="#自定义页面与目录" class="headerlink" title="自定义页面与目录"></a>自定义页面与目录</h1><p>下面介绍两种方法：</p>
<p>第一种方法是使用 Hexo 提供的跳过渲染配置，适用于整个目录的设置。</p>
<p><img src="/images/hexo-next-five-3.png" alt=""></p>
<p>具体步骤，打开博客根目录_config.yml，找到其中 skip_render 配置项，这个用来配置 /source/ 中需要跳过渲染的文件或目录，例如希望跳过 /source/projects/ 里的所有文件渲染，可以配置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: projects/**</span><br></pre></td></tr></table></figure></p>
<p>匹配规则是一种类似正则的规则，官方给出的参考是<a href="https://github.com/isaacs/node-glob" target="_blank" rel="external">这个</a>。另外在测试这个功能的时候发现，Hexo 的内部缓存不是特别好用，有时候你修改了配置但生成出来的内容不一定及时应用了新配置，最好在生成之前执行一下 hexo clean 命令，清除掉旧的生成文件和缓存。</p>
<p>第二种方法是给单个文件添加不应用模板的标记，适用于个别特殊文件的处理。例如我们的网站如果要使用百度统计，往往需要在根目录放一个 html 格式的验证文件，这个文件默认也会经过用主题模板渲染，避免渲染的办法就是在文件头部添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>　　<br>这样，这个文件就不会经过模板渲染，最终发布到 /public/ 里的文件就是去掉标记后的文件的样子。</p>
<h1 id="关于-categories-和-tags-页面-Cannot-GET-的解决方案"><a href="#关于-categories-和-tags-页面-Cannot-GET-的解决方案" class="headerlink" title="关于 categories 和 tags 页面 Cannot GET  的解决方案"></a>关于 categories 和 tags 页面 Cannot GET  的解决方案</h1><p>有同学反馈在配置文件中配置了 categories 和 tags 后依然没有 categories 和 tags 页面，提示 Cannot GET。<br><img src="/images/hexo-next-five-4.png" alt=""></p>
<p>其实在配置了 categories 和 tags  后，还需要在 /source/ 目录下新建 categories 目录和 tags 目录，里面的要有 index.md 文件，并且文件开头不能少，也不能写错。<br><img src="/images/hexo-next-five-5.png" alt=""></p>
<p><br><br>原文： <a href="https://github.com/Neveryu/Neveryu.github.io" target="_blank" rel="external">https://github.com/Neveryu/Neveryu.github.io</a></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-NexT搭建个人博客（四）]]></title>
      <url>https://magiceses.github.io/2016/09/06/hexo-next-four/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">我们的人生不能靠心情活着，而要靠心态去生活，我们都不是完美的人，但要接受不完美的自己，学会独立，告别依赖，对软弱的自己说再见，永远不要停止相信自己！踏实一些，你想要的，岁月统统会还给你。<br></p>

<p id="div-border-left-blue">提示：本篇文章将介绍在使用 heox 做博客框架中的一些 bug 处理情况。</p>

<p>按照之前的教程介绍应该是会比较顺利的搭建好你的博客，但是难免会遇到一些意外，这个时候就要学会解决问题了。<br>解决问题的原则是：查看 bug 信息，从上到下依次解决 bug。</p>
<p>下面来看几个例子：</p>
<a id="more"></a>
<p>首先这个是在 <code>hexo clean</code> 时报的错：<br><img src="/images/hexo-next-four-error1.png" alt=""><br>提示插件 <strong>hexo-deployer-git</strong> 加载失败，想了一下，应该是上次我在移动博客目录的时候，这个模块中有一些文件名比较长的文件，系统会提示移动不过来，导致这个模块异常，很简单，文件夹中删除这个模块，重新安装即可。（或者使用 <strong>npm</strong> 来卸载这个模块，然后重新安装）如下：</p>
<p><img src="/images/hexo-next-four-solution1.png" alt=""></p>
<p>OK ， 现在好了，<code>hexo clean</code> 没有报错了。</p>
<p><img src="/images/hexo-next-four-result1.png" alt=""></p>
<p>下面，我是在执行 <code>hexo g</code> 的操作，同样也出现了错误：</p>
<p><img src="/images/hexo-next-four-error2.png" alt=""></p>
<p>按照图中我标注的步骤，来看一下错误信息：<br>如 1 所示：我们首先会发现缺少模块 <strong>isarray</strong> ，但是我们查看 <strong>package.json</strong> 文件，我们的项目根本就没有引入 <strong>isarray</strong> 这个模块，我猜测这个 <strong>isarray</strong> 模块应该是某个模块的子模块 。</p>
<p>如 2 所示：我们顺着 <strong>at</strong> 一路往下找。</p>
<p>如 3 所示：发现这个 <strong>isarray</strong> 是在 <strong>hexo-generator-sitemap</strong> 里面的 ，所以我们删除这个 <strong>hexo-generator-sitemap</strong> 模块，然后重新安装这个模块。如下：</p>
<p><img src="/images/hexo-next-four-solution2.png" alt=""></p>
<p>OK ， 现在好了，<code>hexo g</code> 没有报错了。</p>
<p><img src="/images/hexo-next-four-result2.png" alt=""></p>
<p>那么，就以这两个例子来作为本次的示范吧，其实，<strong>Hexo</strong> 中的一些问题还是比较好解决的，因为它都是依赖其他模块的，定位到出问题的模块，卸载重装即可。</p>
<p id="div-border-top-red">总结：遇到问题 <strong>bug</strong>，一定要仔细查阅错误提示信息，遵守从上往下解决的方案。</p>

<p></p><h5 style="color:#f63;"><i>最后要说的是：</i></h5><p></p>
<p id="div-border-top-green"><i><a href="https://github.com/Neveryu/Neveryu.github.io" target="_blank" rel="external">博客源码</a> ， 欢迎 star<br></i></p>

<p><br><br>原文： <a href="https://github.com/Neveryu/Neveryu.github.io" target="_blank" rel="external">https://github.com/Neveryu/Neveryu.github.io</a></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-NexT搭建个人博客（三）]]></title>
      <url>https://magiceses.github.io/2016/09/05/hexo-next-three/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">你要明白，世上最牢靠的肩膀与双手，长在你自己身上，越努力越幸运！<br></p>

<p>　　经过前面两期文章，我相信你已经可以在本地建立一个非常令人满意的静态博客了，本篇文章将介绍如何将自己的静态博客部署到 gitpage 上，并托管到 github 上；以及关于 Hexo 和 NexT 中更深层次的一些问题及解方案。</p>
<h2 id="一、菜单栏中标签与侧边栏中标签关联的问题"><a href="#一、菜单栏中标签与侧边栏中标签关联的问题" class="headerlink" title="一、菜单栏中标签与侧边栏中标签关联的问题"></a>一、菜单栏中标签与侧边栏中标签关联的问题</h2><p>　　以我的博客为例，关于菜单栏中的选项 与侧边栏中的选项，由于顶部菜单栏中位置有限，所以我就想在顶部菜单栏中不显示<strong>标签</strong>这一项，于是我在 <span id="inline-purple">主题配置文件</span> 中 将 menu 配置项中的<strong>标签</strong>这一个选项给注释掉了，所以它不会在菜单栏中显示，但是不代表没有这个页面，这个页面是存在的，我们只是使其不显示在顶部的菜单栏中而已，我们可以直接输入绝对地址来查看这个页面，例如：<a href="https://neveryu.github.io/tags/" target="_blank" rel="external">https://neveryu.github.io/tags/</a>。但是与此同时，我们发现侧边栏中的<b>标签</b>选项只能显示标签数量，不能点击。</p>
<a id="more"></a>
<p>　　这是因为侧边栏中的点击链接是根据菜单栏中对应的项来添加的，什么意思呢？就是说如果顶部菜单栏中有 <strong>标签</strong> 这一项，那么就会给侧边栏中<b>标签</b>这一项也添加点击链接；如果顶部菜单栏中没有<b>标签</b>这一项，那么就不给侧边栏中<b>标签</b>这一项添加点击链接，导致侧边栏中的<b>标签</b>项只有显示数据，不提供点击链接。<br>　　如果我们不想在菜单栏中显示<b>标签</b>项，但是希望侧边栏中的<b>标签</b>项 可以点击，该怎么做呢？<br>　　在 <span id="inline-purple">主题配置文件</span> <code>\themes\next\layout\_macro\sidebar.swing_</code> 中，将<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if site.tags.length &gt; 0 %&#125;</span><br><span class="line">  &lt;div class=&quot;site-state-item site-state-tags&quot;&gt;</span><br><span class="line">    &#123;% if theme.menu.tags %&#125;&lt;a href=&quot;&#123;&#123; url_for(theme.menu.tags) &#125;&#125;&quot;&gt;&#123;% endif %&#125;</span><br><span class="line">      &lt;span class=&quot;site-state-item-count&quot;&gt;&#123;&#123; site.tags.length &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;site-state-item-name&quot;&gt;&#123;&#123; __(&apos;state.tags&apos;) &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &#123;% if theme.menu.tags %&#125;&lt;/a&gt;&#123;% endif %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>
<p>改成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if site.tags.length &gt; 0 %&#125;</span><br><span class="line">  &lt;div class=&quot;site-state-item site-state-tags&quot;&gt;</span><br><span class="line">    &lt;a href=&quot;&#123;&#123; url_for(theme.menu.tags) &#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;site-state-item-count&quot;&gt;&#123;&#123; site.tags.length &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;site-state-item-name&quot;&gt;&#123;&#123; __(&apos;state.tags&apos;) &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>
<p id="div-border-left-red">同理，关于菜单栏中 归档 和 分类 的类似操作也是如此。</p>


<h2 id="二、关于High一下中的音乐多次点击重叠播放的解决方案"><a href="#二、关于High一下中的音乐多次点击重叠播放的解决方案" class="headerlink" title="二、关于High一下中的音乐多次点击重叠播放的解决方案"></a>二、关于High一下中的音乐多次点击重叠播放的解决方案</h2><p>　　在之前的 High一下 的播放音乐，如果多次点击的话，音乐会重复叠加播放，严重影响听歌体验，而且只能播放一首歌。<br>　　而现在的 High一下 已经解决了这个问题，而且可以列表循环多首歌曲。我将之前的那段播放音乐的代码换了。由于代码太长了，就不在这里贴出来了。大家可以去查看我的源码：<a href="https://github.com/Neveryu/Blog" target="_blank" rel="external">https://github.com/Neveryu/Blog</a>。<br>关于播放音乐的代码是在： <a href="https://github.com/Neveryu/Blog/blob/master/themes/next/layout/_partials/header.swig" target="_blank" rel="external">https://github.com/Neveryu/Blog/blob/master/themes/next/layout/_partials/header.swig</a> 中的第 60 行开始。<br>　　需要说明的是：现在的 High一下 实现了歌曲列表循环，所以，我们可以放入多首歌的链接。在代码中以数组元素的形式加入歌曲链接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var songs = [</span><br><span class="line">    &quot;http://v.65dj.com/wailian/84791c997d8c55023dad0d5690e48c28.mp3&quot;,</span><br><span class="line">    &quot;http://7xoiki.com1.z0.glb.clouddn.com/Music-sunburst.mp3&quot;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p>
<h2 id="三、关于github屏蔽vendors-，导致页面空白的解决方案"><a href="#三、关于github屏蔽vendors-，导致页面空白的解决方案" class="headerlink" title="三、关于github屏蔽vendors ，导致页面空白的解决方案"></a>三、关于github屏蔽vendors ，导致页面空白的解决方案</h2><p>关于 Github Pages 过滤掉了 source/vendors 目录的访问，导致加载 vendor 里面的文件全部 404 ，页面大面积空白。<br>1.在根目录添加 <strong>.nojekyll</strong> 文件。<br>2.也可以手动将 source/vendors 目录修改成 source/lib 同时，修改主题配置文件 _config.yml ，将 <code>_internal: vendors</code> 改成你所修改的名字，例如 <code>_internal: lib</code> 。</p>
<h2 id="四、关于如何获取自己的多说userid"><a href="#四、关于如何获取自己的多说userid" class="headerlink" title="四、关于如何获取自己的多说userid"></a>四、关于如何获取自己的多说userid</h2><p>首先进入自己的帐号管理页面，点击左上自己的名字<br><img src="/images/hexo-next-three-1.png" alt=""><br>此时地址栏后面的一串数字就是你的多说 <strong>userid</strong>。<br><img src="/images/hexo-next-three-2.png" alt=""></p>
<h2 id="五、关于如何修改内容区域宽度"><a href="#五、关于如何修改内容区域宽度" class="headerlink" title="五、关于如何修改内容区域宽度"></a>五、关于如何修改内容区域宽度</h2><p>Next 对内容的宽度的设定如下：</p>
<ul>
<li>700px，当屏幕宽度 &lt; 1600px</li>
<li>900px，当屏幕宽度 &gt;= 1600px</li>
<li>移动设备下，宽度自适应</li>
</ul>
<p>如果你需要修改内容的宽度，同样需要编辑样式文件。编辑主题的 source\css_variables\custom.styl 文件，新增变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 修改成你期望的宽度</span><br><span class="line">$content-desktop = 700px</span><br><span class="line"></span><br><span class="line">// 当视窗超过 1600px 后的宽度</span><br><span class="line">$content-desktop-large = 900px</span><br></pre></td></tr></table></figure></p>
<p>此方法不适用于 Pisces Scheme ， Pisces Scheme 编辑 <code>themes\next\source\css\_schemes\Picses\_layout.styl</code> 文件，更改以下 css 选项定义值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.header &#123;width: 1150px;&#125;</span><br><span class="line">.container .main-inner &#123;width: 1150px;&#125;</span><br><span class="line">.content-wrap &#123;width: calc(100% - 260px);&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="六、图片模式"><a href="#六、图片模式" class="headerlink" title="六、图片模式"></a>六、图片模式</h2><p>新建博文，设置 <code>type: &quot;picture&quot;</code> ，使用 <code>{\% gp x-x \%}...{\% endgp \%}</code> 标签引用要展示的图片地址，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Naruto-Pictures</span><br><span class="line">categories: [picture]</span><br><span class="line">tags: [picture,naruto]</span><br><span class="line">date: 2016-11-02 14:36:04</span><br><span class="line">type: &quot;picture&quot;</span><br><span class="line">---</span><br><span class="line">&#123;% gp 5-3 %&#125;</span><br><span class="line">![](http://oapjp6spr.bkt.clouddn.com/18210.jpg)</span><br><span class="line">![](http://oapjp6spr.bkt.clouddn.com/196232.jpg)</span><br><span class="line">![](http://oapjp6spr.bkt.clouddn.com/224147.jpg)</span><br><span class="line">![](http://oapjp6spr.bkt.clouddn.com/199301.jpg)</span><br><span class="line">![](http://oapjp6spr.bkt.clouddn.com/213318.jpg)</span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> 图片展示效果 </strong><br><code>{\% gp 5-3 \%}</code>：设置图片展示效果，参考 <code>themes\next\scripts\tags\group-pictures.js</code> 注释示意图。<br><img src="/images/hexo-next-three-3.png" alt=""><br><code>5-3</code> 的意思就是5张图片将会按照这种布局来展示，Next 提供了多张图片的多种布局，你可以随意选择。</p>
<p></p><h3 style="color:#f63;">注意点</h3>主题目前首页可以正常显示设置的图片效果，但是点击进入后显示效果丢失，所以需要修改一下文件 <code>themes\next\source\css\_common\components\tags\group-pictures.styl</code> 中的以下样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page-post-detail</span> <span class="selector-class">.post-body</span> <span class="selector-class">.group-picture-column</span> &#123;</span><br><span class="line">  // float: none;</span><br><span class="line">  <span class="selector-tag">margin-top</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">  // width: auto !important;</span><br><span class="line">  <span class="selector-tag">img</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span> auto; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p></p><h5 style="color:#f63;"><i>最后要说的是：</i></h5><p></p>
<p id="div-border-top-green"><i><a href="https://github.com/Neveryu/Neveryu.github.io" target="_blank" rel="external">博客源码</a> ， 欢迎 star<br></i></p>

<p><br><br>原文： <a href="https://github.com/Neveryu/Neveryu.github.io" target="_blank" rel="external">https://github.com/Neveryu/Neveryu.github.io</a></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-NexT搭建个人博客（二）]]></title>
      <url>https://magiceses.github.io/2016/09/04/hexo-next-two/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">人生百相，世态万千，悲悲喜喜，才构成了人生的完美；谋事在人，成事在天。做过的事不要后悔。经常可以看到不少人自怨自艾，为曾经做过的错事后悔不已，为过去的事而消沉，为过去的事而落魄。世上永远没有后悔药。<br></p>

<p>本篇文章将介绍基于NexT主题下的一些扩展功能的实现。<br>首先，我们需要明白：</p>
<p id="div-border-left-yellow">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>  我们约定，将前者称为 <span id="inline-blue">站点配置文件</span>，后者称为 <span id="inline-purple">主题配置文件</span></p>

<h4 id="1-设置侧栏的位置"><a href="#1-设置侧栏的位置" class="headerlink" title="1.设置侧栏的位置"></a>1.设置侧栏的位置</h4><p>修改 <span id="inline-purple">主题配置文件</span> 中 <code>sidebar.position</code> 的值，支持的选项有：<strong>left</strong> <strong>right</strong><br>目前仅 Pisces Scheme 支持 position 配置，也就是说NexT主题的侧栏位置是不能设置的，设置了也没用，反正都在右边。</p>
<a id="more"></a>
<h4 id="2-关于添加居中模块"><a href="#2-关于添加居中模块" class="headerlink" title="2. 关于添加居中模块"></a>2. 关于添加居中模块</h4><p><blockquote class="blockquote-center">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote><br>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-center"</span>&gt;</span>优秀的人，不是不合群，而是他们合群的人里面没有你<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="3-添加High一下"><a href="#3-添加High一下" class="headerlink" title="3. 添加High一下"></a>3. 添加High一下</h4><p>打开博客根目录 <code>\themes\next\layout\_partials\header.swig</code> ，在<br><code>&lt;ul&gt; ... /ul&gt;</code> 标签之间加入以下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt; <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"把这个链接拖到你的Chrome收藏夹工具栏中"</span> <span class="attr">href</span>=<span class="string">'javascript:(function() &#123;</span></span></span></span><br><span class="line"><span class="xml">    function c() &#123;</span></span><br><span class="line"><span class="xml">        var e = document.createElement("link");</span></span><br><span class="line"><span class="xml">        e.setAttribute("type", "text/css");</span></span><br><span class="line"><span class="xml">        e.setAttribute("rel", "stylesheet");</span></span><br><span class="line"><span class="xml">        e.setAttribute("href", f);</span></span><br><span class="line"><span class="xml">        e.setAttribute("class", l);</span></span><br><span class="line"><span class="xml">        document.body.appendChild(e)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    function h() &#123;</span></span><br><span class="line"><span class="xml">        var e = document.getElementsByClassName(l);</span></span><br><span class="line"><span class="xml">        for (var t = 0; t <span class="tag">&lt; <span class="attr">e.length</span>; <span class="attr">t</span>++) &#123;</span></span></span><br><span class="line"><span class="xml">            document.body.removeChild(e[t])</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    function p() &#123;</span></span><br><span class="line"><span class="xml">        var e = document.createElement("div");</span></span><br><span class="line"><span class="xml">        e.setAttribute("class", a);</span></span><br><span class="line"><span class="xml">        document.body.appendChild(e);</span></span><br><span class="line"><span class="xml">        setTimeout(function() &#123;</span></span><br><span class="line"><span class="xml">            document.body.removeChild(e)</span></span><br><span class="line"><span class="xml">        &#125;, 100)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    function d(e) &#123;</span></span><br><span class="line"><span class="xml">        return &#123;</span></span><br><span class="line"><span class="xml">            height : e.offsetHeight,</span></span><br><span class="line"><span class="xml">            width : e.offsetWidth</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    function v(i) &#123;</span></span><br><span class="line"><span class="xml">        var s = d(i);</span></span><br><span class="line"><span class="xml">        return s.height &gt; e &amp;&amp; s.height <span class="tag">&lt; <span class="attr">n</span> &amp;&amp; <span class="attr">s.width</span> &gt;</span> t &amp;&amp; s.width <span class="tag">&lt; <span class="attr">r</span></span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    function m(e) &#123;</span></span><br><span class="line"><span class="xml">        var t = e;</span></span><br><span class="line"><span class="xml">        var n = 0;</span></span><br><span class="line"><span class="xml">        while (!!t) &#123;</span></span><br><span class="line"><span class="xml">            n += t.offsetTop;</span></span><br><span class="line"><span class="xml">            t = t.offsetParent</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        return n</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    function g() &#123;</span></span><br><span class="line"><span class="xml">        var e = document.documentElement;</span></span><br><span class="line"><span class="xml">        if (!!window.innerWidth) &#123;</span></span><br><span class="line"><span class="xml">            return window.innerHeight</span></span><br><span class="line"><span class="xml">        &#125; else if (e &amp;&amp; !isNaN(e.clientHeight)) &#123;</span></span><br><span class="line"><span class="xml">            return e.clientHeight</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        return 0</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    function y() &#123;</span></span><br><span class="line"><span class="xml">        if (window.pageYOffset) &#123;</span></span><br><span class="line"><span class="xml">            return window.pageYOffset</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        return Math.max(document.documentElement.scrollTop, document.body.scrollTop)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    function E(e) &#123;</span></span><br><span class="line"><span class="xml">        var t = m(e);</span></span><br><span class="line"><span class="xml">        return t &gt;= w &amp;&amp; t <span class="tag">&lt;<span class="name">=</span> <span class="attr">b</span> + <span class="attr">w</span></span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    function S() &#123;</span></span><br><span class="line"><span class="xml">        var e = document.createElement("audio");</span></span><br><span class="line"><span class="xml">        e.setAttribute("class", l);</span></span><br><span class="line"><span class="xml">        e.src = i;</span></span><br><span class="line"><span class="xml">        e.loop = false;</span></span><br><span class="line"><span class="xml">        e.addEventListener("canplay", function() &#123;</span></span><br><span class="line"><span class="xml">            setTimeout(function() &#123;</span></span><br><span class="line"><span class="xml">                x(k)</span></span><br><span class="line"><span class="xml">            &#125;, 500);</span></span><br><span class="line"><span class="xml">            setTimeout(function() &#123;</span></span><br><span class="line"><span class="xml">                N();</span></span><br><span class="line"><span class="xml">                p();</span></span><br><span class="line"><span class="xml">                for (var e = 0; e <span class="tag">&lt; <span class="attr">O.length</span>; <span class="attr">e</span>++) &#123;</span></span></span><br><span class="line"><span class="xml">                    T(O[e])</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            &#125;, 15500)</span></span><br><span class="line"><span class="xml">        &#125;, true);</span></span><br><span class="line"><span class="xml">        e.addEventListener("ended", function() &#123;</span></span><br><span class="line"><span class="xml">            N();</span></span><br><span class="line"><span class="xml">            h()</span></span><br><span class="line"><span class="xml">        &#125;, true);</span></span><br><span class="line">        e.innerHTML = " &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;";</span><br><span class="line">        document.body.appendChild(e);</span><br><span class="line">        e.play()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function x(e) &#123;</span><br><span class="line">        e.className += " " + s + " " + o</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function T(e) &#123;</span><br><span class="line">        e.className += " " + s + " " + u[Math.floor(Math.random() * u.length)]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function N() &#123;</span><br><span class="line">        var e = document.getElementsByClassName(s);</span><br><span class="line">        var t = new RegExp("\\b" + s + "\\b");</span><br><span class="line">        for (var n = 0; n &lt; e.length; ) &#123;</span><br><span class="line">            e[n].className = e[n].className.replace(t, "")</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var e = 30;</span><br><span class="line">    var t = 30;</span><br><span class="line">    var n = 350;</span><br><span class="line">    var r = 350;</span><br><span class="line">    var i = "//7xuupy.com1.z0.glb.clouddn.com/tongxingSibel%20-%20Im%20Sorry.mp3";</span><br><span class="line">    var s = "mw-harlem_shake_me";</span><br><span class="line">    var o = "im_first";</span><br><span class="line">    var u = ["im_drunk", "im_baked", "im_trippin", "im_blown"];</span><br><span class="line">    var a = "mw-strobe_light";</span><br><span class="line">    var f = "//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css";</span><br><span class="line">    var l = "mw_added_css";</span><br><span class="line">    var b = g();</span><br><span class="line">    var w = y();</span><br><span class="line">    var C = document.getElementsByTagName("*");</span><br><span class="line">    var k = null;</span><br><span class="line">    for (var L = 0; L &lt; C.length; L++) &#123;</span><br><span class="line">        var A = C[L];</span><br><span class="line">        if (v(A)) &#123;</span><br><span class="line">            if (E(A)) &#123;</span><br><span class="line">                k = A;</span><br><span class="line">                break</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (A === null) &#123;</span><br><span class="line">        console.warn("Could not find a node of the right size. Please try a different page.");</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    c();</span><br><span class="line">    S();</span><br><span class="line">    var O = [];</span><br><span class="line">    for (var L = 0; L &lt; C.length; L++) &#123;</span><br><span class="line">        var A = C[L];</span><br><span class="line">        if (v(A)) &#123;</span><br><span class="line">            O.push(A)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="xml">    &#125;)()    '&gt;High一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<h4 id="4-添加最近访客"><a href="#4-添加最近访客" class="headerlink" title="4. 添加最近访客"></a>4. 添加最近访客</h4><p>在需要添加最近访客的网页对应的 markdown 文件中添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">最近访客</span><br><span class="line">&lt;div class=&quot;ds-recent-visitors&quot; data-num-items=&quot;39&quot; data-avatar-size=&quot;40&quot; id=&quot;ds-recent-visitors&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="5-鼠标点击小红心的设置"><a href="#5-鼠标点击小红心的设置" class="headerlink" title="5. 鼠标点击小红心的设置"></a>5. 鼠标点击小红心的设置</h4><ol>
<li>将 <a href="https://github.com/Neveryu/Neveryu.github.io/blob/master/js/src/love.js" target="_blank" rel="external">love.js</a> 文件添加到 \themes\next\source\js\src 文件目录下。</li>
<li>找到 <code>\themes\next\layout\_layout.swing</code> 文件，<strong> 在文件的后面，<code>&lt;/body&gt;</code> 标签之前 </strong> 添加以下代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/love.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="6-背景的设置"><a href="#6-背景的设置" class="headerlink" title="6. 背景的设置"></a>6. 背景的设置</h4><ol>
<li>将 <a href="https://github.com/Neveryu/Neveryu.github.io/blob/master/js/src/particle.js" target="_blank" rel="external">particle.js</a> 文件添加到 \themes\next\source\js\src 文件目录下。</li>
<li>找到 <code>\themes\next\layout\_layout.swing</code> 文件，<strong> 在文件的后面，<code>&lt;/body&gt;</code>标签之前 </strong> 添加以下代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 背景动画 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/particle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="7-修改文章内链接文本样式"><a href="#7-修改文章内链接文本样式" class="headerlink" title="7.修改文章内链接文本样式"></a>7.修改文章内链接文本样式</h4><p>将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。<br>找到文件 <code>themes\next\source\css\_custom\custom.styl</code> ，添加如下 css 样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#0477ab</span>;</span><br><span class="line">    <span class="selector-tag">text-decoration</span>: <span class="selector-tag">underline</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="8-多说评论不稳定，加载速度慢怎么办？"><a href="#8-多说评论不稳定，加载速度慢怎么办？" class="headerlink" title="8. 多说评论不稳定，加载速度慢怎么办？"></a>8. 多说评论不稳定，加载速度慢怎么办？</h4><p>把多说评论依赖的 embed.js 放置底部，这里需要修改的文件是 duoshuo.swig。<br>将<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(document.getElementsByTagName(&apos;head&apos;)[0]</span><br></pre></td></tr></table></figure></p>
<p>修改成下面的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(document.getElementById(&apos;footer&apos;)</span><br></pre></td></tr></table></figure></p>
<h4 id="9-给-Github-添加-README"><a href="#9-给-Github-添加-README" class="headerlink" title="9. 给 Github 添加 README"></a>9. 给 Github 添加 README</h4><p>默认情况下，Github中每一个项目，我们希望有一份 README.md 的文件来作为项目的说明，但是我们在项目根目录下的 blog\source 目录下创建一份 README.md 文件，写好说明介绍，部署的时候，这个 README.md 会被 hexo 解析掉，而不会被解析到 Github 中去的。<br>正确的解决方法其实很简单：<br><strong> 把 README.md 文件的后缀名改成 “MDOWN” 然后扔到<code>blog/source</code>文件夹下即可，这样 hexo 不会解析，Github 也会将其作为 MD 文件解析。 </strong></p>
<h4 id="10-给-Blog-添加-LICENSE"><a href="#10-给-Blog-添加-LICENSE" class="headerlink" title="10. 给 Blog 添加 LICENSE"></a>10. 给 Blog 添加 LICENSE</h4><p>在 <span id="inline-purple">主题配置文件</span> 中的 160 行左右：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Creative Commons 4.0 International License.</span><br><span class="line"># http://creativecommons.org/</span><br><span class="line"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span><br><span class="line">creative_commons: by-nc-sa</span><br><span class="line">#creative_commons:</span><br></pre></td></tr></table></figure></p>
<p>将其中第 4 行的注释放开，然后选择你想使用的 LICENSE 即可，可选项参照第 3 行。</p>
<p></p><h5 style="color:#f63;"><i>最后要说的是：</i></h5><p></p>
<p id="div-border-top-green"><i><a href="https://github.com/Neveryu/Neveryu.github.io" target="_blank" rel="external">博客源码</a> ， 欢迎 star<br></i></p>

<p><br><br>原文： <a href="https://github.com/Neveryu/Neveryu.github.io" target="_blank" rel="external">https://github.com/Neveryu/Neveryu.github.io</a></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-NexT搭建个人博客（一）]]></title>
      <url>https://magiceses.github.io/2016/09/03/hexo-next-one/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">一点一点去靠近梦想，不抱侥幸的奢望，用踏实浇灌，用努力证明，你可以！<br></p>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a> 是一个快速、简洁且高效的静态站点生成框架，它基于 <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a> 。 它有以下特点：</p>
<ul>
<li><i class="fa fa-bolt"></i><h6 style="display: inline;">　超快速度</h6><br><i>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</i></li>
<li><i class="fa fa-pencil"></i><h6 style="display: inline;">　支持Markdown</h6><br><i>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</i></li>
<li><i class="fa fa-cloud-upload"></i><h6 style="display: inline;">　一键部署</h6><br><i>只需一条指令即可部署到Github Pages，或其他网站</i></li>
<li><i class="fa fa-cog"></i><h6 style="display: inline;">　丰富的插件</h6><br><i>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</i></li>
</ul>
<p>通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="external">标签插件</a> 来快速的插入特定形式的内容。</p>
<p>基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的<a href="https://hexo.io/themes/" target="_blank" rel="external">主题</a>。<br><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT</a> 因其 <span id="yu-1">精于心，简于形</span> 的风格，一直被广大用户所喜爱。</p>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装 Hexo 只需几分钟时间，若你在安装过程中遇到问题或无法找到解决方式，请<a href="https://neveryu.github.io/guestbook/" target="_blank" rel="external">提交问题</a>，我会尽力解决你的问题。</p>
<h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序:</p>
<blockquote>
<p><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a><br><a href="http://git-scm.com/" target="_blank" rel="external">Git</a></p>
</blockquote>
<p>如果您的电脑中已经安装上述必备程序，那么恭喜你！接下来只需要使用 npm 即可完成 Hexo 的安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>
<p>如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p>
<h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><ul>
<li>Windows：下载安装 git 。<a id="download" href="https://git-scm.com/download/win" target="_blank" rel="external"><i class="fa fa-download"></i><span> Download Now</span><br></a></li>
<li>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="external">Homebrew</a>，<a href="http://www.macports.org/" target="_blank" rel="external">MacPorts</a> 或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="external">安装程序</a> 安装</li>
<li>Linux（Ubuntu，Debian）：<code>sudo apt-get install git-core</code></li>
<li>Linux（Fedora，Red Hat，CentOS）：<code>sudo yum install git-core</code></li>
</ul>
<h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a>。（nvm：Node Version Manager）<br>windows 下使用 nvm 请看这里： <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="external">nvm-windows</a> ，首先需要下载安装 nvm 。<a id="download" href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="external"><i class="fa fa-download"></i><span> Download Now</span><br></a><br>windows下安装完nvm以后，我们可以打开命令行中执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nvm</span><br><span class="line">$ nvm install latest</span><br></pre></td></tr></table></figure></p>
<p>执行完以后，重启命令行，执行命令 <code>node -v</code> ，如果出现版本号，那么 <code>Node.js</code> 就安装成功了。</p>
<p id="div-border-left-red">如果没有安装成功，那可能就是墙的原因。建议下载 <code>Node.js</code> 直接安装。<a id="download" href="https://nodejs.org/en/download/" target="_blank" rel="external"><i class="fa fa-download"></i><span> Download Now</span><br></a> </p>

<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>有了 Node.js ，我们可以使用 npm 安装 Hexo。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>
<p>安装 Hexo 完成后，我们首先需要为我们的项目创建一个<span id="inline-green">指定文件夹</span>（例如我在 D 盘目录下创建了一个文件夹 blog 。<code>D:\blog</code> ），在指定文件夹中执行下列命令， Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p>
<p>等待安装，安装完成后，<span id="inline-green">指定文件夹</span> 的目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└──</span><br></pre></td></tr></table></figure></p>
<p>我们继续执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s --debug</span><br></pre></td></tr></table></figure></p>
<p>Hexo 将 source 文件夹中除 <em>posts 文件夹之外，开头命名为 </em>(下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件夹会被拷贝过去。<br>这个时候，我们在浏览器中访问 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> ，就可以看到基于 Hexo 的默认主题的原型：<br><img src="/images/hexo-next-one-1.png" alt="hexo-next-one-1"></p>
<h2 id="安装-NexT-主题"><a href="#安装-NexT-主题" class="headerlink" title="安装 NexT 主题"></a>安装 NexT 主题</h2><h3 id="下载-NexT-主题"><a href="#下载-NexT-主题" class="headerlink" title="下载 NexT 主题"></a>下载 NexT 主题</h3><p>依旧是在当前目录下，使用 Git 来 checkout 代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p>
<p id="div-border-left-red">提示：原作者 iissnan 已经停止更新 hexo-theme-next；所以，如果你想使用 5.x 之前的版本可以使用上面的链接下载 NexT 主题；如果你想体验 6.x 之后的新版本，请使用下面的链接。<br></p>

<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>等待下载完成。</p>
<p id="div-border-left-yellow">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>  我们约定，将前者称为 <span id="inline-blue">站点配置文件</span>，后者称为 <span id="inline-purple">主题配置文件</span></p>

<h3 id="启用-NexT-主题"><a href="#启用-NexT-主题" class="headerlink" title="启用 NexT 主题"></a>启用 NexT 主题</h3><p>打开 <span id="inline-blue">站点配置文件</span> ，找到 theme 字段，并将其值更改为 next 。<br>到此， NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p>
<h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 <code>--debug</code>），整个命令是 <code>hexo s --debug</code>。在服务启动的过程，注意观察命令行输出是否有任何异常信息。当命令行输出中提示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>此时即可使用浏览器访问 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> ，检查站点是否正确运行。</p>
<p id="div-border-left-green">当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p><br><img src="/images/hexo-next-one-2.png" alt="hexo-next-one-2"><br>现在，我们已经成功安装并启用了 NexT 主题。<br><br><p id="div-border-top-blue">关于更多基本操作和基础知识，请查阅 <a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a> 与 <a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT</a> 官方文档.</p>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="本地调试步骤"><a href="#本地调试步骤" class="headerlink" title="本地调试步骤"></a>本地调试步骤</h2><p>三部曲：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s --debug</span><br></pre></td></tr></table></figure></p>
<p>这种带 debug 的运行，如果出现错误，可以在命令行中看到错误提示信息。</p>
<h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>三部曲：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p>
<p>当然在部署之前，需要先配置好配置文件中的 deploy。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"postName"</span>  <span class="comment">#新建文章</span></span><br><span class="line">$ hexo new page <span class="string">"pageName"</span> <span class="comment"># 新建页面</span></span><br><span class="line">$ hexo generate <span class="comment"># 生成静态页面至public目录</span></span><br><span class="line">$ hexo server <span class="comment"># 开启预览访问端口(默认端口4000，'ctrl+c'关闭server)</span></span><br><span class="line">$ hexo deploy <span class="comment"># 项目部署</span></span><br><span class="line">$ hexo <span class="built_in">help</span> <span class="comment"># 查看帮助</span></span><br><span class="line">$ hexo version <span class="comment"># 查看Hexo的版本</span></span><br></pre></td></tr></table></figure>
<h2 id="简写命令"><a href="#简写命令" class="headerlink" title="简写命令"></a>简写命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new == hexo n</span><br><span class="line">$ hexo generate == hexo g</span><br><span class="line">$ hexo server == hexo s</span><br><span class="line">$ hexo deploy == hexo d</span><br></pre></td></tr></table></figure>
<h2 id="常见问题1"><a href="#常见问题1" class="headerlink" title="常见问题1"></a>常见问题1</h2><p>在 hexo 的配置和设置文件中，在冒号后面没留空格会导致出问题：<br>错误的设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">author:Neveryu</span><br><span class="line">email:react.dong.yu@gmail.com</span><br><span class="line">language:zh-CN</span><br></pre></td></tr></table></figure></p>
<p>正确的设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">author: Neveryu</span><br><span class="line">email: react.dong.yu@gmail.com</span><br><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure></p>
<h2 id="常见问题2"><a href="#常见问题2" class="headerlink" title="常见问题2"></a>常见问题2</h2><p>关于 Git 提交中用户名和 Email 的设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your name&quot;</span><br><span class="line">git config --global user.email &quot;Your email&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="常见问题3"><a href="#常见问题3" class="headerlink" title="常见问题3"></a>常见问题3</h2><p>Hexo 中的图标使用的是 <a href="http://fontawesome.io/" target="_blank" rel="external">Font Awesome</a> ，所以，我们的博客已经自带了 Font Awesome 中的所有图标，基本可以满足我们的所有需求，我们可以去 Font Awesome 中查找我们想要使用的图标。<br><i class="fa fa-github"></i> <code>&lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;</code><br><i class="fa fa-github fa-lg"></i> <code>&lt;i class=&quot;fa fa-github fa-lg&quot;&gt;&lt;/i&gt;</code><br><i class="fa fa-github fa-2x"></i> <code>&lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt;</code></p>
<p></p><h5 style="color:#f63;"><i>最后要说的是：</i></h5><p></p>
<p id="div-border-top-green"><i><a href="https://github.com/Neveryu/Neveryu.github.io" target="_blank" rel="external">博客源码</a> ， 欢迎 star<br></i></p>

<p><br><br>原文： <a href="https://github.com/Neveryu/Neveryu.github.io" target="_blank" rel="external">https://github.com/Neveryu/Neveryu.github.io</a></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[炊烟袅袅吹起]]></title>
      <url>https://magiceses.github.io/2016/08/18/aa-example/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">你现在的生活也许不是你想要的，但绝对是你自找的。<br></p>

<p><img src="/images/coco-1.jpg" alt=""></p>
<a id="more"></a>
<p><br></p>
<p><img src="/images/coco-2.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> coco </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Coco </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
